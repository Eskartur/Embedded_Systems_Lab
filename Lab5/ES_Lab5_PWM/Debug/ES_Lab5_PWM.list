
ES_Lab5_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007590  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08007718  08007718  00008718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007938  08007938  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  08007938  08007938  00008938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007940  08007940  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007940  08007940  00008940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007944  08007944  00008944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007948  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c0  2000000c  08007954  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007cc  08007954  000097cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd27  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003343  00000000  00000000  00024d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af0  00000000  00000000  000280a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001523  00000000  00000000  00029b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fea  00000000  00000000  0002b0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f5bd  00000000  00000000  000540a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe000  00000000  00000000  00073662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00171662  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000792c  00000000  00000000  001716a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00178fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007700 	.word	0x08007700

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007700 	.word	0x08007700

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b96a 	b.w	8000db0 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9d08      	ldr	r5, [sp, #32]
 8000afa:	460c      	mov	r4, r1
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d14e      	bne.n	8000b9e <__udivmoddi4+0xaa>
 8000b00:	4694      	mov	ip, r2
 8000b02:	458c      	cmp	ip, r1
 8000b04:	4686      	mov	lr, r0
 8000b06:	fab2 f282 	clz	r2, r2
 8000b0a:	d962      	bls.n	8000bd2 <__udivmoddi4+0xde>
 8000b0c:	b14a      	cbz	r2, 8000b22 <__udivmoddi4+0x2e>
 8000b0e:	f1c2 0320 	rsb	r3, r2, #32
 8000b12:	4091      	lsls	r1, r2
 8000b14:	fa20 f303 	lsr.w	r3, r0, r3
 8000b18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1c:	4319      	orrs	r1, r3
 8000b1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b26:	fa1f f68c 	uxth.w	r6, ip
 8000b2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b32:	fb07 1114 	mls	r1, r7, r4, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb04 f106 	mul.w	r1, r4, r6
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x64>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b4a:	f080 8112 	bcs.w	8000d72 <__udivmoddi4+0x27e>
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	f240 810f 	bls.w	8000d72 <__udivmoddi4+0x27e>
 8000b54:	3c02      	subs	r4, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a59      	subs	r1, r3, r1
 8000b5a:	fa1f f38e 	uxth.w	r3, lr
 8000b5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b62:	fb07 1110 	mls	r1, r7, r0, r1
 8000b66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b6a:	fb00 f606 	mul.w	r6, r0, r6
 8000b6e:	429e      	cmp	r6, r3
 8000b70:	d90a      	bls.n	8000b88 <__udivmoddi4+0x94>
 8000b72:	eb1c 0303 	adds.w	r3, ip, r3
 8000b76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b7a:	f080 80fc 	bcs.w	8000d76 <__udivmoddi4+0x282>
 8000b7e:	429e      	cmp	r6, r3
 8000b80:	f240 80f9 	bls.w	8000d76 <__udivmoddi4+0x282>
 8000b84:	4463      	add	r3, ip
 8000b86:	3802      	subs	r0, #2
 8000b88:	1b9b      	subs	r3, r3, r6
 8000b8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b8e:	2100      	movs	r1, #0
 8000b90:	b11d      	cbz	r5, 8000b9a <__udivmoddi4+0xa6>
 8000b92:	40d3      	lsrs	r3, r2
 8000b94:	2200      	movs	r2, #0
 8000b96:	e9c5 3200 	strd	r3, r2, [r5]
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d905      	bls.n	8000bae <__udivmoddi4+0xba>
 8000ba2:	b10d      	cbz	r5, 8000ba8 <__udivmoddi4+0xb4>
 8000ba4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4608      	mov	r0, r1
 8000bac:	e7f5      	b.n	8000b9a <__udivmoddi4+0xa6>
 8000bae:	fab3 f183 	clz	r1, r3
 8000bb2:	2900      	cmp	r1, #0
 8000bb4:	d146      	bne.n	8000c44 <__udivmoddi4+0x150>
 8000bb6:	42a3      	cmp	r3, r4
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xcc>
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	f0c0 80f0 	bcc.w	8000da0 <__udivmoddi4+0x2ac>
 8000bc0:	1a86      	subs	r6, r0, r2
 8000bc2:	eb64 0303 	sbc.w	r3, r4, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	2d00      	cmp	r5, #0
 8000bca:	d0e6      	beq.n	8000b9a <__udivmoddi4+0xa6>
 8000bcc:	e9c5 6300 	strd	r6, r3, [r5]
 8000bd0:	e7e3      	b.n	8000b9a <__udivmoddi4+0xa6>
 8000bd2:	2a00      	cmp	r2, #0
 8000bd4:	f040 8090 	bne.w	8000cf8 <__udivmoddi4+0x204>
 8000bd8:	eba1 040c 	sub.w	r4, r1, ip
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	fa1f f78c 	uxth.w	r7, ip
 8000be4:	2101      	movs	r1, #1
 8000be6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bee:	fb08 4416 	mls	r4, r8, r6, r4
 8000bf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf6:	fb07 f006 	mul.w	r0, r7, r6
 8000bfa:	4298      	cmp	r0, r3
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x11c>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x11a>
 8000c08:	4298      	cmp	r0, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2b4>
 8000c0e:	4626      	mov	r6, r4
 8000c10:	1a1c      	subs	r4, r3, r0
 8000c12:	fa1f f38e 	uxth.w	r3, lr
 8000c16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c22:	fb00 f707 	mul.w	r7, r0, r7
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x148>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x146>
 8000c34:	429f      	cmp	r7, r3
 8000c36:	f200 80b0 	bhi.w	8000d9a <__udivmoddi4+0x2a6>
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	1bdb      	subs	r3, r3, r7
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	e7a5      	b.n	8000b90 <__udivmoddi4+0x9c>
 8000c44:	f1c1 0620 	rsb	r6, r1, #32
 8000c48:	408b      	lsls	r3, r1
 8000c4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c4e:	431f      	orrs	r7, r3
 8000c50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c54:	fa04 f301 	lsl.w	r3, r4, r1
 8000c58:	ea43 030c 	orr.w	r3, r3, ip
 8000c5c:	40f4      	lsrs	r4, r6
 8000c5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c62:	0c38      	lsrs	r0, r7, #16
 8000c64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c68:	fbb4 fef0 	udiv	lr, r4, r0
 8000c6c:	fa1f fc87 	uxth.w	ip, r7
 8000c70:	fb00 441e 	mls	r4, r0, lr, r4
 8000c74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c78:	fb0e f90c 	mul.w	r9, lr, ip
 8000c7c:	45a1      	cmp	r9, r4
 8000c7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x1a6>
 8000c84:	193c      	adds	r4, r7, r4
 8000c86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c8a:	f080 8084 	bcs.w	8000d96 <__udivmoddi4+0x2a2>
 8000c8e:	45a1      	cmp	r9, r4
 8000c90:	f240 8081 	bls.w	8000d96 <__udivmoddi4+0x2a2>
 8000c94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	eba4 0409 	sub.w	r4, r4, r9
 8000c9e:	fa1f f983 	uxth.w	r9, r3
 8000ca2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ca6:	fb00 4413 	mls	r4, r0, r3, r4
 8000caa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cb2:	45a4      	cmp	ip, r4
 8000cb4:	d907      	bls.n	8000cc6 <__udivmoddi4+0x1d2>
 8000cb6:	193c      	adds	r4, r7, r4
 8000cb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cbc:	d267      	bcs.n	8000d8e <__udivmoddi4+0x29a>
 8000cbe:	45a4      	cmp	ip, r4
 8000cc0:	d965      	bls.n	8000d8e <__udivmoddi4+0x29a>
 8000cc2:	3b02      	subs	r3, #2
 8000cc4:	443c      	add	r4, r7
 8000cc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cca:	fba0 9302 	umull	r9, r3, r0, r2
 8000cce:	eba4 040c 	sub.w	r4, r4, ip
 8000cd2:	429c      	cmp	r4, r3
 8000cd4:	46ce      	mov	lr, r9
 8000cd6:	469c      	mov	ip, r3
 8000cd8:	d351      	bcc.n	8000d7e <__udivmoddi4+0x28a>
 8000cda:	d04e      	beq.n	8000d7a <__udivmoddi4+0x286>
 8000cdc:	b155      	cbz	r5, 8000cf4 <__udivmoddi4+0x200>
 8000cde:	ebb8 030e 	subs.w	r3, r8, lr
 8000ce2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ce6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cea:	40cb      	lsrs	r3, r1
 8000cec:	431e      	orrs	r6, r3
 8000cee:	40cc      	lsrs	r4, r1
 8000cf0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	e750      	b.n	8000b9a <__udivmoddi4+0xa6>
 8000cf8:	f1c2 0320 	rsb	r3, r2, #32
 8000cfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000d00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d04:	fa24 f303 	lsr.w	r3, r4, r3
 8000d08:	4094      	lsls	r4, r2
 8000d0a:	430c      	orrs	r4, r1
 8000d0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d10:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d1c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d20:	0c23      	lsrs	r3, r4, #16
 8000d22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d26:	fb00 f107 	mul.w	r1, r0, r7
 8000d2a:	4299      	cmp	r1, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x24c>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d36:	d22c      	bcs.n	8000d92 <__udivmoddi4+0x29e>
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	d92a      	bls.n	8000d92 <__udivmoddi4+0x29e>
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	4463      	add	r3, ip
 8000d40:	1a5b      	subs	r3, r3, r1
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d48:	fb08 3311 	mls	r3, r8, r1, r3
 8000d4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d50:	fb01 f307 	mul.w	r3, r1, r7
 8000d54:	42a3      	cmp	r3, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x276>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d60:	d213      	bcs.n	8000d8a <__udivmoddi4+0x296>
 8000d62:	42a3      	cmp	r3, r4
 8000d64:	d911      	bls.n	8000d8a <__udivmoddi4+0x296>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4464      	add	r4, ip
 8000d6a:	1ae4      	subs	r4, r4, r3
 8000d6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d70:	e739      	b.n	8000be6 <__udivmoddi4+0xf2>
 8000d72:	4604      	mov	r4, r0
 8000d74:	e6f0      	b.n	8000b58 <__udivmoddi4+0x64>
 8000d76:	4608      	mov	r0, r1
 8000d78:	e706      	b.n	8000b88 <__udivmoddi4+0x94>
 8000d7a:	45c8      	cmp	r8, r9
 8000d7c:	d2ae      	bcs.n	8000cdc <__udivmoddi4+0x1e8>
 8000d7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d82:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d86:	3801      	subs	r0, #1
 8000d88:	e7a8      	b.n	8000cdc <__udivmoddi4+0x1e8>
 8000d8a:	4631      	mov	r1, r6
 8000d8c:	e7ed      	b.n	8000d6a <__udivmoddi4+0x276>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	e799      	b.n	8000cc6 <__udivmoddi4+0x1d2>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e7d4      	b.n	8000d40 <__udivmoddi4+0x24c>
 8000d96:	46d6      	mov	lr, sl
 8000d98:	e77f      	b.n	8000c9a <__udivmoddi4+0x1a6>
 8000d9a:	4463      	add	r3, ip
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	e74d      	b.n	8000c3c <__udivmoddi4+0x148>
 8000da0:	4606      	mov	r6, r0
 8000da2:	4623      	mov	r3, r4
 8000da4:	4608      	mov	r0, r1
 8000da6:	e70f      	b.n	8000bc8 <__udivmoddi4+0xd4>
 8000da8:	3e02      	subs	r6, #2
 8000daa:	4463      	add	r3, ip
 8000dac:	e730      	b.n	8000c10 <__udivmoddi4+0x11c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db8:	f001 f865 	bl	8001e86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbc:	f000 f820 	bl	8000e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc0:	f000 fa5e 	bl	8001280 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000dc4:	f000 f87e 	bl	8000ec4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000dc8:	f000 f8b4 	bl	8000f34 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000dcc:	f000 f8f0 	bl	8000fb0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000dd0:	f000 f914 	bl	8000ffc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000dd4:	f000 f9c6 	bl	8001164 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000dd8:	f000 f9f4 	bl	80011c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ddc:	f000 fa22 	bl	8001224 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000de0:	f000 f94a 	bl	8001078 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000de4:	2100      	movs	r1, #0
 8000de6:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <main+0x48>)
 8000de8:	f003 fcb6 	bl	8004758 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10);
 8000dec:	200a      	movs	r0, #10
 8000dee:	f001 f8bf 	bl	8001f70 <HAL_Delay>
	  Breathe();
 8000df2:	f000 fc0d 	bl	8001610 <Breathe>
	  HAL_Delay(10);
 8000df6:	bf00      	nop
 8000df8:	e7f8      	b.n	8000dec <main+0x38>
 8000dfa:	bf00      	nop
 8000dfc:	2000015c 	.word	0x2000015c

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b096      	sub	sp, #88	@ 0x58
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	2244      	movs	r2, #68	@ 0x44
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f005 fc17 	bl	8006642 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	463b      	mov	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e22:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e26:	f001 ff4d 	bl	8002cc4 <HAL_PWREx_ControlVoltageScaling>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e30:	f000 fc6c 	bl	800170c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e34:	f001 ff28 	bl	8002c88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e38:	4b21      	ldr	r3, [pc, #132]	@ (8000ec0 <SystemClock_Config+0xc0>)
 8000e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e3e:	4a20      	ldr	r2, [pc, #128]	@ (8000ec0 <SystemClock_Config+0xc0>)
 8000e40:	f023 0318 	bic.w	r3, r3, #24
 8000e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000e48:	2314      	movs	r3, #20
 8000e4a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e50:	2301      	movs	r3, #1
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e58:	2360      	movs	r3, #96	@ 0x60
 8000e5a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e60:	2301      	movs	r3, #1
 8000e62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000e68:	2328      	movs	r3, #40	@ 0x28
 8000e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e6c:	2307      	movs	r3, #7
 8000e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f002 f843 	bl	8002f08 <HAL_RCC_OscConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000e88:	f000 fc40 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e90:	2303      	movs	r3, #3
 8000e92:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f002 fc0b 	bl	80036c0 <HAL_RCC_ClockConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000eb0:	f000 fc2c 	bl	800170c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000eb4:	f003 f912 	bl	80040dc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000eb8:	bf00      	nop
 8000eba:	3758      	adds	r7, #88	@ 0x58
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <MX_DFSDM1_Init+0x68>)
 8000eca:	4a19      	ldr	r2, [pc, #100]	@ (8000f30 <MX_DFSDM1_Init+0x6c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000ece:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <MX_DFSDM1_Init+0x68>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ed4:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <MX_DFSDM1_Init+0x68>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000eda:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <MX_DFSDM1_Init+0x68>)
 8000edc:	2202      	movs	r2, #2
 8000ede:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <MX_DFSDM1_Init+0x68>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <MX_DFSDM1_Init+0x68>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <MX_DFSDM1_Init+0x68>)
 8000eee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ef2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <MX_DFSDM1_Init+0x68>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <MX_DFSDM1_Init+0x68>)
 8000efc:	2204      	movs	r2, #4
 8000efe:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <MX_DFSDM1_Init+0x68>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <MX_DFSDM1_Init+0x68>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <MX_DFSDM1_Init+0x68>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_DFSDM1_Init+0x68>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <MX_DFSDM1_Init+0x68>)
 8000f1a:	f001 f95f 	bl	80021dc <HAL_DFSDM_ChannelInit>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000f24:	f000 fbf2 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000028 	.word	0x20000028
 8000f30:	40016020 	.word	0x40016020

08000f34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <MX_I2C2_Init+0x74>)
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fac <MX_I2C2_Init+0x78>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <MX_I2C2_Init+0x74>)
 8000f40:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000f44:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f46:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <MX_I2C2_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <MX_I2C2_Init+0x74>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <MX_I2C2_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f58:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <MX_I2C2_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f5e:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <MX_I2C2_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f64:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <MX_I2C2_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <MX_I2C2_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f70:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <MX_I2C2_Init+0x74>)
 8000f72:	f001 fc24 	bl	80027be <HAL_I2C_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f7c:	f000 fbc6 	bl	800170c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f80:	2100      	movs	r1, #0
 8000f82:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <MX_I2C2_Init+0x74>)
 8000f84:	f001 fcb6 	bl	80028f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000f8e:	f000 fbbd 	bl	800170c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f92:	2100      	movs	r1, #0
 8000f94:	4804      	ldr	r0, [pc, #16]	@ (8000fa8 <MX_I2C2_Init+0x74>)
 8000f96:	f001 fcf8 	bl	800298a <HAL_I2CEx_ConfigDigitalFilter>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000fa0:	f000 fbb4 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000060 	.word	0x20000060
 8000fac:	40005800 	.word	0x40005800

08000fb0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <MX_QUADSPI_Init+0x44>)
 8000fb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ff8 <MX_QUADSPI_Init+0x48>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_QUADSPI_Init+0x44>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_QUADSPI_Init+0x44>)
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <MX_QUADSPI_Init+0x44>)
 8000fc8:	2210      	movs	r2, #16
 8000fca:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_QUADSPI_Init+0x44>)
 8000fce:	2217      	movs	r2, #23
 8000fd0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <MX_QUADSPI_Init+0x44>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_QUADSPI_Init+0x44>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_QUADSPI_Init+0x44>)
 8000fe0:	f001 fed6 	bl	8002d90 <HAL_QSPI_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000fea:	f000 fb8f 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000b4 	.word	0x200000b4
 8000ff8:	a0001000 	.word	0xa0001000

08000ffc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001000:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <MX_SPI3_Init+0x74>)
 8001002:	4a1c      	ldr	r2, [pc, #112]	@ (8001074 <MX_SPI3_Init+0x78>)
 8001004:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001006:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <MX_SPI3_Init+0x74>)
 8001008:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800100c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800100e:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <MX_SPI3_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001014:	4b16      	ldr	r3, [pc, #88]	@ (8001070 <MX_SPI3_Init+0x74>)
 8001016:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800101a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800101c:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <MX_SPI3_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001022:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <MX_SPI3_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <MX_SPI3_Init+0x74>)
 800102a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800102e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001030:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <MX_SPI3_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <MX_SPI3_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800103c:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <MX_SPI3_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <MX_SPI3_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001048:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <MX_SPI3_Init+0x74>)
 800104a:	2207      	movs	r2, #7
 800104c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800104e:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <MX_SPI3_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <MX_SPI3_Init+0x74>)
 8001056:	2208      	movs	r2, #8
 8001058:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <MX_SPI3_Init+0x74>)
 800105c:	f003 fa20 	bl	80044a0 <HAL_SPI_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001066:	f000 fb51 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000f8 	.word	0x200000f8
 8001074:	40003c00 	.word	0x40003c00

08001078 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08e      	sub	sp, #56	@ 0x38
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001098:	463b      	mov	r3, r7
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]
 80010a6:	615a      	str	r2, [r3, #20]
 80010a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001160 <MX_TIM2_Init+0xe8>)
 80010ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80010b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001160 <MX_TIM2_Init+0xe8>)
 80010b4:	221f      	movs	r2, #31
 80010b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b8:	4b29      	ldr	r3, [pc, #164]	@ (8001160 <MX_TIM2_Init+0xe8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80010be:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <MX_TIM2_Init+0xe8>)
 80010c0:	2263      	movs	r2, #99	@ 0x63
 80010c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	4b26      	ldr	r3, [pc, #152]	@ (8001160 <MX_TIM2_Init+0xe8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ca:	4b25      	ldr	r3, [pc, #148]	@ (8001160 <MX_TIM2_Init+0xe8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010d0:	4823      	ldr	r0, [pc, #140]	@ (8001160 <MX_TIM2_Init+0xe8>)
 80010d2:	f003 fa88 	bl	80045e6 <HAL_TIM_Base_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80010dc:	f000 fb16 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ea:	4619      	mov	r1, r3
 80010ec:	481c      	ldr	r0, [pc, #112]	@ (8001160 <MX_TIM2_Init+0xe8>)
 80010ee:	f003 fd4d 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80010f8:	f000 fb08 	bl	800170c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010fc:	4818      	ldr	r0, [pc, #96]	@ (8001160 <MX_TIM2_Init+0xe8>)
 80010fe:	f003 fac9 	bl	8004694 <HAL_TIM_PWM_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001108:	f000 fb00 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4811      	ldr	r0, [pc, #68]	@ (8001160 <MX_TIM2_Init+0xe8>)
 800111c:	f004 fa3c 	bl	8005598 <HAL_TIMEx_MasterConfigSynchronization>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001126:	f000 faf1 	bl	800170c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112a:	2360      	movs	r3, #96	@ 0x60
 800112c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	2200      	movs	r2, #0
 800113e:	4619      	mov	r1, r3
 8001140:	4807      	ldr	r0, [pc, #28]	@ (8001160 <MX_TIM2_Init+0xe8>)
 8001142:	f003 fc0f 	bl	8004964 <HAL_TIM_PWM_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800114c:	f000 fade 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001150:	4803      	ldr	r0, [pc, #12]	@ (8001160 <MX_TIM2_Init+0xe8>)
 8001152:	f000 fc8f 	bl	8001a74 <HAL_TIM_MspPostInit>

}
 8001156:	bf00      	nop
 8001158:	3738      	adds	r7, #56	@ 0x38
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000015c 	.word	0x2000015c

08001164 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001168:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 800116a:	4a15      	ldr	r2, [pc, #84]	@ (80011c0 <MX_USART1_UART_Init+0x5c>)
 800116c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800116e:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800119a:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 80011a8:	f004 fa7e 	bl	80056a8 <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011b2:	f000 faab 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200001a8 	.word	0x200001a8
 80011c0:	40013800 	.word	0x40013800

080011c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011c8:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_USART3_UART_Init+0x58>)
 80011ca:	4a15      	ldr	r2, [pc, #84]	@ (8001220 <MX_USART3_UART_Init+0x5c>)
 80011cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011ce:	4b13      	ldr	r3, [pc, #76]	@ (800121c <MX_USART3_UART_Init+0x58>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_USART3_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_USART3_UART_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_USART3_UART_Init+0x58>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_USART3_UART_Init+0x58>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <MX_USART3_UART_Init+0x58>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f4:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_USART3_UART_Init+0x58>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <MX_USART3_UART_Init+0x58>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_USART3_UART_Init+0x58>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	@ (800121c <MX_USART3_UART_Init+0x58>)
 8001208:	f004 fa4e 	bl	80056a8 <HAL_UART_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001212:	f000 fa7b 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000230 	.word	0x20000230
 8001220:	40004800 	.word	0x40004800

08001224 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001228:	4b14      	ldr	r3, [pc, #80]	@ (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800122a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800122e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001232:	2206      	movs	r2, #6
 8001234:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001238:	2202      	movs	r2, #2
 800123a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800123e:	2202      	movs	r2, #2
 8001240:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800124a:	2200      	movs	r2, #0
 800124c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001254:	4b09      	ldr	r3, [pc, #36]	@ (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001262:	2200      	movs	r2, #0
 8001264:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	@ (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001268:	f001 fbdb 	bl	8002a22 <HAL_PCD_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001272:	f000 fa4b 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200002b8 	.word	0x200002b8

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	@ 0x28
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001296:	4bbd      	ldr	r3, [pc, #756]	@ (800158c <MX_GPIO_Init+0x30c>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	4abc      	ldr	r2, [pc, #752]	@ (800158c <MX_GPIO_Init+0x30c>)
 800129c:	f043 0310 	orr.w	r3, r3, #16
 80012a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a2:	4bba      	ldr	r3, [pc, #744]	@ (800158c <MX_GPIO_Init+0x30c>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	4bb7      	ldr	r3, [pc, #732]	@ (800158c <MX_GPIO_Init+0x30c>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	4ab6      	ldr	r2, [pc, #728]	@ (800158c <MX_GPIO_Init+0x30c>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ba:	4bb4      	ldr	r3, [pc, #720]	@ (800158c <MX_GPIO_Init+0x30c>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4bb1      	ldr	r3, [pc, #708]	@ (800158c <MX_GPIO_Init+0x30c>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	4ab0      	ldr	r2, [pc, #704]	@ (800158c <MX_GPIO_Init+0x30c>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d2:	4bae      	ldr	r3, [pc, #696]	@ (800158c <MX_GPIO_Init+0x30c>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	4bab      	ldr	r3, [pc, #684]	@ (800158c <MX_GPIO_Init+0x30c>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	4aaa      	ldr	r2, [pc, #680]	@ (800158c <MX_GPIO_Init+0x30c>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ea:	4ba8      	ldr	r3, [pc, #672]	@ (800158c <MX_GPIO_Init+0x30c>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	4ba5      	ldr	r3, [pc, #660]	@ (800158c <MX_GPIO_Init+0x30c>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	4aa4      	ldr	r2, [pc, #656]	@ (800158c <MX_GPIO_Init+0x30c>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001302:	4ba2      	ldr	r3, [pc, #648]	@ (800158c <MX_GPIO_Init+0x30c>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001314:	489e      	ldr	r0, [pc, #632]	@ (8001590 <MX_GPIO_Init+0x310>)
 8001316:	f001 fa17 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001320:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001324:	f001 fa10 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001328:	2200      	movs	r2, #0
 800132a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 800132e:	4899      	ldr	r0, [pc, #612]	@ (8001594 <MX_GPIO_Init+0x314>)
 8001330:	f001 fa0a 	bl	8002748 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	f241 0181 	movw	r1, #4225	@ 0x1081
 800133a:	4897      	ldr	r0, [pc, #604]	@ (8001598 <MX_GPIO_Init+0x318>)
 800133c:	f001 fa04 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001346:	4894      	ldr	r0, [pc, #592]	@ (8001598 <MX_GPIO_Init+0x318>)
 8001348:	f001 f9fe 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001352:	4892      	ldr	r0, [pc, #584]	@ (800159c <MX_GPIO_Init+0x31c>)
 8001354:	f001 f9f8 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001358:	2201      	movs	r2, #1
 800135a:	2120      	movs	r1, #32
 800135c:	488d      	ldr	r0, [pc, #564]	@ (8001594 <MX_GPIO_Init+0x314>)
 800135e:	f001 f9f3 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001362:	2201      	movs	r2, #1
 8001364:	2101      	movs	r1, #1
 8001366:	488a      	ldr	r0, [pc, #552]	@ (8001590 <MX_GPIO_Init+0x310>)
 8001368:	f001 f9ee 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800136c:	f240 1315 	movw	r3, #277	@ 0x115
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4882      	ldr	r0, [pc, #520]	@ (8001590 <MX_GPIO_Init+0x310>)
 8001386:	f001 f835 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800138a:	236a      	movs	r3, #106	@ 0x6a
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800138e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	487c      	ldr	r0, [pc, #496]	@ (8001590 <MX_GPIO_Init+0x310>)
 80013a0:	f001 f828 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80013a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	4878      	ldr	r0, [pc, #480]	@ (800159c <MX_GPIO_Init+0x31c>)
 80013bc:	f001 f81a 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80013c0:	233f      	movs	r3, #63	@ 0x3f
 80013c2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013c4:	230b      	movs	r3, #11
 80013c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	4872      	ldr	r0, [pc, #456]	@ (800159c <MX_GPIO_Init+0x31c>)
 80013d4:	f001 f80e 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80013d8:	2303      	movs	r3, #3
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013e8:	2308      	movs	r3, #8
 80013ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f6:	f000 fffd 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin;
 80013fa:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80013fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001416:	f000 ffed 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800141a:	2310      	movs	r3, #16
 800141c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800141e:	230b      	movs	r3, #11
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001430:	f000 ffe0 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001434:	23c0      	movs	r3, #192	@ 0xc0
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001444:	2305      	movs	r3, #5
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001452:	f000 ffcf 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001456:	2301      	movs	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800145a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	484a      	ldr	r0, [pc, #296]	@ (8001594 <MX_GPIO_Init+0x314>)
 800146c:	f000 ffc2 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001470:	2302      	movs	r3, #2
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001474:	230b      	movs	r3, #11
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4844      	ldr	r0, [pc, #272]	@ (8001594 <MX_GPIO_Init+0x314>)
 8001484:	f000 ffb6 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001488:	f24f 0334 	movw	r3, #61492	@ 0xf034
 800148c:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148e:	2301      	movs	r3, #1
 8001490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	483c      	ldr	r0, [pc, #240]	@ (8001594 <MX_GPIO_Init+0x314>)
 80014a2:	f000 ffa7 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80014a6:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 80014aa:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4836      	ldr	r0, [pc, #216]	@ (8001598 <MX_GPIO_Init+0x318>)
 80014be:	f000 ff99 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80014c2:	f243 0381 	movw	r3, #12417	@ 0x3081
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	482f      	ldr	r0, [pc, #188]	@ (8001598 <MX_GPIO_Init+0x318>)
 80014dc:	f000 ff8a 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80014e0:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4828      	ldr	r0, [pc, #160]	@ (800159c <MX_GPIO_Init+0x31c>)
 80014fa:	f000 ff7b 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80014fe:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001504:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4821      	ldr	r0, [pc, #132]	@ (800159c <MX_GPIO_Init+0x31c>)
 8001516:	f000 ff6d 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800151a:	2302      	movs	r3, #2
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800152a:	2305      	movs	r3, #5
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	4818      	ldr	r0, [pc, #96]	@ (8001598 <MX_GPIO_Init+0x318>)
 8001536:	f000 ff5d 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800153a:	2378      	movs	r3, #120	@ 0x78
 800153c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800154a:	2307      	movs	r3, #7
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4810      	ldr	r0, [pc, #64]	@ (8001598 <MX_GPIO_Init+0x318>)
 8001556:	f000 ff4d 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800155a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001560:	2312      	movs	r3, #18
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800156c:	2304      	movs	r3, #4
 800156e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	4807      	ldr	r0, [pc, #28]	@ (8001594 <MX_GPIO_Init+0x314>)
 8001578:	f000 ff3c 	bl	80023f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	2017      	movs	r0, #23
 8001582:	f000 fdf4 	bl	800216e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001586:	2017      	movs	r0, #23
 8001588:	e00a      	b.n	80015a0 <MX_GPIO_Init+0x320>
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	48001000 	.word	0x48001000
 8001594:	48000400 	.word	0x48000400
 8001598:	48000c00 	.word	0x48000c00
 800159c:	48000800 	.word	0x48000800
 80015a0:	f000 fe01 	bl	80021a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	2028      	movs	r0, #40	@ 0x28
 80015aa:	f000 fde0 	bl	800216e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015ae:	2028      	movs	r0, #40	@ 0x28
 80015b0:	f000 fdf9 	bl	80021a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015b4:	bf00      	nop
 80015b6:	3728      	adds	r7, #40	@ 0x28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <SetPulse>:

/* USER CODE BEGIN 4 */
void SetPulse(int pulse)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	@ 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
 80015d4:	615a      	str	r2, [r3, #20]
 80015d6:	619a      	str	r2, [r3, #24]
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d8:	2360      	movs	r3, #96	@ 0x60
 80015da:	60fb      	str	r3, [r7, #12]
	  sConfigOC.Pulse = pulse;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	2200      	movs	r2, #0
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	@ (8001608 <SetPulse+0x4c>)
 80015f2:	f003 f9b7 	bl	8004964 <HAL_TIM_PWM_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <SetPulse+0x44>
	  {
	    Error_Handler();
 80015fc:	f000 f886 	bl	800170c <Error_Handler>
	  }
}
 8001600:	bf00      	nop
 8001602:	3728      	adds	r7, #40	@ 0x28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000015c 	.word	0x2000015c
 800160c:	00000000 	.word	0x00000000

08001610 <Breathe>:

void Breathe(void)
{
 8001610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
	const double PI = 3.141592653589793;
 8001618:	a33a      	add	r3, pc, #232	@ (adr r3, 8001704 <Breathe+0xf4>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	const int update_period = 10; //ms of updating pulse
 8001622:	230a      	movs	r3, #10
 8001624:	60fb      	str	r3, [r7, #12]
	const int cycle_period = 5000; //ms of breathing cycle
 8001626:	f241 3388 	movw	r3, #5000	@ 0x1388
 800162a:	60bb      	str	r3, [r7, #8]
	const int breath_mean = 49;
 800162c:	2331      	movs	r3, #49	@ 0x31
 800162e:	607b      	str	r3, [r7, #4]
	const int breath_amplitude = 49;
 8001630:	2331      	movs	r3, #49	@ 0x31
 8001632:	603b      	str	r3, [r7, #0]
	static int t = 0;
	SetPulse((int)(breath_mean + breath_amplitude * sin(2 * PI * t * update_period / cycle_period)));
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7fe ff19 	bl	800046c <__aeabi_i2d>
 800163a:	4604      	mov	r4, r0
 800163c:	460d      	mov	r5, r1
 800163e:	6838      	ldr	r0, [r7, #0]
 8001640:	f7fe ff14 	bl	800046c <__aeabi_i2d>
 8001644:	4680      	mov	r8, r0
 8001646:	4689      	mov	r9, r1
 8001648:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	f7fe fdc0 	bl	80001d4 <__adddf3>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4692      	mov	sl, r2
 800165a:	469b      	mov	fp, r3
 800165c:	4b28      	ldr	r3, [pc, #160]	@ (8001700 <Breathe+0xf0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff03 	bl	800046c <__aeabi_i2d>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4650      	mov	r0, sl
 800166c:	4659      	mov	r1, fp
 800166e:	f7fe ff67 	bl	8000540 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4692      	mov	sl, r2
 8001678:	469b      	mov	fp, r3
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f7fe fef6 	bl	800046c <__aeabi_i2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4650      	mov	r0, sl
 8001686:	4659      	mov	r1, fp
 8001688:	f7fe ff5a 	bl	8000540 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4692      	mov	sl, r2
 8001692:	469b      	mov	fp, r3
 8001694:	68b8      	ldr	r0, [r7, #8]
 8001696:	f7fe fee9 	bl	800046c <__aeabi_i2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4650      	mov	r0, sl
 80016a0:	4659      	mov	r1, fp
 80016a2:	f7ff f877 	bl	8000794 <__aeabi_ddiv>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	ec43 2b17 	vmov	d7, r2, r3
 80016ae:	eeb0 0a47 	vmov.f32	s0, s14
 80016b2:	eef0 0a67 	vmov.f32	s1, s15
 80016b6:	f004 fff3 	bl	80066a0 <sin>
 80016ba:	ec53 2b10 	vmov	r2, r3, d0
 80016be:	4640      	mov	r0, r8
 80016c0:	4649      	mov	r1, r9
 80016c2:	f7fe ff3d 	bl	8000540 <__aeabi_dmul>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe fd81 	bl	80001d4 <__adddf3>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	f7ff f9cb 	bl	8000a74 <__aeabi_d2iz>
 80016de:	4603      	mov	r3, r0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff6b 	bl	80015bc <SetPulse>
	t++;
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <Breathe+0xf0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	4a04      	ldr	r2, [pc, #16]	@ (8001700 <Breathe+0xf0>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016fa:	bf00      	nop
 80016fc:	f3af 8000 	nop.w
 8001700:	2000079c 	.word	0x2000079c
 8001704:	54442d18 	.word	0x54442d18
 8001708:	400921fb 	.word	0x400921fb

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <Error_Handler+0x8>

08001718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <HAL_MspInit+0x44>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001722:	4a0e      	ldr	r2, [pc, #56]	@ (800175c <HAL_MspInit+0x44>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6613      	str	r3, [r2, #96]	@ 0x60
 800172a:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <HAL_MspInit+0x44>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_MspInit+0x44>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173a:	4a08      	ldr	r2, [pc, #32]	@ (800175c <HAL_MspInit+0x44>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001740:	6593      	str	r3, [r2, #88]	@ 0x58
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_MspInit+0x44>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b0ac      	sub	sp, #176	@ 0xb0
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2288      	movs	r2, #136	@ 0x88
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f004 ff5e 	bl	8006642 <memset>
  if(DFSDM1_Init == 0)
 8001786:	4b25      	ldr	r3, [pc, #148]	@ (800181c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d142      	bne.n	8001814 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800178e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001792:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 f9b2 	bl	8003b08 <HAL_RCCEx_PeriphCLKConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80017aa:	f7ff ffaf 	bl	800170c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80017ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001820 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ba:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017c6:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ca:	4a15      	ldr	r2, [pc, #84]	@ (8001820 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017cc:	f043 0310 	orr.w	r3, r3, #16
 80017d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d2:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80017de:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80017e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80017f8:	2306      	movs	r3, #6
 80017fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017fe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001802:	4619      	mov	r1, r3
 8001804:	4807      	ldr	r0, [pc, #28]	@ (8001824 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001806:	f000 fdf5 	bl	80023f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800180a:	4b04      	ldr	r3, [pc, #16]	@ (800181c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	3301      	adds	r3, #1
 8001810:	4a02      	ldr	r2, [pc, #8]	@ (800181c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001812:	6013      	str	r3, [r2, #0]
  }

}
 8001814:	bf00      	nop
 8001816:	37b0      	adds	r7, #176	@ 0xb0
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200007a0 	.word	0x200007a0
 8001820:	40021000 	.word	0x40021000
 8001824:	48001000 	.word	0x48001000

08001828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0ac      	sub	sp, #176	@ 0xb0
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2288      	movs	r2, #136	@ 0x88
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f004 fefa 	bl	8006642 <memset>
  if(hi2c->Instance==I2C2)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a21      	ldr	r2, [pc, #132]	@ (80018d8 <HAL_I2C_MspInit+0xb0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d13b      	bne.n	80018d0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001858:	2380      	movs	r3, #128	@ 0x80
 800185a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800185c:	2300      	movs	r3, #0
 800185e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4618      	mov	r0, r3
 8001866:	f002 f94f 	bl	8003b08 <HAL_RCCEx_PeriphCLKConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001870:	f7ff ff4c 	bl	800170c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001874:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <HAL_I2C_MspInit+0xb4>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001878:	4a18      	ldr	r2, [pc, #96]	@ (80018dc <HAL_I2C_MspInit+0xb4>)
 800187a:	f043 0302 	orr.w	r3, r3, #2
 800187e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001880:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <HAL_I2C_MspInit+0xb4>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800188c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001890:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001894:	2312      	movs	r3, #18
 8001896:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800189a:	2301      	movs	r3, #1
 800189c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018a6:	2304      	movs	r3, #4
 80018a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018b0:	4619      	mov	r1, r3
 80018b2:	480b      	ldr	r0, [pc, #44]	@ (80018e0 <HAL_I2C_MspInit+0xb8>)
 80018b4:	f000 fd9e 	bl	80023f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018b8:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <HAL_I2C_MspInit+0xb4>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018bc:	4a07      	ldr	r2, [pc, #28]	@ (80018dc <HAL_I2C_MspInit+0xb4>)
 80018be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_I2C_MspInit+0xb4>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80018d0:	bf00      	nop
 80018d2:	37b0      	adds	r7, #176	@ 0xb0
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40005800 	.word	0x40005800
 80018dc:	40021000 	.word	0x40021000
 80018e0:	48000400 	.word	0x48000400

080018e4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	@ 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a17      	ldr	r2, [pc, #92]	@ (8001960 <HAL_QSPI_MspInit+0x7c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d128      	bne.n	8001958 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001906:	4b17      	ldr	r3, [pc, #92]	@ (8001964 <HAL_QSPI_MspInit+0x80>)
 8001908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800190a:	4a16      	ldr	r2, [pc, #88]	@ (8001964 <HAL_QSPI_MspInit+0x80>)
 800190c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001910:	6513      	str	r3, [r2, #80]	@ 0x50
 8001912:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <HAL_QSPI_MspInit+0x80>)
 8001914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800191e:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <HAL_QSPI_MspInit+0x80>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001922:	4a10      	ldr	r2, [pc, #64]	@ (8001964 <HAL_QSPI_MspInit+0x80>)
 8001924:	f043 0310 	orr.w	r3, r3, #16
 8001928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <HAL_QSPI_MspInit+0x80>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001936:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800193a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001948:	230a      	movs	r3, #10
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	4805      	ldr	r0, [pc, #20]	@ (8001968 <HAL_QSPI_MspInit+0x84>)
 8001954:	f000 fd4e 	bl	80023f4 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001958:	bf00      	nop
 800195a:	3728      	adds	r7, #40	@ 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	a0001000 	.word	0xa0001000
 8001964:	40021000 	.word	0x40021000
 8001968:	48001000 	.word	0x48001000

0800196c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	@ 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a17      	ldr	r2, [pc, #92]	@ (80019e8 <HAL_SPI_MspInit+0x7c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d128      	bne.n	80019e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800198e:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <HAL_SPI_MspInit+0x80>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001992:	4a16      	ldr	r2, [pc, #88]	@ (80019ec <HAL_SPI_MspInit+0x80>)
 8001994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001998:	6593      	str	r3, [r2, #88]	@ 0x58
 800199a:	4b14      	ldr	r3, [pc, #80]	@ (80019ec <HAL_SPI_MspInit+0x80>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <HAL_SPI_MspInit+0x80>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019aa:	4a10      	ldr	r2, [pc, #64]	@ (80019ec <HAL_SPI_MspInit+0x80>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019b2:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <HAL_SPI_MspInit+0x80>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80019be:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80019c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019d0:	2306      	movs	r3, #6
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <HAL_SPI_MspInit+0x84>)
 80019dc:	f000 fd0a 	bl	80023f4 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	@ 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40003c00 	.word	0x40003c00
 80019ec:	40021000 	.word	0x40021000
 80019f0:	48000800 	.word	0x48000800

080019f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	@ 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a14:	d128      	bne.n	8001a68 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a16:	4b16      	ldr	r3, [pc, #88]	@ (8001a70 <HAL_TIM_Base_MspInit+0x7c>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1a:	4a15      	ldr	r2, [pc, #84]	@ (8001a70 <HAL_TIM_Base_MspInit+0x7c>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a22:	4b13      	ldr	r3, [pc, #76]	@ (8001a70 <HAL_TIM_Base_MspInit+0x7c>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <HAL_TIM_Base_MspInit+0x7c>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a32:	4a0f      	ldr	r2, [pc, #60]	@ (8001a70 <HAL_TIM_Base_MspInit+0x7c>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a70 <HAL_TIM_Base_MspInit+0x7c>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001a46:	2308      	movs	r3, #8
 8001a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a56:	2301      	movs	r3, #1
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a64:	f000 fcc6 	bl	80023f4 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a68:	bf00      	nop
 8001a6a:	3728      	adds	r7, #40	@ 0x28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000

08001a74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a94:	d11d      	bne.n	8001ad2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <HAL_TIM_MspPostInit+0x68>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9a:	4a10      	ldr	r2, [pc, #64]	@ (8001adc <HAL_TIM_MspPostInit+0x68>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <HAL_TIM_MspPostInit+0x68>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001aae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ab2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ace:	f000 fc91 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b0ae      	sub	sp, #184	@ 0xb8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	2288      	movs	r2, #136	@ 0x88
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f004 fd9e 	bl	8006642 <memset>
  if(huart->Instance==USART1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a42      	ldr	r2, [pc, #264]	@ (8001c14 <HAL_UART_MspInit+0x134>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d13b      	bne.n	8001b88 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b10:	2301      	movs	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b14:	2300      	movs	r3, #0
 8001b16:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 fff3 	bl	8003b08 <HAL_RCCEx_PeriphCLKConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b28:	f7ff fdf0 	bl	800170c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c18 <HAL_UART_MspInit+0x138>)
 8001b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b30:	4a39      	ldr	r2, [pc, #228]	@ (8001c18 <HAL_UART_MspInit+0x138>)
 8001b32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b36:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b38:	4b37      	ldr	r3, [pc, #220]	@ (8001c18 <HAL_UART_MspInit+0x138>)
 8001b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	4b34      	ldr	r3, [pc, #208]	@ (8001c18 <HAL_UART_MspInit+0x138>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b48:	4a33      	ldr	r2, [pc, #204]	@ (8001c18 <HAL_UART_MspInit+0x138>)
 8001b4a:	f043 0302 	orr.w	r3, r3, #2
 8001b4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b50:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <HAL_UART_MspInit+0x138>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001b5c:	23c0      	movs	r3, #192	@ 0xc0
 8001b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b74:	2307      	movs	r3, #7
 8001b76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4826      	ldr	r0, [pc, #152]	@ (8001c1c <HAL_UART_MspInit+0x13c>)
 8001b82:	f000 fc37 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b86:	e040      	b.n	8001c0a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a24      	ldr	r2, [pc, #144]	@ (8001c20 <HAL_UART_MspInit+0x140>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d13b      	bne.n	8001c0a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b92:	2304      	movs	r3, #4
 8001b94:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b9a:	f107 031c 	add.w	r3, r7, #28
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f001 ffb2 	bl	8003b08 <HAL_RCCEx_PeriphCLKConfig>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001baa:	f7ff fdaf 	bl	800170c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bae:	4b1a      	ldr	r3, [pc, #104]	@ (8001c18 <HAL_UART_MspInit+0x138>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb2:	4a19      	ldr	r2, [pc, #100]	@ (8001c18 <HAL_UART_MspInit+0x138>)
 8001bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bba:	4b17      	ldr	r3, [pc, #92]	@ (8001c18 <HAL_UART_MspInit+0x138>)
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc6:	4b14      	ldr	r3, [pc, #80]	@ (8001c18 <HAL_UART_MspInit+0x138>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	4a13      	ldr	r2, [pc, #76]	@ (8001c18 <HAL_UART_MspInit+0x138>)
 8001bcc:	f043 0308 	orr.w	r3, r3, #8
 8001bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd2:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <HAL_UART_MspInit+0x138>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001bde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001be2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bfe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c02:	4619      	mov	r1, r3
 8001c04:	4807      	ldr	r0, [pc, #28]	@ (8001c24 <HAL_UART_MspInit+0x144>)
 8001c06:	f000 fbf5 	bl	80023f4 <HAL_GPIO_Init>
}
 8001c0a:	bf00      	nop
 8001c0c:	37b8      	adds	r7, #184	@ 0xb8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40013800 	.word	0x40013800
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	48000400 	.word	0x48000400
 8001c20:	40004800 	.word	0x40004800
 8001c24:	48000c00 	.word	0x48000c00

08001c28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0ac      	sub	sp, #176	@ 0xb0
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	2288      	movs	r2, #136	@ 0x88
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f004 fcfa 	bl	8006642 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c56:	d17c      	bne.n	8001d52 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c5c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001c5e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001c62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001c66:	2301      	movs	r3, #1
 8001c68:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001c6e:	2318      	movs	r3, #24
 8001c70:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c72:	2307      	movs	r3, #7
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c76:	2302      	movs	r3, #2
 8001c78:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001c7e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c82:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f001 ff3d 	bl	8003b08 <HAL_RCCEx_PeriphCLKConfig>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001c94:	f7ff fd3a 	bl	800170c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	4b30      	ldr	r3, [pc, #192]	@ (8001d5c <HAL_PCD_MspInit+0x134>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9c:	4a2f      	ldr	r2, [pc, #188]	@ (8001d5c <HAL_PCD_MspInit+0x134>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d5c <HAL_PCD_MspInit+0x134>)
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001cb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cce:	f000 fb91 	bl	80023f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001cd2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001cd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001cec:	230a      	movs	r3, #10
 8001cee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cfc:	f000 fb7a 	bl	80023f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d00:	4b16      	ldr	r3, [pc, #88]	@ (8001d5c <HAL_PCD_MspInit+0x134>)
 8001d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d04:	4a15      	ldr	r2, [pc, #84]	@ (8001d5c <HAL_PCD_MspInit+0x134>)
 8001d06:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <HAL_PCD_MspInit+0x134>)
 8001d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d18:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <HAL_PCD_MspInit+0x134>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d114      	bne.n	8001d4e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d24:	4b0d      	ldr	r3, [pc, #52]	@ (8001d5c <HAL_PCD_MspInit+0x134>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d28:	4a0c      	ldr	r2, [pc, #48]	@ (8001d5c <HAL_PCD_MspInit+0x134>)
 8001d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d30:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <HAL_PCD_MspInit+0x134>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001d3c:	f001 f818 	bl	8002d70 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <HAL_PCD_MspInit+0x134>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d44:	4a05      	ldr	r2, [pc, #20]	@ (8001d5c <HAL_PCD_MspInit+0x134>)
 8001d46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d4a:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001d4c:	e001      	b.n	8001d52 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001d4e:	f001 f80f 	bl	8002d70 <HAL_PWREx_EnableVddUSB>
}
 8001d52:	bf00      	nop
 8001d54:	37b0      	adds	r7, #176	@ 0xb0
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000

08001d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <NMI_Handler+0x4>

08001d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <HardFault_Handler+0x4>

08001d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <MemManage_Handler+0x4>

08001d78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <BusFault_Handler+0x4>

08001d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <UsageFault_Handler+0x4>

08001d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db6:	f000 f8bb 	bl	8001f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001dc2:	2020      	movs	r0, #32
 8001dc4:	f000 fcd8 	bl	8002778 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001dc8:	2040      	movs	r0, #64	@ 0x40
 8001dca:	f000 fcd5 	bl	8002778 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001dce:	2080      	movs	r0, #128	@ 0x80
 8001dd0:	f000 fcd2 	bl	8002778 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001dd4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001dd8:	f000 fcce 	bl	8002778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001de4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001de8:	f000 fcc6 	bl	8002778 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001dec:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001df0:	f000 fcc2 	bl	8002778 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001df4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001df8:	f000 fcbe 	bl	8002778 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001dfc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001e00:	f000 fcba 	bl	8002778 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001e04:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001e08:	f000 fcb6 	bl	8002778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <SystemInit+0x20>)
 8001e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e1a:	4a05      	ldr	r2, [pc, #20]	@ (8001e30 <SystemInit+0x20>)
 8001e1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e38:	f7ff ffea 	bl	8001e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e3c:	480c      	ldr	r0, [pc, #48]	@ (8001e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e3e:	490d      	ldr	r1, [pc, #52]	@ (8001e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e40:	4a0d      	ldr	r2, [pc, #52]	@ (8001e78 <LoopForever+0xe>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e44:	e002      	b.n	8001e4c <LoopCopyDataInit>

08001e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4a:	3304      	adds	r3, #4

08001e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e50:	d3f9      	bcc.n	8001e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e52:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e54:	4c0a      	ldr	r4, [pc, #40]	@ (8001e80 <LoopForever+0x16>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e58:	e001      	b.n	8001e5e <LoopFillZerobss>

08001e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e5c:	3204      	adds	r2, #4

08001e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e60:	d3fb      	bcc.n	8001e5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e62:	f004 fbf7 	bl	8006654 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e66:	f7fe ffa5 	bl	8000db4 <main>

08001e6a <LoopForever>:

LoopForever:
    b LoopForever
 8001e6a:	e7fe      	b.n	8001e6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e6c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e78:	08007948 	.word	0x08007948
  ldr r2, =_sbss
 8001e7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e80:	200007cc 	.word	0x200007cc

08001e84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e84:	e7fe      	b.n	8001e84 <ADC1_2_IRQHandler>

08001e86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e90:	2003      	movs	r0, #3
 8001e92:	f000 f961 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e96:	2000      	movs	r0, #0
 8001e98:	f000 f80e 	bl	8001eb8 <HAL_InitTick>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	71fb      	strb	r3, [r7, #7]
 8001ea6:	e001      	b.n	8001eac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ea8:	f7ff fc36 	bl	8001718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eac:	79fb      	ldrb	r3, [r7, #7]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ec4:	4b17      	ldr	r3, [pc, #92]	@ (8001f24 <HAL_InitTick+0x6c>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d023      	beq.n	8001f14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ecc:	4b16      	ldr	r3, [pc, #88]	@ (8001f28 <HAL_InitTick+0x70>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b14      	ldr	r3, [pc, #80]	@ (8001f24 <HAL_InitTick+0x6c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 f96d 	bl	80021c2 <HAL_SYSTICK_Config>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10f      	bne.n	8001f0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b0f      	cmp	r3, #15
 8001ef2:	d809      	bhi.n	8001f08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f000 f937 	bl	800216e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f00:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <HAL_InitTick+0x74>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e007      	b.n	8001f18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	e004      	b.n	8001f18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e001      	b.n	8001f18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000008 	.word	0x20000008
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f34:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_IncTick+0x20>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <HAL_IncTick+0x24>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a04      	ldr	r2, [pc, #16]	@ (8001f54 <HAL_IncTick+0x24>)
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000008 	.word	0x20000008
 8001f54:	200007a4 	.word	0x200007a4

08001f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	@ (8001f6c <HAL_GetTick+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	200007a4 	.word	0x200007a4

08001f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f78:	f7ff ffee 	bl	8001f58 <HAL_GetTick>
 8001f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f88:	d005      	beq.n	8001f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <HAL_Delay+0x44>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f96:	bf00      	nop
 8001f98:	f7ff ffde 	bl	8001f58 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d8f7      	bhi.n	8001f98 <HAL_Delay+0x28>
  {
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000008 	.word	0x20000008

08001fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fea:	4a04      	ldr	r2, [pc, #16]	@ (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	60d3      	str	r3, [r2, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002004:	4b04      	ldr	r3, [pc, #16]	@ (8002018 <__NVIC_GetPriorityGrouping+0x18>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	f003 0307 	and.w	r3, r3, #7
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	2b00      	cmp	r3, #0
 800202c:	db0b      	blt.n	8002046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	4907      	ldr	r1, [pc, #28]	@ (8002054 <__NVIC_EnableIRQ+0x38>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	2001      	movs	r0, #1
 800203e:	fa00 f202 	lsl.w	r2, r0, r2
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000e100 	.word	0xe000e100

08002058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	db0a      	blt.n	8002082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	490c      	ldr	r1, [pc, #48]	@ (80020a4 <__NVIC_SetPriority+0x4c>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	0112      	lsls	r2, r2, #4
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	440b      	add	r3, r1
 800207c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002080:	e00a      	b.n	8002098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4908      	ldr	r1, [pc, #32]	@ (80020a8 <__NVIC_SetPriority+0x50>)
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	3b04      	subs	r3, #4
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	440b      	add	r3, r1
 8002096:	761a      	strb	r2, [r3, #24]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000e100 	.word	0xe000e100
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	@ 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f1c3 0307 	rsb	r3, r3, #7
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	bf28      	it	cs
 80020ca:	2304      	movcs	r3, #4
 80020cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d902      	bls.n	80020dc <NVIC_EncodePriority+0x30>
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3b03      	subs	r3, #3
 80020da:	e000      	b.n	80020de <NVIC_EncodePriority+0x32>
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	401a      	ands	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	43d9      	mvns	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	4313      	orrs	r3, r2
         );
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	@ 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002124:	d301      	bcc.n	800212a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002126:	2301      	movs	r3, #1
 8002128:	e00f      	b.n	800214a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212a:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <SysTick_Config+0x40>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002132:	210f      	movs	r1, #15
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f7ff ff8e 	bl	8002058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <SysTick_Config+0x40>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002142:	4b04      	ldr	r3, [pc, #16]	@ (8002154 <SysTick_Config+0x40>)
 8002144:	2207      	movs	r2, #7
 8002146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	e000e010 	.word	0xe000e010

08002158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff29 	bl	8001fb8 <__NVIC_SetPriorityGrouping>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002180:	f7ff ff3e 	bl	8002000 <__NVIC_GetPriorityGrouping>
 8002184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f7ff ff8e 	bl	80020ac <NVIC_EncodePriority>
 8002190:	4602      	mov	r2, r0
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff5d 	bl	8002058 <__NVIC_SetPriority>
}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff31 	bl	800201c <__NVIC_EnableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ffa2 	bl	8002114 <SysTick_Config>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0ac      	b.n	8002348 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f8b2 	bl	800235c <DFSDM_GetChannelFromInstance>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4a55      	ldr	r2, [pc, #340]	@ (8002350 <HAL_DFSDM_ChannelInit+0x174>)
 80021fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e09f      	b.n	8002348 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff faa9 	bl	8001760 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800220e:	4b51      	ldr	r3, [pc, #324]	@ (8002354 <HAL_DFSDM_ChannelInit+0x178>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	3301      	adds	r3, #1
 8002214:	4a4f      	ldr	r2, [pc, #316]	@ (8002354 <HAL_DFSDM_ChannelInit+0x178>)
 8002216:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002218:	4b4e      	ldr	r3, [pc, #312]	@ (8002354 <HAL_DFSDM_ChannelInit+0x178>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d125      	bne.n	800226c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002220:	4b4d      	ldr	r3, [pc, #308]	@ (8002358 <HAL_DFSDM_ChannelInit+0x17c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a4c      	ldr	r2, [pc, #304]	@ (8002358 <HAL_DFSDM_ChannelInit+0x17c>)
 8002226:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800222a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800222c:	4b4a      	ldr	r3, [pc, #296]	@ (8002358 <HAL_DFSDM_ChannelInit+0x17c>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4948      	ldr	r1, [pc, #288]	@ (8002358 <HAL_DFSDM_ChannelInit+0x17c>)
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800223a:	4b47      	ldr	r3, [pc, #284]	@ (8002358 <HAL_DFSDM_ChannelInit+0x17c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a46      	ldr	r2, [pc, #280]	@ (8002358 <HAL_DFSDM_ChannelInit+0x17c>)
 8002240:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8002244:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	791b      	ldrb	r3, [r3, #4]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d108      	bne.n	8002260 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800224e:	4b42      	ldr	r3, [pc, #264]	@ (8002358 <HAL_DFSDM_ChannelInit+0x17c>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	3b01      	subs	r3, #1
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	493f      	ldr	r1, [pc, #252]	@ (8002358 <HAL_DFSDM_ChannelInit+0x17c>)
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002260:	4b3d      	ldr	r3, [pc, #244]	@ (8002358 <HAL_DFSDM_ChannelInit+0x17c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a3c      	ldr	r2, [pc, #240]	@ (8002358 <HAL_DFSDM_ChannelInit+0x17c>)
 8002266:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800226a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800227a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6819      	ldr	r1, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800228a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002290:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 020f 	bic.w	r2, r2, #15
 80022a8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6819      	ldr	r1, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80022d0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6899      	ldr	r1, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e0:	3b01      	subs	r3, #1
 80022e2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f002 0207 	and.w	r2, r2, #7
 80022fc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002308:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002328:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f810 	bl	800235c <DFSDM_GetChannelFromInstance>
 800233c:	4602      	mov	r2, r0
 800233e:	4904      	ldr	r1, [pc, #16]	@ (8002350 <HAL_DFSDM_ChannelInit+0x174>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	200007ac 	.word	0x200007ac
 8002354:	200007a8 	.word	0x200007a8
 8002358:	40016000 	.word	0x40016000

0800235c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a1c      	ldr	r2, [pc, #112]	@ (80023d8 <DFSDM_GetChannelFromInstance+0x7c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d102      	bne.n	8002372 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	e02b      	b.n	80023ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a19      	ldr	r2, [pc, #100]	@ (80023dc <DFSDM_GetChannelFromInstance+0x80>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d102      	bne.n	8002380 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800237a:	2301      	movs	r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e024      	b.n	80023ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a17      	ldr	r2, [pc, #92]	@ (80023e0 <DFSDM_GetChannelFromInstance+0x84>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d102      	bne.n	800238e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002388:	2302      	movs	r3, #2
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	e01d      	b.n	80023ca <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a14      	ldr	r2, [pc, #80]	@ (80023e4 <DFSDM_GetChannelFromInstance+0x88>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d102      	bne.n	800239c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002396:	2304      	movs	r3, #4
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	e016      	b.n	80023ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a12      	ldr	r2, [pc, #72]	@ (80023e8 <DFSDM_GetChannelFromInstance+0x8c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d102      	bne.n	80023aa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80023a4:	2305      	movs	r3, #5
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e00f      	b.n	80023ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a0f      	ldr	r2, [pc, #60]	@ (80023ec <DFSDM_GetChannelFromInstance+0x90>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d102      	bne.n	80023b8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80023b2:	2306      	movs	r3, #6
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	e008      	b.n	80023ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a0d      	ldr	r2, [pc, #52]	@ (80023f0 <DFSDM_GetChannelFromInstance+0x94>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d102      	bne.n	80023c6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80023c0:	2307      	movs	r3, #7
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e001      	b.n	80023ca <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80023c6:	2303      	movs	r3, #3
 80023c8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80023ca:	68fb      	ldr	r3, [r7, #12]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	40016000 	.word	0x40016000
 80023dc:	40016020 	.word	0x40016020
 80023e0:	40016040 	.word	0x40016040
 80023e4:	40016080 	.word	0x40016080
 80023e8:	400160a0 	.word	0x400160a0
 80023ec:	400160c0 	.word	0x400160c0
 80023f0:	400160e0 	.word	0x400160e0

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002402:	e17f      	b.n	8002704 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2101      	movs	r1, #1
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	4013      	ands	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 8171 	beq.w	80026fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d005      	beq.n	8002434 <HAL_GPIO_Init+0x40>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d130      	bne.n	8002496 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800246a:	2201      	movs	r2, #1
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f003 0201 	and.w	r2, r3, #1
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d118      	bne.n	80024d4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024a8:	2201      	movs	r2, #1
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	08db      	lsrs	r3, r3, #3
 80024be:	f003 0201 	and.w	r2, r3, #1
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d017      	beq.n	8002510 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2203      	movs	r2, #3
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d123      	bne.n	8002564 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	08da      	lsrs	r2, r3, #3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3208      	adds	r2, #8
 8002524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	220f      	movs	r2, #15
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	08da      	lsrs	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3208      	adds	r2, #8
 800255e:	6939      	ldr	r1, [r7, #16]
 8002560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0203 	and.w	r2, r3, #3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80ac 	beq.w	80026fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002724 <HAL_GPIO_Init+0x330>)
 80025a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025aa:	4a5e      	ldr	r2, [pc, #376]	@ (8002724 <HAL_GPIO_Init+0x330>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80025b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002724 <HAL_GPIO_Init+0x330>)
 80025b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025be:	4a5a      	ldr	r2, [pc, #360]	@ (8002728 <HAL_GPIO_Init+0x334>)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3302      	adds	r3, #2
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025e8:	d025      	beq.n	8002636 <HAL_GPIO_Init+0x242>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4f      	ldr	r2, [pc, #316]	@ (800272c <HAL_GPIO_Init+0x338>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01f      	beq.n	8002632 <HAL_GPIO_Init+0x23e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002730 <HAL_GPIO_Init+0x33c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d019      	beq.n	800262e <HAL_GPIO_Init+0x23a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002734 <HAL_GPIO_Init+0x340>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <HAL_GPIO_Init+0x236>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4c      	ldr	r2, [pc, #304]	@ (8002738 <HAL_GPIO_Init+0x344>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00d      	beq.n	8002626 <HAL_GPIO_Init+0x232>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4b      	ldr	r2, [pc, #300]	@ (800273c <HAL_GPIO_Init+0x348>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d007      	beq.n	8002622 <HAL_GPIO_Init+0x22e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4a      	ldr	r2, [pc, #296]	@ (8002740 <HAL_GPIO_Init+0x34c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d101      	bne.n	800261e <HAL_GPIO_Init+0x22a>
 800261a:	2306      	movs	r3, #6
 800261c:	e00c      	b.n	8002638 <HAL_GPIO_Init+0x244>
 800261e:	2307      	movs	r3, #7
 8002620:	e00a      	b.n	8002638 <HAL_GPIO_Init+0x244>
 8002622:	2305      	movs	r3, #5
 8002624:	e008      	b.n	8002638 <HAL_GPIO_Init+0x244>
 8002626:	2304      	movs	r3, #4
 8002628:	e006      	b.n	8002638 <HAL_GPIO_Init+0x244>
 800262a:	2303      	movs	r3, #3
 800262c:	e004      	b.n	8002638 <HAL_GPIO_Init+0x244>
 800262e:	2302      	movs	r3, #2
 8002630:	e002      	b.n	8002638 <HAL_GPIO_Init+0x244>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_GPIO_Init+0x244>
 8002636:	2300      	movs	r3, #0
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	f002 0203 	and.w	r2, r2, #3
 800263e:	0092      	lsls	r2, r2, #2
 8002640:	4093      	lsls	r3, r2
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002648:	4937      	ldr	r1, [pc, #220]	@ (8002728 <HAL_GPIO_Init+0x334>)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	089b      	lsrs	r3, r3, #2
 800264e:	3302      	adds	r3, #2
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002656:	4b3b      	ldr	r3, [pc, #236]	@ (8002744 <HAL_GPIO_Init+0x350>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	43db      	mvns	r3, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800267a:	4a32      	ldr	r2, [pc, #200]	@ (8002744 <HAL_GPIO_Init+0x350>)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002680:	4b30      	ldr	r3, [pc, #192]	@ (8002744 <HAL_GPIO_Init+0x350>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	43db      	mvns	r3, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026a4:	4a27      	ldr	r2, [pc, #156]	@ (8002744 <HAL_GPIO_Init+0x350>)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026aa:	4b26      	ldr	r3, [pc, #152]	@ (8002744 <HAL_GPIO_Init+0x350>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4013      	ands	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002744 <HAL_GPIO_Init+0x350>)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002744 <HAL_GPIO_Init+0x350>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	43db      	mvns	r3, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026f8:	4a12      	ldr	r2, [pc, #72]	@ (8002744 <HAL_GPIO_Init+0x350>)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	3301      	adds	r3, #1
 8002702:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	fa22 f303 	lsr.w	r3, r2, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	f47f ae78 	bne.w	8002404 <HAL_GPIO_Init+0x10>
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	40010000 	.word	0x40010000
 800272c:	48000400 	.word	0x48000400
 8002730:	48000800 	.word	0x48000800
 8002734:	48000c00 	.word	0x48000c00
 8002738:	48001000 	.word	0x48001000
 800273c:	48001400 	.word	0x48001400
 8002740:	48001800 	.word	0x48001800
 8002744:	40010400 	.word	0x40010400

08002748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
 8002754:	4613      	mov	r3, r2
 8002756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002764:	e002      	b.n	800276c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002782:	4b08      	ldr	r3, [pc, #32]	@ (80027a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	4013      	ands	r3, r2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d006      	beq.n	800279c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800278e:	4a05      	ldr	r2, [pc, #20]	@ (80027a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f806 	bl	80027a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40010400 	.word	0x40010400

080027a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e08d      	b.n	80028ec <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d106      	bne.n	80027ea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff f81f 	bl	8001828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2224      	movs	r2, #36	@ 0x24
 80027ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0201 	bic.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800280e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800281e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d107      	bne.n	8002838 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	e006      	b.n	8002846 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002844:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d108      	bne.n	8002860 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	e007      	b.n	8002870 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800286e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800287e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002882:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002892:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69d9      	ldr	r1, [r3, #28]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1a      	ldr	r2, [r3, #32]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b20      	cmp	r3, #32
 8002908:	d138      	bne.n	800297c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002914:	2302      	movs	r3, #2
 8002916:	e032      	b.n	800297e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2224      	movs	r2, #36	@ 0x24
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002946:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6819      	ldr	r1, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	e000      	b.n	800297e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800297c:	2302      	movs	r3, #2
  }
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b20      	cmp	r3, #32
 800299e:	d139      	bne.n	8002a14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e033      	b.n	8002a16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2224      	movs	r2, #36	@ 0x24
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0201 	bic.w	r2, r2, #1
 80029cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80029dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e000      	b.n	8002a16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a14:	2302      	movs	r3, #2
  }
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af02      	add	r7, sp, #8
 8002a28:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e101      	b.n	8002c38 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d106      	bne.n	8002a4e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff f8ed 	bl	8001c28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2203      	movs	r2, #3
 8002a52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f003 fb6f 	bl	8006144 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	7c1a      	ldrb	r2, [r3, #16]
 8002a6e:	f88d 2000 	strb.w	r2, [sp]
 8002a72:	3304      	adds	r3, #4
 8002a74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a76:	f003 fb38 	bl	80060ea <USB_CoreInit>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0d5      	b.n	8002c38 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2100      	movs	r1, #0
 8002a92:	4618      	mov	r0, r3
 8002a94:	f003 fb67 	bl	8006166 <USB_SetCurrentMode>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e0c6      	b.n	8002c38 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73fb      	strb	r3, [r7, #15]
 8002aae:	e04a      	b.n	8002b46 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	3315      	adds	r3, #21
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ac4:	7bfa      	ldrb	r2, [r7, #15]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3314      	adds	r3, #20
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	b298      	uxth	r0, r3
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	332e      	adds	r3, #46	@ 0x2e
 8002aec:	4602      	mov	r2, r0
 8002aee:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002af0:	7bfa      	ldrb	r2, [r7, #15]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	3318      	adds	r3, #24
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	331c      	adds	r3, #28
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b18:	7bfa      	ldrb	r2, [r7, #15]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	3320      	adds	r3, #32
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b2c:	7bfa      	ldrb	r2, [r7, #15]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	3324      	adds	r3, #36	@ 0x24
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	3301      	adds	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	791b      	ldrb	r3, [r3, #4]
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d3af      	bcc.n	8002ab0 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b50:	2300      	movs	r3, #0
 8002b52:	73fb      	strb	r3, [r7, #15]
 8002b54:	e044      	b.n	8002be0 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b6c:	7bfa      	ldrb	r2, [r7, #15]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	791b      	ldrb	r3, [r3, #4]
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d3b5      	bcc.n	8002b56 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	7c1a      	ldrb	r2, [r3, #16]
 8002bf2:	f88d 2000 	strb.w	r2, [sp]
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bfa:	f003 fb01 	bl	8006200 <USB_DevInit>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e013      	b.n	8002c38 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7b1b      	ldrb	r3, [r3, #12]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d102      	bne.n	8002c2c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f80a 	bl	8002c40 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 fca6 	bl	8006582 <USB_DevDisconnect>

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c72:	f043 0303 	orr.w	r3, r3, #3
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c96:	6013      	str	r3, [r2, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40007000 	.word	0x40007000

08002ca8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cac:	4b04      	ldr	r3, [pc, #16]	@ (8002cc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40007000 	.word	0x40007000

08002cc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cd2:	d130      	bne.n	8002d36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cd4:	4b23      	ldr	r3, [pc, #140]	@ (8002d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ce0:	d038      	beq.n	8002d54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ce2:	4b20      	ldr	r3, [pc, #128]	@ (8002d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cea:	4a1e      	ldr	r2, [pc, #120]	@ (8002d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cf0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2232      	movs	r2, #50	@ 0x32
 8002cf8:	fb02 f303 	mul.w	r3, r2, r3
 8002cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8002d6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	0c9b      	lsrs	r3, r3, #18
 8002d04:	3301      	adds	r3, #1
 8002d06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d08:	e002      	b.n	8002d10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d10:	4b14      	ldr	r3, [pc, #80]	@ (8002d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d1c:	d102      	bne.n	8002d24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f2      	bne.n	8002d0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d24:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d30:	d110      	bne.n	8002d54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e00f      	b.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d36:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d42:	d007      	beq.n	8002d54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d44:	4b07      	ldr	r3, [pc, #28]	@ (8002d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d4c:	4a05      	ldr	r2, [pc, #20]	@ (8002d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40007000 	.word	0x40007000
 8002d68:	20000000 	.word	0x20000000
 8002d6c:	431bde83 	.word	0x431bde83

08002d70 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002d74:	4b05      	ldr	r3, [pc, #20]	@ (8002d8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a04      	ldr	r2, [pc, #16]	@ (8002d8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d7e:	6053      	str	r3, [r2, #4]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40007000 	.word	0x40007000

08002d90 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002d98:	f7ff f8de 	bl	8001f58 <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e063      	b.n	8002e70 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7fe fd91 	bl	80018e4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002dc2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f858 	bl	8002e7c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	021a      	lsls	r2, r3, #8
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	2120      	movs	r1, #32
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f850 	bl	8002e98 <QSPI_WaitFlagStateUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002dfc:	7afb      	ldrb	r3, [r7, #11]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d131      	bne.n	8002e66 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e0c:	f023 0310 	bic.w	r3, r3, #16
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6852      	ldr	r2, [r2, #4]
 8002e14:	0611      	lsls	r1, r2, #24
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68d2      	ldr	r2, [r2, #12]
 8002e1a:	4311      	orrs	r1, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	4b13      	ldr	r3, [pc, #76]	@ (8002e78 <HAL_QSPI_Init+0xe8>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6912      	ldr	r2, [r2, #16]
 8002e32:	0411      	lsls	r1, r2, #16
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6952      	ldr	r2, [r2, #20]
 8002e38:	4311      	orrs	r1, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6992      	ldr	r2, [r2, #24]
 8002e3e:	4311      	orrs	r1, r2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	430b      	orrs	r3, r1
 8002e46:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8002e6e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	ffe0f8fe 	.word	0xffe0f8fe

08002e7c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ea8:	e01a      	b.n	8002ee0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d016      	beq.n	8002ee0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb2:	f7ff f851 	bl	8001f58 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d302      	bcc.n	8002ec8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10b      	bne.n	8002ee0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2204      	movs	r2, #4
 8002ecc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed4:	f043 0201 	orr.w	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e00e      	b.n	8002efe <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	bf14      	ite	ne
 8002eee:	2301      	movne	r3, #1
 8002ef0:	2300      	moveq	r3, #0
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d1d6      	bne.n	8002eaa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e3ca      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1a:	4b97      	ldr	r3, [pc, #604]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f24:	4b94      	ldr	r3, [pc, #592]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80e4 	beq.w	8003104 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <HAL_RCC_OscConfig+0x4a>
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2b0c      	cmp	r3, #12
 8002f46:	f040 808b 	bne.w	8003060 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	f040 8087 	bne.w	8003060 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f52:	4b89      	ldr	r3, [pc, #548]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_RCC_OscConfig+0x62>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e3a2      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1a      	ldr	r2, [r3, #32]
 8002f6e:	4b82      	ldr	r3, [pc, #520]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d004      	beq.n	8002f84 <HAL_RCC_OscConfig+0x7c>
 8002f7a:	4b7f      	ldr	r3, [pc, #508]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f82:	e005      	b.n	8002f90 <HAL_RCC_OscConfig+0x88>
 8002f84:	4b7c      	ldr	r3, [pc, #496]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8002f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f8a:	091b      	lsrs	r3, r3, #4
 8002f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d223      	bcs.n	8002fdc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fd55 	bl	8003a48 <RCC_SetFlashLatencyFromMSIRange>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e383      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fa8:	4b73      	ldr	r3, [pc, #460]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a72      	ldr	r2, [pc, #456]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fae:	f043 0308 	orr.w	r3, r3, #8
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	4b70      	ldr	r3, [pc, #448]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	496d      	ldr	r1, [pc, #436]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fc6:	4b6c      	ldr	r3, [pc, #432]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	4968      	ldr	r1, [pc, #416]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]
 8002fda:	e025      	b.n	8003028 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fdc:	4b66      	ldr	r3, [pc, #408]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a65      	ldr	r2, [pc, #404]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	f043 0308 	orr.w	r3, r3, #8
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b63      	ldr	r3, [pc, #396]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4960      	ldr	r1, [pc, #384]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ffa:	4b5f      	ldr	r3, [pc, #380]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	021b      	lsls	r3, r3, #8
 8003008:	495b      	ldr	r1, [pc, #364]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 800300a:	4313      	orrs	r3, r2
 800300c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d109      	bne.n	8003028 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fd15 	bl	8003a48 <RCC_SetFlashLatencyFromMSIRange>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e343      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003028:	f000 fc4a 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 800302c:	4602      	mov	r2, r0
 800302e:	4b52      	ldr	r3, [pc, #328]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	4950      	ldr	r1, [pc, #320]	@ (800317c <HAL_RCC_OscConfig+0x274>)
 800303a:	5ccb      	ldrb	r3, [r1, r3]
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
 8003044:	4a4e      	ldr	r2, [pc, #312]	@ (8003180 <HAL_RCC_OscConfig+0x278>)
 8003046:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003048:	4b4e      	ldr	r3, [pc, #312]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe ff33 	bl	8001eb8 <HAL_InitTick>
 8003052:	4603      	mov	r3, r0
 8003054:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d052      	beq.n	8003102 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	e327      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d032      	beq.n	80030ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003068:	4b43      	ldr	r3, [pc, #268]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a42      	ldr	r2, [pc, #264]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003074:	f7fe ff70 	bl	8001f58 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800307c:	f7fe ff6c 	bl	8001f58 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e310      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800308e:	4b3a      	ldr	r3, [pc, #232]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800309a:	4b37      	ldr	r3, [pc, #220]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a36      	ldr	r2, [pc, #216]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 80030a0:	f043 0308 	orr.w	r3, r3, #8
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	4b34      	ldr	r3, [pc, #208]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	4931      	ldr	r1, [pc, #196]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	492c      	ldr	r1, [pc, #176]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
 80030cc:	e01a      	b.n	8003104 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a29      	ldr	r2, [pc, #164]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 80030d4:	f023 0301 	bic.w	r3, r3, #1
 80030d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030da:	f7fe ff3d 	bl	8001f58 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030e2:	f7fe ff39 	bl	8001f58 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e2dd      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030f4:	4b20      	ldr	r3, [pc, #128]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f0      	bne.n	80030e2 <HAL_RCC_OscConfig+0x1da>
 8003100:	e000      	b.n	8003104 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003102:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d074      	beq.n	80031fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b08      	cmp	r3, #8
 8003114:	d005      	beq.n	8003122 <HAL_RCC_OscConfig+0x21a>
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	2b0c      	cmp	r3, #12
 800311a:	d10e      	bne.n	800313a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b03      	cmp	r3, #3
 8003120:	d10b      	bne.n	800313a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003122:	4b15      	ldr	r3, [pc, #84]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d064      	beq.n	80031f8 <HAL_RCC_OscConfig+0x2f0>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d160      	bne.n	80031f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e2ba      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003142:	d106      	bne.n	8003152 <HAL_RCC_OscConfig+0x24a>
 8003144:	4b0c      	ldr	r3, [pc, #48]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a0b      	ldr	r2, [pc, #44]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 800314a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	e026      	b.n	80031a0 <HAL_RCC_OscConfig+0x298>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800315a:	d115      	bne.n	8003188 <HAL_RCC_OscConfig+0x280>
 800315c:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a05      	ldr	r2, [pc, #20]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 8003162:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	4b03      	ldr	r3, [pc, #12]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a02      	ldr	r2, [pc, #8]	@ (8003178 <HAL_RCC_OscConfig+0x270>)
 800316e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	e014      	b.n	80031a0 <HAL_RCC_OscConfig+0x298>
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
 800317c:	08007718 	.word	0x08007718
 8003180:	20000000 	.word	0x20000000
 8003184:	20000004 	.word	0x20000004
 8003188:	4ba0      	ldr	r3, [pc, #640]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a9f      	ldr	r2, [pc, #636]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 800318e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4b9d      	ldr	r3, [pc, #628]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a9c      	ldr	r2, [pc, #624]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 800319a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800319e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d013      	beq.n	80031d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe fed6 	bl	8001f58 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b0:	f7fe fed2 	bl	8001f58 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	@ 0x64
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e276      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031c2:	4b92      	ldr	r3, [pc, #584]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x2a8>
 80031ce:	e014      	b.n	80031fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fe fec2 	bl	8001f58 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d8:	f7fe febe 	bl	8001f58 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	@ 0x64
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e262      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ea:	4b88      	ldr	r3, [pc, #544]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x2d0>
 80031f6:	e000      	b.n	80031fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d060      	beq.n	80032c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2b04      	cmp	r3, #4
 800320a:	d005      	beq.n	8003218 <HAL_RCC_OscConfig+0x310>
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	2b0c      	cmp	r3, #12
 8003210:	d119      	bne.n	8003246 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d116      	bne.n	8003246 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003218:	4b7c      	ldr	r3, [pc, #496]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_RCC_OscConfig+0x328>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e23f      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003230:	4b76      	ldr	r3, [pc, #472]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	061b      	lsls	r3, r3, #24
 800323e:	4973      	ldr	r1, [pc, #460]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003244:	e040      	b.n	80032c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d023      	beq.n	8003296 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800324e:	4b6f      	ldr	r3, [pc, #444]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6e      	ldr	r2, [pc, #440]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 8003254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325a:	f7fe fe7d 	bl	8001f58 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003262:	f7fe fe79 	bl	8001f58 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e21d      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003274:	4b65      	ldr	r3, [pc, #404]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003280:	4b62      	ldr	r3, [pc, #392]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	061b      	lsls	r3, r3, #24
 800328e:	495f      	ldr	r1, [pc, #380]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
 8003294:	e018      	b.n	80032c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003296:	4b5d      	ldr	r3, [pc, #372]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a5c      	ldr	r2, [pc, #368]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 800329c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7fe fe59 	bl	8001f58 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032aa:	f7fe fe55 	bl	8001f58 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e1f9      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032bc:	4b53      	ldr	r3, [pc, #332]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f0      	bne.n	80032aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d03c      	beq.n	800334e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01c      	beq.n	8003316 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032dc:	4b4b      	ldr	r3, [pc, #300]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 80032de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032e2:	4a4a      	ldr	r2, [pc, #296]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7fe fe34 	bl	8001f58 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f4:	f7fe fe30 	bl	8001f58 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1d4      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003306:	4b41      	ldr	r3, [pc, #260]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 8003308:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0ef      	beq.n	80032f4 <HAL_RCC_OscConfig+0x3ec>
 8003314:	e01b      	b.n	800334e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003316:	4b3d      	ldr	r3, [pc, #244]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 8003318:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800331c:	4a3b      	ldr	r2, [pc, #236]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003326:	f7fe fe17 	bl	8001f58 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800332e:	f7fe fe13 	bl	8001f58 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e1b7      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003340:	4b32      	ldr	r3, [pc, #200]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 8003342:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1ef      	bne.n	800332e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 80a6 	beq.w	80034a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335c:	2300      	movs	r3, #0
 800335e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003360:	4b2a      	ldr	r3, [pc, #168]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10d      	bne.n	8003388 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800336c:	4b27      	ldr	r3, [pc, #156]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 800336e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003370:	4a26      	ldr	r2, [pc, #152]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 8003372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003376:	6593      	str	r3, [r2, #88]	@ 0x58
 8003378:	4b24      	ldr	r3, [pc, #144]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003384:	2301      	movs	r3, #1
 8003386:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003388:	4b21      	ldr	r3, [pc, #132]	@ (8003410 <HAL_RCC_OscConfig+0x508>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d118      	bne.n	80033c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003394:	4b1e      	ldr	r3, [pc, #120]	@ (8003410 <HAL_RCC_OscConfig+0x508>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a1d      	ldr	r2, [pc, #116]	@ (8003410 <HAL_RCC_OscConfig+0x508>)
 800339a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800339e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a0:	f7fe fdda 	bl	8001f58 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a8:	f7fe fdd6 	bl	8001f58 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e17a      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ba:	4b15      	ldr	r3, [pc, #84]	@ (8003410 <HAL_RCC_OscConfig+0x508>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d108      	bne.n	80033e0 <HAL_RCC_OscConfig+0x4d8>
 80033ce:	4b0f      	ldr	r3, [pc, #60]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d4:	4a0d      	ldr	r2, [pc, #52]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033de:	e029      	b.n	8003434 <HAL_RCC_OscConfig+0x52c>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b05      	cmp	r3, #5
 80033e6:	d115      	bne.n	8003414 <HAL_RCC_OscConfig+0x50c>
 80033e8:	4b08      	ldr	r3, [pc, #32]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ee:	4a07      	ldr	r2, [pc, #28]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 80033f0:	f043 0304 	orr.w	r3, r3, #4
 80033f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033f8:	4b04      	ldr	r3, [pc, #16]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fe:	4a03      	ldr	r2, [pc, #12]	@ (800340c <HAL_RCC_OscConfig+0x504>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003408:	e014      	b.n	8003434 <HAL_RCC_OscConfig+0x52c>
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	40007000 	.word	0x40007000
 8003414:	4b9c      	ldr	r3, [pc, #624]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341a:	4a9b      	ldr	r2, [pc, #620]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003424:	4b98      	ldr	r3, [pc, #608]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342a:	4a97      	ldr	r2, [pc, #604]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 800342c:	f023 0304 	bic.w	r3, r3, #4
 8003430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d016      	beq.n	800346a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7fe fd8c 	bl	8001f58 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003442:	e00a      	b.n	800345a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003444:	f7fe fd88 	bl	8001f58 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e12a      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345a:	4b8b      	ldr	r3, [pc, #556]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0ed      	beq.n	8003444 <HAL_RCC_OscConfig+0x53c>
 8003468:	e015      	b.n	8003496 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346a:	f7fe fd75 	bl	8001f58 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003470:	e00a      	b.n	8003488 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003472:	f7fe fd71 	bl	8001f58 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003480:	4293      	cmp	r3, r2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e113      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003488:	4b7f      	ldr	r3, [pc, #508]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1ed      	bne.n	8003472 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003496:	7ffb      	ldrb	r3, [r7, #31]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d105      	bne.n	80034a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800349c:	4b7a      	ldr	r3, [pc, #488]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a0:	4a79      	ldr	r2, [pc, #484]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 80034a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034a6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80fe 	beq.w	80036ae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	f040 80d0 	bne.w	800365c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034bc:	4b72      	ldr	r3, [pc, #456]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f003 0203 	and.w	r2, r3, #3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d130      	bne.n	8003532 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	3b01      	subs	r3, #1
 80034dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d127      	bne.n	8003532 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d11f      	bne.n	8003532 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034fc:	2a07      	cmp	r2, #7
 80034fe:	bf14      	ite	ne
 8003500:	2201      	movne	r2, #1
 8003502:	2200      	moveq	r2, #0
 8003504:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003506:	4293      	cmp	r3, r2
 8003508:	d113      	bne.n	8003532 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	3b01      	subs	r3, #1
 8003518:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800351a:	429a      	cmp	r2, r3
 800351c:	d109      	bne.n	8003532 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003528:	085b      	lsrs	r3, r3, #1
 800352a:	3b01      	subs	r3, #1
 800352c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d06e      	beq.n	8003610 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b0c      	cmp	r3, #12
 8003536:	d069      	beq.n	800360c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003538:	4b53      	ldr	r3, [pc, #332]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d105      	bne.n	8003550 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003544:	4b50      	ldr	r3, [pc, #320]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0ad      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003554:	4b4c      	ldr	r3, [pc, #304]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a4b      	ldr	r2, [pc, #300]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 800355a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800355e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003560:	f7fe fcfa 	bl	8001f58 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003568:	f7fe fcf6 	bl	8001f58 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e09a      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800357a:	4b43      	ldr	r3, [pc, #268]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003586:	4b40      	ldr	r3, [pc, #256]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	4b40      	ldr	r3, [pc, #256]	@ (800368c <HAL_RCC_OscConfig+0x784>)
 800358c:	4013      	ands	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003596:	3a01      	subs	r2, #1
 8003598:	0112      	lsls	r2, r2, #4
 800359a:	4311      	orrs	r1, r2
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035a0:	0212      	lsls	r2, r2, #8
 80035a2:	4311      	orrs	r1, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035a8:	0852      	lsrs	r2, r2, #1
 80035aa:	3a01      	subs	r2, #1
 80035ac:	0552      	lsls	r2, r2, #21
 80035ae:	4311      	orrs	r1, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80035b4:	0852      	lsrs	r2, r2, #1
 80035b6:	3a01      	subs	r2, #1
 80035b8:	0652      	lsls	r2, r2, #25
 80035ba:	4311      	orrs	r1, r2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035c0:	0912      	lsrs	r2, r2, #4
 80035c2:	0452      	lsls	r2, r2, #17
 80035c4:	430a      	orrs	r2, r1
 80035c6:	4930      	ldr	r1, [pc, #192]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 80035d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4a2a      	ldr	r2, [pc, #168]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 80035de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035e4:	f7fe fcb8 	bl	8001f58 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ec:	f7fe fcb4 	bl	8001f58 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e058      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fe:	4b22      	ldr	r3, [pc, #136]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800360a:	e050      	b.n	80036ae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e04f      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003610:	4b1d      	ldr	r3, [pc, #116]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d148      	bne.n	80036ae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800361c:	4b1a      	ldr	r3, [pc, #104]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a19      	ldr	r2, [pc, #100]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 8003622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003626:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003628:	4b17      	ldr	r3, [pc, #92]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a16      	ldr	r2, [pc, #88]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 800362e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003632:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003634:	f7fe fc90 	bl	8001f58 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363c:	f7fe fc8c 	bl	8001f58 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e030      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364e:	4b0e      	ldr	r3, [pc, #56]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0x734>
 800365a:	e028      	b.n	80036ae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b0c      	cmp	r3, #12
 8003660:	d023      	beq.n	80036aa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003662:	4b09      	ldr	r3, [pc, #36]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a08      	ldr	r2, [pc, #32]	@ (8003688 <HAL_RCC_OscConfig+0x780>)
 8003668:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800366c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366e:	f7fe fc73 	bl	8001f58 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003674:	e00c      	b.n	8003690 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003676:	f7fe fc6f 	bl	8001f58 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d905      	bls.n	8003690 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e013      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
 8003688:	40021000 	.word	0x40021000
 800368c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003690:	4b09      	ldr	r3, [pc, #36]	@ (80036b8 <HAL_RCC_OscConfig+0x7b0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ec      	bne.n	8003676 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800369c:	4b06      	ldr	r3, [pc, #24]	@ (80036b8 <HAL_RCC_OscConfig+0x7b0>)
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	4905      	ldr	r1, [pc, #20]	@ (80036b8 <HAL_RCC_OscConfig+0x7b0>)
 80036a2:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <HAL_RCC_OscConfig+0x7b4>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	60cb      	str	r3, [r1, #12]
 80036a8:	e001      	b.n	80036ae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3720      	adds	r7, #32
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40021000 	.word	0x40021000
 80036bc:	feeefffc 	.word	0xfeeefffc

080036c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0e7      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036d4:	4b75      	ldr	r3, [pc, #468]	@ (80038ac <HAL_RCC_ClockConfig+0x1ec>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d910      	bls.n	8003704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b72      	ldr	r3, [pc, #456]	@ (80038ac <HAL_RCC_ClockConfig+0x1ec>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 0207 	bic.w	r2, r3, #7
 80036ea:	4970      	ldr	r1, [pc, #448]	@ (80038ac <HAL_RCC_ClockConfig+0x1ec>)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	4b6e      	ldr	r3, [pc, #440]	@ (80038ac <HAL_RCC_ClockConfig+0x1ec>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0cf      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d010      	beq.n	8003732 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	4b66      	ldr	r3, [pc, #408]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800371c:	429a      	cmp	r2, r3
 800371e:	d908      	bls.n	8003732 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003720:	4b63      	ldr	r3, [pc, #396]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4960      	ldr	r1, [pc, #384]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 800372e:	4313      	orrs	r3, r2
 8003730:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d04c      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b03      	cmp	r3, #3
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003746:	4b5a      	ldr	r3, [pc, #360]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d121      	bne.n	8003796 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e0a6      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800375e:	4b54      	ldr	r3, [pc, #336]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d115      	bne.n	8003796 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e09a      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d107      	bne.n	8003786 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003776:	4b4e      	ldr	r3, [pc, #312]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e08e      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003786:	4b4a      	ldr	r3, [pc, #296]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e086      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003796:	4b46      	ldr	r3, [pc, #280]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f023 0203 	bic.w	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4943      	ldr	r1, [pc, #268]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a8:	f7fe fbd6 	bl	8001f58 <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b0:	f7fe fbd2 	bl	8001f58 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e06e      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	4b3a      	ldr	r3, [pc, #232]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 020c 	and.w	r2, r3, #12
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d1eb      	bne.n	80037b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d010      	beq.n	8003806 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	4b31      	ldr	r3, [pc, #196]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d208      	bcs.n	8003806 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f4:	4b2e      	ldr	r3, [pc, #184]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	492b      	ldr	r1, [pc, #172]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003806:	4b29      	ldr	r3, [pc, #164]	@ (80038ac <HAL_RCC_ClockConfig+0x1ec>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d210      	bcs.n	8003836 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003814:	4b25      	ldr	r3, [pc, #148]	@ (80038ac <HAL_RCC_ClockConfig+0x1ec>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f023 0207 	bic.w	r2, r3, #7
 800381c:	4923      	ldr	r1, [pc, #140]	@ (80038ac <HAL_RCC_ClockConfig+0x1ec>)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	4313      	orrs	r3, r2
 8003822:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003824:	4b21      	ldr	r3, [pc, #132]	@ (80038ac <HAL_RCC_ClockConfig+0x1ec>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d001      	beq.n	8003836 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e036      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003842:	4b1b      	ldr	r3, [pc, #108]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	4918      	ldr	r1, [pc, #96]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003850:	4313      	orrs	r3, r2
 8003852:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d009      	beq.n	8003874 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003860:	4b13      	ldr	r3, [pc, #76]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4910      	ldr	r1, [pc, #64]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003870:	4313      	orrs	r3, r2
 8003872:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003874:	f000 f824 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 8003878:	4602      	mov	r2, r0
 800387a:	4b0d      	ldr	r3, [pc, #52]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	490b      	ldr	r1, [pc, #44]	@ (80038b4 <HAL_RCC_ClockConfig+0x1f4>)
 8003886:	5ccb      	ldrb	r3, [r1, r3]
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
 8003890:	4a09      	ldr	r2, [pc, #36]	@ (80038b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003892:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003894:	4b09      	ldr	r3, [pc, #36]	@ (80038bc <HAL_RCC_ClockConfig+0x1fc>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7fe fb0d 	bl	8001eb8 <HAL_InitTick>
 800389e:	4603      	mov	r3, r0
 80038a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80038a2:	7afb      	ldrb	r3, [r7, #11]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40022000 	.word	0x40022000
 80038b0:	40021000 	.word	0x40021000
 80038b4:	08007718 	.word	0x08007718
 80038b8:	20000000 	.word	0x20000000
 80038bc:	20000004 	.word	0x20000004

080038c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b089      	sub	sp, #36	@ 0x24
 80038c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ce:	4b3e      	ldr	r3, [pc, #248]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038d8:	4b3b      	ldr	r3, [pc, #236]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x34>
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2b0c      	cmp	r3, #12
 80038ec:	d121      	bne.n	8003932 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d11e      	bne.n	8003932 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038f4:	4b34      	ldr	r3, [pc, #208]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d107      	bne.n	8003910 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003900:	4b31      	ldr	r3, [pc, #196]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003902:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003906:	0a1b      	lsrs	r3, r3, #8
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	e005      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003910:	4b2d      	ldr	r3, [pc, #180]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800391c:	4a2b      	ldr	r2, [pc, #172]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003924:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10d      	bne.n	8003948 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b04      	cmp	r3, #4
 8003936:	d102      	bne.n	800393e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003938:	4b25      	ldr	r3, [pc, #148]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800393a:	61bb      	str	r3, [r7, #24]
 800393c:	e004      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b08      	cmp	r3, #8
 8003942:	d101      	bne.n	8003948 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003944:	4b23      	ldr	r3, [pc, #140]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003946:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	2b0c      	cmp	r3, #12
 800394c:	d134      	bne.n	80039b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800394e:	4b1e      	ldr	r3, [pc, #120]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d003      	beq.n	8003966 <HAL_RCC_GetSysClockFreq+0xa6>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b03      	cmp	r3, #3
 8003962:	d003      	beq.n	800396c <HAL_RCC_GetSysClockFreq+0xac>
 8003964:	e005      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003966:	4b1a      	ldr	r3, [pc, #104]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003968:	617b      	str	r3, [r7, #20]
      break;
 800396a:	e005      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800396c:	4b19      	ldr	r3, [pc, #100]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800396e:	617b      	str	r3, [r7, #20]
      break;
 8003970:	e002      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	617b      	str	r3, [r7, #20]
      break;
 8003976:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003978:	4b13      	ldr	r3, [pc, #76]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	3301      	adds	r3, #1
 8003984:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003986:	4b10      	ldr	r3, [pc, #64]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	0a1b      	lsrs	r3, r3, #8
 800398c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	fb03 f202 	mul.w	r2, r3, r2
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	fbb2 f3f3 	udiv	r3, r2, r3
 800399c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800399e:	4b0a      	ldr	r3, [pc, #40]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	0e5b      	lsrs	r3, r3, #25
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	3301      	adds	r3, #1
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039b8:	69bb      	ldr	r3, [r7, #24]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3724      	adds	r7, #36	@ 0x24
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	08007730 	.word	0x08007730
 80039d0:	00f42400 	.word	0x00f42400
 80039d4:	007a1200 	.word	0x007a1200

080039d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039dc:	4b03      	ldr	r3, [pc, #12]	@ (80039ec <HAL_RCC_GetHCLKFreq+0x14>)
 80039de:	681b      	ldr	r3, [r3, #0]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000000 	.word	0x20000000

080039f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039f4:	f7ff fff0 	bl	80039d8 <HAL_RCC_GetHCLKFreq>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4b06      	ldr	r3, [pc, #24]	@ (8003a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	4904      	ldr	r1, [pc, #16]	@ (8003a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a06:	5ccb      	ldrb	r3, [r1, r3]
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000
 8003a18:	08007728 	.word	0x08007728

08003a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a20:	f7ff ffda 	bl	80039d8 <HAL_RCC_GetHCLKFreq>
 8003a24:	4602      	mov	r2, r0
 8003a26:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	0adb      	lsrs	r3, r3, #11
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	4904      	ldr	r1, [pc, #16]	@ (8003a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a32:	5ccb      	ldrb	r3, [r1, r3]
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40021000 	.word	0x40021000
 8003a44:	08007728 	.word	0x08007728

08003a48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a50:	2300      	movs	r3, #0
 8003a52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a54:	4b2a      	ldr	r3, [pc, #168]	@ (8003b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a60:	f7ff f922 	bl	8002ca8 <HAL_PWREx_GetVoltageRange>
 8003a64:	6178      	str	r0, [r7, #20]
 8003a66:	e014      	b.n	8003a92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a68:	4b25      	ldr	r3, [pc, #148]	@ (8003b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6c:	4a24      	ldr	r2, [pc, #144]	@ (8003b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a72:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a74:	4b22      	ldr	r3, [pc, #136]	@ (8003b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a80:	f7ff f912 	bl	8002ca8 <HAL_PWREx_GetVoltageRange>
 8003a84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a86:	4b1e      	ldr	r3, [pc, #120]	@ (8003b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a90:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a98:	d10b      	bne.n	8003ab2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b80      	cmp	r3, #128	@ 0x80
 8003a9e:	d919      	bls.n	8003ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003aa4:	d902      	bls.n	8003aac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	e013      	b.n	8003ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003aac:	2301      	movs	r3, #1
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	e010      	b.n	8003ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b80      	cmp	r3, #128	@ 0x80
 8003ab6:	d902      	bls.n	8003abe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ab8:	2303      	movs	r3, #3
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	e00a      	b.n	8003ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b80      	cmp	r3, #128	@ 0x80
 8003ac2:	d102      	bne.n	8003aca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	e004      	b.n	8003ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b70      	cmp	r3, #112	@ 0x70
 8003ace:	d101      	bne.n	8003ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f023 0207 	bic.w	r2, r3, #7
 8003adc:	4909      	ldr	r1, [pc, #36]	@ (8003b04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ae4:	4b07      	ldr	r3, [pc, #28]	@ (8003b04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d001      	beq.n	8003af6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40022000 	.word	0x40022000

08003b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b10:	2300      	movs	r3, #0
 8003b12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b14:	2300      	movs	r3, #0
 8003b16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d041      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b28:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b2c:	d02a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b2e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b32:	d824      	bhi.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b38:	d008      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b3e:	d81e      	bhi.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b48:	d010      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b4a:	e018      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b4c:	4b86      	ldr	r3, [pc, #536]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4a85      	ldr	r2, [pc, #532]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b58:	e015      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	2100      	movs	r1, #0
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 facb 	bl	80040fc <RCCEx_PLLSAI1_Config>
 8003b66:	4603      	mov	r3, r0
 8003b68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b6a:	e00c      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3320      	adds	r3, #32
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fbb6 	bl	80042e4 <RCCEx_PLLSAI2_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b7c:	e003      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	74fb      	strb	r3, [r7, #19]
      break;
 8003b82:	e000      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b86:	7cfb      	ldrb	r3, [r7, #19]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10b      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b8c:	4b76      	ldr	r3, [pc, #472]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b92:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b9a:	4973      	ldr	r1, [pc, #460]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ba2:	e001      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba4:	7cfb      	ldrb	r3, [r7, #19]
 8003ba6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d041      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bb8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003bbc:	d02a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003bbe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003bc2:	d824      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bc8:	d008      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bce:	d81e      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bd8:	d010      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bda:	e018      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bdc:	4b62      	ldr	r3, [pc, #392]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4a61      	ldr	r2, [pc, #388]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003be8:	e015      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3304      	adds	r3, #4
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fa83 	bl	80040fc <RCCEx_PLLSAI1_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bfa:	e00c      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3320      	adds	r3, #32
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fb6e 	bl	80042e4 <RCCEx_PLLSAI2_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c0c:	e003      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	74fb      	strb	r3, [r7, #19]
      break;
 8003c12:	e000      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c16:	7cfb      	ldrb	r3, [r7, #19]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10b      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c1c:	4b52      	ldr	r3, [pc, #328]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c22:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c2a:	494f      	ldr	r1, [pc, #316]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c32:	e001      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80a0 	beq.w	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c46:	2300      	movs	r3, #0
 8003c48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c4a:	4b47      	ldr	r3, [pc, #284]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00d      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c60:	4b41      	ldr	r3, [pc, #260]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c64:	4a40      	ldr	r2, [pc, #256]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c6c:	4b3e      	ldr	r3, [pc, #248]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a3a      	ldr	r2, [pc, #232]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c88:	f7fe f966 	bl	8001f58 <HAL_GetTick>
 8003c8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c8e:	e009      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c90:	f7fe f962 	bl	8001f58 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d902      	bls.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	74fb      	strb	r3, [r7, #19]
        break;
 8003ca2:	e005      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ca4:	4b31      	ldr	r3, [pc, #196]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0ef      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d15c      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cb6:	4b2c      	ldr	r3, [pc, #176]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cc0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01f      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d019      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cd4:	4b24      	ldr	r3, [pc, #144]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ce0:	4b21      	ldr	r3, [pc, #132]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce6:	4a20      	ldr	r2, [pc, #128]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d00:	4a19      	ldr	r2, [pc, #100]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d016      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7fe f921 	bl	8001f58 <HAL_GetTick>
 8003d16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d18:	e00b      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1a:	f7fe f91d 	bl	8001f58 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d902      	bls.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	74fb      	strb	r3, [r7, #19]
            break;
 8003d30:	e006      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d32:	4b0d      	ldr	r3, [pc, #52]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0ec      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d40:	7cfb      	ldrb	r3, [r7, #19]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d46:	4b08      	ldr	r3, [pc, #32]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d56:	4904      	ldr	r1, [pc, #16]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d5e:	e009      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d60:	7cfb      	ldrb	r3, [r7, #19]
 8003d62:	74bb      	strb	r3, [r7, #18]
 8003d64:	e006      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d74:	7c7b      	ldrb	r3, [r7, #17]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d105      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7a:	4b9e      	ldr	r3, [pc, #632]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7e:	4a9d      	ldr	r2, [pc, #628]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d84:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d92:	4b98      	ldr	r3, [pc, #608]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d98:	f023 0203 	bic.w	r2, r3, #3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da0:	4994      	ldr	r1, [pc, #592]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003db4:	4b8f      	ldr	r3, [pc, #572]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dba:	f023 020c 	bic.w	r2, r3, #12
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc2:	498c      	ldr	r1, [pc, #560]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dd6:	4b87      	ldr	r3, [pc, #540]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ddc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	4983      	ldr	r1, [pc, #524]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003df8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e06:	497b      	ldr	r1, [pc, #492]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e1a:	4b76      	ldr	r3, [pc, #472]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e28:	4972      	ldr	r1, [pc, #456]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e3c:	4b6d      	ldr	r3, [pc, #436]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e42:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e4a:	496a      	ldr	r1, [pc, #424]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e5e:	4b65      	ldr	r3, [pc, #404]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e64:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6c:	4961      	ldr	r1, [pc, #388]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e80:	4b5c      	ldr	r3, [pc, #368]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e8e:	4959      	ldr	r1, [pc, #356]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ea2:	4b54      	ldr	r3, [pc, #336]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb0:	4950      	ldr	r1, [pc, #320]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ec4:	4b4b      	ldr	r3, [pc, #300]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed2:	4948      	ldr	r1, [pc, #288]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ee6:	4b43      	ldr	r3, [pc, #268]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef4:	493f      	ldr	r1, [pc, #252]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d028      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f08:	4b3a      	ldr	r3, [pc, #232]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f16:	4937      	ldr	r1, [pc, #220]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f26:	d106      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f28:	4b32      	ldr	r3, [pc, #200]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4a31      	ldr	r2, [pc, #196]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f32:	60d3      	str	r3, [r2, #12]
 8003f34:	e011      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f3e:	d10c      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3304      	adds	r3, #4
 8003f44:	2101      	movs	r1, #1
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f8d8 	bl	80040fc <RCCEx_PLLSAI1_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f50:	7cfb      	ldrb	r3, [r7, #19]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f56:	7cfb      	ldrb	r3, [r7, #19]
 8003f58:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d028      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f66:	4b23      	ldr	r3, [pc, #140]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f74:	491f      	ldr	r1, [pc, #124]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f84:	d106      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f86:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f90:	60d3      	str	r3, [r2, #12]
 8003f92:	e011      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f9c:	d10c      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 f8a9 	bl	80040fc <RCCEx_PLLSAI1_Config>
 8003faa:	4603      	mov	r3, r0
 8003fac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fae:	7cfb      	ldrb	r3, [r7, #19]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003fb4:	7cfb      	ldrb	r3, [r7, #19]
 8003fb6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d02b      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fd2:	4908      	ldr	r1, [pc, #32]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fe2:	d109      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe4:	4b03      	ldr	r3, [pc, #12]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4a02      	ldr	r2, [pc, #8]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fee:	60d3      	str	r3, [r2, #12]
 8003ff0:	e014      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ff2:	bf00      	nop
 8003ff4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ffc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004000:	d10c      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3304      	adds	r3, #4
 8004006:	2101      	movs	r1, #1
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f877 	bl	80040fc <RCCEx_PLLSAI1_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004012:	7cfb      	ldrb	r3, [r7, #19]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004018:	7cfb      	ldrb	r3, [r7, #19]
 800401a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d02f      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004028:	4b2b      	ldr	r3, [pc, #172]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004036:	4928      	ldr	r1, [pc, #160]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004042:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004046:	d10d      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3304      	adds	r3, #4
 800404c:	2102      	movs	r1, #2
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f854 	bl	80040fc <RCCEx_PLLSAI1_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004058:	7cfb      	ldrb	r3, [r7, #19]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d014      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800405e:	7cfb      	ldrb	r3, [r7, #19]
 8004060:	74bb      	strb	r3, [r7, #18]
 8004062:	e011      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800406c:	d10c      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3320      	adds	r3, #32
 8004072:	2102      	movs	r1, #2
 8004074:	4618      	mov	r0, r3
 8004076:	f000 f935 	bl	80042e4 <RCCEx_PLLSAI2_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004084:	7cfb      	ldrb	r3, [r7, #19]
 8004086:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004094:	4b10      	ldr	r3, [pc, #64]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040a2:	490d      	ldr	r1, [pc, #52]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040b6:	4b08      	ldr	r3, [pc, #32]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040c6:	4904      	ldr	r1, [pc, #16]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40021000 	.word	0x40021000

080040dc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80040e0:	4b05      	ldr	r3, [pc, #20]	@ (80040f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a04      	ldr	r2, [pc, #16]	@ (80040f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040e6:	f043 0304 	orr.w	r3, r3, #4
 80040ea:	6013      	str	r3, [r2, #0]
}
 80040ec:	bf00      	nop
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000

080040fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800410a:	4b75      	ldr	r3, [pc, #468]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d018      	beq.n	8004148 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004116:	4b72      	ldr	r3, [pc, #456]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0203 	and.w	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d10d      	bne.n	8004142 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
       ||
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800412e:	4b6c      	ldr	r3, [pc, #432]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	091b      	lsrs	r3, r3, #4
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
       ||
 800413e:	429a      	cmp	r2, r3
 8004140:	d047      	beq.n	80041d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
 8004146:	e044      	b.n	80041d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b03      	cmp	r3, #3
 800414e:	d018      	beq.n	8004182 <RCCEx_PLLSAI1_Config+0x86>
 8004150:	2b03      	cmp	r3, #3
 8004152:	d825      	bhi.n	80041a0 <RCCEx_PLLSAI1_Config+0xa4>
 8004154:	2b01      	cmp	r3, #1
 8004156:	d002      	beq.n	800415e <RCCEx_PLLSAI1_Config+0x62>
 8004158:	2b02      	cmp	r3, #2
 800415a:	d009      	beq.n	8004170 <RCCEx_PLLSAI1_Config+0x74>
 800415c:	e020      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800415e:	4b60      	ldr	r3, [pc, #384]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d11d      	bne.n	80041a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800416e:	e01a      	b.n	80041a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004170:	4b5b      	ldr	r3, [pc, #364]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004178:	2b00      	cmp	r3, #0
 800417a:	d116      	bne.n	80041aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004180:	e013      	b.n	80041aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004182:	4b57      	ldr	r3, [pc, #348]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10f      	bne.n	80041ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800418e:	4b54      	ldr	r3, [pc, #336]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800419e:	e006      	b.n	80041ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
      break;
 80041a4:	e004      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041a6:	bf00      	nop
 80041a8:	e002      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041aa:	bf00      	nop
 80041ac:	e000      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10d      	bne.n	80041d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041b6:	4b4a      	ldr	r3, [pc, #296]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6819      	ldr	r1, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	430b      	orrs	r3, r1
 80041cc:	4944      	ldr	r1, [pc, #272]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d17d      	bne.n	80042d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041d8:	4b41      	ldr	r3, [pc, #260]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a40      	ldr	r2, [pc, #256]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e4:	f7fd feb8 	bl	8001f58 <HAL_GetTick>
 80041e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041ea:	e009      	b.n	8004200 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041ec:	f7fd feb4 	bl	8001f58 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d902      	bls.n	8004200 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	73fb      	strb	r3, [r7, #15]
        break;
 80041fe:	e005      	b.n	800420c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004200:	4b37      	ldr	r3, [pc, #220]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1ef      	bne.n	80041ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d160      	bne.n	80042d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d111      	bne.n	800423c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004218:	4b31      	ldr	r3, [pc, #196]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6892      	ldr	r2, [r2, #8]
 8004228:	0211      	lsls	r1, r2, #8
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68d2      	ldr	r2, [r2, #12]
 800422e:	0912      	lsrs	r2, r2, #4
 8004230:	0452      	lsls	r2, r2, #17
 8004232:	430a      	orrs	r2, r1
 8004234:	492a      	ldr	r1, [pc, #168]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004236:	4313      	orrs	r3, r2
 8004238:	610b      	str	r3, [r1, #16]
 800423a:	e027      	b.n	800428c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d112      	bne.n	8004268 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004242:	4b27      	ldr	r3, [pc, #156]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800424a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6892      	ldr	r2, [r2, #8]
 8004252:	0211      	lsls	r1, r2, #8
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6912      	ldr	r2, [r2, #16]
 8004258:	0852      	lsrs	r2, r2, #1
 800425a:	3a01      	subs	r2, #1
 800425c:	0552      	lsls	r2, r2, #21
 800425e:	430a      	orrs	r2, r1
 8004260:	491f      	ldr	r1, [pc, #124]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004262:	4313      	orrs	r3, r2
 8004264:	610b      	str	r3, [r1, #16]
 8004266:	e011      	b.n	800428c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004268:	4b1d      	ldr	r3, [pc, #116]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004270:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6892      	ldr	r2, [r2, #8]
 8004278:	0211      	lsls	r1, r2, #8
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6952      	ldr	r2, [r2, #20]
 800427e:	0852      	lsrs	r2, r2, #1
 8004280:	3a01      	subs	r2, #1
 8004282:	0652      	lsls	r2, r2, #25
 8004284:	430a      	orrs	r2, r1
 8004286:	4916      	ldr	r1, [pc, #88]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004288:	4313      	orrs	r3, r2
 800428a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800428c:	4b14      	ldr	r3, [pc, #80]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a13      	ldr	r2, [pc, #76]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004292:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004296:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004298:	f7fd fe5e 	bl	8001f58 <HAL_GetTick>
 800429c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800429e:	e009      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042a0:	f7fd fe5a 	bl	8001f58 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d902      	bls.n	80042b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	73fb      	strb	r3, [r7, #15]
          break;
 80042b2:	e005      	b.n	80042c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042b4:	4b0a      	ldr	r3, [pc, #40]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0ef      	beq.n	80042a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042c6:	4b06      	ldr	r3, [pc, #24]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	4904      	ldr	r1, [pc, #16]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000

080042e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042f2:	4b6a      	ldr	r3, [pc, #424]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d018      	beq.n	8004330 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042fe:	4b67      	ldr	r3, [pc, #412]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0203 	and.w	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d10d      	bne.n	800432a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
       ||
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004316:	4b61      	ldr	r3, [pc, #388]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	091b      	lsrs	r3, r3, #4
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
       ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d047      	beq.n	80043ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	e044      	b.n	80043ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d018      	beq.n	800436a <RCCEx_PLLSAI2_Config+0x86>
 8004338:	2b03      	cmp	r3, #3
 800433a:	d825      	bhi.n	8004388 <RCCEx_PLLSAI2_Config+0xa4>
 800433c:	2b01      	cmp	r3, #1
 800433e:	d002      	beq.n	8004346 <RCCEx_PLLSAI2_Config+0x62>
 8004340:	2b02      	cmp	r3, #2
 8004342:	d009      	beq.n	8004358 <RCCEx_PLLSAI2_Config+0x74>
 8004344:	e020      	b.n	8004388 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004346:	4b55      	ldr	r3, [pc, #340]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d11d      	bne.n	800438e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004356:	e01a      	b.n	800438e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004358:	4b50      	ldr	r3, [pc, #320]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004360:	2b00      	cmp	r3, #0
 8004362:	d116      	bne.n	8004392 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004368:	e013      	b.n	8004392 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800436a:	4b4c      	ldr	r3, [pc, #304]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10f      	bne.n	8004396 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004376:	4b49      	ldr	r3, [pc, #292]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004386:	e006      	b.n	8004396 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
      break;
 800438c:	e004      	b.n	8004398 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800438e:	bf00      	nop
 8004390:	e002      	b.n	8004398 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004396:	bf00      	nop
    }

    if(status == HAL_OK)
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10d      	bne.n	80043ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800439e:	4b3f      	ldr	r3, [pc, #252]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6819      	ldr	r1, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	430b      	orrs	r3, r1
 80043b4:	4939      	ldr	r1, [pc, #228]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d167      	bne.n	8004490 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043c0:	4b36      	ldr	r3, [pc, #216]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a35      	ldr	r2, [pc, #212]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043cc:	f7fd fdc4 	bl	8001f58 <HAL_GetTick>
 80043d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043d2:	e009      	b.n	80043e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043d4:	f7fd fdc0 	bl	8001f58 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d902      	bls.n	80043e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	73fb      	strb	r3, [r7, #15]
        break;
 80043e6:	e005      	b.n	80043f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043e8:	4b2c      	ldr	r3, [pc, #176]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1ef      	bne.n	80043d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d14a      	bne.n	8004490 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d111      	bne.n	8004424 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004400:	4b26      	ldr	r3, [pc, #152]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004408:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6892      	ldr	r2, [r2, #8]
 8004410:	0211      	lsls	r1, r2, #8
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68d2      	ldr	r2, [r2, #12]
 8004416:	0912      	lsrs	r2, r2, #4
 8004418:	0452      	lsls	r2, r2, #17
 800441a:	430a      	orrs	r2, r1
 800441c:	491f      	ldr	r1, [pc, #124]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 800441e:	4313      	orrs	r3, r2
 8004420:	614b      	str	r3, [r1, #20]
 8004422:	e011      	b.n	8004448 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004424:	4b1d      	ldr	r3, [pc, #116]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800442c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6892      	ldr	r2, [r2, #8]
 8004434:	0211      	lsls	r1, r2, #8
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6912      	ldr	r2, [r2, #16]
 800443a:	0852      	lsrs	r2, r2, #1
 800443c:	3a01      	subs	r2, #1
 800443e:	0652      	lsls	r2, r2, #25
 8004440:	430a      	orrs	r2, r1
 8004442:	4916      	ldr	r1, [pc, #88]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004444:	4313      	orrs	r3, r2
 8004446:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004448:	4b14      	ldr	r3, [pc, #80]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a13      	ldr	r2, [pc, #76]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 800444e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004452:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004454:	f7fd fd80 	bl	8001f58 <HAL_GetTick>
 8004458:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800445a:	e009      	b.n	8004470 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800445c:	f7fd fd7c 	bl	8001f58 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d902      	bls.n	8004470 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	73fb      	strb	r3, [r7, #15]
          break;
 800446e:	e005      	b.n	800447c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004470:	4b0a      	ldr	r3, [pc, #40]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0ef      	beq.n	800445c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004482:	4b06      	ldr	r3, [pc, #24]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	4904      	ldr	r1, [pc, #16]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 800448c:	4313      	orrs	r3, r2
 800448e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004490:	7bfb      	ldrb	r3, [r7, #15]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000

080044a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e095      	b.n	80045de <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d108      	bne.n	80044cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044c2:	d009      	beq.n	80044d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	61da      	str	r2, [r3, #28]
 80044ca:	e005      	b.n	80044d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fd fa3a 	bl	800196c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800450e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004518:	d902      	bls.n	8004520 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	e002      	b.n	8004526 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004520:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004524:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800452e:	d007      	beq.n	8004540 <HAL_SPI_Init+0xa0>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004538:	d002      	beq.n	8004540 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004582:	ea42 0103 	orr.w	r1, r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	0c1b      	lsrs	r3, r3, #16
 800459c:	f003 0204 	and.w	r2, r3, #4
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80045bc:	ea42 0103 	orr.w	r1, r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e049      	b.n	800468c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7fd f9f1 	bl	80019f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3304      	adds	r3, #4
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f000 fb7b 	bl	8004d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e049      	b.n	800473a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f841 	bl	8004742 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3304      	adds	r3, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	4610      	mov	r0, r2
 80046d4:	f000 fb24 	bl	8004d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
	...

08004758 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d109      	bne.n	800477c <HAL_TIM_PWM_Start+0x24>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	bf14      	ite	ne
 8004774:	2301      	movne	r3, #1
 8004776:	2300      	moveq	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	e03c      	b.n	80047f6 <HAL_TIM_PWM_Start+0x9e>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b04      	cmp	r3, #4
 8004780:	d109      	bne.n	8004796 <HAL_TIM_PWM_Start+0x3e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b01      	cmp	r3, #1
 800478c:	bf14      	ite	ne
 800478e:	2301      	movne	r3, #1
 8004790:	2300      	moveq	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	e02f      	b.n	80047f6 <HAL_TIM_PWM_Start+0x9e>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b08      	cmp	r3, #8
 800479a:	d109      	bne.n	80047b0 <HAL_TIM_PWM_Start+0x58>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e022      	b.n	80047f6 <HAL_TIM_PWM_Start+0x9e>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b0c      	cmp	r3, #12
 80047b4:	d109      	bne.n	80047ca <HAL_TIM_PWM_Start+0x72>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b01      	cmp	r3, #1
 80047c0:	bf14      	ite	ne
 80047c2:	2301      	movne	r3, #1
 80047c4:	2300      	moveq	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	e015      	b.n	80047f6 <HAL_TIM_PWM_Start+0x9e>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b10      	cmp	r3, #16
 80047ce:	d109      	bne.n	80047e4 <HAL_TIM_PWM_Start+0x8c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	e008      	b.n	80047f6 <HAL_TIM_PWM_Start+0x9e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	bf14      	ite	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	2300      	moveq	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e09c      	b.n	8004938 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d104      	bne.n	800480e <HAL_TIM_PWM_Start+0xb6>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800480c:	e023      	b.n	8004856 <HAL_TIM_PWM_Start+0xfe>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b04      	cmp	r3, #4
 8004812:	d104      	bne.n	800481e <HAL_TIM_PWM_Start+0xc6>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800481c:	e01b      	b.n	8004856 <HAL_TIM_PWM_Start+0xfe>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b08      	cmp	r3, #8
 8004822:	d104      	bne.n	800482e <HAL_TIM_PWM_Start+0xd6>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800482c:	e013      	b.n	8004856 <HAL_TIM_PWM_Start+0xfe>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b0c      	cmp	r3, #12
 8004832:	d104      	bne.n	800483e <HAL_TIM_PWM_Start+0xe6>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800483c:	e00b      	b.n	8004856 <HAL_TIM_PWM_Start+0xfe>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b10      	cmp	r3, #16
 8004842:	d104      	bne.n	800484e <HAL_TIM_PWM_Start+0xf6>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800484c:	e003      	b.n	8004856 <HAL_TIM_PWM_Start+0xfe>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2202      	movs	r2, #2
 8004852:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2201      	movs	r2, #1
 800485c:	6839      	ldr	r1, [r7, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fe74 	bl	800554c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a35      	ldr	r2, [pc, #212]	@ (8004940 <HAL_TIM_PWM_Start+0x1e8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <HAL_TIM_PWM_Start+0x13e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a34      	ldr	r2, [pc, #208]	@ (8004944 <HAL_TIM_PWM_Start+0x1ec>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00e      	beq.n	8004896 <HAL_TIM_PWM_Start+0x13e>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a32      	ldr	r2, [pc, #200]	@ (8004948 <HAL_TIM_PWM_Start+0x1f0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d009      	beq.n	8004896 <HAL_TIM_PWM_Start+0x13e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a31      	ldr	r2, [pc, #196]	@ (800494c <HAL_TIM_PWM_Start+0x1f4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <HAL_TIM_PWM_Start+0x13e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a2f      	ldr	r2, [pc, #188]	@ (8004950 <HAL_TIM_PWM_Start+0x1f8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d101      	bne.n	800489a <HAL_TIM_PWM_Start+0x142>
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <HAL_TIM_PWM_Start+0x144>
 800489a:	2300      	movs	r3, #0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a22      	ldr	r2, [pc, #136]	@ (8004940 <HAL_TIM_PWM_Start+0x1e8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d01d      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x19e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048c2:	d018      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x19e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a22      	ldr	r2, [pc, #136]	@ (8004954 <HAL_TIM_PWM_Start+0x1fc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d013      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x19e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a21      	ldr	r2, [pc, #132]	@ (8004958 <HAL_TIM_PWM_Start+0x200>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00e      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x19e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1f      	ldr	r2, [pc, #124]	@ (800495c <HAL_TIM_PWM_Start+0x204>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d009      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x19e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a17      	ldr	r2, [pc, #92]	@ (8004944 <HAL_TIM_PWM_Start+0x1ec>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d004      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x19e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a15      	ldr	r2, [pc, #84]	@ (8004948 <HAL_TIM_PWM_Start+0x1f0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d115      	bne.n	8004922 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	4b18      	ldr	r3, [pc, #96]	@ (8004960 <HAL_TIM_PWM_Start+0x208>)
 80048fe:	4013      	ands	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b06      	cmp	r3, #6
 8004906:	d015      	beq.n	8004934 <HAL_TIM_PWM_Start+0x1dc>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800490e:	d011      	beq.n	8004934 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004920:	e008      	b.n	8004934 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0201 	orr.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	e000      	b.n	8004936 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004934:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40012c00 	.word	0x40012c00
 8004944:	40013400 	.word	0x40013400
 8004948:	40014000 	.word	0x40014000
 800494c:	40014400 	.word	0x40014400
 8004950:	40014800 	.word	0x40014800
 8004954:	40000400 	.word	0x40000400
 8004958:	40000800 	.word	0x40000800
 800495c:	40000c00 	.word	0x40000c00
 8004960:	00010007 	.word	0x00010007

08004964 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800497e:	2302      	movs	r3, #2
 8004980:	e0ff      	b.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b14      	cmp	r3, #20
 800498e:	f200 80f0 	bhi.w	8004b72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004992:	a201      	add	r2, pc, #4	@ (adr r2, 8004998 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049ed 	.word	0x080049ed
 800499c:	08004b73 	.word	0x08004b73
 80049a0:	08004b73 	.word	0x08004b73
 80049a4:	08004b73 	.word	0x08004b73
 80049a8:	08004a2d 	.word	0x08004a2d
 80049ac:	08004b73 	.word	0x08004b73
 80049b0:	08004b73 	.word	0x08004b73
 80049b4:	08004b73 	.word	0x08004b73
 80049b8:	08004a6f 	.word	0x08004a6f
 80049bc:	08004b73 	.word	0x08004b73
 80049c0:	08004b73 	.word	0x08004b73
 80049c4:	08004b73 	.word	0x08004b73
 80049c8:	08004aaf 	.word	0x08004aaf
 80049cc:	08004b73 	.word	0x08004b73
 80049d0:	08004b73 	.word	0x08004b73
 80049d4:	08004b73 	.word	0x08004b73
 80049d8:	08004af1 	.word	0x08004af1
 80049dc:	08004b73 	.word	0x08004b73
 80049e0:	08004b73 	.word	0x08004b73
 80049e4:	08004b73 	.word	0x08004b73
 80049e8:	08004b31 	.word	0x08004b31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fa3a 	bl	8004e6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0208 	orr.w	r2, r2, #8
 8004a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0204 	bic.w	r2, r2, #4
 8004a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6999      	ldr	r1, [r3, #24]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	619a      	str	r2, [r3, #24]
      break;
 8004a2a:	e0a5      	b.n	8004b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 faaa 	bl	8004f8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699a      	ldr	r2, [r3, #24]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6999      	ldr	r1, [r3, #24]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	021a      	lsls	r2, r3, #8
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	619a      	str	r2, [r3, #24]
      break;
 8004a6c:	e084      	b.n	8004b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fb13 	bl	80050a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69da      	ldr	r2, [r3, #28]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0208 	orr.w	r2, r2, #8
 8004a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0204 	bic.w	r2, r2, #4
 8004a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69d9      	ldr	r1, [r3, #28]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	61da      	str	r2, [r3, #28]
      break;
 8004aac:	e064      	b.n	8004b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68b9      	ldr	r1, [r7, #8]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fb7b 	bl	80051b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69da      	ldr	r2, [r3, #28]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69da      	ldr	r2, [r3, #28]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69d9      	ldr	r1, [r3, #28]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	021a      	lsls	r2, r3, #8
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	61da      	str	r2, [r3, #28]
      break;
 8004aee:	e043      	b.n	8004b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fbc4 	bl	8005284 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0208 	orr.w	r2, r2, #8
 8004b0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0204 	bic.w	r2, r2, #4
 8004b1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b2e:	e023      	b.n	8004b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fc08 	bl	800534c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	021a      	lsls	r2, r3, #8
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b70:	e002      	b.n	8004b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	75fb      	strb	r3, [r7, #23]
      break;
 8004b76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop

08004b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e0b6      	b.n	8004d16 <HAL_TIM_ConfigClockSource+0x18a>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004be4:	d03e      	beq.n	8004c64 <HAL_TIM_ConfigClockSource+0xd8>
 8004be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bea:	f200 8087 	bhi.w	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bf2:	f000 8086 	beq.w	8004d02 <HAL_TIM_ConfigClockSource+0x176>
 8004bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bfa:	d87f      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004bfc:	2b70      	cmp	r3, #112	@ 0x70
 8004bfe:	d01a      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0xaa>
 8004c00:	2b70      	cmp	r3, #112	@ 0x70
 8004c02:	d87b      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c04:	2b60      	cmp	r3, #96	@ 0x60
 8004c06:	d050      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x11e>
 8004c08:	2b60      	cmp	r3, #96	@ 0x60
 8004c0a:	d877      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c0c:	2b50      	cmp	r3, #80	@ 0x50
 8004c0e:	d03c      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0xfe>
 8004c10:	2b50      	cmp	r3, #80	@ 0x50
 8004c12:	d873      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c14:	2b40      	cmp	r3, #64	@ 0x40
 8004c16:	d058      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x13e>
 8004c18:	2b40      	cmp	r3, #64	@ 0x40
 8004c1a:	d86f      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c1c:	2b30      	cmp	r3, #48	@ 0x30
 8004c1e:	d064      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x15e>
 8004c20:	2b30      	cmp	r3, #48	@ 0x30
 8004c22:	d86b      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d060      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x15e>
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d867      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d05c      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x15e>
 8004c30:	2b10      	cmp	r3, #16
 8004c32:	d05a      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x15e>
 8004c34:	e062      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c46:	f000 fc61 	bl	800550c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	609a      	str	r2, [r3, #8]
      break;
 8004c62:	e04f      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c74:	f000 fc4a 	bl	800550c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c86:	609a      	str	r2, [r3, #8]
      break;
 8004c88:	e03c      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c96:	461a      	mov	r2, r3
 8004c98:	f000 fbbe 	bl	8005418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2150      	movs	r1, #80	@ 0x50
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fc17 	bl	80054d6 <TIM_ITRx_SetConfig>
      break;
 8004ca8:	e02c      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f000 fbdd 	bl	8005476 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2160      	movs	r1, #96	@ 0x60
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fc07 	bl	80054d6 <TIM_ITRx_SetConfig>
      break;
 8004cc8:	e01c      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f000 fb9e 	bl	8005418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2140      	movs	r1, #64	@ 0x40
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fbf7 	bl	80054d6 <TIM_ITRx_SetConfig>
      break;
 8004ce8:	e00c      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	f000 fbee 	bl	80054d6 <TIM_ITRx_SetConfig>
      break;
 8004cfa:	e003      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8004d00:	e000      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a46      	ldr	r2, [pc, #280]	@ (8004e4c <TIM_Base_SetConfig+0x12c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d013      	beq.n	8004d60 <TIM_Base_SetConfig+0x40>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d3e:	d00f      	beq.n	8004d60 <TIM_Base_SetConfig+0x40>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a43      	ldr	r2, [pc, #268]	@ (8004e50 <TIM_Base_SetConfig+0x130>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00b      	beq.n	8004d60 <TIM_Base_SetConfig+0x40>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a42      	ldr	r2, [pc, #264]	@ (8004e54 <TIM_Base_SetConfig+0x134>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d007      	beq.n	8004d60 <TIM_Base_SetConfig+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a41      	ldr	r2, [pc, #260]	@ (8004e58 <TIM_Base_SetConfig+0x138>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d003      	beq.n	8004d60 <TIM_Base_SetConfig+0x40>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a40      	ldr	r2, [pc, #256]	@ (8004e5c <TIM_Base_SetConfig+0x13c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d108      	bne.n	8004d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a35      	ldr	r2, [pc, #212]	@ (8004e4c <TIM_Base_SetConfig+0x12c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d01f      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d80:	d01b      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a32      	ldr	r2, [pc, #200]	@ (8004e50 <TIM_Base_SetConfig+0x130>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d017      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a31      	ldr	r2, [pc, #196]	@ (8004e54 <TIM_Base_SetConfig+0x134>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d013      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a30      	ldr	r2, [pc, #192]	@ (8004e58 <TIM_Base_SetConfig+0x138>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00f      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a2f      	ldr	r2, [pc, #188]	@ (8004e5c <TIM_Base_SetConfig+0x13c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00b      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a2e      	ldr	r2, [pc, #184]	@ (8004e60 <TIM_Base_SetConfig+0x140>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d007      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a2d      	ldr	r2, [pc, #180]	@ (8004e64 <TIM_Base_SetConfig+0x144>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d003      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2c      	ldr	r2, [pc, #176]	@ (8004e68 <TIM_Base_SetConfig+0x148>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d108      	bne.n	8004dcc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a16      	ldr	r2, [pc, #88]	@ (8004e4c <TIM_Base_SetConfig+0x12c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00f      	beq.n	8004e18 <TIM_Base_SetConfig+0xf8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a18      	ldr	r2, [pc, #96]	@ (8004e5c <TIM_Base_SetConfig+0x13c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00b      	beq.n	8004e18 <TIM_Base_SetConfig+0xf8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a17      	ldr	r2, [pc, #92]	@ (8004e60 <TIM_Base_SetConfig+0x140>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d007      	beq.n	8004e18 <TIM_Base_SetConfig+0xf8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a16      	ldr	r2, [pc, #88]	@ (8004e64 <TIM_Base_SetConfig+0x144>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_Base_SetConfig+0xf8>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a15      	ldr	r2, [pc, #84]	@ (8004e68 <TIM_Base_SetConfig+0x148>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d103      	bne.n	8004e20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d105      	bne.n	8004e3e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f023 0201 	bic.w	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	611a      	str	r2, [r3, #16]
  }
}
 8004e3e:	bf00      	nop
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40012c00 	.word	0x40012c00
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40000800 	.word	0x40000800
 8004e58:	40000c00 	.word	0x40000c00
 8004e5c:	40013400 	.word	0x40013400
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40014400 	.word	0x40014400
 8004e68:	40014800 	.word	0x40014800

08004e6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	f023 0201 	bic.w	r2, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0303 	bic.w	r3, r3, #3
 8004ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f023 0302 	bic.w	r3, r3, #2
 8004eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8004f78 <TIM_OC1_SetConfig+0x10c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00f      	beq.n	8004eec <TIM_OC1_SetConfig+0x80>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a2b      	ldr	r2, [pc, #172]	@ (8004f7c <TIM_OC1_SetConfig+0x110>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00b      	beq.n	8004eec <TIM_OC1_SetConfig+0x80>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8004f80 <TIM_OC1_SetConfig+0x114>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d007      	beq.n	8004eec <TIM_OC1_SetConfig+0x80>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a29      	ldr	r2, [pc, #164]	@ (8004f84 <TIM_OC1_SetConfig+0x118>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_OC1_SetConfig+0x80>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a28      	ldr	r2, [pc, #160]	@ (8004f88 <TIM_OC1_SetConfig+0x11c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d10c      	bne.n	8004f06 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f023 0308 	bic.w	r3, r3, #8
 8004ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f023 0304 	bic.w	r3, r3, #4
 8004f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a1b      	ldr	r2, [pc, #108]	@ (8004f78 <TIM_OC1_SetConfig+0x10c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00f      	beq.n	8004f2e <TIM_OC1_SetConfig+0xc2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a1a      	ldr	r2, [pc, #104]	@ (8004f7c <TIM_OC1_SetConfig+0x110>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00b      	beq.n	8004f2e <TIM_OC1_SetConfig+0xc2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a19      	ldr	r2, [pc, #100]	@ (8004f80 <TIM_OC1_SetConfig+0x114>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d007      	beq.n	8004f2e <TIM_OC1_SetConfig+0xc2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a18      	ldr	r2, [pc, #96]	@ (8004f84 <TIM_OC1_SetConfig+0x118>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d003      	beq.n	8004f2e <TIM_OC1_SetConfig+0xc2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a17      	ldr	r2, [pc, #92]	@ (8004f88 <TIM_OC1_SetConfig+0x11c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d111      	bne.n	8004f52 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	621a      	str	r2, [r3, #32]
}
 8004f6c:	bf00      	nop
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	40012c00 	.word	0x40012c00
 8004f7c:	40013400 	.word	0x40013400
 8004f80:	40014000 	.word	0x40014000
 8004f84:	40014400 	.word	0x40014400
 8004f88:	40014800 	.word	0x40014800

08004f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	f023 0210 	bic.w	r2, r3, #16
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0320 	bic.w	r3, r3, #32
 8004fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a28      	ldr	r2, [pc, #160]	@ (800508c <TIM_OC2_SetConfig+0x100>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_OC2_SetConfig+0x6c>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a27      	ldr	r2, [pc, #156]	@ (8005090 <TIM_OC2_SetConfig+0x104>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d10d      	bne.n	8005014 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005012:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a1d      	ldr	r2, [pc, #116]	@ (800508c <TIM_OC2_SetConfig+0x100>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00f      	beq.n	800503c <TIM_OC2_SetConfig+0xb0>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a1c      	ldr	r2, [pc, #112]	@ (8005090 <TIM_OC2_SetConfig+0x104>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00b      	beq.n	800503c <TIM_OC2_SetConfig+0xb0>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a1b      	ldr	r2, [pc, #108]	@ (8005094 <TIM_OC2_SetConfig+0x108>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d007      	beq.n	800503c <TIM_OC2_SetConfig+0xb0>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a1a      	ldr	r2, [pc, #104]	@ (8005098 <TIM_OC2_SetConfig+0x10c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d003      	beq.n	800503c <TIM_OC2_SetConfig+0xb0>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a19      	ldr	r2, [pc, #100]	@ (800509c <TIM_OC2_SetConfig+0x110>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d113      	bne.n	8005064 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005042:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800504a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	621a      	str	r2, [r3, #32]
}
 800507e:	bf00      	nop
 8005080:	371c      	adds	r7, #28
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40012c00 	.word	0x40012c00
 8005090:	40013400 	.word	0x40013400
 8005094:	40014000 	.word	0x40014000
 8005098:	40014400 	.word	0x40014400
 800509c:	40014800 	.word	0x40014800

080050a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a27      	ldr	r2, [pc, #156]	@ (800519c <TIM_OC3_SetConfig+0xfc>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_OC3_SetConfig+0x6a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a26      	ldr	r2, [pc, #152]	@ (80051a0 <TIM_OC3_SetConfig+0x100>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d10d      	bne.n	8005126 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005110:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a1c      	ldr	r2, [pc, #112]	@ (800519c <TIM_OC3_SetConfig+0xfc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00f      	beq.n	800514e <TIM_OC3_SetConfig+0xae>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a1b      	ldr	r2, [pc, #108]	@ (80051a0 <TIM_OC3_SetConfig+0x100>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00b      	beq.n	800514e <TIM_OC3_SetConfig+0xae>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a1a      	ldr	r2, [pc, #104]	@ (80051a4 <TIM_OC3_SetConfig+0x104>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d007      	beq.n	800514e <TIM_OC3_SetConfig+0xae>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a19      	ldr	r2, [pc, #100]	@ (80051a8 <TIM_OC3_SetConfig+0x108>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d003      	beq.n	800514e <TIM_OC3_SetConfig+0xae>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a18      	ldr	r2, [pc, #96]	@ (80051ac <TIM_OC3_SetConfig+0x10c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d113      	bne.n	8005176 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800515c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	621a      	str	r2, [r3, #32]
}
 8005190:	bf00      	nop
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40012c00 	.word	0x40012c00
 80051a0:	40013400 	.word	0x40013400
 80051a4:	40014000 	.word	0x40014000
 80051a8:	40014400 	.word	0x40014400
 80051ac:	40014800 	.word	0x40014800

080051b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	021b      	lsls	r3, r3, #8
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	031b      	lsls	r3, r3, #12
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a18      	ldr	r2, [pc, #96]	@ (8005270 <TIM_OC4_SetConfig+0xc0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00f      	beq.n	8005234 <TIM_OC4_SetConfig+0x84>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a17      	ldr	r2, [pc, #92]	@ (8005274 <TIM_OC4_SetConfig+0xc4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00b      	beq.n	8005234 <TIM_OC4_SetConfig+0x84>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a16      	ldr	r2, [pc, #88]	@ (8005278 <TIM_OC4_SetConfig+0xc8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d007      	beq.n	8005234 <TIM_OC4_SetConfig+0x84>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a15      	ldr	r2, [pc, #84]	@ (800527c <TIM_OC4_SetConfig+0xcc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_OC4_SetConfig+0x84>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a14      	ldr	r2, [pc, #80]	@ (8005280 <TIM_OC4_SetConfig+0xd0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d109      	bne.n	8005248 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800523a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	019b      	lsls	r3, r3, #6
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	621a      	str	r2, [r3, #32]
}
 8005262:	bf00      	nop
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40012c00 	.word	0x40012c00
 8005274:	40013400 	.word	0x40013400
 8005278:	40014000 	.word	0x40014000
 800527c:	40014400 	.word	0x40014400
 8005280:	40014800 	.word	0x40014800

08005284 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80052c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	041b      	lsls	r3, r3, #16
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a17      	ldr	r2, [pc, #92]	@ (8005338 <TIM_OC5_SetConfig+0xb4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00f      	beq.n	80052fe <TIM_OC5_SetConfig+0x7a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a16      	ldr	r2, [pc, #88]	@ (800533c <TIM_OC5_SetConfig+0xb8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00b      	beq.n	80052fe <TIM_OC5_SetConfig+0x7a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a15      	ldr	r2, [pc, #84]	@ (8005340 <TIM_OC5_SetConfig+0xbc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <TIM_OC5_SetConfig+0x7a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a14      	ldr	r2, [pc, #80]	@ (8005344 <TIM_OC5_SetConfig+0xc0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d003      	beq.n	80052fe <TIM_OC5_SetConfig+0x7a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a13      	ldr	r2, [pc, #76]	@ (8005348 <TIM_OC5_SetConfig+0xc4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d109      	bne.n	8005312 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005304:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	621a      	str	r2, [r3, #32]
}
 800532c:	bf00      	nop
 800532e:	371c      	adds	r7, #28
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	40012c00 	.word	0x40012c00
 800533c:	40013400 	.word	0x40013400
 8005340:	40014000 	.word	0x40014000
 8005344:	40014400 	.word	0x40014400
 8005348:	40014800 	.word	0x40014800

0800534c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800537a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800537e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	021b      	lsls	r3, r3, #8
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005392:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	051b      	lsls	r3, r3, #20
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a18      	ldr	r2, [pc, #96]	@ (8005404 <TIM_OC6_SetConfig+0xb8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00f      	beq.n	80053c8 <TIM_OC6_SetConfig+0x7c>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a17      	ldr	r2, [pc, #92]	@ (8005408 <TIM_OC6_SetConfig+0xbc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00b      	beq.n	80053c8 <TIM_OC6_SetConfig+0x7c>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a16      	ldr	r2, [pc, #88]	@ (800540c <TIM_OC6_SetConfig+0xc0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d007      	beq.n	80053c8 <TIM_OC6_SetConfig+0x7c>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a15      	ldr	r2, [pc, #84]	@ (8005410 <TIM_OC6_SetConfig+0xc4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d003      	beq.n	80053c8 <TIM_OC6_SetConfig+0x7c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a14      	ldr	r2, [pc, #80]	@ (8005414 <TIM_OC6_SetConfig+0xc8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d109      	bne.n	80053dc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	029b      	lsls	r3, r3, #10
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40013400 	.word	0x40013400
 800540c:	40014000 	.word	0x40014000
 8005410:	40014400 	.word	0x40014400
 8005414:	40014800 	.word	0x40014800

08005418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	f023 0201 	bic.w	r2, r3, #1
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f023 030a 	bic.w	r3, r3, #10
 8005454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	621a      	str	r2, [r3, #32]
}
 800546a:	bf00      	nop
 800546c:	371c      	adds	r7, #28
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005476:	b480      	push	{r7}
 8005478:	b087      	sub	sp, #28
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	f023 0210 	bic.w	r2, r3, #16
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	031b      	lsls	r3, r3, #12
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b085      	sub	sp, #20
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f043 0307 	orr.w	r3, r3, #7
 80054f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	609a      	str	r2, [r3, #8]
}
 8005500:	bf00      	nop
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	021a      	lsls	r2, r3, #8
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	431a      	orrs	r2, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4313      	orrs	r3, r2
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	609a      	str	r2, [r3, #8]
}
 8005540:	bf00      	nop
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f003 031f 	and.w	r3, r3, #31
 800555e:	2201      	movs	r2, #1
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a1a      	ldr	r2, [r3, #32]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	43db      	mvns	r3, r3
 800556e:	401a      	ands	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6a1a      	ldr	r2, [r3, #32]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	fa01 f303 	lsl.w	r3, r1, r3
 8005584:	431a      	orrs	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	621a      	str	r2, [r3, #32]
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e068      	b.n	8005682 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d004      	beq.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a2d      	ldr	r2, [pc, #180]	@ (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d108      	bne.n	80055f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80055ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1e      	ldr	r2, [pc, #120]	@ (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d01d      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005622:	d018      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a1b      	ldr	r2, [pc, #108]	@ (8005698 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d013      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a1a      	ldr	r2, [pc, #104]	@ (800569c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00e      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a18      	ldr	r2, [pc, #96]	@ (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d009      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a13      	ldr	r2, [pc, #76]	@ (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d004      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a14      	ldr	r2, [pc, #80]	@ (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d10c      	bne.n	8005670 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800565c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	4313      	orrs	r3, r2
 8005666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40012c00 	.word	0x40012c00
 8005694:	40013400 	.word	0x40013400
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800
 80056a0:	40000c00 	.word	0x40000c00
 80056a4:	40014000 	.word	0x40014000

080056a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e040      	b.n	800573c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7fc fa08 	bl	8001ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2224      	movs	r2, #36	@ 0x24
 80056d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0201 	bic.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fae0 	bl	8005cb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f825 	bl	8005744 <UART_SetConfig>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e01b      	b.n	800573c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005712:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005722:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fb5f 	bl	8005df8 <UART_CheckIdleState>
 800573a:	4603      	mov	r3, r0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005748:	b08a      	sub	sp, #40	@ 0x28
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	431a      	orrs	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	431a      	orrs	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	4313      	orrs	r3, r2
 800576a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	4ba4      	ldr	r3, [pc, #656]	@ (8005a04 <UART_SetConfig+0x2c0>)
 8005774:	4013      	ands	r3, r2
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	6812      	ldr	r2, [r2, #0]
 800577a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800577c:	430b      	orrs	r3, r1
 800577e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a99      	ldr	r2, [pc, #612]	@ (8005a08 <UART_SetConfig+0x2c4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d004      	beq.n	80057b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ac:	4313      	orrs	r3, r2
 80057ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057c0:	430a      	orrs	r2, r1
 80057c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a90      	ldr	r2, [pc, #576]	@ (8005a0c <UART_SetConfig+0x2c8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d126      	bne.n	800581c <UART_SetConfig+0xd8>
 80057ce:	4b90      	ldr	r3, [pc, #576]	@ (8005a10 <UART_SetConfig+0x2cc>)
 80057d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d4:	f003 0303 	and.w	r3, r3, #3
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d81b      	bhi.n	8005814 <UART_SetConfig+0xd0>
 80057dc:	a201      	add	r2, pc, #4	@ (adr r2, 80057e4 <UART_SetConfig+0xa0>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	080057f5 	.word	0x080057f5
 80057e8:	08005805 	.word	0x08005805
 80057ec:	080057fd 	.word	0x080057fd
 80057f0:	0800580d 	.word	0x0800580d
 80057f4:	2301      	movs	r3, #1
 80057f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057fa:	e116      	b.n	8005a2a <UART_SetConfig+0x2e6>
 80057fc:	2302      	movs	r3, #2
 80057fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005802:	e112      	b.n	8005a2a <UART_SetConfig+0x2e6>
 8005804:	2304      	movs	r3, #4
 8005806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800580a:	e10e      	b.n	8005a2a <UART_SetConfig+0x2e6>
 800580c:	2308      	movs	r3, #8
 800580e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005812:	e10a      	b.n	8005a2a <UART_SetConfig+0x2e6>
 8005814:	2310      	movs	r3, #16
 8005816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800581a:	e106      	b.n	8005a2a <UART_SetConfig+0x2e6>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a7c      	ldr	r2, [pc, #496]	@ (8005a14 <UART_SetConfig+0x2d0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d138      	bne.n	8005898 <UART_SetConfig+0x154>
 8005826:	4b7a      	ldr	r3, [pc, #488]	@ (8005a10 <UART_SetConfig+0x2cc>)
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800582c:	f003 030c 	and.w	r3, r3, #12
 8005830:	2b0c      	cmp	r3, #12
 8005832:	d82d      	bhi.n	8005890 <UART_SetConfig+0x14c>
 8005834:	a201      	add	r2, pc, #4	@ (adr r2, 800583c <UART_SetConfig+0xf8>)
 8005836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583a:	bf00      	nop
 800583c:	08005871 	.word	0x08005871
 8005840:	08005891 	.word	0x08005891
 8005844:	08005891 	.word	0x08005891
 8005848:	08005891 	.word	0x08005891
 800584c:	08005881 	.word	0x08005881
 8005850:	08005891 	.word	0x08005891
 8005854:	08005891 	.word	0x08005891
 8005858:	08005891 	.word	0x08005891
 800585c:	08005879 	.word	0x08005879
 8005860:	08005891 	.word	0x08005891
 8005864:	08005891 	.word	0x08005891
 8005868:	08005891 	.word	0x08005891
 800586c:	08005889 	.word	0x08005889
 8005870:	2300      	movs	r3, #0
 8005872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005876:	e0d8      	b.n	8005a2a <UART_SetConfig+0x2e6>
 8005878:	2302      	movs	r3, #2
 800587a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800587e:	e0d4      	b.n	8005a2a <UART_SetConfig+0x2e6>
 8005880:	2304      	movs	r3, #4
 8005882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005886:	e0d0      	b.n	8005a2a <UART_SetConfig+0x2e6>
 8005888:	2308      	movs	r3, #8
 800588a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800588e:	e0cc      	b.n	8005a2a <UART_SetConfig+0x2e6>
 8005890:	2310      	movs	r3, #16
 8005892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005896:	e0c8      	b.n	8005a2a <UART_SetConfig+0x2e6>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a5e      	ldr	r2, [pc, #376]	@ (8005a18 <UART_SetConfig+0x2d4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d125      	bne.n	80058ee <UART_SetConfig+0x1aa>
 80058a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005a10 <UART_SetConfig+0x2cc>)
 80058a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80058ac:	2b30      	cmp	r3, #48	@ 0x30
 80058ae:	d016      	beq.n	80058de <UART_SetConfig+0x19a>
 80058b0:	2b30      	cmp	r3, #48	@ 0x30
 80058b2:	d818      	bhi.n	80058e6 <UART_SetConfig+0x1a2>
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d00a      	beq.n	80058ce <UART_SetConfig+0x18a>
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d814      	bhi.n	80058e6 <UART_SetConfig+0x1a2>
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <UART_SetConfig+0x182>
 80058c0:	2b10      	cmp	r3, #16
 80058c2:	d008      	beq.n	80058d6 <UART_SetConfig+0x192>
 80058c4:	e00f      	b.n	80058e6 <UART_SetConfig+0x1a2>
 80058c6:	2300      	movs	r3, #0
 80058c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058cc:	e0ad      	b.n	8005a2a <UART_SetConfig+0x2e6>
 80058ce:	2302      	movs	r3, #2
 80058d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058d4:	e0a9      	b.n	8005a2a <UART_SetConfig+0x2e6>
 80058d6:	2304      	movs	r3, #4
 80058d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058dc:	e0a5      	b.n	8005a2a <UART_SetConfig+0x2e6>
 80058de:	2308      	movs	r3, #8
 80058e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058e4:	e0a1      	b.n	8005a2a <UART_SetConfig+0x2e6>
 80058e6:	2310      	movs	r3, #16
 80058e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ec:	e09d      	b.n	8005a2a <UART_SetConfig+0x2e6>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a4a      	ldr	r2, [pc, #296]	@ (8005a1c <UART_SetConfig+0x2d8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d125      	bne.n	8005944 <UART_SetConfig+0x200>
 80058f8:	4b45      	ldr	r3, [pc, #276]	@ (8005a10 <UART_SetConfig+0x2cc>)
 80058fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005902:	2bc0      	cmp	r3, #192	@ 0xc0
 8005904:	d016      	beq.n	8005934 <UART_SetConfig+0x1f0>
 8005906:	2bc0      	cmp	r3, #192	@ 0xc0
 8005908:	d818      	bhi.n	800593c <UART_SetConfig+0x1f8>
 800590a:	2b80      	cmp	r3, #128	@ 0x80
 800590c:	d00a      	beq.n	8005924 <UART_SetConfig+0x1e0>
 800590e:	2b80      	cmp	r3, #128	@ 0x80
 8005910:	d814      	bhi.n	800593c <UART_SetConfig+0x1f8>
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <UART_SetConfig+0x1d8>
 8005916:	2b40      	cmp	r3, #64	@ 0x40
 8005918:	d008      	beq.n	800592c <UART_SetConfig+0x1e8>
 800591a:	e00f      	b.n	800593c <UART_SetConfig+0x1f8>
 800591c:	2300      	movs	r3, #0
 800591e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005922:	e082      	b.n	8005a2a <UART_SetConfig+0x2e6>
 8005924:	2302      	movs	r3, #2
 8005926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800592a:	e07e      	b.n	8005a2a <UART_SetConfig+0x2e6>
 800592c:	2304      	movs	r3, #4
 800592e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005932:	e07a      	b.n	8005a2a <UART_SetConfig+0x2e6>
 8005934:	2308      	movs	r3, #8
 8005936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800593a:	e076      	b.n	8005a2a <UART_SetConfig+0x2e6>
 800593c:	2310      	movs	r3, #16
 800593e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005942:	e072      	b.n	8005a2a <UART_SetConfig+0x2e6>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a35      	ldr	r2, [pc, #212]	@ (8005a20 <UART_SetConfig+0x2dc>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d12a      	bne.n	80059a4 <UART_SetConfig+0x260>
 800594e:	4b30      	ldr	r3, [pc, #192]	@ (8005a10 <UART_SetConfig+0x2cc>)
 8005950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005954:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005958:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800595c:	d01a      	beq.n	8005994 <UART_SetConfig+0x250>
 800595e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005962:	d81b      	bhi.n	800599c <UART_SetConfig+0x258>
 8005964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005968:	d00c      	beq.n	8005984 <UART_SetConfig+0x240>
 800596a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800596e:	d815      	bhi.n	800599c <UART_SetConfig+0x258>
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <UART_SetConfig+0x238>
 8005974:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005978:	d008      	beq.n	800598c <UART_SetConfig+0x248>
 800597a:	e00f      	b.n	800599c <UART_SetConfig+0x258>
 800597c:	2300      	movs	r3, #0
 800597e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005982:	e052      	b.n	8005a2a <UART_SetConfig+0x2e6>
 8005984:	2302      	movs	r3, #2
 8005986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800598a:	e04e      	b.n	8005a2a <UART_SetConfig+0x2e6>
 800598c:	2304      	movs	r3, #4
 800598e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005992:	e04a      	b.n	8005a2a <UART_SetConfig+0x2e6>
 8005994:	2308      	movs	r3, #8
 8005996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800599a:	e046      	b.n	8005a2a <UART_SetConfig+0x2e6>
 800599c:	2310      	movs	r3, #16
 800599e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059a2:	e042      	b.n	8005a2a <UART_SetConfig+0x2e6>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a17      	ldr	r2, [pc, #92]	@ (8005a08 <UART_SetConfig+0x2c4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d13a      	bne.n	8005a24 <UART_SetConfig+0x2e0>
 80059ae:	4b18      	ldr	r3, [pc, #96]	@ (8005a10 <UART_SetConfig+0x2cc>)
 80059b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80059b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059bc:	d01a      	beq.n	80059f4 <UART_SetConfig+0x2b0>
 80059be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059c2:	d81b      	bhi.n	80059fc <UART_SetConfig+0x2b8>
 80059c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059c8:	d00c      	beq.n	80059e4 <UART_SetConfig+0x2a0>
 80059ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ce:	d815      	bhi.n	80059fc <UART_SetConfig+0x2b8>
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <UART_SetConfig+0x298>
 80059d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059d8:	d008      	beq.n	80059ec <UART_SetConfig+0x2a8>
 80059da:	e00f      	b.n	80059fc <UART_SetConfig+0x2b8>
 80059dc:	2300      	movs	r3, #0
 80059de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059e2:	e022      	b.n	8005a2a <UART_SetConfig+0x2e6>
 80059e4:	2302      	movs	r3, #2
 80059e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ea:	e01e      	b.n	8005a2a <UART_SetConfig+0x2e6>
 80059ec:	2304      	movs	r3, #4
 80059ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059f2:	e01a      	b.n	8005a2a <UART_SetConfig+0x2e6>
 80059f4:	2308      	movs	r3, #8
 80059f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059fa:	e016      	b.n	8005a2a <UART_SetConfig+0x2e6>
 80059fc:	2310      	movs	r3, #16
 80059fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a02:	e012      	b.n	8005a2a <UART_SetConfig+0x2e6>
 8005a04:	efff69f3 	.word	0xefff69f3
 8005a08:	40008000 	.word	0x40008000
 8005a0c:	40013800 	.word	0x40013800
 8005a10:	40021000 	.word	0x40021000
 8005a14:	40004400 	.word	0x40004400
 8005a18:	40004800 	.word	0x40004800
 8005a1c:	40004c00 	.word	0x40004c00
 8005a20:	40005000 	.word	0x40005000
 8005a24:	2310      	movs	r3, #16
 8005a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a9f      	ldr	r2, [pc, #636]	@ (8005cac <UART_SetConfig+0x568>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d17a      	bne.n	8005b2a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d824      	bhi.n	8005a86 <UART_SetConfig+0x342>
 8005a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a44 <UART_SetConfig+0x300>)
 8005a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a42:	bf00      	nop
 8005a44:	08005a69 	.word	0x08005a69
 8005a48:	08005a87 	.word	0x08005a87
 8005a4c:	08005a71 	.word	0x08005a71
 8005a50:	08005a87 	.word	0x08005a87
 8005a54:	08005a77 	.word	0x08005a77
 8005a58:	08005a87 	.word	0x08005a87
 8005a5c:	08005a87 	.word	0x08005a87
 8005a60:	08005a87 	.word	0x08005a87
 8005a64:	08005a7f 	.word	0x08005a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a68:	f7fd ffc2 	bl	80039f0 <HAL_RCC_GetPCLK1Freq>
 8005a6c:	61f8      	str	r0, [r7, #28]
        break;
 8005a6e:	e010      	b.n	8005a92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a70:	4b8f      	ldr	r3, [pc, #572]	@ (8005cb0 <UART_SetConfig+0x56c>)
 8005a72:	61fb      	str	r3, [r7, #28]
        break;
 8005a74:	e00d      	b.n	8005a92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a76:	f7fd ff23 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 8005a7a:	61f8      	str	r0, [r7, #28]
        break;
 8005a7c:	e009      	b.n	8005a92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a82:	61fb      	str	r3, [r7, #28]
        break;
 8005a84:	e005      	b.n	8005a92 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 80fb 	beq.w	8005c90 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4413      	add	r3, r2
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d305      	bcc.n	8005ab6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ab0:	69fa      	ldr	r2, [r7, #28]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d903      	bls.n	8005abe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005abc:	e0e8      	b.n	8005c90 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	461c      	mov	r4, r3
 8005ac4:	4615      	mov	r5, r2
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	022b      	lsls	r3, r5, #8
 8005ad0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005ad4:	0222      	lsls	r2, r4, #8
 8005ad6:	68f9      	ldr	r1, [r7, #12]
 8005ad8:	6849      	ldr	r1, [r1, #4]
 8005ada:	0849      	lsrs	r1, r1, #1
 8005adc:	2000      	movs	r0, #0
 8005ade:	4688      	mov	r8, r1
 8005ae0:	4681      	mov	r9, r0
 8005ae2:	eb12 0a08 	adds.w	sl, r2, r8
 8005ae6:	eb43 0b09 	adc.w	fp, r3, r9
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	603b      	str	r3, [r7, #0]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005af8:	4650      	mov	r0, sl
 8005afa:	4659      	mov	r1, fp
 8005afc:	f7fa ffe2 	bl	8000ac4 <__aeabi_uldivmod>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4613      	mov	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b0e:	d308      	bcc.n	8005b22 <UART_SetConfig+0x3de>
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b16:	d204      	bcs.n	8005b22 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	60da      	str	r2, [r3, #12]
 8005b20:	e0b6      	b.n	8005c90 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b28:	e0b2      	b.n	8005c90 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b32:	d15e      	bne.n	8005bf2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005b34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d828      	bhi.n	8005b8e <UART_SetConfig+0x44a>
 8005b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b44 <UART_SetConfig+0x400>)
 8005b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b42:	bf00      	nop
 8005b44:	08005b69 	.word	0x08005b69
 8005b48:	08005b71 	.word	0x08005b71
 8005b4c:	08005b79 	.word	0x08005b79
 8005b50:	08005b8f 	.word	0x08005b8f
 8005b54:	08005b7f 	.word	0x08005b7f
 8005b58:	08005b8f 	.word	0x08005b8f
 8005b5c:	08005b8f 	.word	0x08005b8f
 8005b60:	08005b8f 	.word	0x08005b8f
 8005b64:	08005b87 	.word	0x08005b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b68:	f7fd ff42 	bl	80039f0 <HAL_RCC_GetPCLK1Freq>
 8005b6c:	61f8      	str	r0, [r7, #28]
        break;
 8005b6e:	e014      	b.n	8005b9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b70:	f7fd ff54 	bl	8003a1c <HAL_RCC_GetPCLK2Freq>
 8005b74:	61f8      	str	r0, [r7, #28]
        break;
 8005b76:	e010      	b.n	8005b9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b78:	4b4d      	ldr	r3, [pc, #308]	@ (8005cb0 <UART_SetConfig+0x56c>)
 8005b7a:	61fb      	str	r3, [r7, #28]
        break;
 8005b7c:	e00d      	b.n	8005b9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b7e:	f7fd fe9f 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 8005b82:	61f8      	str	r0, [r7, #28]
        break;
 8005b84:	e009      	b.n	8005b9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b8a:	61fb      	str	r3, [r7, #28]
        break;
 8005b8c:	e005      	b.n	8005b9a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d077      	beq.n	8005c90 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	005a      	lsls	r2, r3, #1
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	441a      	add	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	2b0f      	cmp	r3, #15
 8005bba:	d916      	bls.n	8005bea <UART_SetConfig+0x4a6>
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bc2:	d212      	bcs.n	8005bea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	f023 030f 	bic.w	r3, r3, #15
 8005bcc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	085b      	lsrs	r3, r3, #1
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	8afb      	ldrh	r3, [r7, #22]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	8afa      	ldrh	r2, [r7, #22]
 8005be6:	60da      	str	r2, [r3, #12]
 8005be8:	e052      	b.n	8005c90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005bf0:	e04e      	b.n	8005c90 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bf2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d827      	bhi.n	8005c4a <UART_SetConfig+0x506>
 8005bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8005c00 <UART_SetConfig+0x4bc>)
 8005bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c00:	08005c25 	.word	0x08005c25
 8005c04:	08005c2d 	.word	0x08005c2d
 8005c08:	08005c35 	.word	0x08005c35
 8005c0c:	08005c4b 	.word	0x08005c4b
 8005c10:	08005c3b 	.word	0x08005c3b
 8005c14:	08005c4b 	.word	0x08005c4b
 8005c18:	08005c4b 	.word	0x08005c4b
 8005c1c:	08005c4b 	.word	0x08005c4b
 8005c20:	08005c43 	.word	0x08005c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c24:	f7fd fee4 	bl	80039f0 <HAL_RCC_GetPCLK1Freq>
 8005c28:	61f8      	str	r0, [r7, #28]
        break;
 8005c2a:	e014      	b.n	8005c56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c2c:	f7fd fef6 	bl	8003a1c <HAL_RCC_GetPCLK2Freq>
 8005c30:	61f8      	str	r0, [r7, #28]
        break;
 8005c32:	e010      	b.n	8005c56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c34:	4b1e      	ldr	r3, [pc, #120]	@ (8005cb0 <UART_SetConfig+0x56c>)
 8005c36:	61fb      	str	r3, [r7, #28]
        break;
 8005c38:	e00d      	b.n	8005c56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c3a:	f7fd fe41 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 8005c3e:	61f8      	str	r0, [r7, #28]
        break;
 8005c40:	e009      	b.n	8005c56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c46:	61fb      	str	r3, [r7, #28]
        break;
 8005c48:	e005      	b.n	8005c56 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c54:	bf00      	nop
    }

    if (pclk != 0U)
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d019      	beq.n	8005c90 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	085a      	lsrs	r2, r3, #1
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	441a      	add	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	2b0f      	cmp	r3, #15
 8005c74:	d909      	bls.n	8005c8a <UART_SetConfig+0x546>
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c7c:	d205      	bcs.n	8005c8a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60da      	str	r2, [r3, #12]
 8005c88:	e002      	b.n	8005c90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005c9c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3728      	adds	r7, #40	@ 0x28
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005caa:	bf00      	nop
 8005cac:	40008000 	.word	0x40008000
 8005cb0:	00f42400 	.word	0x00f42400

08005cb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d26:	f003 0304 	and.w	r3, r3, #4
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d48:	f003 0310 	and.w	r3, r3, #16
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01a      	beq.n	8005dca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005db2:	d10a      	bne.n	8005dca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	605a      	str	r2, [r3, #4]
  }
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b098      	sub	sp, #96	@ 0x60
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e08:	f7fc f8a6 	bl	8001f58 <HAL_GetTick>
 8005e0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d12e      	bne.n	8005e7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e24:	2200      	movs	r2, #0
 8005e26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f88c 	bl	8005f48 <UART_WaitOnFlagUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d021      	beq.n	8005e7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	461a      	mov	r2, r3
 8005e52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e5c:	e841 2300 	strex	r3, r2, [r1]
 8005e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e6      	bne.n	8005e36 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e062      	b.n	8005f40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d149      	bne.n	8005f1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e90:	2200      	movs	r2, #0
 8005e92:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f856 	bl	8005f48 <UART_WaitOnFlagUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d03c      	beq.n	8005f1c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eaa:	e853 3f00 	ldrex	r3, [r3]
 8005eae:	623b      	str	r3, [r7, #32]
   return(result);
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ec0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e6      	bne.n	8005ea2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3308      	adds	r3, #8
 8005eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0301 	bic.w	r3, r3, #1
 8005eea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ef4:	61fa      	str	r2, [r7, #28]
 8005ef6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef8:	69b9      	ldr	r1, [r7, #24]
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	e841 2300 	strex	r3, r2, [r1]
 8005f00:	617b      	str	r3, [r7, #20]
   return(result);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e5      	bne.n	8005ed4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e011      	b.n	8005f40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3758      	adds	r7, #88	@ 0x58
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	603b      	str	r3, [r7, #0]
 8005f54:	4613      	mov	r3, r2
 8005f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f58:	e04f      	b.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f60:	d04b      	beq.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f62:	f7fb fff9 	bl	8001f58 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d302      	bcc.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e04e      	b.n	800601a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d037      	beq.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b80      	cmp	r3, #128	@ 0x80
 8005f8e:	d034      	beq.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b40      	cmp	r3, #64	@ 0x40
 8005f94:	d031      	beq.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d110      	bne.n	8005fc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2208      	movs	r2, #8
 8005faa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 f838 	bl	8006022 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2208      	movs	r2, #8
 8005fb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e029      	b.n	800601a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fd4:	d111      	bne.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 f81e 	bl	8006022 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e00f      	b.n	800601a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	4013      	ands	r3, r2
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	429a      	cmp	r2, r3
 8006008:	bf0c      	ite	eq
 800600a:	2301      	moveq	r3, #1
 800600c:	2300      	movne	r3, #0
 800600e:	b2db      	uxtb	r3, r3
 8006010:	461a      	mov	r2, r3
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	429a      	cmp	r2, r3
 8006016:	d0a0      	beq.n	8005f5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006022:	b480      	push	{r7}
 8006024:	b095      	sub	sp, #84	@ 0x54
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800603e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006048:	643b      	str	r3, [r7, #64]	@ 0x40
 800604a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800604e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e6      	bne.n	800602a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3308      	adds	r3, #8
 8006062:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	e853 3f00 	ldrex	r3, [r3]
 800606a:	61fb      	str	r3, [r7, #28]
   return(result);
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	f023 0301 	bic.w	r3, r3, #1
 8006072:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3308      	adds	r3, #8
 800607a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800607c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800607e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006080:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006084:	e841 2300 	strex	r3, r2, [r1]
 8006088:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e5      	bne.n	800605c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006094:	2b01      	cmp	r3, #1
 8006096:	d118      	bne.n	80060ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f023 0310 	bic.w	r3, r3, #16
 80060ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060b6:	61bb      	str	r3, [r7, #24]
 80060b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	6979      	ldr	r1, [r7, #20]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	613b      	str	r3, [r7, #16]
   return(result);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e6      	bne.n	8006098 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80060de:	bf00      	nop
 80060e0:	3754      	adds	r7, #84	@ 0x54
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060ea:	b084      	sub	sp, #16
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	f107 001c 	add.w	r0, r7, #28
 80060f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fa69 	bl	80065e0 <USB_CoreReset>
 800610e:	4603      	mov	r3, r0
 8006110:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006112:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	639a      	str	r2, [r3, #56]	@ 0x38
 8006126:	e005      	b.n	8006134 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006140:	b004      	add	sp, #16
 8006142:	4770      	bx	lr

08006144 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f023 0201 	bic.w	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	460b      	mov	r3, r1
 8006170:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d115      	bne.n	80061b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006194:	200a      	movs	r0, #10
 8006196:	f7fb feeb 	bl	8001f70 <HAL_Delay>
      ms += 10U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	330a      	adds	r3, #10
 800619e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fa0f 	bl	80065c4 <USB_GetMode>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d01e      	beq.n	80061ea <USB_SetCurrentMode+0x84>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80061b0:	d9f0      	bls.n	8006194 <USB_SetCurrentMode+0x2e>
 80061b2:	e01a      	b.n	80061ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061b4:	78fb      	ldrb	r3, [r7, #3]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d115      	bne.n	80061e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061c6:	200a      	movs	r0, #10
 80061c8:	f7fb fed2 	bl	8001f70 <HAL_Delay>
      ms += 10U;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	330a      	adds	r3, #10
 80061d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f9f6 	bl	80065c4 <USB_GetMode>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d005      	beq.n	80061ea <USB_SetCurrentMode+0x84>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80061e2:	d9f0      	bls.n	80061c6 <USB_SetCurrentMode+0x60>
 80061e4:	e001      	b.n	80061ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e005      	b.n	80061f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2bc8      	cmp	r3, #200	@ 0xc8
 80061ee:	d101      	bne.n	80061f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e000      	b.n	80061f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
	...

08006200 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006200:	b084      	sub	sp, #16
 8006202:	b580      	push	{r7, lr}
 8006204:	b086      	sub	sp, #24
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800620e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800621a:	2300      	movs	r3, #0
 800621c:	613b      	str	r3, [r7, #16]
 800621e:	e009      	b.n	8006234 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	3340      	adds	r3, #64	@ 0x40
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	2200      	movs	r2, #0
 800622c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	3301      	adds	r3, #1
 8006232:	613b      	str	r3, [r7, #16]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	2b0e      	cmp	r3, #14
 8006238:	d9f2      	bls.n	8006220 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800623a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800623e:	2b00      	cmp	r3, #0
 8006240:	d11c      	bne.n	800627c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006250:	f043 0302 	orr.w	r3, r3, #2
 8006254:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	e005      	b.n	8006288 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006280:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800628e:	461a      	mov	r2, r3
 8006290:	2300      	movs	r3, #0
 8006292:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006294:	2103      	movs	r1, #3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f95a 	bl	8006550 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800629c:	2110      	movs	r1, #16
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f8f6 	bl	8006490 <USB_FlushTxFifo>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f920 	bl	80064f4 <USB_FlushRxFifo>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062c4:	461a      	mov	r2, r3
 80062c6:	2300      	movs	r3, #0
 80062c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062d0:	461a      	mov	r2, r3
 80062d2:	2300      	movs	r3, #0
 80062d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062dc:	461a      	mov	r2, r3
 80062de:	2300      	movs	r3, #0
 80062e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062e2:	2300      	movs	r3, #0
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	e043      	b.n	8006370 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062fe:	d118      	bne.n	8006332 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10a      	bne.n	800631c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006312:	461a      	mov	r2, r3
 8006314:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006318:	6013      	str	r3, [r2, #0]
 800631a:	e013      	b.n	8006344 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006328:	461a      	mov	r2, r3
 800632a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	e008      	b.n	8006344 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800633e:	461a      	mov	r2, r3
 8006340:	2300      	movs	r3, #0
 8006342:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006350:	461a      	mov	r2, r3
 8006352:	2300      	movs	r3, #0
 8006354:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006362:	461a      	mov	r2, r3
 8006364:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006368:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	3301      	adds	r3, #1
 800636e:	613b      	str	r3, [r7, #16]
 8006370:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006374:	461a      	mov	r2, r3
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	4293      	cmp	r3, r2
 800637a:	d3b5      	bcc.n	80062e8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800637c:	2300      	movs	r3, #0
 800637e:	613b      	str	r3, [r7, #16]
 8006380:	e043      	b.n	800640a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006394:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006398:	d118      	bne.n	80063cc <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10a      	bne.n	80063b6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ac:	461a      	mov	r2, r3
 80063ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	e013      	b.n	80063de <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c2:	461a      	mov	r2, r3
 80063c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	e008      	b.n	80063de <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d8:	461a      	mov	r2, r3
 80063da:	2300      	movs	r3, #0
 80063dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ea:	461a      	mov	r2, r3
 80063ec:	2300      	movs	r3, #0
 80063ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063fc:	461a      	mov	r2, r3
 80063fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006402:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	3301      	adds	r3, #1
 8006408:	613b      	str	r3, [r7, #16]
 800640a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800640e:	461a      	mov	r2, r3
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	4293      	cmp	r3, r2
 8006414:	d3b5      	bcc.n	8006382 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006428:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006436:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f043 0210 	orr.w	r2, r3, #16
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699a      	ldr	r2, [r3, #24]
 8006448:	4b10      	ldr	r3, [pc, #64]	@ (800648c <USB_DevInit+0x28c>)
 800644a:	4313      	orrs	r3, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006450:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	f043 0208 	orr.w	r2, r3, #8
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006464:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006468:	2b01      	cmp	r3, #1
 800646a:	d107      	bne.n	800647c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006474:	f043 0304 	orr.w	r3, r3, #4
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800647c:	7dfb      	ldrb	r3, [r7, #23]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006488:	b004      	add	sp, #16
 800648a:	4770      	bx	lr
 800648c:	803c3800 	.word	0x803c3800

08006490 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3301      	adds	r3, #1
 80064a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064aa:	d901      	bls.n	80064b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e01b      	b.n	80064e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	daf2      	bge.n	800649e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	019b      	lsls	r3, r3, #6
 80064c0:	f043 0220 	orr.w	r2, r3, #32
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3301      	adds	r3, #1
 80064cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064d4:	d901      	bls.n	80064da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e006      	b.n	80064e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d0f0      	beq.n	80064c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3301      	adds	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800650c:	d901      	bls.n	8006512 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e018      	b.n	8006544 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	daf2      	bge.n	8006500 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2210      	movs	r2, #16
 8006522:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3301      	adds	r3, #1
 8006528:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006530:	d901      	bls.n	8006536 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e006      	b.n	8006544 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0310 	and.w	r3, r3, #16
 800653e:	2b10      	cmp	r3, #16
 8006540:	d0f0      	beq.n	8006524 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	68f9      	ldr	r1, [r7, #12]
 800656c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006570:	4313      	orrs	r3, r2
 8006572:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006582:	b480      	push	{r7}
 8006584:	b085      	sub	sp, #20
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800659c:	f023 0303 	bic.w	r3, r3, #3
 80065a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065b0:	f043 0302 	orr.w	r3, r3, #2
 80065b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	f003 0301 	and.w	r3, r3, #1
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	3301      	adds	r3, #1
 80065f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065f8:	d901      	bls.n	80065fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e01b      	b.n	8006636 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	daf2      	bge.n	80065ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f043 0201 	orr.w	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3301      	adds	r3, #1
 800661a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006622:	d901      	bls.n	8006628 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e006      	b.n	8006636 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b01      	cmp	r3, #1
 8006632:	d0f0      	beq.n	8006616 <USB_CoreReset+0x36>

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <memset>:
 8006642:	4402      	add	r2, r0
 8006644:	4603      	mov	r3, r0
 8006646:	4293      	cmp	r3, r2
 8006648:	d100      	bne.n	800664c <memset+0xa>
 800664a:	4770      	bx	lr
 800664c:	f803 1b01 	strb.w	r1, [r3], #1
 8006650:	e7f9      	b.n	8006646 <memset+0x4>
	...

08006654 <__libc_init_array>:
 8006654:	b570      	push	{r4, r5, r6, lr}
 8006656:	4d0d      	ldr	r5, [pc, #52]	@ (800668c <__libc_init_array+0x38>)
 8006658:	4c0d      	ldr	r4, [pc, #52]	@ (8006690 <__libc_init_array+0x3c>)
 800665a:	1b64      	subs	r4, r4, r5
 800665c:	10a4      	asrs	r4, r4, #2
 800665e:	2600      	movs	r6, #0
 8006660:	42a6      	cmp	r6, r4
 8006662:	d109      	bne.n	8006678 <__libc_init_array+0x24>
 8006664:	4d0b      	ldr	r5, [pc, #44]	@ (8006694 <__libc_init_array+0x40>)
 8006666:	4c0c      	ldr	r4, [pc, #48]	@ (8006698 <__libc_init_array+0x44>)
 8006668:	f001 f84a 	bl	8007700 <_init>
 800666c:	1b64      	subs	r4, r4, r5
 800666e:	10a4      	asrs	r4, r4, #2
 8006670:	2600      	movs	r6, #0
 8006672:	42a6      	cmp	r6, r4
 8006674:	d105      	bne.n	8006682 <__libc_init_array+0x2e>
 8006676:	bd70      	pop	{r4, r5, r6, pc}
 8006678:	f855 3b04 	ldr.w	r3, [r5], #4
 800667c:	4798      	blx	r3
 800667e:	3601      	adds	r6, #1
 8006680:	e7ee      	b.n	8006660 <__libc_init_array+0xc>
 8006682:	f855 3b04 	ldr.w	r3, [r5], #4
 8006686:	4798      	blx	r3
 8006688:	3601      	adds	r6, #1
 800668a:	e7f2      	b.n	8006672 <__libc_init_array+0x1e>
 800668c:	08007940 	.word	0x08007940
 8006690:	08007940 	.word	0x08007940
 8006694:	08007940 	.word	0x08007940
 8006698:	08007944 	.word	0x08007944
 800669c:	00000000 	.word	0x00000000

080066a0 <sin>:
 80066a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066a2:	ec53 2b10 	vmov	r2, r3, d0
 80066a6:	4826      	ldr	r0, [pc, #152]	@ (8006740 <sin+0xa0>)
 80066a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80066ac:	4281      	cmp	r1, r0
 80066ae:	d807      	bhi.n	80066c0 <sin+0x20>
 80066b0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006738 <sin+0x98>
 80066b4:	2000      	movs	r0, #0
 80066b6:	b005      	add	sp, #20
 80066b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066bc:	f000 b90c 	b.w	80068d8 <__kernel_sin>
 80066c0:	4820      	ldr	r0, [pc, #128]	@ (8006744 <sin+0xa4>)
 80066c2:	4281      	cmp	r1, r0
 80066c4:	d908      	bls.n	80066d8 <sin+0x38>
 80066c6:	4610      	mov	r0, r2
 80066c8:	4619      	mov	r1, r3
 80066ca:	f7f9 fd81 	bl	80001d0 <__aeabi_dsub>
 80066ce:	ec41 0b10 	vmov	d0, r0, r1
 80066d2:	b005      	add	sp, #20
 80066d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80066d8:	4668      	mov	r0, sp
 80066da:	f000 f9b9 	bl	8006a50 <__ieee754_rem_pio2>
 80066de:	f000 0003 	and.w	r0, r0, #3
 80066e2:	2801      	cmp	r0, #1
 80066e4:	d00c      	beq.n	8006700 <sin+0x60>
 80066e6:	2802      	cmp	r0, #2
 80066e8:	d011      	beq.n	800670e <sin+0x6e>
 80066ea:	b9e8      	cbnz	r0, 8006728 <sin+0x88>
 80066ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066f0:	ed9d 0b00 	vldr	d0, [sp]
 80066f4:	2001      	movs	r0, #1
 80066f6:	f000 f8ef 	bl	80068d8 <__kernel_sin>
 80066fa:	ec51 0b10 	vmov	r0, r1, d0
 80066fe:	e7e6      	b.n	80066ce <sin+0x2e>
 8006700:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006704:	ed9d 0b00 	vldr	d0, [sp]
 8006708:	f000 f81e 	bl	8006748 <__kernel_cos>
 800670c:	e7f5      	b.n	80066fa <sin+0x5a>
 800670e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006712:	ed9d 0b00 	vldr	d0, [sp]
 8006716:	2001      	movs	r0, #1
 8006718:	f000 f8de 	bl	80068d8 <__kernel_sin>
 800671c:	ec53 2b10 	vmov	r2, r3, d0
 8006720:	4610      	mov	r0, r2
 8006722:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006726:	e7d2      	b.n	80066ce <sin+0x2e>
 8006728:	ed9d 1b02 	vldr	d1, [sp, #8]
 800672c:	ed9d 0b00 	vldr	d0, [sp]
 8006730:	f000 f80a 	bl	8006748 <__kernel_cos>
 8006734:	e7f2      	b.n	800671c <sin+0x7c>
 8006736:	bf00      	nop
	...
 8006740:	3fe921fb 	.word	0x3fe921fb
 8006744:	7fefffff 	.word	0x7fefffff

08006748 <__kernel_cos>:
 8006748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	ec57 6b10 	vmov	r6, r7, d0
 8006750:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006754:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8006758:	ed8d 1b00 	vstr	d1, [sp]
 800675c:	d206      	bcs.n	800676c <__kernel_cos+0x24>
 800675e:	4630      	mov	r0, r6
 8006760:	4639      	mov	r1, r7
 8006762:	f7fa f987 	bl	8000a74 <__aeabi_d2iz>
 8006766:	2800      	cmp	r0, #0
 8006768:	f000 8088 	beq.w	800687c <__kernel_cos+0x134>
 800676c:	4632      	mov	r2, r6
 800676e:	463b      	mov	r3, r7
 8006770:	4630      	mov	r0, r6
 8006772:	4639      	mov	r1, r7
 8006774:	f7f9 fee4 	bl	8000540 <__aeabi_dmul>
 8006778:	4b51      	ldr	r3, [pc, #324]	@ (80068c0 <__kernel_cos+0x178>)
 800677a:	2200      	movs	r2, #0
 800677c:	4604      	mov	r4, r0
 800677e:	460d      	mov	r5, r1
 8006780:	f7f9 fede 	bl	8000540 <__aeabi_dmul>
 8006784:	a340      	add	r3, pc, #256	@ (adr r3, 8006888 <__kernel_cos+0x140>)
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	4682      	mov	sl, r0
 800678c:	468b      	mov	fp, r1
 800678e:	4620      	mov	r0, r4
 8006790:	4629      	mov	r1, r5
 8006792:	f7f9 fed5 	bl	8000540 <__aeabi_dmul>
 8006796:	a33e      	add	r3, pc, #248	@ (adr r3, 8006890 <__kernel_cos+0x148>)
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f7f9 fd1a 	bl	80001d4 <__adddf3>
 80067a0:	4622      	mov	r2, r4
 80067a2:	462b      	mov	r3, r5
 80067a4:	f7f9 fecc 	bl	8000540 <__aeabi_dmul>
 80067a8:	a33b      	add	r3, pc, #236	@ (adr r3, 8006898 <__kernel_cos+0x150>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f7f9 fd0f 	bl	80001d0 <__aeabi_dsub>
 80067b2:	4622      	mov	r2, r4
 80067b4:	462b      	mov	r3, r5
 80067b6:	f7f9 fec3 	bl	8000540 <__aeabi_dmul>
 80067ba:	a339      	add	r3, pc, #228	@ (adr r3, 80068a0 <__kernel_cos+0x158>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f7f9 fd08 	bl	80001d4 <__adddf3>
 80067c4:	4622      	mov	r2, r4
 80067c6:	462b      	mov	r3, r5
 80067c8:	f7f9 feba 	bl	8000540 <__aeabi_dmul>
 80067cc:	a336      	add	r3, pc, #216	@ (adr r3, 80068a8 <__kernel_cos+0x160>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f7f9 fcfd 	bl	80001d0 <__aeabi_dsub>
 80067d6:	4622      	mov	r2, r4
 80067d8:	462b      	mov	r3, r5
 80067da:	f7f9 feb1 	bl	8000540 <__aeabi_dmul>
 80067de:	a334      	add	r3, pc, #208	@ (adr r3, 80068b0 <__kernel_cos+0x168>)
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f7f9 fcf6 	bl	80001d4 <__adddf3>
 80067e8:	4622      	mov	r2, r4
 80067ea:	462b      	mov	r3, r5
 80067ec:	f7f9 fea8 	bl	8000540 <__aeabi_dmul>
 80067f0:	4622      	mov	r2, r4
 80067f2:	462b      	mov	r3, r5
 80067f4:	f7f9 fea4 	bl	8000540 <__aeabi_dmul>
 80067f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067fc:	4604      	mov	r4, r0
 80067fe:	460d      	mov	r5, r1
 8006800:	4630      	mov	r0, r6
 8006802:	4639      	mov	r1, r7
 8006804:	f7f9 fe9c 	bl	8000540 <__aeabi_dmul>
 8006808:	460b      	mov	r3, r1
 800680a:	4602      	mov	r2, r0
 800680c:	4629      	mov	r1, r5
 800680e:	4620      	mov	r0, r4
 8006810:	f7f9 fcde 	bl	80001d0 <__aeabi_dsub>
 8006814:	4b2b      	ldr	r3, [pc, #172]	@ (80068c4 <__kernel_cos+0x17c>)
 8006816:	4598      	cmp	r8, r3
 8006818:	4606      	mov	r6, r0
 800681a:	460f      	mov	r7, r1
 800681c:	d810      	bhi.n	8006840 <__kernel_cos+0xf8>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4650      	mov	r0, sl
 8006824:	4659      	mov	r1, fp
 8006826:	f7f9 fcd3 	bl	80001d0 <__aeabi_dsub>
 800682a:	460b      	mov	r3, r1
 800682c:	4926      	ldr	r1, [pc, #152]	@ (80068c8 <__kernel_cos+0x180>)
 800682e:	4602      	mov	r2, r0
 8006830:	2000      	movs	r0, #0
 8006832:	f7f9 fccd 	bl	80001d0 <__aeabi_dsub>
 8006836:	ec41 0b10 	vmov	d0, r0, r1
 800683a:	b003      	add	sp, #12
 800683c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006840:	4b22      	ldr	r3, [pc, #136]	@ (80068cc <__kernel_cos+0x184>)
 8006842:	4921      	ldr	r1, [pc, #132]	@ (80068c8 <__kernel_cos+0x180>)
 8006844:	4598      	cmp	r8, r3
 8006846:	bf8c      	ite	hi
 8006848:	4d21      	ldrhi	r5, [pc, #132]	@ (80068d0 <__kernel_cos+0x188>)
 800684a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800684e:	2400      	movs	r4, #0
 8006850:	4622      	mov	r2, r4
 8006852:	462b      	mov	r3, r5
 8006854:	2000      	movs	r0, #0
 8006856:	f7f9 fcbb 	bl	80001d0 <__aeabi_dsub>
 800685a:	4622      	mov	r2, r4
 800685c:	4680      	mov	r8, r0
 800685e:	4689      	mov	r9, r1
 8006860:	462b      	mov	r3, r5
 8006862:	4650      	mov	r0, sl
 8006864:	4659      	mov	r1, fp
 8006866:	f7f9 fcb3 	bl	80001d0 <__aeabi_dsub>
 800686a:	4632      	mov	r2, r6
 800686c:	463b      	mov	r3, r7
 800686e:	f7f9 fcaf 	bl	80001d0 <__aeabi_dsub>
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	4640      	mov	r0, r8
 8006878:	4649      	mov	r1, r9
 800687a:	e7da      	b.n	8006832 <__kernel_cos+0xea>
 800687c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80068b8 <__kernel_cos+0x170>
 8006880:	e7db      	b.n	800683a <__kernel_cos+0xf2>
 8006882:	bf00      	nop
 8006884:	f3af 8000 	nop.w
 8006888:	be8838d4 	.word	0xbe8838d4
 800688c:	bda8fae9 	.word	0xbda8fae9
 8006890:	bdb4b1c4 	.word	0xbdb4b1c4
 8006894:	3e21ee9e 	.word	0x3e21ee9e
 8006898:	809c52ad 	.word	0x809c52ad
 800689c:	3e927e4f 	.word	0x3e927e4f
 80068a0:	19cb1590 	.word	0x19cb1590
 80068a4:	3efa01a0 	.word	0x3efa01a0
 80068a8:	16c15177 	.word	0x16c15177
 80068ac:	3f56c16c 	.word	0x3f56c16c
 80068b0:	5555554c 	.word	0x5555554c
 80068b4:	3fa55555 	.word	0x3fa55555
 80068b8:	00000000 	.word	0x00000000
 80068bc:	3ff00000 	.word	0x3ff00000
 80068c0:	3fe00000 	.word	0x3fe00000
 80068c4:	3fd33332 	.word	0x3fd33332
 80068c8:	3ff00000 	.word	0x3ff00000
 80068cc:	3fe90000 	.word	0x3fe90000
 80068d0:	3fd20000 	.word	0x3fd20000
 80068d4:	00000000 	.word	0x00000000

080068d8 <__kernel_sin>:
 80068d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068dc:	ec55 4b10 	vmov	r4, r5, d0
 80068e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80068e4:	b085      	sub	sp, #20
 80068e6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80068ea:	ed8d 1b02 	vstr	d1, [sp, #8]
 80068ee:	4680      	mov	r8, r0
 80068f0:	d205      	bcs.n	80068fe <__kernel_sin+0x26>
 80068f2:	4620      	mov	r0, r4
 80068f4:	4629      	mov	r1, r5
 80068f6:	f7fa f8bd 	bl	8000a74 <__aeabi_d2iz>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	d052      	beq.n	80069a4 <__kernel_sin+0xcc>
 80068fe:	4622      	mov	r2, r4
 8006900:	462b      	mov	r3, r5
 8006902:	4620      	mov	r0, r4
 8006904:	4629      	mov	r1, r5
 8006906:	f7f9 fe1b 	bl	8000540 <__aeabi_dmul>
 800690a:	4682      	mov	sl, r0
 800690c:	468b      	mov	fp, r1
 800690e:	4602      	mov	r2, r0
 8006910:	460b      	mov	r3, r1
 8006912:	4620      	mov	r0, r4
 8006914:	4629      	mov	r1, r5
 8006916:	f7f9 fe13 	bl	8000540 <__aeabi_dmul>
 800691a:	a342      	add	r3, pc, #264	@ (adr r3, 8006a24 <__kernel_sin+0x14c>)
 800691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006920:	e9cd 0100 	strd	r0, r1, [sp]
 8006924:	4650      	mov	r0, sl
 8006926:	4659      	mov	r1, fp
 8006928:	f7f9 fe0a 	bl	8000540 <__aeabi_dmul>
 800692c:	a33f      	add	r3, pc, #252	@ (adr r3, 8006a2c <__kernel_sin+0x154>)
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	f7f9 fc4d 	bl	80001d0 <__aeabi_dsub>
 8006936:	4652      	mov	r2, sl
 8006938:	465b      	mov	r3, fp
 800693a:	f7f9 fe01 	bl	8000540 <__aeabi_dmul>
 800693e:	a33d      	add	r3, pc, #244	@ (adr r3, 8006a34 <__kernel_sin+0x15c>)
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	f7f9 fc46 	bl	80001d4 <__adddf3>
 8006948:	4652      	mov	r2, sl
 800694a:	465b      	mov	r3, fp
 800694c:	f7f9 fdf8 	bl	8000540 <__aeabi_dmul>
 8006950:	a33a      	add	r3, pc, #232	@ (adr r3, 8006a3c <__kernel_sin+0x164>)
 8006952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006956:	f7f9 fc3b 	bl	80001d0 <__aeabi_dsub>
 800695a:	4652      	mov	r2, sl
 800695c:	465b      	mov	r3, fp
 800695e:	f7f9 fdef 	bl	8000540 <__aeabi_dmul>
 8006962:	a338      	add	r3, pc, #224	@ (adr r3, 8006a44 <__kernel_sin+0x16c>)
 8006964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006968:	f7f9 fc34 	bl	80001d4 <__adddf3>
 800696c:	4606      	mov	r6, r0
 800696e:	460f      	mov	r7, r1
 8006970:	f1b8 0f00 	cmp.w	r8, #0
 8006974:	d11b      	bne.n	80069ae <__kernel_sin+0xd6>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	4650      	mov	r0, sl
 800697c:	4659      	mov	r1, fp
 800697e:	f7f9 fddf 	bl	8000540 <__aeabi_dmul>
 8006982:	a325      	add	r3, pc, #148	@ (adr r3, 8006a18 <__kernel_sin+0x140>)
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f7f9 fc22 	bl	80001d0 <__aeabi_dsub>
 800698c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006990:	f7f9 fdd6 	bl	8000540 <__aeabi_dmul>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4620      	mov	r0, r4
 800699a:	4629      	mov	r1, r5
 800699c:	f7f9 fc1a 	bl	80001d4 <__adddf3>
 80069a0:	4604      	mov	r4, r0
 80069a2:	460d      	mov	r5, r1
 80069a4:	ec45 4b10 	vmov	d0, r4, r5
 80069a8:	b005      	add	sp, #20
 80069aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006a20 <__kernel_sin+0x148>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	f7f9 fdc3 	bl	8000540 <__aeabi_dmul>
 80069ba:	4632      	mov	r2, r6
 80069bc:	4680      	mov	r8, r0
 80069be:	4689      	mov	r9, r1
 80069c0:	463b      	mov	r3, r7
 80069c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069c6:	f7f9 fdbb 	bl	8000540 <__aeabi_dmul>
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	4640      	mov	r0, r8
 80069d0:	4649      	mov	r1, r9
 80069d2:	f7f9 fbfd 	bl	80001d0 <__aeabi_dsub>
 80069d6:	4652      	mov	r2, sl
 80069d8:	465b      	mov	r3, fp
 80069da:	f7f9 fdb1 	bl	8000540 <__aeabi_dmul>
 80069de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069e2:	f7f9 fbf5 	bl	80001d0 <__aeabi_dsub>
 80069e6:	a30c      	add	r3, pc, #48	@ (adr r3, 8006a18 <__kernel_sin+0x140>)
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	4606      	mov	r6, r0
 80069ee:	460f      	mov	r7, r1
 80069f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069f4:	f7f9 fda4 	bl	8000540 <__aeabi_dmul>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4630      	mov	r0, r6
 80069fe:	4639      	mov	r1, r7
 8006a00:	f7f9 fbe8 	bl	80001d4 <__adddf3>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4620      	mov	r0, r4
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	f7f9 fbe0 	bl	80001d0 <__aeabi_dsub>
 8006a10:	e7c6      	b.n	80069a0 <__kernel_sin+0xc8>
 8006a12:	bf00      	nop
 8006a14:	f3af 8000 	nop.w
 8006a18:	55555549 	.word	0x55555549
 8006a1c:	3fc55555 	.word	0x3fc55555
 8006a20:	3fe00000 	.word	0x3fe00000
 8006a24:	5acfd57c 	.word	0x5acfd57c
 8006a28:	3de5d93a 	.word	0x3de5d93a
 8006a2c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006a30:	3e5ae5e6 	.word	0x3e5ae5e6
 8006a34:	57b1fe7d 	.word	0x57b1fe7d
 8006a38:	3ec71de3 	.word	0x3ec71de3
 8006a3c:	19c161d5 	.word	0x19c161d5
 8006a40:	3f2a01a0 	.word	0x3f2a01a0
 8006a44:	1110f8a6 	.word	0x1110f8a6
 8006a48:	3f811111 	.word	0x3f811111
 8006a4c:	00000000 	.word	0x00000000

08006a50 <__ieee754_rem_pio2>:
 8006a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a54:	ec57 6b10 	vmov	r6, r7, d0
 8006a58:	4bc5      	ldr	r3, [pc, #788]	@ (8006d70 <__ieee754_rem_pio2+0x320>)
 8006a5a:	b08d      	sub	sp, #52	@ 0x34
 8006a5c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006a60:	4598      	cmp	r8, r3
 8006a62:	4604      	mov	r4, r0
 8006a64:	9704      	str	r7, [sp, #16]
 8006a66:	d807      	bhi.n	8006a78 <__ieee754_rem_pio2+0x28>
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	ed80 0b00 	vstr	d0, [r0]
 8006a70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006a74:	2500      	movs	r5, #0
 8006a76:	e028      	b.n	8006aca <__ieee754_rem_pio2+0x7a>
 8006a78:	4bbe      	ldr	r3, [pc, #760]	@ (8006d74 <__ieee754_rem_pio2+0x324>)
 8006a7a:	4598      	cmp	r8, r3
 8006a7c:	d878      	bhi.n	8006b70 <__ieee754_rem_pio2+0x120>
 8006a7e:	9b04      	ldr	r3, [sp, #16]
 8006a80:	4dbd      	ldr	r5, [pc, #756]	@ (8006d78 <__ieee754_rem_pio2+0x328>)
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	4630      	mov	r0, r6
 8006a86:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006d38 <__ieee754_rem_pio2+0x2e8>)
 8006a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8c:	4639      	mov	r1, r7
 8006a8e:	dd38      	ble.n	8006b02 <__ieee754_rem_pio2+0xb2>
 8006a90:	f7f9 fb9e 	bl	80001d0 <__aeabi_dsub>
 8006a94:	45a8      	cmp	r8, r5
 8006a96:	4606      	mov	r6, r0
 8006a98:	460f      	mov	r7, r1
 8006a9a:	d01a      	beq.n	8006ad2 <__ieee754_rem_pio2+0x82>
 8006a9c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006d40 <__ieee754_rem_pio2+0x2f0>)
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	f7f9 fb95 	bl	80001d0 <__aeabi_dsub>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4680      	mov	r8, r0
 8006aac:	4689      	mov	r9, r1
 8006aae:	4630      	mov	r0, r6
 8006ab0:	4639      	mov	r1, r7
 8006ab2:	f7f9 fb8d 	bl	80001d0 <__aeabi_dsub>
 8006ab6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006d40 <__ieee754_rem_pio2+0x2f0>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f7f9 fb88 	bl	80001d0 <__aeabi_dsub>
 8006ac0:	e9c4 8900 	strd	r8, r9, [r4]
 8006ac4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006ac8:	2501      	movs	r5, #1
 8006aca:	4628      	mov	r0, r5
 8006acc:	b00d      	add	sp, #52	@ 0x34
 8006ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad2:	a39d      	add	r3, pc, #628	@ (adr r3, 8006d48 <__ieee754_rem_pio2+0x2f8>)
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	f7f9 fb7a 	bl	80001d0 <__aeabi_dsub>
 8006adc:	a39c      	add	r3, pc, #624	@ (adr r3, 8006d50 <__ieee754_rem_pio2+0x300>)
 8006ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	460f      	mov	r7, r1
 8006ae6:	f7f9 fb73 	bl	80001d0 <__aeabi_dsub>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4680      	mov	r8, r0
 8006af0:	4689      	mov	r9, r1
 8006af2:	4630      	mov	r0, r6
 8006af4:	4639      	mov	r1, r7
 8006af6:	f7f9 fb6b 	bl	80001d0 <__aeabi_dsub>
 8006afa:	a395      	add	r3, pc, #596	@ (adr r3, 8006d50 <__ieee754_rem_pio2+0x300>)
 8006afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b00:	e7dc      	b.n	8006abc <__ieee754_rem_pio2+0x6c>
 8006b02:	f7f9 fb67 	bl	80001d4 <__adddf3>
 8006b06:	45a8      	cmp	r8, r5
 8006b08:	4606      	mov	r6, r0
 8006b0a:	460f      	mov	r7, r1
 8006b0c:	d018      	beq.n	8006b40 <__ieee754_rem_pio2+0xf0>
 8006b0e:	a38c      	add	r3, pc, #560	@ (adr r3, 8006d40 <__ieee754_rem_pio2+0x2f0>)
 8006b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b14:	f7f9 fb5e 	bl	80001d4 <__adddf3>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4680      	mov	r8, r0
 8006b1e:	4689      	mov	r9, r1
 8006b20:	4630      	mov	r0, r6
 8006b22:	4639      	mov	r1, r7
 8006b24:	f7f9 fb54 	bl	80001d0 <__aeabi_dsub>
 8006b28:	a385      	add	r3, pc, #532	@ (adr r3, 8006d40 <__ieee754_rem_pio2+0x2f0>)
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	f7f9 fb51 	bl	80001d4 <__adddf3>
 8006b32:	f04f 35ff 	mov.w	r5, #4294967295
 8006b36:	e9c4 8900 	strd	r8, r9, [r4]
 8006b3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006b3e:	e7c4      	b.n	8006aca <__ieee754_rem_pio2+0x7a>
 8006b40:	a381      	add	r3, pc, #516	@ (adr r3, 8006d48 <__ieee754_rem_pio2+0x2f8>)
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	f7f9 fb45 	bl	80001d4 <__adddf3>
 8006b4a:	a381      	add	r3, pc, #516	@ (adr r3, 8006d50 <__ieee754_rem_pio2+0x300>)
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	4606      	mov	r6, r0
 8006b52:	460f      	mov	r7, r1
 8006b54:	f7f9 fb3e 	bl	80001d4 <__adddf3>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4680      	mov	r8, r0
 8006b5e:	4689      	mov	r9, r1
 8006b60:	4630      	mov	r0, r6
 8006b62:	4639      	mov	r1, r7
 8006b64:	f7f9 fb34 	bl	80001d0 <__aeabi_dsub>
 8006b68:	a379      	add	r3, pc, #484	@ (adr r3, 8006d50 <__ieee754_rem_pio2+0x300>)
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	e7de      	b.n	8006b2e <__ieee754_rem_pio2+0xde>
 8006b70:	4b82      	ldr	r3, [pc, #520]	@ (8006d7c <__ieee754_rem_pio2+0x32c>)
 8006b72:	4598      	cmp	r8, r3
 8006b74:	f200 80d1 	bhi.w	8006d1a <__ieee754_rem_pio2+0x2ca>
 8006b78:	f000 f966 	bl	8006e48 <fabs>
 8006b7c:	ec57 6b10 	vmov	r6, r7, d0
 8006b80:	a375      	add	r3, pc, #468	@ (adr r3, 8006d58 <__ieee754_rem_pio2+0x308>)
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	4630      	mov	r0, r6
 8006b88:	4639      	mov	r1, r7
 8006b8a:	f7f9 fcd9 	bl	8000540 <__aeabi_dmul>
 8006b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8006d80 <__ieee754_rem_pio2+0x330>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	f7f9 fb1f 	bl	80001d4 <__adddf3>
 8006b96:	f7f9 ff6d 	bl	8000a74 <__aeabi_d2iz>
 8006b9a:	4605      	mov	r5, r0
 8006b9c:	f7f9 fc66 	bl	800046c <__aeabi_i2d>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ba8:	a363      	add	r3, pc, #396	@ (adr r3, 8006d38 <__ieee754_rem_pio2+0x2e8>)
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	f7f9 fcc7 	bl	8000540 <__aeabi_dmul>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	4639      	mov	r1, r7
 8006bba:	f7f9 fb09 	bl	80001d0 <__aeabi_dsub>
 8006bbe:	a360      	add	r3, pc, #384	@ (adr r3, 8006d40 <__ieee754_rem_pio2+0x2f0>)
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	4682      	mov	sl, r0
 8006bc6:	468b      	mov	fp, r1
 8006bc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bcc:	f7f9 fcb8 	bl	8000540 <__aeabi_dmul>
 8006bd0:	2d1f      	cmp	r5, #31
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	460f      	mov	r7, r1
 8006bd6:	dc0c      	bgt.n	8006bf2 <__ieee754_rem_pio2+0x1a2>
 8006bd8:	4b6a      	ldr	r3, [pc, #424]	@ (8006d84 <__ieee754_rem_pio2+0x334>)
 8006bda:	1e6a      	subs	r2, r5, #1
 8006bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be0:	4543      	cmp	r3, r8
 8006be2:	d006      	beq.n	8006bf2 <__ieee754_rem_pio2+0x1a2>
 8006be4:	4632      	mov	r2, r6
 8006be6:	463b      	mov	r3, r7
 8006be8:	4650      	mov	r0, sl
 8006bea:	4659      	mov	r1, fp
 8006bec:	f7f9 faf0 	bl	80001d0 <__aeabi_dsub>
 8006bf0:	e00e      	b.n	8006c10 <__ieee754_rem_pio2+0x1c0>
 8006bf2:	463b      	mov	r3, r7
 8006bf4:	4632      	mov	r2, r6
 8006bf6:	4650      	mov	r0, sl
 8006bf8:	4659      	mov	r1, fp
 8006bfa:	f7f9 fae9 	bl	80001d0 <__aeabi_dsub>
 8006bfe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006c02:	9305      	str	r3, [sp, #20]
 8006c04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006c08:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006c0c:	2b10      	cmp	r3, #16
 8006c0e:	dc02      	bgt.n	8006c16 <__ieee754_rem_pio2+0x1c6>
 8006c10:	e9c4 0100 	strd	r0, r1, [r4]
 8006c14:	e039      	b.n	8006c8a <__ieee754_rem_pio2+0x23a>
 8006c16:	a34c      	add	r3, pc, #304	@ (adr r3, 8006d48 <__ieee754_rem_pio2+0x2f8>)
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c20:	f7f9 fc8e 	bl	8000540 <__aeabi_dmul>
 8006c24:	4606      	mov	r6, r0
 8006c26:	460f      	mov	r7, r1
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4650      	mov	r0, sl
 8006c2e:	4659      	mov	r1, fp
 8006c30:	f7f9 face 	bl	80001d0 <__aeabi_dsub>
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4680      	mov	r8, r0
 8006c3a:	4689      	mov	r9, r1
 8006c3c:	4650      	mov	r0, sl
 8006c3e:	4659      	mov	r1, fp
 8006c40:	f7f9 fac6 	bl	80001d0 <__aeabi_dsub>
 8006c44:	4632      	mov	r2, r6
 8006c46:	463b      	mov	r3, r7
 8006c48:	f7f9 fac2 	bl	80001d0 <__aeabi_dsub>
 8006c4c:	a340      	add	r3, pc, #256	@ (adr r3, 8006d50 <__ieee754_rem_pio2+0x300>)
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	4606      	mov	r6, r0
 8006c54:	460f      	mov	r7, r1
 8006c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c5a:	f7f9 fc71 	bl	8000540 <__aeabi_dmul>
 8006c5e:	4632      	mov	r2, r6
 8006c60:	463b      	mov	r3, r7
 8006c62:	f7f9 fab5 	bl	80001d0 <__aeabi_dsub>
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	460f      	mov	r7, r1
 8006c6e:	4640      	mov	r0, r8
 8006c70:	4649      	mov	r1, r9
 8006c72:	f7f9 faad 	bl	80001d0 <__aeabi_dsub>
 8006c76:	9a05      	ldr	r2, [sp, #20]
 8006c78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b31      	cmp	r3, #49	@ 0x31
 8006c80:	dc20      	bgt.n	8006cc4 <__ieee754_rem_pio2+0x274>
 8006c82:	e9c4 0100 	strd	r0, r1, [r4]
 8006c86:	46c2      	mov	sl, r8
 8006c88:	46cb      	mov	fp, r9
 8006c8a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006c8e:	4650      	mov	r0, sl
 8006c90:	4642      	mov	r2, r8
 8006c92:	464b      	mov	r3, r9
 8006c94:	4659      	mov	r1, fp
 8006c96:	f7f9 fa9b 	bl	80001d0 <__aeabi_dsub>
 8006c9a:	463b      	mov	r3, r7
 8006c9c:	4632      	mov	r2, r6
 8006c9e:	f7f9 fa97 	bl	80001d0 <__aeabi_dsub>
 8006ca2:	9b04      	ldr	r3, [sp, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006caa:	f6bf af0e 	bge.w	8006aca <__ieee754_rem_pio2+0x7a>
 8006cae:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8006cb2:	6063      	str	r3, [r4, #4]
 8006cb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006cb8:	f8c4 8000 	str.w	r8, [r4]
 8006cbc:	60a0      	str	r0, [r4, #8]
 8006cbe:	60e3      	str	r3, [r4, #12]
 8006cc0:	426d      	negs	r5, r5
 8006cc2:	e702      	b.n	8006aca <__ieee754_rem_pio2+0x7a>
 8006cc4:	a326      	add	r3, pc, #152	@ (adr r3, 8006d60 <__ieee754_rem_pio2+0x310>)
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cce:	f7f9 fc37 	bl	8000540 <__aeabi_dmul>
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	460f      	mov	r7, r1
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4640      	mov	r0, r8
 8006cdc:	4649      	mov	r1, r9
 8006cde:	f7f9 fa77 	bl	80001d0 <__aeabi_dsub>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4682      	mov	sl, r0
 8006ce8:	468b      	mov	fp, r1
 8006cea:	4640      	mov	r0, r8
 8006cec:	4649      	mov	r1, r9
 8006cee:	f7f9 fa6f 	bl	80001d0 <__aeabi_dsub>
 8006cf2:	4632      	mov	r2, r6
 8006cf4:	463b      	mov	r3, r7
 8006cf6:	f7f9 fa6b 	bl	80001d0 <__aeabi_dsub>
 8006cfa:	a31b      	add	r3, pc, #108	@ (adr r3, 8006d68 <__ieee754_rem_pio2+0x318>)
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	4606      	mov	r6, r0
 8006d02:	460f      	mov	r7, r1
 8006d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d08:	f7f9 fc1a 	bl	8000540 <__aeabi_dmul>
 8006d0c:	4632      	mov	r2, r6
 8006d0e:	463b      	mov	r3, r7
 8006d10:	f7f9 fa5e 	bl	80001d0 <__aeabi_dsub>
 8006d14:	4606      	mov	r6, r0
 8006d16:	460f      	mov	r7, r1
 8006d18:	e764      	b.n	8006be4 <__ieee754_rem_pio2+0x194>
 8006d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8006d88 <__ieee754_rem_pio2+0x338>)
 8006d1c:	4598      	cmp	r8, r3
 8006d1e:	d935      	bls.n	8006d8c <__ieee754_rem_pio2+0x33c>
 8006d20:	4632      	mov	r2, r6
 8006d22:	463b      	mov	r3, r7
 8006d24:	4630      	mov	r0, r6
 8006d26:	4639      	mov	r1, r7
 8006d28:	f7f9 fa52 	bl	80001d0 <__aeabi_dsub>
 8006d2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006d30:	e9c4 0100 	strd	r0, r1, [r4]
 8006d34:	e69e      	b.n	8006a74 <__ieee754_rem_pio2+0x24>
 8006d36:	bf00      	nop
 8006d38:	54400000 	.word	0x54400000
 8006d3c:	3ff921fb 	.word	0x3ff921fb
 8006d40:	1a626331 	.word	0x1a626331
 8006d44:	3dd0b461 	.word	0x3dd0b461
 8006d48:	1a600000 	.word	0x1a600000
 8006d4c:	3dd0b461 	.word	0x3dd0b461
 8006d50:	2e037073 	.word	0x2e037073
 8006d54:	3ba3198a 	.word	0x3ba3198a
 8006d58:	6dc9c883 	.word	0x6dc9c883
 8006d5c:	3fe45f30 	.word	0x3fe45f30
 8006d60:	2e000000 	.word	0x2e000000
 8006d64:	3ba3198a 	.word	0x3ba3198a
 8006d68:	252049c1 	.word	0x252049c1
 8006d6c:	397b839a 	.word	0x397b839a
 8006d70:	3fe921fb 	.word	0x3fe921fb
 8006d74:	4002d97b 	.word	0x4002d97b
 8006d78:	3ff921fb 	.word	0x3ff921fb
 8006d7c:	413921fb 	.word	0x413921fb
 8006d80:	3fe00000 	.word	0x3fe00000
 8006d84:	08007760 	.word	0x08007760
 8006d88:	7fefffff 	.word	0x7fefffff
 8006d8c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006d90:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8006d94:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006d98:	4630      	mov	r0, r6
 8006d9a:	460f      	mov	r7, r1
 8006d9c:	f7f9 fe6a 	bl	8000a74 <__aeabi_d2iz>
 8006da0:	f7f9 fb64 	bl	800046c <__aeabi_i2d>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4630      	mov	r0, r6
 8006daa:	4639      	mov	r1, r7
 8006dac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006db0:	f7f9 fa0e 	bl	80001d0 <__aeabi_dsub>
 8006db4:	4b22      	ldr	r3, [pc, #136]	@ (8006e40 <__ieee754_rem_pio2+0x3f0>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	f7f9 fbc2 	bl	8000540 <__aeabi_dmul>
 8006dbc:	460f      	mov	r7, r1
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	f7f9 fe58 	bl	8000a74 <__aeabi_d2iz>
 8006dc4:	f7f9 fb52 	bl	800046c <__aeabi_i2d>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4630      	mov	r0, r6
 8006dce:	4639      	mov	r1, r7
 8006dd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006dd4:	f7f9 f9fc 	bl	80001d0 <__aeabi_dsub>
 8006dd8:	4b19      	ldr	r3, [pc, #100]	@ (8006e40 <__ieee754_rem_pio2+0x3f0>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f7f9 fbb0 	bl	8000540 <__aeabi_dmul>
 8006de0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8006de4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006de8:	f04f 0803 	mov.w	r8, #3
 8006dec:	2600      	movs	r6, #0
 8006dee:	2700      	movs	r7, #0
 8006df0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006df4:	4632      	mov	r2, r6
 8006df6:	463b      	mov	r3, r7
 8006df8:	46c2      	mov	sl, r8
 8006dfa:	f108 38ff 	add.w	r8, r8, #4294967295
 8006dfe:	f7f9 fe07 	bl	8000a10 <__aeabi_dcmpeq>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	d1f4      	bne.n	8006df0 <__ieee754_rem_pio2+0x3a0>
 8006e06:	4b0f      	ldr	r3, [pc, #60]	@ (8006e44 <__ieee754_rem_pio2+0x3f4>)
 8006e08:	9301      	str	r3, [sp, #4]
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	462a      	mov	r2, r5
 8006e10:	4653      	mov	r3, sl
 8006e12:	4621      	mov	r1, r4
 8006e14:	a806      	add	r0, sp, #24
 8006e16:	f000 f81f 	bl	8006e58 <__kernel_rem_pio2>
 8006e1a:	9b04      	ldr	r3, [sp, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	4605      	mov	r5, r0
 8006e20:	f6bf ae53 	bge.w	8006aca <__ieee754_rem_pio2+0x7a>
 8006e24:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006e28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e2c:	e9c4 2300 	strd	r2, r3, [r4]
 8006e30:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006e34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e38:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006e3c:	e740      	b.n	8006cc0 <__ieee754_rem_pio2+0x270>
 8006e3e:	bf00      	nop
 8006e40:	41700000 	.word	0x41700000
 8006e44:	080077e0 	.word	0x080077e0

08006e48 <fabs>:
 8006e48:	ec51 0b10 	vmov	r0, r1, d0
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006e52:	ec43 2b10 	vmov	d0, r2, r3
 8006e56:	4770      	bx	lr

08006e58 <__kernel_rem_pio2>:
 8006e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5c:	ed2d 8b02 	vpush	{d8}
 8006e60:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006e64:	f112 0f14 	cmn.w	r2, #20
 8006e68:	9306      	str	r3, [sp, #24]
 8006e6a:	9104      	str	r1, [sp, #16]
 8006e6c:	4bbe      	ldr	r3, [pc, #760]	@ (8007168 <__kernel_rem_pio2+0x310>)
 8006e6e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006e70:	9008      	str	r0, [sp, #32]
 8006e72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	9b06      	ldr	r3, [sp, #24]
 8006e7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e7e:	bfa8      	it	ge
 8006e80:	1ed4      	subge	r4, r2, #3
 8006e82:	9305      	str	r3, [sp, #20]
 8006e84:	bfb2      	itee	lt
 8006e86:	2400      	movlt	r4, #0
 8006e88:	2318      	movge	r3, #24
 8006e8a:	fb94 f4f3 	sdivge	r4, r4, r3
 8006e8e:	f06f 0317 	mvn.w	r3, #23
 8006e92:	fb04 3303 	mla	r3, r4, r3, r3
 8006e96:	eb03 0b02 	add.w	fp, r3, r2
 8006e9a:	9b00      	ldr	r3, [sp, #0]
 8006e9c:	9a05      	ldr	r2, [sp, #20]
 8006e9e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8007158 <__kernel_rem_pio2+0x300>
 8006ea2:	eb03 0802 	add.w	r8, r3, r2
 8006ea6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006ea8:	1aa7      	subs	r7, r4, r2
 8006eaa:	ae20      	add	r6, sp, #128	@ 0x80
 8006eac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006eb0:	2500      	movs	r5, #0
 8006eb2:	4545      	cmp	r5, r8
 8006eb4:	dd13      	ble.n	8006ede <__kernel_rem_pio2+0x86>
 8006eb6:	9b06      	ldr	r3, [sp, #24]
 8006eb8:	aa20      	add	r2, sp, #128	@ 0x80
 8006eba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006ebe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8006ec2:	f04f 0800 	mov.w	r8, #0
 8006ec6:	9b00      	ldr	r3, [sp, #0]
 8006ec8:	4598      	cmp	r8, r3
 8006eca:	dc31      	bgt.n	8006f30 <__kernel_rem_pio2+0xd8>
 8006ecc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8007158 <__kernel_rem_pio2+0x300>
 8006ed0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ed4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006ed8:	462f      	mov	r7, r5
 8006eda:	2600      	movs	r6, #0
 8006edc:	e01b      	b.n	8006f16 <__kernel_rem_pio2+0xbe>
 8006ede:	42ef      	cmn	r7, r5
 8006ee0:	d407      	bmi.n	8006ef2 <__kernel_rem_pio2+0x9a>
 8006ee2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006ee6:	f7f9 fac1 	bl	800046c <__aeabi_i2d>
 8006eea:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006eee:	3501      	adds	r5, #1
 8006ef0:	e7df      	b.n	8006eb2 <__kernel_rem_pio2+0x5a>
 8006ef2:	ec51 0b18 	vmov	r0, r1, d8
 8006ef6:	e7f8      	b.n	8006eea <__kernel_rem_pio2+0x92>
 8006ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006efc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006f00:	f7f9 fb1e 	bl	8000540 <__aeabi_dmul>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f0c:	f7f9 f962 	bl	80001d4 <__adddf3>
 8006f10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f14:	3601      	adds	r6, #1
 8006f16:	9b05      	ldr	r3, [sp, #20]
 8006f18:	429e      	cmp	r6, r3
 8006f1a:	f1a7 0708 	sub.w	r7, r7, #8
 8006f1e:	ddeb      	ble.n	8006ef8 <__kernel_rem_pio2+0xa0>
 8006f20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f24:	f108 0801 	add.w	r8, r8, #1
 8006f28:	ecaa 7b02 	vstmia	sl!, {d7}
 8006f2c:	3508      	adds	r5, #8
 8006f2e:	e7ca      	b.n	8006ec6 <__kernel_rem_pio2+0x6e>
 8006f30:	9b00      	ldr	r3, [sp, #0]
 8006f32:	f8dd 8000 	ldr.w	r8, [sp]
 8006f36:	aa0c      	add	r2, sp, #48	@ 0x30
 8006f38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f3e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006f40:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006f44:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f46:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8006f4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f4c:	ab98      	add	r3, sp, #608	@ 0x260
 8006f4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006f52:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8006f56:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006f5a:	ac0c      	add	r4, sp, #48	@ 0x30
 8006f5c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006f5e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8006f62:	46a1      	mov	r9, r4
 8006f64:	46c2      	mov	sl, r8
 8006f66:	f1ba 0f00 	cmp.w	sl, #0
 8006f6a:	f1a5 0508 	sub.w	r5, r5, #8
 8006f6e:	dc77      	bgt.n	8007060 <__kernel_rem_pio2+0x208>
 8006f70:	4658      	mov	r0, fp
 8006f72:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006f76:	f000 fac7 	bl	8007508 <scalbn>
 8006f7a:	ec57 6b10 	vmov	r6, r7, d0
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006f84:	4630      	mov	r0, r6
 8006f86:	4639      	mov	r1, r7
 8006f88:	f7f9 fada 	bl	8000540 <__aeabi_dmul>
 8006f8c:	ec41 0b10 	vmov	d0, r0, r1
 8006f90:	f000 fb3a 	bl	8007608 <floor>
 8006f94:	4b75      	ldr	r3, [pc, #468]	@ (800716c <__kernel_rem_pio2+0x314>)
 8006f96:	ec51 0b10 	vmov	r0, r1, d0
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f7f9 fad0 	bl	8000540 <__aeabi_dmul>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	f7f9 f912 	bl	80001d0 <__aeabi_dsub>
 8006fac:	460f      	mov	r7, r1
 8006fae:	4606      	mov	r6, r0
 8006fb0:	f7f9 fd60 	bl	8000a74 <__aeabi_d2iz>
 8006fb4:	9002      	str	r0, [sp, #8]
 8006fb6:	f7f9 fa59 	bl	800046c <__aeabi_i2d>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	f7f9 f905 	bl	80001d0 <__aeabi_dsub>
 8006fc6:	f1bb 0f00 	cmp.w	fp, #0
 8006fca:	4606      	mov	r6, r0
 8006fcc:	460f      	mov	r7, r1
 8006fce:	dd6c      	ble.n	80070aa <__kernel_rem_pio2+0x252>
 8006fd0:	f108 31ff 	add.w	r1, r8, #4294967295
 8006fd4:	ab0c      	add	r3, sp, #48	@ 0x30
 8006fd6:	9d02      	ldr	r5, [sp, #8]
 8006fd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006fdc:	f1cb 0018 	rsb	r0, fp, #24
 8006fe0:	fa43 f200 	asr.w	r2, r3, r0
 8006fe4:	4415      	add	r5, r2
 8006fe6:	4082      	lsls	r2, r0
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	aa0c      	add	r2, sp, #48	@ 0x30
 8006fec:	9502      	str	r5, [sp, #8]
 8006fee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006ff2:	f1cb 0217 	rsb	r2, fp, #23
 8006ff6:	fa43 f902 	asr.w	r9, r3, r2
 8006ffa:	f1b9 0f00 	cmp.w	r9, #0
 8006ffe:	dd64      	ble.n	80070ca <__kernel_rem_pio2+0x272>
 8007000:	9b02      	ldr	r3, [sp, #8]
 8007002:	2200      	movs	r2, #0
 8007004:	3301      	adds	r3, #1
 8007006:	9302      	str	r3, [sp, #8]
 8007008:	4615      	mov	r5, r2
 800700a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800700e:	4590      	cmp	r8, r2
 8007010:	f300 80b8 	bgt.w	8007184 <__kernel_rem_pio2+0x32c>
 8007014:	f1bb 0f00 	cmp.w	fp, #0
 8007018:	dd07      	ble.n	800702a <__kernel_rem_pio2+0x1d2>
 800701a:	f1bb 0f01 	cmp.w	fp, #1
 800701e:	f000 80bf 	beq.w	80071a0 <__kernel_rem_pio2+0x348>
 8007022:	f1bb 0f02 	cmp.w	fp, #2
 8007026:	f000 80c6 	beq.w	80071b6 <__kernel_rem_pio2+0x35e>
 800702a:	f1b9 0f02 	cmp.w	r9, #2
 800702e:	d14c      	bne.n	80070ca <__kernel_rem_pio2+0x272>
 8007030:	4632      	mov	r2, r6
 8007032:	463b      	mov	r3, r7
 8007034:	494e      	ldr	r1, [pc, #312]	@ (8007170 <__kernel_rem_pio2+0x318>)
 8007036:	2000      	movs	r0, #0
 8007038:	f7f9 f8ca 	bl	80001d0 <__aeabi_dsub>
 800703c:	4606      	mov	r6, r0
 800703e:	460f      	mov	r7, r1
 8007040:	2d00      	cmp	r5, #0
 8007042:	d042      	beq.n	80070ca <__kernel_rem_pio2+0x272>
 8007044:	4658      	mov	r0, fp
 8007046:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8007160 <__kernel_rem_pio2+0x308>
 800704a:	f000 fa5d 	bl	8007508 <scalbn>
 800704e:	4630      	mov	r0, r6
 8007050:	4639      	mov	r1, r7
 8007052:	ec53 2b10 	vmov	r2, r3, d0
 8007056:	f7f9 f8bb 	bl	80001d0 <__aeabi_dsub>
 800705a:	4606      	mov	r6, r0
 800705c:	460f      	mov	r7, r1
 800705e:	e034      	b.n	80070ca <__kernel_rem_pio2+0x272>
 8007060:	4b44      	ldr	r3, [pc, #272]	@ (8007174 <__kernel_rem_pio2+0x31c>)
 8007062:	2200      	movs	r2, #0
 8007064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007068:	f7f9 fa6a 	bl	8000540 <__aeabi_dmul>
 800706c:	f7f9 fd02 	bl	8000a74 <__aeabi_d2iz>
 8007070:	f7f9 f9fc 	bl	800046c <__aeabi_i2d>
 8007074:	4b40      	ldr	r3, [pc, #256]	@ (8007178 <__kernel_rem_pio2+0x320>)
 8007076:	2200      	movs	r2, #0
 8007078:	4606      	mov	r6, r0
 800707a:	460f      	mov	r7, r1
 800707c:	f7f9 fa60 	bl	8000540 <__aeabi_dmul>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007088:	f7f9 f8a2 	bl	80001d0 <__aeabi_dsub>
 800708c:	f7f9 fcf2 	bl	8000a74 <__aeabi_d2iz>
 8007090:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007094:	f849 0b04 	str.w	r0, [r9], #4
 8007098:	4639      	mov	r1, r7
 800709a:	4630      	mov	r0, r6
 800709c:	f7f9 f89a 	bl	80001d4 <__adddf3>
 80070a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070a8:	e75d      	b.n	8006f66 <__kernel_rem_pio2+0x10e>
 80070aa:	d107      	bne.n	80070bc <__kernel_rem_pio2+0x264>
 80070ac:	f108 33ff 	add.w	r3, r8, #4294967295
 80070b0:	aa0c      	add	r2, sp, #48	@ 0x30
 80070b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80070ba:	e79e      	b.n	8006ffa <__kernel_rem_pio2+0x1a2>
 80070bc:	4b2f      	ldr	r3, [pc, #188]	@ (800717c <__kernel_rem_pio2+0x324>)
 80070be:	2200      	movs	r2, #0
 80070c0:	f7f9 fcc4 	bl	8000a4c <__aeabi_dcmpge>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d143      	bne.n	8007150 <__kernel_rem_pio2+0x2f8>
 80070c8:	4681      	mov	r9, r0
 80070ca:	2200      	movs	r2, #0
 80070cc:	2300      	movs	r3, #0
 80070ce:	4630      	mov	r0, r6
 80070d0:	4639      	mov	r1, r7
 80070d2:	f7f9 fc9d 	bl	8000a10 <__aeabi_dcmpeq>
 80070d6:	2800      	cmp	r0, #0
 80070d8:	f000 80bf 	beq.w	800725a <__kernel_rem_pio2+0x402>
 80070dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80070e0:	2200      	movs	r2, #0
 80070e2:	9900      	ldr	r1, [sp, #0]
 80070e4:	428b      	cmp	r3, r1
 80070e6:	da6e      	bge.n	80071c6 <__kernel_rem_pio2+0x36e>
 80070e8:	2a00      	cmp	r2, #0
 80070ea:	f000 8089 	beq.w	8007200 <__kernel_rem_pio2+0x3a8>
 80070ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80070f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80070f4:	f1ab 0b18 	sub.w	fp, fp, #24
 80070f8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d0f6      	beq.n	80070ee <__kernel_rem_pio2+0x296>
 8007100:	4658      	mov	r0, fp
 8007102:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8007160 <__kernel_rem_pio2+0x308>
 8007106:	f000 f9ff 	bl	8007508 <scalbn>
 800710a:	f108 0301 	add.w	r3, r8, #1
 800710e:	00da      	lsls	r2, r3, #3
 8007110:	9205      	str	r2, [sp, #20]
 8007112:	ec55 4b10 	vmov	r4, r5, d0
 8007116:	aa70      	add	r2, sp, #448	@ 0x1c0
 8007118:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8007174 <__kernel_rem_pio2+0x31c>
 800711c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8007120:	4646      	mov	r6, r8
 8007122:	f04f 0a00 	mov.w	sl, #0
 8007126:	2e00      	cmp	r6, #0
 8007128:	f280 80cf 	bge.w	80072ca <__kernel_rem_pio2+0x472>
 800712c:	4644      	mov	r4, r8
 800712e:	2c00      	cmp	r4, #0
 8007130:	f2c0 80fd 	blt.w	800732e <__kernel_rem_pio2+0x4d6>
 8007134:	4b12      	ldr	r3, [pc, #72]	@ (8007180 <__kernel_rem_pio2+0x328>)
 8007136:	461f      	mov	r7, r3
 8007138:	ab70      	add	r3, sp, #448	@ 0x1c0
 800713a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800713e:	9306      	str	r3, [sp, #24]
 8007140:	f04f 0a00 	mov.w	sl, #0
 8007144:	f04f 0b00 	mov.w	fp, #0
 8007148:	2600      	movs	r6, #0
 800714a:	eba8 0504 	sub.w	r5, r8, r4
 800714e:	e0e2      	b.n	8007316 <__kernel_rem_pio2+0x4be>
 8007150:	f04f 0902 	mov.w	r9, #2
 8007154:	e754      	b.n	8007000 <__kernel_rem_pio2+0x1a8>
 8007156:	bf00      	nop
	...
 8007164:	3ff00000 	.word	0x3ff00000
 8007168:	08007928 	.word	0x08007928
 800716c:	40200000 	.word	0x40200000
 8007170:	3ff00000 	.word	0x3ff00000
 8007174:	3e700000 	.word	0x3e700000
 8007178:	41700000 	.word	0x41700000
 800717c:	3fe00000 	.word	0x3fe00000
 8007180:	080078e8 	.word	0x080078e8
 8007184:	f854 3b04 	ldr.w	r3, [r4], #4
 8007188:	b945      	cbnz	r5, 800719c <__kernel_rem_pio2+0x344>
 800718a:	b123      	cbz	r3, 8007196 <__kernel_rem_pio2+0x33e>
 800718c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8007190:	f844 3c04 	str.w	r3, [r4, #-4]
 8007194:	2301      	movs	r3, #1
 8007196:	3201      	adds	r2, #1
 8007198:	461d      	mov	r5, r3
 800719a:	e738      	b.n	800700e <__kernel_rem_pio2+0x1b6>
 800719c:	1acb      	subs	r3, r1, r3
 800719e:	e7f7      	b.n	8007190 <__kernel_rem_pio2+0x338>
 80071a0:	f108 32ff 	add.w	r2, r8, #4294967295
 80071a4:	ab0c      	add	r3, sp, #48	@ 0x30
 80071a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80071ae:	a90c      	add	r1, sp, #48	@ 0x30
 80071b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80071b4:	e739      	b.n	800702a <__kernel_rem_pio2+0x1d2>
 80071b6:	f108 32ff 	add.w	r2, r8, #4294967295
 80071ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80071bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80071c4:	e7f3      	b.n	80071ae <__kernel_rem_pio2+0x356>
 80071c6:	a90c      	add	r1, sp, #48	@ 0x30
 80071c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	430a      	orrs	r2, r1
 80071d0:	e787      	b.n	80070e2 <__kernel_rem_pio2+0x28a>
 80071d2:	3401      	adds	r4, #1
 80071d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80071d8:	2a00      	cmp	r2, #0
 80071da:	d0fa      	beq.n	80071d2 <__kernel_rem_pio2+0x37a>
 80071dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80071e2:	eb0d 0503 	add.w	r5, sp, r3
 80071e6:	9b06      	ldr	r3, [sp, #24]
 80071e8:	aa20      	add	r2, sp, #128	@ 0x80
 80071ea:	4443      	add	r3, r8
 80071ec:	f108 0701 	add.w	r7, r8, #1
 80071f0:	3d98      	subs	r5, #152	@ 0x98
 80071f2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80071f6:	4444      	add	r4, r8
 80071f8:	42bc      	cmp	r4, r7
 80071fa:	da04      	bge.n	8007206 <__kernel_rem_pio2+0x3ae>
 80071fc:	46a0      	mov	r8, r4
 80071fe:	e6a2      	b.n	8006f46 <__kernel_rem_pio2+0xee>
 8007200:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007202:	2401      	movs	r4, #1
 8007204:	e7e6      	b.n	80071d4 <__kernel_rem_pio2+0x37c>
 8007206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007208:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800720c:	f7f9 f92e 	bl	800046c <__aeabi_i2d>
 8007210:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80074d8 <__kernel_rem_pio2+0x680>
 8007214:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007218:	ed8d 7b02 	vstr	d7, [sp, #8]
 800721c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007220:	46b2      	mov	sl, r6
 8007222:	f04f 0800 	mov.w	r8, #0
 8007226:	9b05      	ldr	r3, [sp, #20]
 8007228:	4598      	cmp	r8, r3
 800722a:	dd05      	ble.n	8007238 <__kernel_rem_pio2+0x3e0>
 800722c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007230:	3701      	adds	r7, #1
 8007232:	eca5 7b02 	vstmia	r5!, {d7}
 8007236:	e7df      	b.n	80071f8 <__kernel_rem_pio2+0x3a0>
 8007238:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800723c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007240:	f7f9 f97e 	bl	8000540 <__aeabi_dmul>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800724c:	f7f8 ffc2 	bl	80001d4 <__adddf3>
 8007250:	f108 0801 	add.w	r8, r8, #1
 8007254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007258:	e7e5      	b.n	8007226 <__kernel_rem_pio2+0x3ce>
 800725a:	f1cb 0000 	rsb	r0, fp, #0
 800725e:	ec47 6b10 	vmov	d0, r6, r7
 8007262:	f000 f951 	bl	8007508 <scalbn>
 8007266:	ec55 4b10 	vmov	r4, r5, d0
 800726a:	4b9d      	ldr	r3, [pc, #628]	@ (80074e0 <__kernel_rem_pio2+0x688>)
 800726c:	2200      	movs	r2, #0
 800726e:	4620      	mov	r0, r4
 8007270:	4629      	mov	r1, r5
 8007272:	f7f9 fbeb 	bl	8000a4c <__aeabi_dcmpge>
 8007276:	b300      	cbz	r0, 80072ba <__kernel_rem_pio2+0x462>
 8007278:	4b9a      	ldr	r3, [pc, #616]	@ (80074e4 <__kernel_rem_pio2+0x68c>)
 800727a:	2200      	movs	r2, #0
 800727c:	4620      	mov	r0, r4
 800727e:	4629      	mov	r1, r5
 8007280:	f7f9 f95e 	bl	8000540 <__aeabi_dmul>
 8007284:	f7f9 fbf6 	bl	8000a74 <__aeabi_d2iz>
 8007288:	4606      	mov	r6, r0
 800728a:	f7f9 f8ef 	bl	800046c <__aeabi_i2d>
 800728e:	4b94      	ldr	r3, [pc, #592]	@ (80074e0 <__kernel_rem_pio2+0x688>)
 8007290:	2200      	movs	r2, #0
 8007292:	f7f9 f955 	bl	8000540 <__aeabi_dmul>
 8007296:	460b      	mov	r3, r1
 8007298:	4602      	mov	r2, r0
 800729a:	4629      	mov	r1, r5
 800729c:	4620      	mov	r0, r4
 800729e:	f7f8 ff97 	bl	80001d0 <__aeabi_dsub>
 80072a2:	f7f9 fbe7 	bl	8000a74 <__aeabi_d2iz>
 80072a6:	ab0c      	add	r3, sp, #48	@ 0x30
 80072a8:	f10b 0b18 	add.w	fp, fp, #24
 80072ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80072b0:	f108 0801 	add.w	r8, r8, #1
 80072b4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80072b8:	e722      	b.n	8007100 <__kernel_rem_pio2+0x2a8>
 80072ba:	4620      	mov	r0, r4
 80072bc:	4629      	mov	r1, r5
 80072be:	f7f9 fbd9 	bl	8000a74 <__aeabi_d2iz>
 80072c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80072c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80072c8:	e71a      	b.n	8007100 <__kernel_rem_pio2+0x2a8>
 80072ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80072cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80072d0:	f7f9 f8cc 	bl	800046c <__aeabi_i2d>
 80072d4:	4622      	mov	r2, r4
 80072d6:	462b      	mov	r3, r5
 80072d8:	f7f9 f932 	bl	8000540 <__aeabi_dmul>
 80072dc:	4652      	mov	r2, sl
 80072de:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80072e2:	465b      	mov	r3, fp
 80072e4:	4620      	mov	r0, r4
 80072e6:	4629      	mov	r1, r5
 80072e8:	f7f9 f92a 	bl	8000540 <__aeabi_dmul>
 80072ec:	3e01      	subs	r6, #1
 80072ee:	4604      	mov	r4, r0
 80072f0:	460d      	mov	r5, r1
 80072f2:	e718      	b.n	8007126 <__kernel_rem_pio2+0x2ce>
 80072f4:	9906      	ldr	r1, [sp, #24]
 80072f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80072fa:	9106      	str	r1, [sp, #24]
 80072fc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8007300:	f7f9 f91e 	bl	8000540 <__aeabi_dmul>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4650      	mov	r0, sl
 800730a:	4659      	mov	r1, fp
 800730c:	f7f8 ff62 	bl	80001d4 <__adddf3>
 8007310:	3601      	adds	r6, #1
 8007312:	4682      	mov	sl, r0
 8007314:	468b      	mov	fp, r1
 8007316:	9b00      	ldr	r3, [sp, #0]
 8007318:	429e      	cmp	r6, r3
 800731a:	dc01      	bgt.n	8007320 <__kernel_rem_pio2+0x4c8>
 800731c:	42b5      	cmp	r5, r6
 800731e:	dae9      	bge.n	80072f4 <__kernel_rem_pio2+0x49c>
 8007320:	ab48      	add	r3, sp, #288	@ 0x120
 8007322:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007326:	e9c5 ab00 	strd	sl, fp, [r5]
 800732a:	3c01      	subs	r4, #1
 800732c:	e6ff      	b.n	800712e <__kernel_rem_pio2+0x2d6>
 800732e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007330:	2b02      	cmp	r3, #2
 8007332:	dc0b      	bgt.n	800734c <__kernel_rem_pio2+0x4f4>
 8007334:	2b00      	cmp	r3, #0
 8007336:	dc39      	bgt.n	80073ac <__kernel_rem_pio2+0x554>
 8007338:	d05d      	beq.n	80073f6 <__kernel_rem_pio2+0x59e>
 800733a:	9b02      	ldr	r3, [sp, #8]
 800733c:	f003 0007 	and.w	r0, r3, #7
 8007340:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8007344:	ecbd 8b02 	vpop	{d8}
 8007348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800734e:	2b03      	cmp	r3, #3
 8007350:	d1f3      	bne.n	800733a <__kernel_rem_pio2+0x4e2>
 8007352:	9b05      	ldr	r3, [sp, #20]
 8007354:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007358:	eb0d 0403 	add.w	r4, sp, r3
 800735c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8007360:	4625      	mov	r5, r4
 8007362:	46c2      	mov	sl, r8
 8007364:	f1ba 0f00 	cmp.w	sl, #0
 8007368:	f1a5 0508 	sub.w	r5, r5, #8
 800736c:	dc6b      	bgt.n	8007446 <__kernel_rem_pio2+0x5ee>
 800736e:	4645      	mov	r5, r8
 8007370:	2d01      	cmp	r5, #1
 8007372:	f1a4 0408 	sub.w	r4, r4, #8
 8007376:	f300 8087 	bgt.w	8007488 <__kernel_rem_pio2+0x630>
 800737a:	9c05      	ldr	r4, [sp, #20]
 800737c:	ab48      	add	r3, sp, #288	@ 0x120
 800737e:	441c      	add	r4, r3
 8007380:	2000      	movs	r0, #0
 8007382:	2100      	movs	r1, #0
 8007384:	f1b8 0f01 	cmp.w	r8, #1
 8007388:	f300 809c 	bgt.w	80074c4 <__kernel_rem_pio2+0x66c>
 800738c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8007390:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8007394:	f1b9 0f00 	cmp.w	r9, #0
 8007398:	f040 80a6 	bne.w	80074e8 <__kernel_rem_pio2+0x690>
 800739c:	9b04      	ldr	r3, [sp, #16]
 800739e:	e9c3 7800 	strd	r7, r8, [r3]
 80073a2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80073a6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80073aa:	e7c6      	b.n	800733a <__kernel_rem_pio2+0x4e2>
 80073ac:	9d05      	ldr	r5, [sp, #20]
 80073ae:	ab48      	add	r3, sp, #288	@ 0x120
 80073b0:	441d      	add	r5, r3
 80073b2:	4644      	mov	r4, r8
 80073b4:	2000      	movs	r0, #0
 80073b6:	2100      	movs	r1, #0
 80073b8:	2c00      	cmp	r4, #0
 80073ba:	da35      	bge.n	8007428 <__kernel_rem_pio2+0x5d0>
 80073bc:	f1b9 0f00 	cmp.w	r9, #0
 80073c0:	d038      	beq.n	8007434 <__kernel_rem_pio2+0x5dc>
 80073c2:	4602      	mov	r2, r0
 80073c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80073c8:	9c04      	ldr	r4, [sp, #16]
 80073ca:	e9c4 2300 	strd	r2, r3, [r4]
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80073d6:	f7f8 fefb 	bl	80001d0 <__aeabi_dsub>
 80073da:	ad4a      	add	r5, sp, #296	@ 0x128
 80073dc:	2401      	movs	r4, #1
 80073de:	45a0      	cmp	r8, r4
 80073e0:	da2b      	bge.n	800743a <__kernel_rem_pio2+0x5e2>
 80073e2:	f1b9 0f00 	cmp.w	r9, #0
 80073e6:	d002      	beq.n	80073ee <__kernel_rem_pio2+0x596>
 80073e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80073ec:	4619      	mov	r1, r3
 80073ee:	9b04      	ldr	r3, [sp, #16]
 80073f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80073f4:	e7a1      	b.n	800733a <__kernel_rem_pio2+0x4e2>
 80073f6:	9c05      	ldr	r4, [sp, #20]
 80073f8:	ab48      	add	r3, sp, #288	@ 0x120
 80073fa:	441c      	add	r4, r3
 80073fc:	2000      	movs	r0, #0
 80073fe:	2100      	movs	r1, #0
 8007400:	f1b8 0f00 	cmp.w	r8, #0
 8007404:	da09      	bge.n	800741a <__kernel_rem_pio2+0x5c2>
 8007406:	f1b9 0f00 	cmp.w	r9, #0
 800740a:	d002      	beq.n	8007412 <__kernel_rem_pio2+0x5ba>
 800740c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007410:	4619      	mov	r1, r3
 8007412:	9b04      	ldr	r3, [sp, #16]
 8007414:	e9c3 0100 	strd	r0, r1, [r3]
 8007418:	e78f      	b.n	800733a <__kernel_rem_pio2+0x4e2>
 800741a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800741e:	f7f8 fed9 	bl	80001d4 <__adddf3>
 8007422:	f108 38ff 	add.w	r8, r8, #4294967295
 8007426:	e7eb      	b.n	8007400 <__kernel_rem_pio2+0x5a8>
 8007428:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800742c:	f7f8 fed2 	bl	80001d4 <__adddf3>
 8007430:	3c01      	subs	r4, #1
 8007432:	e7c1      	b.n	80073b8 <__kernel_rem_pio2+0x560>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	e7c6      	b.n	80073c8 <__kernel_rem_pio2+0x570>
 800743a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800743e:	f7f8 fec9 	bl	80001d4 <__adddf3>
 8007442:	3401      	adds	r4, #1
 8007444:	e7cb      	b.n	80073de <__kernel_rem_pio2+0x586>
 8007446:	ed95 7b00 	vldr	d7, [r5]
 800744a:	ed8d 7b00 	vstr	d7, [sp]
 800744e:	ed95 7b02 	vldr	d7, [r5, #8]
 8007452:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007456:	ec53 2b17 	vmov	r2, r3, d7
 800745a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800745e:	f7f8 feb9 	bl	80001d4 <__adddf3>
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	4606      	mov	r6, r0
 8007468:	460f      	mov	r7, r1
 800746a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800746e:	f7f8 feaf 	bl	80001d0 <__aeabi_dsub>
 8007472:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007476:	f7f8 fead 	bl	80001d4 <__adddf3>
 800747a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800747e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8007482:	e9c5 6700 	strd	r6, r7, [r5]
 8007486:	e76d      	b.n	8007364 <__kernel_rem_pio2+0x50c>
 8007488:	ed94 7b00 	vldr	d7, [r4]
 800748c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8007490:	ec51 0b17 	vmov	r0, r1, d7
 8007494:	4652      	mov	r2, sl
 8007496:	465b      	mov	r3, fp
 8007498:	ed8d 7b00 	vstr	d7, [sp]
 800749c:	f7f8 fe9a 	bl	80001d4 <__adddf3>
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	4606      	mov	r6, r0
 80074a6:	460f      	mov	r7, r1
 80074a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074ac:	f7f8 fe90 	bl	80001d0 <__aeabi_dsub>
 80074b0:	4652      	mov	r2, sl
 80074b2:	465b      	mov	r3, fp
 80074b4:	f7f8 fe8e 	bl	80001d4 <__adddf3>
 80074b8:	3d01      	subs	r5, #1
 80074ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80074be:	e9c4 6700 	strd	r6, r7, [r4]
 80074c2:	e755      	b.n	8007370 <__kernel_rem_pio2+0x518>
 80074c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80074c8:	f7f8 fe84 	bl	80001d4 <__adddf3>
 80074cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80074d0:	e758      	b.n	8007384 <__kernel_rem_pio2+0x52c>
 80074d2:	bf00      	nop
 80074d4:	f3af 8000 	nop.w
	...
 80074e0:	41700000 	.word	0x41700000
 80074e4:	3e700000 	.word	0x3e700000
 80074e8:	9b04      	ldr	r3, [sp, #16]
 80074ea:	9a04      	ldr	r2, [sp, #16]
 80074ec:	601f      	str	r7, [r3, #0]
 80074ee:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80074f2:	605c      	str	r4, [r3, #4]
 80074f4:	609d      	str	r5, [r3, #8]
 80074f6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80074fa:	60d3      	str	r3, [r2, #12]
 80074fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007500:	6110      	str	r0, [r2, #16]
 8007502:	6153      	str	r3, [r2, #20]
 8007504:	e719      	b.n	800733a <__kernel_rem_pio2+0x4e2>
 8007506:	bf00      	nop

08007508 <scalbn>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	ec55 4b10 	vmov	r4, r5, d0
 800750e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007512:	4606      	mov	r6, r0
 8007514:	462b      	mov	r3, r5
 8007516:	b991      	cbnz	r1, 800753e <scalbn+0x36>
 8007518:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800751c:	4323      	orrs	r3, r4
 800751e:	d03d      	beq.n	800759c <scalbn+0x94>
 8007520:	4b35      	ldr	r3, [pc, #212]	@ (80075f8 <scalbn+0xf0>)
 8007522:	4620      	mov	r0, r4
 8007524:	4629      	mov	r1, r5
 8007526:	2200      	movs	r2, #0
 8007528:	f7f9 f80a 	bl	8000540 <__aeabi_dmul>
 800752c:	4b33      	ldr	r3, [pc, #204]	@ (80075fc <scalbn+0xf4>)
 800752e:	429e      	cmp	r6, r3
 8007530:	4604      	mov	r4, r0
 8007532:	460d      	mov	r5, r1
 8007534:	da0f      	bge.n	8007556 <scalbn+0x4e>
 8007536:	a328      	add	r3, pc, #160	@ (adr r3, 80075d8 <scalbn+0xd0>)
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	e01e      	b.n	800757c <scalbn+0x74>
 800753e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007542:	4291      	cmp	r1, r2
 8007544:	d10b      	bne.n	800755e <scalbn+0x56>
 8007546:	4622      	mov	r2, r4
 8007548:	4620      	mov	r0, r4
 800754a:	4629      	mov	r1, r5
 800754c:	f7f8 fe42 	bl	80001d4 <__adddf3>
 8007550:	4604      	mov	r4, r0
 8007552:	460d      	mov	r5, r1
 8007554:	e022      	b.n	800759c <scalbn+0x94>
 8007556:	460b      	mov	r3, r1
 8007558:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800755c:	3936      	subs	r1, #54	@ 0x36
 800755e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007562:	4296      	cmp	r6, r2
 8007564:	dd0d      	ble.n	8007582 <scalbn+0x7a>
 8007566:	2d00      	cmp	r5, #0
 8007568:	a11d      	add	r1, pc, #116	@ (adr r1, 80075e0 <scalbn+0xd8>)
 800756a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800756e:	da02      	bge.n	8007576 <scalbn+0x6e>
 8007570:	a11d      	add	r1, pc, #116	@ (adr r1, 80075e8 <scalbn+0xe0>)
 8007572:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007576:	a31a      	add	r3, pc, #104	@ (adr r3, 80075e0 <scalbn+0xd8>)
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f7f8 ffe0 	bl	8000540 <__aeabi_dmul>
 8007580:	e7e6      	b.n	8007550 <scalbn+0x48>
 8007582:	1872      	adds	r2, r6, r1
 8007584:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007588:	428a      	cmp	r2, r1
 800758a:	dcec      	bgt.n	8007566 <scalbn+0x5e>
 800758c:	2a00      	cmp	r2, #0
 800758e:	dd08      	ble.n	80075a2 <scalbn+0x9a>
 8007590:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007594:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007598:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800759c:	ec45 4b10 	vmov	d0, r4, r5
 80075a0:	bd70      	pop	{r4, r5, r6, pc}
 80075a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80075a6:	da08      	bge.n	80075ba <scalbn+0xb2>
 80075a8:	2d00      	cmp	r5, #0
 80075aa:	a10b      	add	r1, pc, #44	@ (adr r1, 80075d8 <scalbn+0xd0>)
 80075ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b0:	dac1      	bge.n	8007536 <scalbn+0x2e>
 80075b2:	a10f      	add	r1, pc, #60	@ (adr r1, 80075f0 <scalbn+0xe8>)
 80075b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b8:	e7bd      	b.n	8007536 <scalbn+0x2e>
 80075ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80075be:	3236      	adds	r2, #54	@ 0x36
 80075c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80075c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80075c8:	4620      	mov	r0, r4
 80075ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007600 <scalbn+0xf8>)
 80075cc:	4629      	mov	r1, r5
 80075ce:	2200      	movs	r2, #0
 80075d0:	e7d4      	b.n	800757c <scalbn+0x74>
 80075d2:	bf00      	nop
 80075d4:	f3af 8000 	nop.w
 80075d8:	c2f8f359 	.word	0xc2f8f359
 80075dc:	01a56e1f 	.word	0x01a56e1f
 80075e0:	8800759c 	.word	0x8800759c
 80075e4:	7e37e43c 	.word	0x7e37e43c
 80075e8:	8800759c 	.word	0x8800759c
 80075ec:	fe37e43c 	.word	0xfe37e43c
 80075f0:	c2f8f359 	.word	0xc2f8f359
 80075f4:	81a56e1f 	.word	0x81a56e1f
 80075f8:	43500000 	.word	0x43500000
 80075fc:	ffff3cb0 	.word	0xffff3cb0
 8007600:	3c900000 	.word	0x3c900000
 8007604:	00000000 	.word	0x00000000

08007608 <floor>:
 8007608:	ec51 0b10 	vmov	r0, r1, d0
 800760c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007614:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007618:	2e13      	cmp	r6, #19
 800761a:	460c      	mov	r4, r1
 800761c:	4605      	mov	r5, r0
 800761e:	4680      	mov	r8, r0
 8007620:	dc34      	bgt.n	800768c <floor+0x84>
 8007622:	2e00      	cmp	r6, #0
 8007624:	da17      	bge.n	8007656 <floor+0x4e>
 8007626:	a332      	add	r3, pc, #200	@ (adr r3, 80076f0 <floor+0xe8>)
 8007628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762c:	f7f8 fdd2 	bl	80001d4 <__adddf3>
 8007630:	2200      	movs	r2, #0
 8007632:	2300      	movs	r3, #0
 8007634:	f7f9 fa14 	bl	8000a60 <__aeabi_dcmpgt>
 8007638:	b150      	cbz	r0, 8007650 <floor+0x48>
 800763a:	2c00      	cmp	r4, #0
 800763c:	da55      	bge.n	80076ea <floor+0xe2>
 800763e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8007642:	432c      	orrs	r4, r5
 8007644:	2500      	movs	r5, #0
 8007646:	42ac      	cmp	r4, r5
 8007648:	4c2b      	ldr	r4, [pc, #172]	@ (80076f8 <floor+0xf0>)
 800764a:	bf08      	it	eq
 800764c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007650:	4621      	mov	r1, r4
 8007652:	4628      	mov	r0, r5
 8007654:	e023      	b.n	800769e <floor+0x96>
 8007656:	4f29      	ldr	r7, [pc, #164]	@ (80076fc <floor+0xf4>)
 8007658:	4137      	asrs	r7, r6
 800765a:	ea01 0307 	and.w	r3, r1, r7
 800765e:	4303      	orrs	r3, r0
 8007660:	d01d      	beq.n	800769e <floor+0x96>
 8007662:	a323      	add	r3, pc, #140	@ (adr r3, 80076f0 <floor+0xe8>)
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	f7f8 fdb4 	bl	80001d4 <__adddf3>
 800766c:	2200      	movs	r2, #0
 800766e:	2300      	movs	r3, #0
 8007670:	f7f9 f9f6 	bl	8000a60 <__aeabi_dcmpgt>
 8007674:	2800      	cmp	r0, #0
 8007676:	d0eb      	beq.n	8007650 <floor+0x48>
 8007678:	2c00      	cmp	r4, #0
 800767a:	bfbe      	ittt	lt
 800767c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8007680:	4133      	asrlt	r3, r6
 8007682:	18e4      	addlt	r4, r4, r3
 8007684:	ea24 0407 	bic.w	r4, r4, r7
 8007688:	2500      	movs	r5, #0
 800768a:	e7e1      	b.n	8007650 <floor+0x48>
 800768c:	2e33      	cmp	r6, #51	@ 0x33
 800768e:	dd0a      	ble.n	80076a6 <floor+0x9e>
 8007690:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8007694:	d103      	bne.n	800769e <floor+0x96>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	f7f8 fd9b 	bl	80001d4 <__adddf3>
 800769e:	ec41 0b10 	vmov	d0, r0, r1
 80076a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80076aa:	f04f 37ff 	mov.w	r7, #4294967295
 80076ae:	40df      	lsrs	r7, r3
 80076b0:	4207      	tst	r7, r0
 80076b2:	d0f4      	beq.n	800769e <floor+0x96>
 80076b4:	a30e      	add	r3, pc, #56	@ (adr r3, 80076f0 <floor+0xe8>)
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	f7f8 fd8b 	bl	80001d4 <__adddf3>
 80076be:	2200      	movs	r2, #0
 80076c0:	2300      	movs	r3, #0
 80076c2:	f7f9 f9cd 	bl	8000a60 <__aeabi_dcmpgt>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d0c2      	beq.n	8007650 <floor+0x48>
 80076ca:	2c00      	cmp	r4, #0
 80076cc:	da0a      	bge.n	80076e4 <floor+0xdc>
 80076ce:	2e14      	cmp	r6, #20
 80076d0:	d101      	bne.n	80076d6 <floor+0xce>
 80076d2:	3401      	adds	r4, #1
 80076d4:	e006      	b.n	80076e4 <floor+0xdc>
 80076d6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80076da:	2301      	movs	r3, #1
 80076dc:	40b3      	lsls	r3, r6
 80076de:	441d      	add	r5, r3
 80076e0:	4545      	cmp	r5, r8
 80076e2:	d3f6      	bcc.n	80076d2 <floor+0xca>
 80076e4:	ea25 0507 	bic.w	r5, r5, r7
 80076e8:	e7b2      	b.n	8007650 <floor+0x48>
 80076ea:	2500      	movs	r5, #0
 80076ec:	462c      	mov	r4, r5
 80076ee:	e7af      	b.n	8007650 <floor+0x48>
 80076f0:	8800759c 	.word	0x8800759c
 80076f4:	7e37e43c 	.word	0x7e37e43c
 80076f8:	bff00000 	.word	0xbff00000
 80076fc:	000fffff 	.word	0x000fffff

08007700 <_init>:
 8007700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007702:	bf00      	nop
 8007704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007706:	bc08      	pop	{r3}
 8007708:	469e      	mov	lr, r3
 800770a:	4770      	bx	lr

0800770c <_fini>:
 800770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770e:	bf00      	nop
 8007710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007712:	bc08      	pop	{r3}
 8007714:	469e      	mov	lr, r3
 8007716:	4770      	bx	lr
