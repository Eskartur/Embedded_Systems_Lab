
ES_Lab6_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800db50  0800db50  0000eb50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dff0  0800dff0  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dff0  0800dff0  0000eff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dff8  0800dff8  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dff8  0800dff8  0000eff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dffc  0800dffc  0000effc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800e000  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000232c  200001d8  0800e1d8  0000f1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002504  0800e1d8  0000f504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cf16  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057b8  00000000  00000000  0003c11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028c0  00000000  00000000  000418d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fbd  00000000  00000000  00044198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007743  00000000  00000000  00046155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f39f  00000000  00000000  0004d898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011df6a  00000000  00000000  0007cc37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019aba1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c1a8  00000000  00000000  0019abe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001a6d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800db34 	.word	0x0800db34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800db34 	.word	0x0800db34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f001 fb03 	bl	80024a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f848 	bl	8000f34 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ea4:	f000 f8a8 	bl	8000ff8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea8:	f000 fb20 	bl	80014ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000eac:	f000 fb00 	bl	80014b0 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000eb0:	f000 f948 	bl	8001144 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000eb4:	f000 f97e 	bl	80011b4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000eb8:	f000 f9ba 	bl	8001230 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000ebc:	f000 f9de 	bl	800127c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000ec0:	f000 fa68 	bl	8001394 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000ec4:	f000 fa96 	bl	80013f4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ec8:	f000 fac4 	bl	8001454 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000ecc:	f000 f8c2 	bl	8001054 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000ed0:	f000 fa12 	bl	80012f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
// <Note> (5) Start ADC with DMA and then timer:
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)Adc.Raw, 2);
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	490e      	ldr	r1, [pc, #56]	@ (8000f10 <main+0x78>)
 8000ed8:	480e      	ldr	r0, [pc, #56]	@ (8000f14 <main+0x7c>)
 8000eda:	f001 fe87 	bl	8002bec <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2); /* This timer starts ADC conversion */
 8000ede:	480e      	ldr	r0, [pc, #56]	@ (8000f18 <main+0x80>)
 8000ee0:	f005 fcf4 	bl	80068cc <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ee4:	f007 fa44 	bl	8008370 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ee8:	4a0c      	ldr	r2, [pc, #48]	@ (8000f1c <main+0x84>)
 8000eea:	2100      	movs	r1, #0
 8000eec:	480c      	ldr	r0, [pc, #48]	@ (8000f20 <main+0x88>)
 8000eee:	f007 fa89 	bl	8008404 <osThreadNew>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f24 <main+0x8c>)
 8000ef6:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f28 <main+0x90>)
 8000efa:	2100      	movs	r1, #0
 8000efc:	480b      	ldr	r0, [pc, #44]	@ (8000f2c <main+0x94>)
 8000efe:	f007 fa81 	bl	8008404 <osThreadNew>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a0a      	ldr	r2, [pc, #40]	@ (8000f30 <main+0x98>)
 8000f06:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f08:	f007 fa56 	bl	80083b8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  UART_Printf_Dbg("Hello World");
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <main+0x74>
 8000f10:	20000a20 	.word	0x20000a20
 8000f14:	200001f4 	.word	0x200001f4
 8000f18:	200003d4 	.word	0x200003d4
 8000f1c:	0800dbec 	.word	0x0800dbec
 8000f20:	08001821 	.word	0x08001821
 8000f24:	20000a14 	.word	0x20000a14
 8000f28:	0800dc10 	.word	0x0800dc10
 8000f2c:	080018a1 	.word	0x080018a1
 8000f30:	20000a18 	.word	0x20000a18

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b096      	sub	sp, #88	@ 0x58
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	2244      	movs	r2, #68	@ 0x44
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f00a fd2e 	bl	800b9a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f56:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f5a:	f003 ff9d 	bl	8004e98 <HAL_PWREx_ControlVoltageScaling>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f64:	f000 fcb6 	bl	80018d4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f68:	f003 ff78 	bl	8004e5c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f6c:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <SystemClock_Config+0xc0>)
 8000f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f72:	4a20      	ldr	r2, [pc, #128]	@ (8000ff4 <SystemClock_Config+0xc0>)
 8000f74:	f023 0318 	bic.w	r3, r3, #24
 8000f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f7c:	2314      	movs	r3, #20
 8000f7e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f80:	2301      	movs	r3, #1
 8000f82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f84:	2301      	movs	r3, #1
 8000f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f8c:	2360      	movs	r3, #96	@ 0x60
 8000f8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f90:	2302      	movs	r3, #2
 8000f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f94:	2301      	movs	r3, #1
 8000f96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f9c:	2328      	movs	r3, #40	@ 0x28
 8000f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f004 f893 	bl	80050dc <HAL_RCC_OscConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000fbc:	f000 fc8a 	bl	80018d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 fc5b 	bl	8005894 <HAL_RCC_ClockConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000fe4:	f000 fc76 	bl	80018d4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000fe8:	f005 f994 	bl	8006314 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000fec:	bf00      	nop
 8000fee:	3758      	adds	r7, #88	@ 0x58
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0a2      	sub	sp, #136	@ 0x88
 8000ffc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2288      	movs	r2, #136	@ 0x88
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f00a fccd 	bl	800b9a4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800100a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800100e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001010:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001014:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001016:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800101a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800101c:	2301      	movs	r3, #1
 800101e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001020:	2301      	movs	r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001024:	2318      	movs	r3, #24
 8001026:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001028:	2307      	movs	r3, #7
 800102a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800102c:	2302      	movs	r3, #2
 800102e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001034:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8001038:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	4618      	mov	r0, r3
 800103e:	f004 fe7f 	bl	8005d40 <HAL_RCCEx_PeriphCLKConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001048:	f000 fc44 	bl	80018d4 <Error_Handler>
  }
}
 800104c:	bf00      	nop
 800104e:	3788      	adds	r7, #136	@ 0x88
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	@ 0x28
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
 8001074:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001076:	4b30      	ldr	r3, [pc, #192]	@ (8001138 <MX_ADC1_Init+0xe4>)
 8001078:	4a30      	ldr	r2, [pc, #192]	@ (800113c <MX_ADC1_Init+0xe8>)
 800107a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800107c:	4b2e      	ldr	r3, [pc, #184]	@ (8001138 <MX_ADC1_Init+0xe4>)
 800107e:	2200      	movs	r2, #0
 8001080:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001082:	4b2d      	ldr	r3, [pc, #180]	@ (8001138 <MX_ADC1_Init+0xe4>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001088:	4b2b      	ldr	r3, [pc, #172]	@ (8001138 <MX_ADC1_Init+0xe4>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800108e:	4b2a      	ldr	r3, [pc, #168]	@ (8001138 <MX_ADC1_Init+0xe4>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001094:	4b28      	ldr	r3, [pc, #160]	@ (8001138 <MX_ADC1_Init+0xe4>)
 8001096:	2204      	movs	r2, #4
 8001098:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800109a:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <MX_ADC1_Init+0xe4>)
 800109c:	2200      	movs	r2, #0
 800109e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010a0:	4b25      	ldr	r3, [pc, #148]	@ (8001138 <MX_ADC1_Init+0xe4>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010a6:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <MX_ADC1_Init+0xe4>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ac:	4b22      	ldr	r3, [pc, #136]	@ (8001138 <MX_ADC1_Init+0xe4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80010b4:	4b20      	ldr	r3, [pc, #128]	@ (8001138 <MX_ADC1_Init+0xe4>)
 80010b6:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 80010ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001138 <MX_ADC1_Init+0xe4>)
 80010be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001138 <MX_ADC1_Init+0xe4>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <MX_ADC1_Init+0xe4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <MX_ADC1_Init+0xe4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010da:	4817      	ldr	r0, [pc, #92]	@ (8001138 <MX_ADC1_Init+0xe4>)
 80010dc:	f001 fc36 	bl	800294c <HAL_ADC_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80010e6:	f000 fbf5 	bl	80018d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4619      	mov	r1, r3
 80010f4:	4810      	ldr	r0, [pc, #64]	@ (8001138 <MX_ADC1_Init+0xe4>)
 80010f6:	f002 fdd1 	bl	8003c9c <HAL_ADCEx_MultiModeConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001100:	f000 fbe8 	bl	80018d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001104:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001106:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001108:	2306      	movs	r3, #6
 800110a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800110c:	2307      	movs	r3, #7
 800110e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001110:	237f      	movs	r3, #127	@ 0x7f
 8001112:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001114:	2304      	movs	r3, #4
 8001116:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	@ (8001138 <MX_ADC1_Init+0xe4>)
 8001122:	f002 f857 	bl	80031d4 <HAL_ADC_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800112c:	f000 fbd2 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	@ 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200001f4 	.word	0x200001f4
 800113c:	50040000 	.word	0x50040000
 8001140:	c7520000 	.word	0xc7520000

08001144 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001148:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <MX_DFSDM1_Init+0x68>)
 800114a:	4a19      	ldr	r2, [pc, #100]	@ (80011b0 <MX_DFSDM1_Init+0x6c>)
 800114c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800114e:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <MX_DFSDM1_Init+0x68>)
 8001150:	2201      	movs	r2, #1
 8001152:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001154:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <MX_DFSDM1_Init+0x68>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <MX_DFSDM1_Init+0x68>)
 800115c:	2202      	movs	r2, #2
 800115e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <MX_DFSDM1_Init+0x68>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <MX_DFSDM1_Init+0x68>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <MX_DFSDM1_Init+0x68>)
 800116e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001172:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001174:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <MX_DFSDM1_Init+0x68>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <MX_DFSDM1_Init+0x68>)
 800117c:	2204      	movs	r2, #4
 800117e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001180:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <MX_DFSDM1_Init+0x68>)
 8001182:	2200      	movs	r2, #0
 8001184:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <MX_DFSDM1_Init+0x68>)
 8001188:	2201      	movs	r2, #1
 800118a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <MX_DFSDM1_Init+0x68>)
 800118e:	2200      	movs	r2, #0
 8001190:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_DFSDM1_Init+0x68>)
 8001194:	2200      	movs	r2, #0
 8001196:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	@ (80011ac <MX_DFSDM1_Init+0x68>)
 800119a:	f002 ff11 	bl	8003fc0 <HAL_DFSDM_ChannelInit>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80011a4:	f000 fb96 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200002a0 	.word	0x200002a0
 80011b0:	40016020 	.word	0x40016020

080011b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <MX_I2C2_Init+0x74>)
 80011ba:	4a1c      	ldr	r2, [pc, #112]	@ (800122c <MX_I2C2_Init+0x78>)
 80011bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80011be:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <MX_I2C2_Init+0x74>)
 80011c0:	f640 6214 	movw	r2, #3604	@ 0xe14
 80011c4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011c6:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <MX_I2C2_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011cc:	4b16      	ldr	r3, [pc, #88]	@ (8001228 <MX_I2C2_Init+0x74>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d2:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <MX_I2C2_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011d8:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <MX_I2C2_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011de:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <MX_I2C2_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e4:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <MX_I2C2_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <MX_I2C2_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011f0:	480d      	ldr	r0, [pc, #52]	@ (8001228 <MX_I2C2_Init+0x74>)
 80011f2:	f003 fbce 	bl	8004992 <HAL_I2C_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011fc:	f000 fb6a 	bl	80018d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001200:	2100      	movs	r1, #0
 8001202:	4809      	ldr	r0, [pc, #36]	@ (8001228 <MX_I2C2_Init+0x74>)
 8001204:	f003 fc60 	bl	8004ac8 <HAL_I2CEx_ConfigAnalogFilter>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800120e:	f000 fb61 	bl	80018d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001212:	2100      	movs	r1, #0
 8001214:	4804      	ldr	r0, [pc, #16]	@ (8001228 <MX_I2C2_Init+0x74>)
 8001216:	f003 fca2 	bl	8004b5e <HAL_I2CEx_ConfigDigitalFilter>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001220:	f000 fb58 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200002d8 	.word	0x200002d8
 800122c:	40005800 	.word	0x40005800

08001230 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <MX_QUADSPI_Init+0x44>)
 8001236:	4a10      	ldr	r2, [pc, #64]	@ (8001278 <MX_QUADSPI_Init+0x48>)
 8001238:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800123a:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <MX_QUADSPI_Init+0x44>)
 800123c:	2202      	movs	r2, #2
 800123e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001240:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <MX_QUADSPI_Init+0x44>)
 8001242:	2204      	movs	r2, #4
 8001244:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <MX_QUADSPI_Init+0x44>)
 8001248:	2210      	movs	r2, #16
 800124a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800124c:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <MX_QUADSPI_Init+0x44>)
 800124e:	2217      	movs	r2, #23
 8001250:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001252:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <MX_QUADSPI_Init+0x44>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <MX_QUADSPI_Init+0x44>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	@ (8001274 <MX_QUADSPI_Init+0x44>)
 8001260:	f003 fe80 	bl	8004f64 <HAL_QSPI_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800126a:	f000 fb33 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000032c 	.word	0x2000032c
 8001278:	a0001000 	.word	0xa0001000

0800127c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001280:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <MX_SPI3_Init+0x74>)
 8001282:	4a1c      	ldr	r2, [pc, #112]	@ (80012f4 <MX_SPI3_Init+0x78>)
 8001284:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001286:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <MX_SPI3_Init+0x74>)
 8001288:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800128c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800128e:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <MX_SPI3_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001294:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <MX_SPI3_Init+0x74>)
 8001296:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800129a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800129c:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <MX_SPI3_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a2:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012a8:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80012c8:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012ca:	2207      	movs	r2, #7
 80012cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012d6:	2208      	movs	r2, #8
 80012d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <MX_SPI3_Init+0x74>)
 80012dc:	f005 f9fc 	bl	80066d8 <HAL_SPI_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012e6:	f000 faf5 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000370 	.word	0x20000370
 80012f4:	40003c00 	.word	0x40003c00

080012f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001316:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <MX_TIM2_Init+0x94>)
 8001318:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800131c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 800131e:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <MX_TIM2_Init+0x94>)
 8001320:	224f      	movs	r2, #79	@ 0x4f
 8001322:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b19      	ldr	r3, [pc, #100]	@ (800138c <MX_TIM2_Init+0x94>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 800132a:	4b18      	ldr	r3, [pc, #96]	@ (800138c <MX_TIM2_Init+0x94>)
 800132c:	4a18      	ldr	r2, [pc, #96]	@ (8001390 <MX_TIM2_Init+0x98>)
 800132e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b16      	ldr	r3, [pc, #88]	@ (800138c <MX_TIM2_Init+0x94>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <MX_TIM2_Init+0x94>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800133c:	4813      	ldr	r0, [pc, #76]	@ (800138c <MX_TIM2_Init+0x94>)
 800133e:	f005 fa6e 	bl	800681e <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001348:	f000 fac4 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001350:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	4619      	mov	r1, r3
 8001358:	480c      	ldr	r0, [pc, #48]	@ (800138c <MX_TIM2_Init+0x94>)
 800135a:	f005 fc96 	bl	8006c8a <HAL_TIM_ConfigClockSource>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001364:	f000 fab6 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001368:	2320      	movs	r3, #32
 800136a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	@ (800138c <MX_TIM2_Init+0x94>)
 8001376:	f005 feb9 	bl	80070ec <HAL_TIMEx_MasterConfigSynchronization>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001380:	f000 faa8 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	3720      	adds	r7, #32
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200003d4 	.word	0x200003d4
 8001390:	000f423f 	.word	0x000f423f

08001394 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 800139a:	4a15      	ldr	r2, [pc, #84]	@ (80013f0 <MX_USART1_UART_Init+0x5c>)
 800139c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800139e:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013d8:	f005 ff2e 	bl	8007238 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013e2:	f000 fa77 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000420 	.word	0x20000420
 80013f0:	40013800 	.word	0x40013800

080013f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013f8:	4b14      	ldr	r3, [pc, #80]	@ (800144c <MX_USART3_UART_Init+0x58>)
 80013fa:	4a15      	ldr	r2, [pc, #84]	@ (8001450 <MX_USART3_UART_Init+0x5c>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013fe:	4b13      	ldr	r3, [pc, #76]	@ (800144c <MX_USART3_UART_Init+0x58>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b11      	ldr	r3, [pc, #68]	@ (800144c <MX_USART3_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <MX_USART3_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <MX_USART3_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <MX_USART3_UART_Init+0x58>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <MX_USART3_UART_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <MX_USART3_UART_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142a:	4b08      	ldr	r3, [pc, #32]	@ (800144c <MX_USART3_UART_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <MX_USART3_UART_Init+0x58>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	@ (800144c <MX_USART3_UART_Init+0x58>)
 8001438:	f005 fefe 	bl	8007238 <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001442:	f000 fa47 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200004a8 	.word	0x200004a8
 8001450:	40004800 	.word	0x40004800

08001454 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001458:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800145a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800145e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001462:	2206      	movs	r2, #6
 8001464:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001468:	2202      	movs	r2, #2
 800146a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800146e:	2202      	movs	r2, #2
 8001470:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001484:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001486:	2200      	movs	r2, #0
 8001488:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001492:	2200      	movs	r2, #0
 8001494:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001498:	f003 fbad 	bl	8004bf6 <HAL_PCD_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80014a2:	f000 fa17 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000530 	.word	0x20000530

080014b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014b6:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <MX_DMA_Init+0x38>)
 80014b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ba:	4a0b      	ldr	r2, [pc, #44]	@ (80014e8 <MX_DMA_Init+0x38>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <MX_DMA_Init+0x38>)
 80014c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2105      	movs	r1, #5
 80014d2:	200b      	movs	r0, #11
 80014d4:	f002 fd4a 	bl	8003f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014d8:	200b      	movs	r0, #11
 80014da:	f002 fd63 	bl	8003fa4 <HAL_NVIC_EnableIRQ>

}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000

080014ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08c      	sub	sp, #48	@ 0x30
 80014f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001502:	4bb7      	ldr	r3, [pc, #732]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	4ab6      	ldr	r2, [pc, #728]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150e:	4bb4      	ldr	r3, [pc, #720]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	4bb1      	ldr	r3, [pc, #708]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	4ab0      	ldr	r2, [pc, #704]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001526:	4bae      	ldr	r3, [pc, #696]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001532:	4bab      	ldr	r3, [pc, #684]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4aaa      	ldr	r2, [pc, #680]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 8001538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800153c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153e:	4ba8      	ldr	r3, [pc, #672]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4ba5      	ldr	r3, [pc, #660]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	4aa4      	ldr	r2, [pc, #656]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001556:	4ba2      	ldr	r3, [pc, #648]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	4b9f      	ldr	r3, [pc, #636]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	4a9e      	ldr	r2, [pc, #632]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156e:	4b9c      	ldr	r3, [pc, #624]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800157a:	4b99      	ldr	r3, [pc, #612]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	4a98      	ldr	r2, [pc, #608]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 8001580:	f043 0308 	orr.w	r3, r3, #8
 8001584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001586:	4b96      	ldr	r3, [pc, #600]	@ (80017e0 <MX_GPIO_Init+0x2f4>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001598:	4892      	ldr	r0, [pc, #584]	@ (80017e4 <MX_GPIO_Init+0x2f8>)
 800159a:	f003 f9bf 	bl	800491c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	f248 1104 	movw	r1, #33028	@ 0x8104
 80015a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a8:	f003 f9b8 	bl	800491c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80015ac:	2200      	movs	r2, #0
 80015ae:	f24f 0114 	movw	r1, #61460	@ 0xf014
 80015b2:	488d      	ldr	r0, [pc, #564]	@ (80017e8 <MX_GPIO_Init+0x2fc>)
 80015b4:	f003 f9b2 	bl	800491c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f241 0181 	movw	r1, #4225	@ 0x1081
 80015be:	488b      	ldr	r0, [pc, #556]	@ (80017ec <MX_GPIO_Init+0x300>)
 80015c0:	f003 f9ac 	bl	800491c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015ca:	4888      	ldr	r0, [pc, #544]	@ (80017ec <MX_GPIO_Init+0x300>)
 80015cc:	f003 f9a6 	bl	800491c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80015d6:	4886      	ldr	r0, [pc, #536]	@ (80017f0 <MX_GPIO_Init+0x304>)
 80015d8:	f003 f9a0 	bl	800491c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	2120      	movs	r1, #32
 80015e0:	4881      	ldr	r0, [pc, #516]	@ (80017e8 <MX_GPIO_Init+0x2fc>)
 80015e2:	f003 f99b 	bl	800491c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015e6:	2201      	movs	r2, #1
 80015e8:	2101      	movs	r1, #1
 80015ea:	487e      	ldr	r0, [pc, #504]	@ (80017e4 <MX_GPIO_Init+0x2f8>)
 80015ec:	f003 f996 	bl	800491c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80015f0:	f240 1315 	movw	r3, #277	@ 0x115
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4876      	ldr	r0, [pc, #472]	@ (80017e4 <MX_GPIO_Init+0x2f8>)
 800160a:	f002 ffdd 	bl	80045c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800160e:	236a      	movs	r3, #106	@ 0x6a
 8001610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001612:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	4619      	mov	r1, r3
 8001622:	4870      	ldr	r0, [pc, #448]	@ (80017e4 <MX_GPIO_Init+0x2f8>)
 8001624:	f002 ffd0 	bl	80045c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001628:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800162e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	486c      	ldr	r0, [pc, #432]	@ (80017f0 <MX_GPIO_Init+0x304>)
 8001640:	f002 ffc2 	bl	80045c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001644:	2303      	movs	r3, #3
 8001646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001654:	2308      	movs	r3, #8
 8001656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001662:	f002 ffb1 	bl	80045c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001666:	f248 1304 	movw	r3, #33028	@ 0x8104
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001682:	f002 ffa1 	bl	80045c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001686:	23e0      	movs	r3, #224	@ 0xe0
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001696:	2305      	movs	r3, #5
 8001698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a4:	f002 ff90 	bl	80045c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	484a      	ldr	r0, [pc, #296]	@ (80017e8 <MX_GPIO_Init+0x2fc>)
 80016be:	f002 ff83 	bl	80045c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80016c2:	f24f 0334 	movw	r3, #61492	@ 0xf034
 80016c6:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4619      	mov	r1, r3
 80016da:	4843      	ldr	r0, [pc, #268]	@ (80017e8 <MX_GPIO_Init+0x2fc>)
 80016dc:	f002 ff74 	bl	80045c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80016e0:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 80016e4:	61fb      	str	r3, [r7, #28]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4619      	mov	r1, r3
 80016f6:	483d      	ldr	r0, [pc, #244]	@ (80017ec <MX_GPIO_Init+0x300>)
 80016f8:	f002 ff66 	bl	80045c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80016fc:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001702:	2301      	movs	r3, #1
 8001704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	4835      	ldr	r0, [pc, #212]	@ (80017ec <MX_GPIO_Init+0x300>)
 8001716:	f002 ff57 	bl	80045c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800171a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800171e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	482f      	ldr	r0, [pc, #188]	@ (80017f0 <MX_GPIO_Init+0x304>)
 8001734:	f002 ff48 	bl	80045c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001738:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800173c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800173e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	4828      	ldr	r0, [pc, #160]	@ (80017f0 <MX_GPIO_Init+0x304>)
 8001750:	f002 ff3a 	bl	80045c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001754:	2302      	movs	r3, #2
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001764:	2305      	movs	r3, #5
 8001766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	4619      	mov	r1, r3
 800176e:	481f      	ldr	r0, [pc, #124]	@ (80017ec <MX_GPIO_Init+0x300>)
 8001770:	f002 ff2a 	bl	80045c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001774:	2378      	movs	r3, #120	@ 0x78
 8001776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001784:	2307      	movs	r3, #7
 8001786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	4817      	ldr	r0, [pc, #92]	@ (80017ec <MX_GPIO_Init+0x300>)
 8001790:	f002 ff1a 	bl	80045c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001794:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179a:	2312      	movs	r3, #18
 800179c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017a6:	2304      	movs	r3, #4
 80017a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	480d      	ldr	r0, [pc, #52]	@ (80017e8 <MX_GPIO_Init+0x2fc>)
 80017b2:	f002 ff09 	bl	80045c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2105      	movs	r1, #5
 80017ba:	2017      	movs	r0, #23
 80017bc:	f002 fbd6 	bl	8003f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017c0:	2017      	movs	r0, #23
 80017c2:	f002 fbef 	bl	8003fa4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2105      	movs	r1, #5
 80017ca:	2028      	movs	r0, #40	@ 0x28
 80017cc:	f002 fbce 	bl	8003f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017d0:	2028      	movs	r0, #40	@ 0x28
 80017d2:	f002 fbe7 	bl	8003fa4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017d6:	bf00      	nop
 80017d8:	3730      	adds	r7, #48	@ 0x30
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	48001000 	.word	0x48001000
 80017e8:	48000400 	.word	0x48000400
 80017ec:	48000c00 	.word	0x48000c00
 80017f0:	48000800 	.word	0x48000800

080017f4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
//Define ADC Callback (我們這個ADC的Timer會一段時間被Trigger出一個Event然後trigger這個Callback)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) /* Check if the interrupt comes from ACD1 */
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a05      	ldr	r2, [pc, #20]	@ (8001818 <HAL_ADC_ConvCpltCallback+0x24>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d102      	bne.n	800180c <HAL_ADC_ConvCpltCallback+0x18>
    {
    /* Set flag to true */
    Flg.ADCCMPLT = 255;
 8001806:	4b05      	ldr	r3, [pc, #20]	@ (800181c <HAL_ADC_ConvCpltCallback+0x28>)
 8001808:	22ff      	movs	r2, #255	@ 0xff
 800180a:	701a      	strb	r2, [r3, #0]
    }
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	50040000 	.word	0x50040000
 800181c:	20000a30 	.word	0x20000a30

08001820 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
//  {
//    osDelay(1);
//  }
	/* Infinite loop */
	for(;;)
	{	UART_Printf("Hello");
 8001828:	4817      	ldr	r0, [pc, #92]	@ (8001888 <StartDefaultTask+0x68>)
 800182a:	f000 fde3 	bl	80023f4 <UART_Printf>
		if (Flg.ADCCMPLT) /* Conversion completed, do calculations */
 800182e:	4b17      	ldr	r3, [pc, #92]	@ (800188c <StartDefaultTask+0x6c>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f8      	beq.n	8001828 <StartDefaultTask+0x8>
		{
		/* Temperature Sensor ADC-value, Reference Voltage ADC-value (if use) */
		Adc.IntSensTmp = TMPSENSOR_getTemperature(Adc.Raw[1], Adc.Raw[0]);
 8001836:	4b16      	ldr	r3, [pc, #88]	@ (8001890 <StartDefaultTask+0x70>)
 8001838:	885b      	ldrh	r3, [r3, #2]
 800183a:	4a15      	ldr	r2, [pc, #84]	@ (8001890 <StartDefaultTask+0x70>)
 800183c:	8812      	ldrh	r2, [r2, #0]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f000 fd65 	bl	8002310 <TMPSENSOR_getTemperature>
 8001846:	eeb0 7a40 	vmov.f32	s14, s0
 800184a:	eef0 7a60 	vmov.f32	s15, s1
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <StartDefaultTask+0x70>)
 8001850:	ed83 7b02 	vstr	d7, [r3, #8]
		#if(DBG_UART) /* Send data with UART2 */
		UART_Printf("Reference: Adc.Raw[0] = %u\r\n", Adc.Raw[0]);
 8001854:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <StartDefaultTask+0x70>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	480e      	ldr	r0, [pc, #56]	@ (8001894 <StartDefaultTask+0x74>)
 800185c:	f000 fdca 	bl	80023f4 <UART_Printf>
		UART_Printf("Sensor: Adc.Raw[1] = %u\r\n", Adc.Raw[1]);
 8001860:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <StartDefaultTask+0x70>)
 8001862:	885b      	ldrh	r3, [r3, #2]
 8001864:	4619      	mov	r1, r3
 8001866:	480c      	ldr	r0, [pc, #48]	@ (8001898 <StartDefaultTask+0x78>)
 8001868:	f000 fdc4 	bl	80023f4 <UART_Printf>
		UART_Printf("Temperature: Adc.IntSensTmp = %.2f℃\r\n", Adc.IntSensTmp);
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <StartDefaultTask+0x70>)
 800186e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001872:	480a      	ldr	r0, [pc, #40]	@ (800189c <StartDefaultTask+0x7c>)
 8001874:	f000 fdbe 	bl	80023f4 <UART_Printf>
		#endif
		#if(DBG_UART) /* Delay */
		HAL_Delay(250);
 8001878:	20fa      	movs	r0, #250	@ 0xfa
 800187a:	f000 fe4d 	bl	8002518 <HAL_Delay>
		#endif
		Flg.ADCCMPLT = 0; /* Nullify flag */
 800187e:	4b03      	ldr	r3, [pc, #12]	@ (800188c <StartDefaultTask+0x6c>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
	{	UART_Printf("Hello");
 8001884:	e7d0      	b.n	8001828 <StartDefaultTask+0x8>
 8001886:	bf00      	nop
 8001888:	0800db68 	.word	0x0800db68
 800188c:	20000a30 	.word	0x20000a30
 8001890:	20000a20 	.word	0x20000a20
 8001894:	0800db70 	.word	0x0800db70
 8001898:	0800db90 	.word	0x0800db90
 800189c:	0800dbac 	.word	0x0800dbac

080018a0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
//	  UART_Printf_Dbg("Hello World2");
    osDelay(1);
 80018a8:	2001      	movs	r0, #1
 80018aa:	f006 fe3d 	bl	8008528 <osDelay>
 80018ae:	e7fb      	b.n	80018a8 <StartTask02+0x8>

080018b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a04      	ldr	r2, [pc, #16]	@ (80018d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018c2:	f000 fe09 	bl	80024d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40012c00 	.word	0x40012c00

080018d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <Error_Handler+0x8>

080018e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	4b11      	ldr	r3, [pc, #68]	@ (800192c <HAL_MspInit+0x4c>)
 80018e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ea:	4a10      	ldr	r2, [pc, #64]	@ (800192c <HAL_MspInit+0x4c>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80018f2:	4b0e      	ldr	r3, [pc, #56]	@ (800192c <HAL_MspInit+0x4c>)
 80018f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <HAL_MspInit+0x4c>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001902:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <HAL_MspInit+0x4c>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001908:	6593      	str	r3, [r2, #88]	@ 0x58
 800190a:	4b08      	ldr	r3, [pc, #32]	@ (800192c <HAL_MspInit+0x4c>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	210f      	movs	r1, #15
 800191a:	f06f 0001 	mvn.w	r0, #1
 800191e:	f002 fb25 	bl	8003f6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000

08001930 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	@ 0x30
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a47      	ldr	r2, [pc, #284]	@ (8001a6c <HAL_ADC_MspInit+0x13c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	f040 8088 	bne.w	8001a64 <HAL_ADC_MspInit+0x134>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001954:	4b46      	ldr	r3, [pc, #280]	@ (8001a70 <HAL_ADC_MspInit+0x140>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001958:	4a45      	ldr	r2, [pc, #276]	@ (8001a70 <HAL_ADC_MspInit+0x140>)
 800195a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800195e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001960:	4b43      	ldr	r3, [pc, #268]	@ (8001a70 <HAL_ADC_MspInit+0x140>)
 8001962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001964:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800196c:	4b40      	ldr	r3, [pc, #256]	@ (8001a70 <HAL_ADC_MspInit+0x140>)
 800196e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001970:	4a3f      	ldr	r2, [pc, #252]	@ (8001a70 <HAL_ADC_MspInit+0x140>)
 8001972:	f043 0304 	orr.w	r3, r3, #4
 8001976:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001978:	4b3d      	ldr	r3, [pc, #244]	@ (8001a70 <HAL_ADC_MspInit+0x140>)
 800197a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001984:	4b3a      	ldr	r3, [pc, #232]	@ (8001a70 <HAL_ADC_MspInit+0x140>)
 8001986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001988:	4a39      	ldr	r2, [pc, #228]	@ (8001a70 <HAL_ADC_MspInit+0x140>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001990:	4b37      	ldr	r3, [pc, #220]	@ (8001a70 <HAL_ADC_MspInit+0x140>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199c:	4b34      	ldr	r3, [pc, #208]	@ (8001a70 <HAL_ADC_MspInit+0x140>)
 800199e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a0:	4a33      	ldr	r2, [pc, #204]	@ (8001a70 <HAL_ADC_MspInit+0x140>)
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a8:	4b31      	ldr	r3, [pc, #196]	@ (8001a70 <HAL_ADC_MspInit+0x140>)
 80019aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80019b4:	233f      	movs	r3, #63	@ 0x3f
 80019b6:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019b8:	230b      	movs	r3, #11
 80019ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	482b      	ldr	r0, [pc, #172]	@ (8001a74 <HAL_ADC_MspInit+0x144>)
 80019c8:	f002 fdfe 	bl	80045c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 80019cc:	2310      	movs	r3, #16
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019d0:	230b      	movs	r3, #11
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	4619      	mov	r1, r3
 80019de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019e2:	f002 fdf1 	bl	80045c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019ea:	230b      	movs	r3, #11
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	481f      	ldr	r0, [pc, #124]	@ (8001a78 <HAL_ADC_MspInit+0x148>)
 80019fa:	f002 fde5 	bl	80045c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80019fe:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <HAL_ADC_MspInit+0x14c>)
 8001a00:	4a1f      	ldr	r2, [pc, #124]	@ (8001a80 <HAL_ADC_MspInit+0x150>)
 8001a02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001a04:	4b1d      	ldr	r3, [pc, #116]	@ (8001a7c <HAL_ADC_MspInit+0x14c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a7c <HAL_ADC_MspInit+0x14c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	@ (8001a7c <HAL_ADC_MspInit+0x14c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a16:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <HAL_ADC_MspInit+0x14c>)
 8001a18:	2280      	movs	r2, #128	@ 0x80
 8001a1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a1c:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <HAL_ADC_MspInit+0x14c>)
 8001a1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a24:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <HAL_ADC_MspInit+0x14c>)
 8001a26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a2a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a2c:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <HAL_ADC_MspInit+0x14c>)
 8001a2e:	2220      	movs	r2, #32
 8001a30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a32:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <HAL_ADC_MspInit+0x14c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a38:	4810      	ldr	r0, [pc, #64]	@ (8001a7c <HAL_ADC_MspInit+0x14c>)
 8001a3a:	f002 fbcd 	bl	80041d8 <HAL_DMA_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_ADC_MspInit+0x118>
    {
      Error_Handler();
 8001a44:	f7ff ff46 	bl	80018d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a7c <HAL_ADC_MspInit+0x14c>)
 8001a4c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a7c <HAL_ADC_MspInit+0x14c>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2105      	movs	r1, #5
 8001a58:	2012      	movs	r0, #18
 8001a5a:	f002 fa87 	bl	8003f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a5e:	2012      	movs	r0, #18
 8001a60:	f002 faa0 	bl	8003fa4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a64:	bf00      	nop
 8001a66:	3730      	adds	r7, #48	@ 0x30
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	50040000 	.word	0x50040000
 8001a70:	40021000 	.word	0x40021000
 8001a74:	48000800 	.word	0x48000800
 8001a78:	48000400 	.word	0x48000400
 8001a7c:	20000258 	.word	0x20000258
 8001a80:	40020008 	.word	0x40020008

08001a84 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b0ac      	sub	sp, #176	@ 0xb0
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2288      	movs	r2, #136	@ 0x88
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f009 ff7d 	bl	800b9a4 <memset>
  if(DFSDM1_Init == 0)
 8001aaa:	4b25      	ldr	r3, [pc, #148]	@ (8001b40 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d142      	bne.n	8001b38 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001ab2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ab6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f004 f93c 	bl	8005d40 <HAL_RCCEx_PeriphCLKConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001ace:	f7ff ff01 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b44 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b44 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ad8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001adc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ade:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aea:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	4a15      	ldr	r2, [pc, #84]	@ (8001b44 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001af0:	f043 0310 	orr.w	r3, r3, #16
 8001af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af6:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001b02:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001b06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b1c:	2306      	movs	r3, #6
 8001b1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b22:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b26:	4619      	mov	r1, r3
 8001b28:	4807      	ldr	r0, [pc, #28]	@ (8001b48 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001b2a:	f002 fd4d 	bl	80045c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001b2e:	4b04      	ldr	r3, [pc, #16]	@ (8001b40 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	3301      	adds	r3, #1
 8001b34:	4a02      	ldr	r2, [pc, #8]	@ (8001b40 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b36:	6013      	str	r3, [r2, #0]
  }

}
 8001b38:	bf00      	nop
 8001b3a:	37b0      	adds	r7, #176	@ 0xb0
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000a34 	.word	0x20000a34
 8001b44:	40021000 	.word	0x40021000
 8001b48:	48001000 	.word	0x48001000

08001b4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b0ac      	sub	sp, #176	@ 0xb0
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2288      	movs	r2, #136	@ 0x88
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f009 ff19 	bl	800b9a4 <memset>
  if(hi2c->Instance==I2C2)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a21      	ldr	r2, [pc, #132]	@ (8001bfc <HAL_I2C_MspInit+0xb0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d13b      	bne.n	8001bf4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f004 f8d9 	bl	8005d40 <HAL_RCCEx_PeriphCLKConfig>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b94:	f7ff fe9e 	bl	80018d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b98:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <HAL_I2C_MspInit+0xb4>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9c:	4a18      	ldr	r2, [pc, #96]	@ (8001c00 <HAL_I2C_MspInit+0xb4>)
 8001b9e:	f043 0302 	orr.w	r3, r3, #2
 8001ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba4:	4b16      	ldr	r3, [pc, #88]	@ (8001c00 <HAL_I2C_MspInit+0xb4>)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001bb0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001bb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb8:	2312      	movs	r3, #18
 8001bba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bca:	2304      	movs	r3, #4
 8001bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480b      	ldr	r0, [pc, #44]	@ (8001c04 <HAL_I2C_MspInit+0xb8>)
 8001bd8:	f002 fcf6 	bl	80045c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bdc:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <HAL_I2C_MspInit+0xb4>)
 8001bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be0:	4a07      	ldr	r2, [pc, #28]	@ (8001c00 <HAL_I2C_MspInit+0xb4>)
 8001be2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001be6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <HAL_I2C_MspInit+0xb4>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001bf4:	bf00      	nop
 8001bf6:	37b0      	adds	r7, #176	@ 0xb0
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40005800 	.word	0x40005800
 8001c00:	40021000 	.word	0x40021000
 8001c04:	48000400 	.word	0x48000400

08001c08 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a17      	ldr	r2, [pc, #92]	@ (8001c84 <HAL_QSPI_MspInit+0x7c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d128      	bne.n	8001c7c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001c2a:	4b17      	ldr	r3, [pc, #92]	@ (8001c88 <HAL_QSPI_MspInit+0x80>)
 8001c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c2e:	4a16      	ldr	r2, [pc, #88]	@ (8001c88 <HAL_QSPI_MspInit+0x80>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c34:	6513      	str	r3, [r2, #80]	@ 0x50
 8001c36:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <HAL_QSPI_MspInit+0x80>)
 8001c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c42:	4b11      	ldr	r3, [pc, #68]	@ (8001c88 <HAL_QSPI_MspInit+0x80>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c46:	4a10      	ldr	r2, [pc, #64]	@ (8001c88 <HAL_QSPI_MspInit+0x80>)
 8001c48:	f043 0310 	orr.w	r3, r3, #16
 8001c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <HAL_QSPI_MspInit+0x80>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001c5a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001c5e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c6c:	230a      	movs	r3, #10
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4619      	mov	r1, r3
 8001c76:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <HAL_QSPI_MspInit+0x84>)
 8001c78:	f002 fca6 	bl	80045c8 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001c7c:	bf00      	nop
 8001c7e:	3728      	adds	r7, #40	@ 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	a0001000 	.word	0xa0001000
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	48001000 	.word	0x48001000

08001c90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	@ 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a17      	ldr	r2, [pc, #92]	@ (8001d0c <HAL_SPI_MspInit+0x7c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d128      	bne.n	8001d04 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cb2:	4b17      	ldr	r3, [pc, #92]	@ (8001d10 <HAL_SPI_MspInit+0x80>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb6:	4a16      	ldr	r2, [pc, #88]	@ (8001d10 <HAL_SPI_MspInit+0x80>)
 8001cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cbe:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <HAL_SPI_MspInit+0x80>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <HAL_SPI_MspInit+0x80>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cce:	4a10      	ldr	r2, [pc, #64]	@ (8001d10 <HAL_SPI_MspInit+0x80>)
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <HAL_SPI_MspInit+0x80>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001ce2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cf4:	2306      	movs	r3, #6
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <HAL_SPI_MspInit+0x84>)
 8001d00:	f002 fc62 	bl	80045c8 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	@ 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40003c00 	.word	0x40003c00
 8001d10:	40021000 	.word	0x40021000
 8001d14:	48000800 	.word	0x48000800

08001d18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	@ 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d38:	d128      	bne.n	8001d8c <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d3a:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <HAL_TIM_Base_MspInit+0x7c>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3e:	4a15      	ldr	r2, [pc, #84]	@ (8001d94 <HAL_TIM_Base_MspInit+0x7c>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d46:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <HAL_TIM_Base_MspInit+0x7c>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <HAL_TIM_Base_MspInit+0x7c>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d56:	4a0f      	ldr	r2, [pc, #60]	@ (8001d94 <HAL_TIM_Base_MspInit+0x7c>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <HAL_TIM_Base_MspInit+0x7c>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001d6a:	2308      	movs	r3, #8
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d88:	f002 fc1e 	bl	80045c8 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001d8c:	bf00      	nop
 8001d8e:	3728      	adds	r7, #40	@ 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000

08001d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b0ae      	sub	sp, #184	@ 0xb8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	2288      	movs	r2, #136	@ 0x88
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f009 fdf3 	bl	800b9a4 <memset>
  if(huart->Instance==USART1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a42      	ldr	r2, [pc, #264]	@ (8001ecc <HAL_UART_MspInit+0x134>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d13b      	bne.n	8001e40 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 ffb3 	bl	8005d40 <HAL_RCCEx_PeriphCLKConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001de0:	f7ff fd78 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001de4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed0 <HAL_UART_MspInit+0x138>)
 8001de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de8:	4a39      	ldr	r2, [pc, #228]	@ (8001ed0 <HAL_UART_MspInit+0x138>)
 8001dea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dee:	6613      	str	r3, [r2, #96]	@ 0x60
 8001df0:	4b37      	ldr	r3, [pc, #220]	@ (8001ed0 <HAL_UART_MspInit+0x138>)
 8001df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df8:	61bb      	str	r3, [r7, #24]
 8001dfa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfc:	4b34      	ldr	r3, [pc, #208]	@ (8001ed0 <HAL_UART_MspInit+0x138>)
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e00:	4a33      	ldr	r2, [pc, #204]	@ (8001ed0 <HAL_UART_MspInit+0x138>)
 8001e02:	f043 0302 	orr.w	r3, r3, #2
 8001e06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e08:	4b31      	ldr	r3, [pc, #196]	@ (8001ed0 <HAL_UART_MspInit+0x138>)
 8001e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001e14:	23c0      	movs	r3, #192	@ 0xc0
 8001e16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e2c:	2307      	movs	r3, #7
 8001e2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e32:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e36:	4619      	mov	r1, r3
 8001e38:	4826      	ldr	r0, [pc, #152]	@ (8001ed4 <HAL_UART_MspInit+0x13c>)
 8001e3a:	f002 fbc5 	bl	80045c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e3e:	e040      	b.n	8001ec2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a24      	ldr	r2, [pc, #144]	@ (8001ed8 <HAL_UART_MspInit+0x140>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d13b      	bne.n	8001ec2 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 ff72 	bl	8005d40 <HAL_RCCEx_PeriphCLKConfig>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001e62:	f7ff fd37 	bl	80018d4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <HAL_UART_MspInit+0x138>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6a:	4a19      	ldr	r2, [pc, #100]	@ (8001ed0 <HAL_UART_MspInit+0x138>)
 8001e6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e72:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <HAL_UART_MspInit+0x138>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <HAL_UART_MspInit+0x138>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e82:	4a13      	ldr	r2, [pc, #76]	@ (8001ed0 <HAL_UART_MspInit+0x138>)
 8001e84:	f043 0308 	orr.w	r3, r3, #8
 8001e88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <HAL_UART_MspInit+0x138>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001e96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4807      	ldr	r0, [pc, #28]	@ (8001edc <HAL_UART_MspInit+0x144>)
 8001ebe:	f002 fb83 	bl	80045c8 <HAL_GPIO_Init>
}
 8001ec2:	bf00      	nop
 8001ec4:	37b8      	adds	r7, #184	@ 0xb8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40013800 	.word	0x40013800
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	48000400 	.word	0x48000400
 8001ed8:	40004800 	.word	0x40004800
 8001edc:	48000c00 	.word	0x48000c00

08001ee0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	@ 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f00:	d154      	bne.n	8001fac <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb4 <HAL_PCD_MspInit+0xd4>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f06:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb4 <HAL_PCD_MspInit+0xd4>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f0e:	4b29      	ldr	r3, [pc, #164]	@ (8001fb4 <HAL_PCD_MspInit+0xd4>)
 8001f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001f1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f32:	f002 fb49 	bl	80045c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001f36:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f44:	2303      	movs	r3, #3
 8001f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f48:	230a      	movs	r3, #10
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	4619      	mov	r1, r3
 8001f52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f56:	f002 fb37 	bl	80045c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f5a:	4b16      	ldr	r3, [pc, #88]	@ (8001fb4 <HAL_PCD_MspInit+0xd4>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5e:	4a15      	ldr	r2, [pc, #84]	@ (8001fb4 <HAL_PCD_MspInit+0xd4>)
 8001f60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f66:	4b13      	ldr	r3, [pc, #76]	@ (8001fb4 <HAL_PCD_MspInit+0xd4>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <HAL_PCD_MspInit+0xd4>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d114      	bne.n	8001fa8 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb4 <HAL_PCD_MspInit+0xd4>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f82:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb4 <HAL_PCD_MspInit+0xd4>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <HAL_PCD_MspInit+0xd4>)
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001f96:	f002 ffd5 	bl	8004f44 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_PCD_MspInit+0xd4>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9e:	4a05      	ldr	r2, [pc, #20]	@ (8001fb4 <HAL_PCD_MspInit+0xd4>)
 8001fa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001fa6:	e001      	b.n	8001fac <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001fa8:	f002 ffcc 	bl	8004f44 <HAL_PWREx_EnableVddUSB>
}
 8001fac:	bf00      	nop
 8001fae:	3728      	adds	r7, #40	@ 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08c      	sub	sp, #48	@ 0x30
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8002080 <HAL_InitTick+0xc8>)
 8001fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fca:	4a2d      	ldr	r2, [pc, #180]	@ (8002080 <HAL_InitTick+0xc8>)
 8001fcc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002080 <HAL_InitTick+0xc8>)
 8001fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fde:	f107 020c 	add.w	r2, r7, #12
 8001fe2:	f107 0310 	add.w	r3, r7, #16
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f003 fe17 	bl	8005c1c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001fee:	f003 fdff 	bl	8005bf0 <HAL_RCC_GetPCLK2Freq>
 8001ff2:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff6:	4a23      	ldr	r2, [pc, #140]	@ (8002084 <HAL_InitTick+0xcc>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	0c9b      	lsrs	r3, r3, #18
 8001ffe:	3b01      	subs	r3, #1
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002002:	4b21      	ldr	r3, [pc, #132]	@ (8002088 <HAL_InitTick+0xd0>)
 8002004:	4a21      	ldr	r2, [pc, #132]	@ (800208c <HAL_InitTick+0xd4>)
 8002006:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002008:	4b1f      	ldr	r3, [pc, #124]	@ (8002088 <HAL_InitTick+0xd0>)
 800200a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800200e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002010:	4a1d      	ldr	r2, [pc, #116]	@ (8002088 <HAL_InitTick+0xd0>)
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002016:	4b1c      	ldr	r3, [pc, #112]	@ (8002088 <HAL_InitTick+0xd0>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201c:	4b1a      	ldr	r3, [pc, #104]	@ (8002088 <HAL_InitTick+0xd0>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002022:	4b19      	ldr	r3, [pc, #100]	@ (8002088 <HAL_InitTick+0xd0>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002028:	4817      	ldr	r0, [pc, #92]	@ (8002088 <HAL_InitTick+0xd0>)
 800202a:	f004 fbf8 	bl	800681e <HAL_TIM_Base_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002034:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002038:	2b00      	cmp	r3, #0
 800203a:	d11b      	bne.n	8002074 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800203c:	4812      	ldr	r0, [pc, #72]	@ (8002088 <HAL_InitTick+0xd0>)
 800203e:	f004 fcad 	bl	800699c <HAL_TIM_Base_Start_IT>
 8002042:	4603      	mov	r3, r0
 8002044:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002048:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800204c:	2b00      	cmp	r3, #0
 800204e:	d111      	bne.n	8002074 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002050:	2019      	movs	r0, #25
 8002052:	f001 ffa7 	bl	8003fa4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b0f      	cmp	r3, #15
 800205a:	d808      	bhi.n	800206e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800205c:	2200      	movs	r2, #0
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	2019      	movs	r0, #25
 8002062:	f001 ff83 	bl	8003f6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002066:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <HAL_InitTick+0xd8>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	e002      	b.n	8002074 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002074:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002078:	4618      	mov	r0, r3
 800207a:	3730      	adds	r7, #48	@ 0x30
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	431bde83 	.word	0x431bde83
 8002088:	20000a38 	.word	0x20000a38
 800208c:	40012c00 	.word	0x40012c00
 8002090:	20000004 	.word	0x20000004

08002094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <NMI_Handler+0x4>

0800209c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <HardFault_Handler+0x4>

080020a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <MemManage_Handler+0x4>

080020ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <BusFault_Handler+0x4>

080020b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <UsageFault_Handler+0x4>

080020bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020d0:	4802      	ldr	r0, [pc, #8]	@ (80020dc <DMA1_Channel1_IRQHandler+0x10>)
 80020d2:	f002 f999 	bl	8004408 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000258 	.word	0x20000258

080020e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020e4:	4802      	ldr	r0, [pc, #8]	@ (80020f0 <ADC1_2_IRQHandler+0x10>)
 80020e6:	f000 fe3d 	bl	8002d64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200001f4 	.word	0x200001f4

080020f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80020f8:	2020      	movs	r0, #32
 80020fa:	f002 fc27 	bl	800494c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80020fe:	2040      	movs	r0, #64	@ 0x40
 8002100:	f002 fc24 	bl	800494c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002104:	2080      	movs	r0, #128	@ 0x80
 8002106:	f002 fc21 	bl	800494c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800210a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800210e:	f002 fc1d 	bl	800494c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800211c:	4802      	ldr	r0, [pc, #8]	@ (8002128 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800211e:	f004 fcad 	bl	8006a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000a38 	.word	0x20000a38

0800212c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002130:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002134:	f002 fc0a 	bl	800494c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002138:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800213c:	f002 fc06 	bl	800494c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002140:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002144:	f002 fc02 	bl	800494c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002148:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800214c:	f002 fbfe 	bl	800494c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002150:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002154:	f002 fbfa 	bl	800494c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}

0800215c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return 1;
 8002160:	2301      	movs	r3, #1
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_kill>:

int _kill(int pid, int sig)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002176:	f009 fc67 	bl	800ba48 <__errno>
 800217a:	4603      	mov	r3, r0
 800217c:	2216      	movs	r2, #22
 800217e:	601a      	str	r2, [r3, #0]
  return -1;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_exit>:

void _exit (int status)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002194:	f04f 31ff 	mov.w	r1, #4294967295
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ffe7 	bl	800216c <_kill>
  while (1) {}    /* Make sure we hang here */
 800219e:	bf00      	nop
 80021a0:	e7fd      	b.n	800219e <_exit+0x12>

080021a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e00a      	b.n	80021ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021b4:	f3af 8000 	nop.w
 80021b8:	4601      	mov	r1, r0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	60ba      	str	r2, [r7, #8]
 80021c0:	b2ca      	uxtb	r2, r1
 80021c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3301      	adds	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	dbf0      	blt.n	80021b4 <_read+0x12>
  }

  return len;
 80021d2:	687b      	ldr	r3, [r7, #4]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e009      	b.n	8002202 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	60ba      	str	r2, [r7, #8]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3301      	adds	r3, #1
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	429a      	cmp	r2, r3
 8002208:	dbf1      	blt.n	80021ee <_write+0x12>
  }
  return len;
 800220a:	687b      	ldr	r3, [r7, #4]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <_close>:

int _close(int file)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800221c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800223c:	605a      	str	r2, [r3, #4]
  return 0;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <_isatty>:

int _isatty(int file)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002254:	2301      	movs	r3, #1
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002284:	4a14      	ldr	r2, [pc, #80]	@ (80022d8 <_sbrk+0x5c>)
 8002286:	4b15      	ldr	r3, [pc, #84]	@ (80022dc <_sbrk+0x60>)
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002290:	4b13      	ldr	r3, [pc, #76]	@ (80022e0 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002298:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <_sbrk+0x64>)
 800229a:	4a12      	ldr	r2, [pc, #72]	@ (80022e4 <_sbrk+0x68>)
 800229c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d207      	bcs.n	80022bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022ac:	f009 fbcc 	bl	800ba48 <__errno>
 80022b0:	4603      	mov	r3, r0
 80022b2:	220c      	movs	r2, #12
 80022b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	e009      	b.n	80022d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022bc:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <_sbrk+0x64>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c2:	4b07      	ldr	r3, [pc, #28]	@ (80022e0 <_sbrk+0x64>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	4a05      	ldr	r2, [pc, #20]	@ (80022e0 <_sbrk+0x64>)
 80022cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20018000 	.word	0x20018000
 80022dc:	00000400 	.word	0x00000400
 80022e0:	20000a84 	.word	0x20000a84
 80022e4:	20002508 	.word	0x20002508

080022e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <SystemInit+0x20>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f2:	4a05      	ldr	r2, [pc, #20]	@ (8002308 <SystemInit+0x20>)
 80022f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00
 800230c:	00000000 	.word	0x00000000

08002310 <TMPSENSOR_getTemperature>:
  * @brief Calculate temperature (tested on STM32F401, other MCU may have different constants!)
  * @note If IntRef not use, set it [ex.: #define TMPSENSOR_USE_INTREF 0]
  * @param Temperature sensor's ADC 16-bit value, Internal Reference ADC 16-bit value (if use)
  * @retval Internal sensor temperature
  */
double TMPSENSOR_getTemperature(uint16_t adc_sensor, uint16_t adc_intref){
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	460a      	mov	r2, r1
 800231a:	80fb      	strh	r3, [r7, #6]
 800231c:	4613      	mov	r3, r2
 800231e:	80bb      	strh	r3, [r7, #4]

#if(TMPSENSOR_USE_INTREF)

	double intref_vol = (TMPSENSOR_ADCMAX*TMPSENSOR_ADCVREFINT)/adc_intref;
 8002320:	88bb      	ldrh	r3, [r7, #4]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f8fe 	bl	8000524 <__aeabi_i2d>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	a12b      	add	r1, pc, #172	@ (adr r1, 80023dc <TMPSENSOR_getTemperature+0xcc>)
 800232e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002332:	f7fe fa8b 	bl	800084c <__aeabi_ddiv>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	e9c7 2306 	strd	r2, r3, [r7, #24]

#else
	double intref_vol = TMPSENSOR_ADCREFVOL;
#endif

	double sensor_vol = adc_sensor * intref_vol/TMPSENSOR_ADCMAX;
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f8ef 	bl	8000524 <__aeabi_i2d>
 8002346:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800234a:	f7fe f955 	bl	80005f8 <__aeabi_dmul>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	a323      	add	r3, pc, #140	@ (adr r3, 80023e4 <TMPSENSOR_getTemperature+0xd4>)
 8002358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235c:	f7fe fa76 	bl	800084c <__aeabi_ddiv>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	e9c7 2304 	strd	r2, r3, [r7, #16]

	double sensor_tmp = (sensor_vol - TMPSENSOR_V25) *1000.0/TMPSENSOR_AVGSLOPE + 25.0;
 8002368:	a320      	add	r3, pc, #128	@ (adr r3, 80023ec <TMPSENSOR_getTemperature+0xdc>)
 800236a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002372:	f7fd ff89 	bl	8000288 <__aeabi_dsub>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	4b13      	ldr	r3, [pc, #76]	@ (80023d0 <TMPSENSOR_getTemperature+0xc0>)
 8002384:	f7fe f938 	bl	80005f8 <__aeabi_dmul>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	4b0f      	ldr	r3, [pc, #60]	@ (80023d4 <TMPSENSOR_getTemperature+0xc4>)
 8002396:	f7fe fa59 	bl	800084c <__aeabi_ddiv>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <TMPSENSOR_getTemperature+0xc8>)
 80023a8:	f7fd ff70 	bl	800028c <__adddf3>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return sensor_tmp;
 80023b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023b8:	ec43 2b17 	vmov	d7, r2, r3
}
 80023bc:	eeb0 0a47 	vmov.f32	s0, s14
 80023c0:	eef0 0a67 	vmov.f32	s1, s15
 80023c4:	3720      	adds	r7, #32
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	f3af 8000 	nop.w
 80023d0:	408f4000 	.word	0x408f4000
 80023d4:	40040000 	.word	0x40040000
 80023d8:	40390000 	.word	0x40390000
 80023dc:	33333333 	.word	0x33333333
 80023e0:	40b35af3 	.word	0x40b35af3
 80023e4:	00000000 	.word	0x00000000
 80023e8:	40affe00 	.word	0x40affe00
 80023ec:	851eb852 	.word	0x851eb852
 80023f0:	3fe851eb 	.word	0x3fe851eb

080023f4 <UART_Printf>:

#define DEBUG_UART 1
/* Define END */


void UART_Printf(const char* fmt, ...) {
 80023f4:	b40f      	push	{r0, r1, r2, r3}
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b0c2      	sub	sp, #264	@ 0x108
 80023fa:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 80023fc:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8002400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002404:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002408:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 800240a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800240e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002412:	f107 0008 	add.w	r0, r7, #8
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800241c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002420:	f009 fab2 	bl	800b988 <vsniprintf>
    HAL_UART_Transmit(&UART_COM, (uint8_t*)buff, strlen(buff), UART_MAXDELAY);
 8002424:	f107 0308 	add.w	r3, r7, #8
 8002428:	4618      	mov	r0, r3
 800242a:	f7fd ff21 	bl	8000270 <strlen>
 800242e:	4603      	mov	r3, r0
 8002430:	b29a      	uxth	r2, r3
 8002432:	f107 0108 	add.w	r1, r7, #8
 8002436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800243a:	4805      	ldr	r0, [pc, #20]	@ (8002450 <UART_Printf+0x5c>)
 800243c:	f004 ff4a 	bl	80072d4 <HAL_UART_Transmit>
    va_end(args);
}
 8002440:	bf00      	nop
 8002442:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002446:	46bd      	mov	sp, r7
 8002448:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800244c:	b004      	add	sp, #16
 800244e:	4770      	bx	lr
 8002450:	20000420 	.word	0x20000420

08002454 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002454:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800248c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002458:	f7ff ff46 	bl	80022e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800245c:	480c      	ldr	r0, [pc, #48]	@ (8002490 <LoopForever+0x6>)
  ldr r1, =_edata
 800245e:	490d      	ldr	r1, [pc, #52]	@ (8002494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002460:	4a0d      	ldr	r2, [pc, #52]	@ (8002498 <LoopForever+0xe>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002464:	e002      	b.n	800246c <LoopCopyDataInit>

08002466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246a:	3304      	adds	r3, #4

0800246c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800246c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002470:	d3f9      	bcc.n	8002466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002472:	4a0a      	ldr	r2, [pc, #40]	@ (800249c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002474:	4c0a      	ldr	r4, [pc, #40]	@ (80024a0 <LoopForever+0x16>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002478:	e001      	b.n	800247e <LoopFillZerobss>

0800247a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800247c:	3204      	adds	r2, #4

0800247e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002480:	d3fb      	bcc.n	800247a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002482:	f009 fae7 	bl	800ba54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002486:	f7fe fd07 	bl	8000e98 <main>

0800248a <LoopForever>:

LoopForever:
    b LoopForever
 800248a:	e7fe      	b.n	800248a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800248c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002494:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002498:	0800e000 	.word	0x0800e000
  ldr r2, =_sbss
 800249c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80024a0:	20002504 	.word	0x20002504

080024a4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024a4:	e7fe      	b.n	80024a4 <ADC3_IRQHandler>

080024a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b0:	2003      	movs	r0, #3
 80024b2:	f001 fd50 	bl	8003f56 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024b6:	200f      	movs	r0, #15
 80024b8:	f7ff fd7e 	bl	8001fb8 <HAL_InitTick>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	71fb      	strb	r3, [r7, #7]
 80024c6:	e001      	b.n	80024cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024c8:	f7ff fa0a 	bl	80018e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024cc:	79fb      	ldrb	r3, [r7, #7]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024dc:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <HAL_IncTick+0x20>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <HAL_IncTick+0x24>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4413      	add	r3, r2
 80024e8:	4a04      	ldr	r2, [pc, #16]	@ (80024fc <HAL_IncTick+0x24>)
 80024ea:	6013      	str	r3, [r2, #0]
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000008 	.word	0x20000008
 80024fc:	20000a88 	.word	0x20000a88

08002500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return uwTick;
 8002504:	4b03      	ldr	r3, [pc, #12]	@ (8002514 <HAL_GetTick+0x14>)
 8002506:	681b      	ldr	r3, [r3, #0]
}
 8002508:	4618      	mov	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	20000a88 	.word	0x20000a88

08002518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002520:	f7ff ffee 	bl	8002500 <HAL_GetTick>
 8002524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002530:	d005      	beq.n	800253e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002532:	4b0a      	ldr	r3, [pc, #40]	@ (800255c <HAL_Delay+0x44>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4413      	add	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800253e:	bf00      	nop
 8002540:	f7ff ffde 	bl	8002500 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	429a      	cmp	r2, r3
 800254e:	d8f7      	bhi.n	8002540 <HAL_Delay+0x28>
  {
  }
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000008 	.word	0x20000008

08002560 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	609a      	str	r2, [r3, #8]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	609a      	str	r2, [r3, #8]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3360      	adds	r3, #96	@ 0x60
 80025da:	461a      	mov	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b08      	ldr	r3, [pc, #32]	@ (800260c <LL_ADC_SetOffset+0x44>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002600:	bf00      	nop
 8002602:	371c      	adds	r7, #28
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	03fff000 	.word	0x03fff000

08002610 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3360      	adds	r3, #96	@ 0x60
 800261e:	461a      	mov	r2, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	3360      	adds	r3, #96	@ 0x60
 800264c:	461a      	mov	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	431a      	orrs	r2, r3
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002666:	bf00      	nop
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3330      	adds	r3, #48	@ 0x30
 80026a8:	461a      	mov	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	4413      	add	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	211f      	movs	r1, #31
 80026c4:	fa01 f303 	lsl.w	r3, r1, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	401a      	ands	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	0e9b      	lsrs	r3, r3, #26
 80026d0:	f003 011f 	and.w	r1, r3, #31
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	fa01 f303 	lsl.w	r3, r1, r3
 80026de:	431a      	orrs	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026e4:	bf00      	nop
 80026e6:	371c      	adds	r7, #28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002716:	b480      	push	{r7}
 8002718:	b087      	sub	sp, #28
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3314      	adds	r3, #20
 8002726:	461a      	mov	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	0e5b      	lsrs	r3, r3, #25
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	4413      	add	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	0d1b      	lsrs	r3, r3, #20
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	2107      	movs	r1, #7
 8002744:	fa01 f303 	lsl.w	r3, r1, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	401a      	ands	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	0d1b      	lsrs	r3, r3, #20
 8002750:	f003 031f 	and.w	r3, r3, #31
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	431a      	orrs	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002760:	bf00      	nop
 8002762:	371c      	adds	r7, #28
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002784:	43db      	mvns	r3, r3
 8002786:	401a      	ands	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f003 0318 	and.w	r3, r3, #24
 800278e:	4908      	ldr	r1, [pc, #32]	@ (80027b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002790:	40d9      	lsrs	r1, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	400b      	ands	r3, r1
 8002796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279a:	431a      	orrs	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	0007ffff 	.word	0x0007ffff

080027b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 031f 	and.w	r3, r3, #31
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80027fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6093      	str	r3, [r2, #8]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002824:	d101      	bne.n	800282a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002848:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800284c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002870:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002874:	d101      	bne.n	800287a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002898:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800289c:	f043 0201 	orr.w	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <LL_ADC_IsEnabled+0x18>
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <LL_ADC_IsEnabled+0x1a>
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028e6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028ea:	f043 0204 	orr.w	r2, r3, #4
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b04      	cmp	r3, #4
 8002910:	d101      	bne.n	8002916 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b08      	cmp	r3, #8
 8002936:	d101      	bne.n	800293c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b089      	sub	sp, #36	@ 0x24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e130      	b.n	8002bc8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7fe ffdb 	bl	8001930 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff3f 	bl	8002810 <LL_ADC_IsDeepPowerDownEnabled>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d004      	beq.n	80029a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff25 	bl	80027ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff5a 	bl	8002860 <LL_ADC_IsInternalRegulatorEnabled>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d115      	bne.n	80029de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ff3e 	bl	8002838 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029bc:	4b84      	ldr	r3, [pc, #528]	@ (8002bd0 <HAL_ADC_Init+0x284>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	099b      	lsrs	r3, r3, #6
 80029c2:	4a84      	ldr	r2, [pc, #528]	@ (8002bd4 <HAL_ADC_Init+0x288>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	099b      	lsrs	r3, r3, #6
 80029ca:	3301      	adds	r3, #1
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029d0:	e002      	b.n	80029d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f9      	bne.n	80029d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ff3c 	bl	8002860 <LL_ADC_IsInternalRegulatorEnabled>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10d      	bne.n	8002a0a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f2:	f043 0210 	orr.w	r2, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff ff75 	bl	80028fe <LL_ADC_REG_IsConversionOngoing>
 8002a14:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f040 80c9 	bne.w	8002bb6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f040 80c5 	bne.w	8002bb6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a30:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a34:	f043 0202 	orr.w	r2, r3, #2
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff35 	bl	80028b0 <LL_ADC_IsEnabled>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d115      	bne.n	8002a78 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a4c:	4862      	ldr	r0, [pc, #392]	@ (8002bd8 <HAL_ADC_Init+0x28c>)
 8002a4e:	f7ff ff2f 	bl	80028b0 <LL_ADC_IsEnabled>
 8002a52:	4604      	mov	r4, r0
 8002a54:	4861      	ldr	r0, [pc, #388]	@ (8002bdc <HAL_ADC_Init+0x290>)
 8002a56:	f7ff ff2b 	bl	80028b0 <LL_ADC_IsEnabled>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	431c      	orrs	r4, r3
 8002a5e:	4860      	ldr	r0, [pc, #384]	@ (8002be0 <HAL_ADC_Init+0x294>)
 8002a60:	f7ff ff26 	bl	80028b0 <LL_ADC_IsEnabled>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4323      	orrs	r3, r4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d105      	bne.n	8002a78 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4619      	mov	r1, r3
 8002a72:	485c      	ldr	r0, [pc, #368]	@ (8002be4 <HAL_ADC_Init+0x298>)
 8002a74:	f7ff fd74 	bl	8002560 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7e5b      	ldrb	r3, [r3, #25]
 8002a7c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a82:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a88:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002a8e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a96:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d106      	bne.n	8002ab4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	045b      	lsls	r3, r3, #17
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	4b44      	ldr	r3, [pc, #272]	@ (8002be8 <HAL_ADC_Init+0x29c>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	69b9      	ldr	r1, [r7, #24]
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ff1b 	bl	8002924 <LL_ADC_INJ_IsConversionOngoing>
 8002aee:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d13d      	bne.n	8002b72 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d13a      	bne.n	8002b72 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b00:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b08:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b18:	f023 0302 	bic.w	r3, r3, #2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	69b9      	ldr	r1, [r7, #24]
 8002b22:	430b      	orrs	r3, r1
 8002b24:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d118      	bne.n	8002b62 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b3a:	f023 0304 	bic.w	r3, r3, #4
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b46:	4311      	orrs	r1, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b4c:	4311      	orrs	r1, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b52:	430a      	orrs	r2, r1
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	611a      	str	r2, [r3, #16]
 8002b60:	e007      	b.n	8002b72 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d10c      	bne.n	8002b94 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b80:	f023 010f 	bic.w	r1, r3, #15
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	1e5a      	subs	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b92:	e007      	b.n	8002ba4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 020f 	bic.w	r2, r2, #15
 8002ba2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba8:	f023 0303 	bic.w	r3, r3, #3
 8002bac:	f043 0201 	orr.w	r2, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	655a      	str	r2, [r3, #84]	@ 0x54
 8002bb4:	e007      	b.n	8002bc6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bba:	f043 0210 	orr.w	r2, r3, #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3724      	adds	r7, #36	@ 0x24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd90      	pop	{r4, r7, pc}
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	053e2d63 	.word	0x053e2d63
 8002bd8:	50040000 	.word	0x50040000
 8002bdc:	50040100 	.word	0x50040100
 8002be0:	50040200 	.word	0x50040200
 8002be4:	50040300 	.word	0x50040300
 8002be8:	fff0c007 	.word	0xfff0c007

08002bec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bf8:	4853      	ldr	r0, [pc, #332]	@ (8002d48 <HAL_ADC_Start_DMA+0x15c>)
 8002bfa:	f7ff fddb 	bl	80027b4 <LL_ADC_GetMultimode>
 8002bfe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fe7a 	bl	80028fe <LL_ADC_REG_IsConversionOngoing>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f040 8093 	bne.w	8002d38 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADC_Start_DMA+0x34>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e08e      	b.n	8002d3e <HAL_ADC_Start_DMA+0x152>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a47      	ldr	r2, [pc, #284]	@ (8002d4c <HAL_ADC_Start_DMA+0x160>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d008      	beq.n	8002c44 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2b05      	cmp	r3, #5
 8002c3c:	d002      	beq.n	8002c44 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b09      	cmp	r3, #9
 8002c42:	d172      	bne.n	8002d2a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 feb7 	bl	80039b8 <ADC_Enable>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d165      	bne.n	8002d20 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c58:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c5c:	f023 0301 	bic.w	r3, r3, #1
 8002c60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a38      	ldr	r2, [pc, #224]	@ (8002d50 <HAL_ADC_Start_DMA+0x164>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d002      	beq.n	8002c78 <HAL_ADC_Start_DMA+0x8c>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	e000      	b.n	8002c7a <HAL_ADC_Start_DMA+0x8e>
 8002c78:	4b36      	ldr	r3, [pc, #216]	@ (8002d54 <HAL_ADC_Start_DMA+0x168>)
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d002      	beq.n	8002c88 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d105      	bne.n	8002c94 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d006      	beq.n	8002cae <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca4:	f023 0206 	bic.w	r2, r3, #6
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cac:	e002      	b.n	8002cb4 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb8:	4a27      	ldr	r2, [pc, #156]	@ (8002d58 <HAL_ADC_Start_DMA+0x16c>)
 8002cba:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc0:	4a26      	ldr	r2, [pc, #152]	@ (8002d5c <HAL_ADC_Start_DMA+0x170>)
 8002cc2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc8:	4a25      	ldr	r2, [pc, #148]	@ (8002d60 <HAL_ADC_Start_DMA+0x174>)
 8002cca:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	221c      	movs	r2, #28
 8002cd2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0210 	orr.w	r2, r2, #16
 8002cea:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3340      	adds	r3, #64	@ 0x40
 8002d06:	4619      	mov	r1, r3
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f001 fb1c 	bl	8004348 <HAL_DMA_Start_IT>
 8002d10:	4603      	mov	r3, r0
 8002d12:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fddc 	bl	80028d6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002d1e:	e00d      	b.n	8002d3c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002d28:	e008      	b.n	8002d3c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002d36:	e001      	b.n	8002d3c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	50040300 	.word	0x50040300
 8002d4c:	50040200 	.word	0x50040200
 8002d50:	50040100 	.word	0x50040100
 8002d54:	50040000 	.word	0x50040000
 8002d58:	08003ac5 	.word	0x08003ac5
 8002d5c:	08003b9d 	.word	0x08003b9d
 8002d60:	08003bb9 	.word	0x08003bb9

08002d64 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	@ 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d80:	4882      	ldr	r0, [pc, #520]	@ (8002f8c <HAL_ADC_IRQHandler+0x228>)
 8002d82:	f7ff fd17 	bl	80027b4 <LL_ADC_GetMultimode>
 8002d86:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d017      	beq.n	8002dc2 <HAL_ADC_IRQHandler+0x5e>
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d012      	beq.n	8002dc2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dac:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 ff67 	bl	8003c88 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d004      	beq.n	8002dd6 <HAL_ADC_IRQHandler+0x72>
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 8083 	beq.w	8002ee8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d07d      	beq.n	8002ee8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d105      	bne.n	8002e04 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fc32 	bl	8002672 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d062      	beq.n	8002eda <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a5d      	ldr	r2, [pc, #372]	@ (8002f90 <HAL_ADC_IRQHandler+0x22c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d002      	beq.n	8002e24 <HAL_ADC_IRQHandler+0xc0>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	e000      	b.n	8002e26 <HAL_ADC_IRQHandler+0xc2>
 8002e24:	4b5b      	ldr	r3, [pc, #364]	@ (8002f94 <HAL_ADC_IRQHandler+0x230>)
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d008      	beq.n	8002e40 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2b05      	cmp	r3, #5
 8002e38:	d002      	beq.n	8002e40 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b09      	cmp	r3, #9
 8002e3e:	d104      	bne.n	8002e4a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	e00c      	b.n	8002e64 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a50      	ldr	r2, [pc, #320]	@ (8002f90 <HAL_ADC_IRQHandler+0x22c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d002      	beq.n	8002e5a <HAL_ADC_IRQHandler+0xf6>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	e000      	b.n	8002e5c <HAL_ADC_IRQHandler+0xf8>
 8002e5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002f94 <HAL_ADC_IRQHandler+0x230>)
 8002e5c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d135      	bne.n	8002eda <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d12e      	bne.n	8002eda <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fd3c 	bl	80028fe <LL_ADC_REG_IsConversionOngoing>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d11a      	bne.n	8002ec2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 020c 	bic.w	r2, r2, #12
 8002e9a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d112      	bne.n	8002eda <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb8:	f043 0201 	orr.w	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ec0:	e00b      	b.n	8002eda <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec6:	f043 0210 	orr.w	r2, r3, #16
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed2:	f043 0201 	orr.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7fe fc8a 	bl	80017f4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	220c      	movs	r2, #12
 8002ee6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d004      	beq.n	8002efc <HAL_ADC_IRQHandler+0x198>
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10b      	bne.n	8002f14 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 809f 	beq.w	8003046 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 8099 	beq.w	8003046 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f24:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fbdd 	bl	80026f0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f36:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fb98 	bl	8002672 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f42:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a11      	ldr	r2, [pc, #68]	@ (8002f90 <HAL_ADC_IRQHandler+0x22c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d002      	beq.n	8002f54 <HAL_ADC_IRQHandler+0x1f0>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	e000      	b.n	8002f56 <HAL_ADC_IRQHandler+0x1f2>
 8002f54:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <HAL_ADC_IRQHandler+0x230>)
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d008      	beq.n	8002f70 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b06      	cmp	r3, #6
 8002f68:	d002      	beq.n	8002f70 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b07      	cmp	r3, #7
 8002f6e:	d104      	bne.n	8002f7a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	623b      	str	r3, [r7, #32]
 8002f78:	e013      	b.n	8002fa2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a04      	ldr	r2, [pc, #16]	@ (8002f90 <HAL_ADC_IRQHandler+0x22c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d009      	beq.n	8002f98 <HAL_ADC_IRQHandler+0x234>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	e007      	b.n	8002f9a <HAL_ADC_IRQHandler+0x236>
 8002f8a:	bf00      	nop
 8002f8c:	50040300 	.word	0x50040300
 8002f90:	50040100 	.word	0x50040100
 8002f94:	50040000 	.word	0x50040000
 8002f98:	4b7d      	ldr	r3, [pc, #500]	@ (8003190 <HAL_ADC_IRQHandler+0x42c>)
 8002f9a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d047      	beq.n	8003038 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d007      	beq.n	8002fc2 <HAL_ADC_IRQHandler+0x25e>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d03f      	beq.n	8003038 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d13a      	bne.n	8003038 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fcc:	2b40      	cmp	r3, #64	@ 0x40
 8002fce:	d133      	bne.n	8003038 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d12e      	bne.n	8003038 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fca0 	bl	8002924 <LL_ADC_INJ_IsConversionOngoing>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d11a      	bne.n	8003020 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ff8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d112      	bne.n	8003038 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003016:	f043 0201 	orr.w	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	655a      	str	r2, [r3, #84]	@ 0x54
 800301e:	e00b      	b.n	8003038 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003024:	f043 0210 	orr.w	r2, r3, #16
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003030:	f043 0201 	orr.w	r2, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fdfd 	bl	8003c38 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2260      	movs	r2, #96	@ 0x60
 8003044:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304c:	2b00      	cmp	r3, #0
 800304e:	d011      	beq.n	8003074 <HAL_ADC_IRQHandler+0x310>
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00c      	beq.n	8003074 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f8a0 	bl	80031ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2280      	movs	r2, #128	@ 0x80
 8003072:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307a:	2b00      	cmp	r3, #0
 800307c:	d012      	beq.n	80030a4 <HAL_ADC_IRQHandler+0x340>
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00d      	beq.n	80030a4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fde3 	bl	8003c60 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d012      	beq.n	80030d4 <HAL_ADC_IRQHandler+0x370>
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00d      	beq.n	80030d4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fdd5 	bl	8003c74 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d036      	beq.n	800314c <HAL_ADC_IRQHandler+0x3e8>
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d031      	beq.n	800314c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80030f0:	2301      	movs	r3, #1
 80030f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f4:	e014      	b.n	8003120 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80030fc:	4825      	ldr	r0, [pc, #148]	@ (8003194 <HAL_ADC_IRQHandler+0x430>)
 80030fe:	f7ff fb67 	bl	80027d0 <LL_ADC_GetMultiDMATransfer>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00b      	beq.n	8003120 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003108:	2301      	movs	r3, #1
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24
 800310c:	e008      	b.n	8003120 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800311c:	2301      	movs	r3, #1
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	2b01      	cmp	r3, #1
 8003124:	d10e      	bne.n	8003144 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003136:	f043 0202 	orr.w	r2, r3, #2
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f83e 	bl	80031c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2210      	movs	r2, #16
 800314a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003152:	2b00      	cmp	r3, #0
 8003154:	d018      	beq.n	8003188 <HAL_ADC_IRQHandler+0x424>
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315c:	2b00      	cmp	r3, #0
 800315e:	d013      	beq.n	8003188 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003164:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003170:	f043 0208 	orr.w	r2, r3, #8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003180:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fd62 	bl	8003c4c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003188:	bf00      	nop
 800318a:	3728      	adds	r7, #40	@ 0x28
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	50040000 	.word	0x50040000
 8003194:	50040300 	.word	0x50040300

08003198 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b0b6      	sub	sp, #216	@ 0xd8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x22>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e3c9      	b.n	800398a <HAL_ADC_ConfigChannel+0x7b6>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fb7b 	bl	80028fe <LL_ADC_REG_IsConversionOngoing>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 83aa 	bne.w	8003964 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b05      	cmp	r3, #5
 800321e:	d824      	bhi.n	800326a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	3b02      	subs	r3, #2
 8003226:	2b03      	cmp	r3, #3
 8003228:	d81b      	bhi.n	8003262 <HAL_ADC_ConfigChannel+0x8e>
 800322a:	a201      	add	r2, pc, #4	@ (adr r2, 8003230 <HAL_ADC_ConfigChannel+0x5c>)
 800322c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003230:	08003241 	.word	0x08003241
 8003234:	08003249 	.word	0x08003249
 8003238:	08003251 	.word	0x08003251
 800323c:	08003259 	.word	0x08003259
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003240:	230c      	movs	r3, #12
 8003242:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003246:	e010      	b.n	800326a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003248:	2312      	movs	r3, #18
 800324a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800324e:	e00c      	b.n	800326a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003250:	2318      	movs	r3, #24
 8003252:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003256:	e008      	b.n	800326a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003258:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800325c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003260:	e003      	b.n	800326a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003262:	2306      	movs	r3, #6
 8003264:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003268:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003278:	f7ff fa0e 	bl	8002698 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fb3c 	bl	80028fe <LL_ADC_REG_IsConversionOngoing>
 8003286:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fb48 	bl	8002924 <LL_ADC_INJ_IsConversionOngoing>
 8003294:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003298:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 81a4 	bne.w	80035ea <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 819f 	bne.w	80035ea <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	6819      	ldr	r1, [r3, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	461a      	mov	r2, r3
 80032ba:	f7ff fa2c 	bl	8002716 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	08db      	lsrs	r3, r3, #3
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d00a      	beq.n	80032f6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	6919      	ldr	r1, [r3, #16]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032f0:	f7ff f96a 	bl	80025c8 <LL_ADC_SetOffset>
 80032f4:	e179      	b.n	80035ea <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff f987 	bl	8002610 <LL_ADC_GetOffsetChannel>
 8003302:	4603      	mov	r3, r0
 8003304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x14e>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2100      	movs	r1, #0
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff f97c 	bl	8002610 <LL_ADC_GetOffsetChannel>
 8003318:	4603      	mov	r3, r0
 800331a:	0e9b      	lsrs	r3, r3, #26
 800331c:	f003 021f 	and.w	r2, r3, #31
 8003320:	e01e      	b.n	8003360 <HAL_ADC_ConfigChannel+0x18c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff f971 	bl	8002610 <LL_ADC_GetOffsetChannel>
 800332e:	4603      	mov	r3, r0
 8003330:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003338:	fa93 f3a3 	rbit	r3, r3
 800333c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003340:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003344:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003348:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003350:	2320      	movs	r3, #32
 8003352:	e004      	b.n	800335e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003354:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003358:	fab3 f383 	clz	r3, r3
 800335c:	b2db      	uxtb	r3, r3
 800335e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x1a4>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	0e9b      	lsrs	r3, r3, #26
 8003372:	f003 031f 	and.w	r3, r3, #31
 8003376:	e018      	b.n	80033aa <HAL_ADC_ConfigChannel+0x1d6>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800338c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003390:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003394:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800339c:	2320      	movs	r3, #32
 800339e:	e004      	b.n	80033aa <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80033a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033a4:	fab3 f383 	clz	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d106      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff f940 	bl	800263c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2101      	movs	r1, #1
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff f924 	bl	8002610 <LL_ADC_GetOffsetChannel>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x214>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2101      	movs	r1, #1
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff f919 	bl	8002610 <LL_ADC_GetOffsetChannel>
 80033de:	4603      	mov	r3, r0
 80033e0:	0e9b      	lsrs	r3, r3, #26
 80033e2:	f003 021f 	and.w	r2, r3, #31
 80033e6:	e01e      	b.n	8003426 <HAL_ADC_ConfigChannel+0x252>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2101      	movs	r1, #1
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff f90e 	bl	8002610 <LL_ADC_GetOffsetChannel>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003406:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800340a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800340e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003416:	2320      	movs	r3, #32
 8003418:	e004      	b.n	8003424 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800341a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342e:	2b00      	cmp	r3, #0
 8003430:	d105      	bne.n	800343e <HAL_ADC_ConfigChannel+0x26a>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	0e9b      	lsrs	r3, r3, #26
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	e018      	b.n	8003470 <HAL_ADC_ConfigChannel+0x29c>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800344a:	fa93 f3a3 	rbit	r3, r3
 800344e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003452:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003456:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800345a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003462:	2320      	movs	r3, #32
 8003464:	e004      	b.n	8003470 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003466:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003470:	429a      	cmp	r2, r3
 8003472:	d106      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2200      	movs	r2, #0
 800347a:	2101      	movs	r1, #1
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff f8dd 	bl	800263c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2102      	movs	r1, #2
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff f8c1 	bl	8002610 <LL_ADC_GetOffsetChannel>
 800348e:	4603      	mov	r3, r0
 8003490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x2da>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2102      	movs	r1, #2
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff f8b6 	bl	8002610 <LL_ADC_GetOffsetChannel>
 80034a4:	4603      	mov	r3, r0
 80034a6:	0e9b      	lsrs	r3, r3, #26
 80034a8:	f003 021f 	and.w	r2, r3, #31
 80034ac:	e01e      	b.n	80034ec <HAL_ADC_ConfigChannel+0x318>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2102      	movs	r1, #2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff f8ab 	bl	8002610 <LL_ADC_GetOffsetChannel>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034c4:	fa93 f3a3 	rbit	r3, r3
 80034c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80034cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80034d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80034dc:	2320      	movs	r3, #32
 80034de:	e004      	b.n	80034ea <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80034e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034e4:	fab3 f383 	clz	r3, r3
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d105      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x330>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	0e9b      	lsrs	r3, r3, #26
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	e014      	b.n	800352e <HAL_ADC_ConfigChannel+0x35a>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800350c:	fa93 f3a3 	rbit	r3, r3
 8003510:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003512:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003514:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003518:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003520:	2320      	movs	r3, #32
 8003522:	e004      	b.n	800352e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003524:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003528:	fab3 f383 	clz	r3, r3
 800352c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800352e:	429a      	cmp	r2, r3
 8003530:	d106      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2200      	movs	r2, #0
 8003538:	2102      	movs	r1, #2
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff f87e 	bl	800263c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2103      	movs	r1, #3
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff f862 	bl	8002610 <LL_ADC_GetOffsetChannel>
 800354c:	4603      	mov	r3, r0
 800354e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <HAL_ADC_ConfigChannel+0x398>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2103      	movs	r1, #3
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff f857 	bl	8002610 <LL_ADC_GetOffsetChannel>
 8003562:	4603      	mov	r3, r0
 8003564:	0e9b      	lsrs	r3, r3, #26
 8003566:	f003 021f 	and.w	r2, r3, #31
 800356a:	e017      	b.n	800359c <HAL_ADC_ConfigChannel+0x3c8>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2103      	movs	r1, #3
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff f84c 	bl	8002610 <LL_ADC_GetOffsetChannel>
 8003578:	4603      	mov	r3, r0
 800357a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003586:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003588:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800358e:	2320      	movs	r3, #32
 8003590:	e003      	b.n	800359a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003592:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003594:	fab3 f383 	clz	r3, r3
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d105      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x3e0>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	0e9b      	lsrs	r3, r3, #26
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	e011      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x404>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035bc:	fa93 f3a3 	rbit	r3, r3
 80035c0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80035c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80035c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80035cc:	2320      	movs	r3, #32
 80035ce:	e003      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80035d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035d2:	fab3 f383 	clz	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035d8:	429a      	cmp	r2, r3
 80035da:	d106      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2200      	movs	r2, #0
 80035e2:	2103      	movs	r1, #3
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff f829 	bl	800263c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff f95e 	bl	80028b0 <LL_ADC_IsEnabled>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 8140 	bne.w	800387c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	6819      	ldr	r1, [r3, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	461a      	mov	r2, r3
 800360a:	f7ff f8af 	bl	800276c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	4a8f      	ldr	r2, [pc, #572]	@ (8003850 <HAL_ADC_ConfigChannel+0x67c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	f040 8131 	bne.w	800387c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10b      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x46e>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	0e9b      	lsrs	r3, r3, #26
 8003630:	3301      	adds	r3, #1
 8003632:	f003 031f 	and.w	r3, r3, #31
 8003636:	2b09      	cmp	r3, #9
 8003638:	bf94      	ite	ls
 800363a:	2301      	movls	r3, #1
 800363c:	2300      	movhi	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	e019      	b.n	8003676 <HAL_ADC_ConfigChannel+0x4a2>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003652:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003654:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800365a:	2320      	movs	r3, #32
 800365c:	e003      	b.n	8003666 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800365e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003660:	fab3 f383 	clz	r3, r3
 8003664:	b2db      	uxtb	r3, r3
 8003666:	3301      	adds	r3, #1
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	2b09      	cmp	r3, #9
 800366e:	bf94      	ite	ls
 8003670:	2301      	movls	r3, #1
 8003672:	2300      	movhi	r3, #0
 8003674:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003676:	2b00      	cmp	r3, #0
 8003678:	d079      	beq.n	800376e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003682:	2b00      	cmp	r3, #0
 8003684:	d107      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x4c2>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	0e9b      	lsrs	r3, r3, #26
 800368c:	3301      	adds	r3, #1
 800368e:	069b      	lsls	r3, r3, #26
 8003690:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003694:	e015      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x4ee>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80036a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036a6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80036a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80036ae:	2320      	movs	r3, #32
 80036b0:	e003      	b.n	80036ba <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80036b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036b4:	fab3 f383 	clz	r3, r3
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	069b      	lsls	r3, r3, #26
 80036be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x50e>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	0e9b      	lsrs	r3, r3, #26
 80036d4:	3301      	adds	r3, #1
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	2101      	movs	r1, #1
 80036dc:	fa01 f303 	lsl.w	r3, r1, r3
 80036e0:	e017      	b.n	8003712 <HAL_ADC_ConfigChannel+0x53e>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80036f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036f2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80036f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80036fa:	2320      	movs	r3, #32
 80036fc:	e003      	b.n	8003706 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80036fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003700:	fab3 f383 	clz	r3, r3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	3301      	adds	r3, #1
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	2101      	movs	r1, #1
 800370e:	fa01 f303 	lsl.w	r3, r1, r3
 8003712:	ea42 0103 	orr.w	r1, r2, r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10a      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x564>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	0e9b      	lsrs	r3, r3, #26
 8003728:	3301      	adds	r3, #1
 800372a:	f003 021f 	and.w	r2, r3, #31
 800372e:	4613      	mov	r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4413      	add	r3, r2
 8003734:	051b      	lsls	r3, r3, #20
 8003736:	e018      	b.n	800376a <HAL_ADC_ConfigChannel+0x596>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003748:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800374a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003750:	2320      	movs	r3, #32
 8003752:	e003      	b.n	800375c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	3301      	adds	r3, #1
 800375e:	f003 021f 	and.w	r2, r3, #31
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800376a:	430b      	orrs	r3, r1
 800376c:	e081      	b.n	8003872 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003776:	2b00      	cmp	r3, #0
 8003778:	d107      	bne.n	800378a <HAL_ADC_ConfigChannel+0x5b6>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	0e9b      	lsrs	r3, r3, #26
 8003780:	3301      	adds	r3, #1
 8003782:	069b      	lsls	r3, r3, #26
 8003784:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003788:	e015      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x5e2>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003792:	fa93 f3a3 	rbit	r3, r3
 8003796:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800379c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80037a2:	2320      	movs	r3, #32
 80037a4:	e003      	b.n	80037ae <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80037a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a8:	fab3 f383 	clz	r3, r3
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	3301      	adds	r3, #1
 80037b0:	069b      	lsls	r3, r3, #26
 80037b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x602>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	0e9b      	lsrs	r3, r3, #26
 80037c8:	3301      	adds	r3, #1
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	2101      	movs	r1, #1
 80037d0:	fa01 f303 	lsl.w	r3, r1, r3
 80037d4:	e017      	b.n	8003806 <HAL_ADC_ConfigChannel+0x632>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	fa93 f3a3 	rbit	r3, r3
 80037e2:	61bb      	str	r3, [r7, #24]
  return result;
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80037ee:	2320      	movs	r3, #32
 80037f0:	e003      	b.n	80037fa <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	fab3 f383 	clz	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	3301      	adds	r3, #1
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	2101      	movs	r1, #1
 8003802:	fa01 f303 	lsl.w	r3, r1, r3
 8003806:	ea42 0103 	orr.w	r1, r2, r3
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10d      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x65e>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	0e9b      	lsrs	r3, r3, #26
 800381c:	3301      	adds	r3, #1
 800381e:	f003 021f 	and.w	r2, r3, #31
 8003822:	4613      	mov	r3, r2
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4413      	add	r3, r2
 8003828:	3b1e      	subs	r3, #30
 800382a:	051b      	lsls	r3, r3, #20
 800382c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003830:	e01e      	b.n	8003870 <HAL_ADC_ConfigChannel+0x69c>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	60fb      	str	r3, [r7, #12]
  return result;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d104      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800384a:	2320      	movs	r3, #32
 800384c:	e006      	b.n	800385c <HAL_ADC_ConfigChannel+0x688>
 800384e:	bf00      	nop
 8003850:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	b2db      	uxtb	r3, r3
 800385c:	3301      	adds	r3, #1
 800385e:	f003 021f 	and.w	r2, r3, #31
 8003862:	4613      	mov	r3, r2
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	4413      	add	r3, r2
 8003868:	3b1e      	subs	r3, #30
 800386a:	051b      	lsls	r3, r3, #20
 800386c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003870:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003876:	4619      	mov	r1, r3
 8003878:	f7fe ff4d 	bl	8002716 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b44      	ldr	r3, [pc, #272]	@ (8003994 <HAL_ADC_ConfigChannel+0x7c0>)
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d07a      	beq.n	800397e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003888:	4843      	ldr	r0, [pc, #268]	@ (8003998 <HAL_ADC_ConfigChannel+0x7c4>)
 800388a:	f7fe fe8f 	bl	80025ac <LL_ADC_GetCommonPathInternalCh>
 800388e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a41      	ldr	r2, [pc, #260]	@ (800399c <HAL_ADC_ConfigChannel+0x7c8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d12c      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800389c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d126      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a3c      	ldr	r2, [pc, #240]	@ (80039a0 <HAL_ADC_ConfigChannel+0x7cc>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d004      	beq.n	80038bc <HAL_ADC_ConfigChannel+0x6e8>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a3b      	ldr	r2, [pc, #236]	@ (80039a4 <HAL_ADC_ConfigChannel+0x7d0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d15d      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038c4:	4619      	mov	r1, r3
 80038c6:	4834      	ldr	r0, [pc, #208]	@ (8003998 <HAL_ADC_ConfigChannel+0x7c4>)
 80038c8:	f7fe fe5d 	bl	8002586 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038cc:	4b36      	ldr	r3, [pc, #216]	@ (80039a8 <HAL_ADC_ConfigChannel+0x7d4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	099b      	lsrs	r3, r3, #6
 80038d2:	4a36      	ldr	r2, [pc, #216]	@ (80039ac <HAL_ADC_ConfigChannel+0x7d8>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	099b      	lsrs	r3, r3, #6
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	4613      	mov	r3, r2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80038e6:	e002      	b.n	80038ee <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f9      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038f4:	e040      	b.n	8003978 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a2d      	ldr	r2, [pc, #180]	@ (80039b0 <HAL_ADC_ConfigChannel+0x7dc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d118      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003900:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003904:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d112      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a23      	ldr	r2, [pc, #140]	@ (80039a0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <HAL_ADC_ConfigChannel+0x74c>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a22      	ldr	r2, [pc, #136]	@ (80039a4 <HAL_ADC_ConfigChannel+0x7d0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d12d      	bne.n	800397c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003924:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003928:	4619      	mov	r1, r3
 800392a:	481b      	ldr	r0, [pc, #108]	@ (8003998 <HAL_ADC_ConfigChannel+0x7c4>)
 800392c:	f7fe fe2b 	bl	8002586 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003930:	e024      	b.n	800397c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1f      	ldr	r2, [pc, #124]	@ (80039b4 <HAL_ADC_ConfigChannel+0x7e0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d120      	bne.n	800397e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800393c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003940:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d11a      	bne.n	800397e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a14      	ldr	r2, [pc, #80]	@ (80039a0 <HAL_ADC_ConfigChannel+0x7cc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d115      	bne.n	800397e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003952:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003956:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800395a:	4619      	mov	r1, r3
 800395c:	480e      	ldr	r0, [pc, #56]	@ (8003998 <HAL_ADC_ConfigChannel+0x7c4>)
 800395e:	f7fe fe12 	bl	8002586 <LL_ADC_SetCommonPathInternalCh>
 8003962:	e00c      	b.n	800397e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003968:	f043 0220 	orr.w	r2, r3, #32
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003976:	e002      	b.n	800397e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003978:	bf00      	nop
 800397a:	e000      	b.n	800397e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800397c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003986:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800398a:	4618      	mov	r0, r3
 800398c:	37d8      	adds	r7, #216	@ 0xd8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	80080000 	.word	0x80080000
 8003998:	50040300 	.word	0x50040300
 800399c:	c7520000 	.word	0xc7520000
 80039a0:	50040000 	.word	0x50040000
 80039a4:	50040200 	.word	0x50040200
 80039a8:	20000000 	.word	0x20000000
 80039ac:	053e2d63 	.word	0x053e2d63
 80039b0:	cb840000 	.word	0xcb840000
 80039b4:	80000001 	.word	0x80000001

080039b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe ff71 	bl	80028b0 <LL_ADC_IsEnabled>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d169      	bne.n	8003aa8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	4b36      	ldr	r3, [pc, #216]	@ (8003ab4 <ADC_Enable+0xfc>)
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00d      	beq.n	80039fe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e6:	f043 0210 	orr.w	r2, r3, #16
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f2:	f043 0201 	orr.w	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e055      	b.n	8003aaa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe ff40 	bl	8002888 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a08:	482b      	ldr	r0, [pc, #172]	@ (8003ab8 <ADC_Enable+0x100>)
 8003a0a:	f7fe fdcf 	bl	80025ac <LL_ADC_GetCommonPathInternalCh>
 8003a0e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d013      	beq.n	8003a40 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a18:	4b28      	ldr	r3, [pc, #160]	@ (8003abc <ADC_Enable+0x104>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	099b      	lsrs	r3, r3, #6
 8003a1e:	4a28      	ldr	r2, [pc, #160]	@ (8003ac0 <ADC_Enable+0x108>)
 8003a20:	fba2 2303 	umull	r2, r3, r2, r3
 8003a24:	099b      	lsrs	r3, r3, #6
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	4613      	mov	r3, r2
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a32:	e002      	b.n	8003a3a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f9      	bne.n	8003a34 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a40:	f7fe fd5e 	bl	8002500 <HAL_GetTick>
 8003a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a46:	e028      	b.n	8003a9a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fe ff2f 	bl	80028b0 <LL_ADC_IsEnabled>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d104      	bne.n	8003a62 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fe ff13 	bl	8002888 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a62:	f7fe fd4d 	bl	8002500 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d914      	bls.n	8003a9a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d00d      	beq.n	8003a9a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a82:	f043 0210 	orr.w	r2, r3, #16
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8e:	f043 0201 	orr.w	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e007      	b.n	8003aaa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d1cf      	bne.n	8003a48 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	8000003f 	.word	0x8000003f
 8003ab8:	50040300 	.word	0x50040300
 8003abc:	20000000 	.word	0x20000000
 8003ac0:	053e2d63 	.word	0x053e2d63

08003ac4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d14b      	bne.n	8003b76 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d021      	beq.n	8003b3c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fe fdb8 	bl	8002672 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d032      	beq.n	8003b6e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d12b      	bne.n	8003b6e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d11f      	bne.n	8003b6e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b32:	f043 0201 	orr.w	r2, r3, #1
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	655a      	str	r2, [r3, #84]	@ 0x54
 8003b3a:	e018      	b.n	8003b6e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d111      	bne.n	8003b6e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d105      	bne.n	8003b6e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b66:	f043 0201 	orr.w	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f7fd fe40 	bl	80017f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b74:	e00e      	b.n	8003b94 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f7ff fb1c 	bl	80031c0 <HAL_ADC_ErrorCallback>
}
 8003b88:	e004      	b.n	8003b94 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	4798      	blx	r3
}
 8003b94:	bf00      	nop
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f7ff faf4 	bl	8003198 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd6:	f043 0204 	orr.w	r2, r3, #4
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f7ff faee 	bl	80031c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003be4:	bf00      	nop
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <LL_ADC_IsEnabled>:
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <LL_ADC_IsEnabled+0x18>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <LL_ADC_IsEnabled+0x1a>
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <LL_ADC_REG_IsConversionOngoing>:
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d101      	bne.n	8003c2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003c9c:	b590      	push	{r4, r7, lr}
 8003c9e:	b09f      	sub	sp, #124	@ 0x7c
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e093      	b.n	8003de2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a47      	ldr	r2, [pc, #284]	@ (8003dec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d102      	bne.n	8003cda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003cd4:	4b46      	ldr	r3, [pc, #280]	@ (8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	e001      	b.n	8003cde <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10b      	bne.n	8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce8:	f043 0220 	orr.w	r2, r3, #32
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e072      	b.n	8003de2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff ff87 	bl	8003c12 <LL_ADC_REG_IsConversionOngoing>
 8003d04:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ff81 	bl	8003c12 <LL_ADC_REG_IsConversionOngoing>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d154      	bne.n	8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003d16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d151      	bne.n	8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d1c:	4b35      	ldr	r3, [pc, #212]	@ (8003df4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003d1e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d02c      	beq.n	8003d82 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	6859      	ldr	r1, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d3a:	035b      	lsls	r3, r3, #13
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d44:	4829      	ldr	r0, [pc, #164]	@ (8003dec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003d46:	f7ff ff51 	bl	8003bec <LL_ADC_IsEnabled>
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	4828      	ldr	r0, [pc, #160]	@ (8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003d4e:	f7ff ff4d 	bl	8003bec <LL_ADC_IsEnabled>
 8003d52:	4603      	mov	r3, r0
 8003d54:	431c      	orrs	r4, r3
 8003d56:	4828      	ldr	r0, [pc, #160]	@ (8003df8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003d58:	f7ff ff48 	bl	8003bec <LL_ADC_IsEnabled>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	4323      	orrs	r3, r4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d137      	bne.n	8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d6c:	f023 030f 	bic.w	r3, r3, #15
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	6811      	ldr	r1, [r2, #0]
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	6892      	ldr	r2, [r2, #8]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d7e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d80:	e028      	b.n	8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d8c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d8e:	4817      	ldr	r0, [pc, #92]	@ (8003dec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003d90:	f7ff ff2c 	bl	8003bec <LL_ADC_IsEnabled>
 8003d94:	4604      	mov	r4, r0
 8003d96:	4816      	ldr	r0, [pc, #88]	@ (8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003d98:	f7ff ff28 	bl	8003bec <LL_ADC_IsEnabled>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	431c      	orrs	r4, r3
 8003da0:	4815      	ldr	r0, [pc, #84]	@ (8003df8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003da2:	f7ff ff23 	bl	8003bec <LL_ADC_IsEnabled>
 8003da6:	4603      	mov	r3, r0
 8003da8:	4323      	orrs	r3, r4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d112      	bne.n	8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003dae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003db6:	f023 030f 	bic.w	r3, r3, #15
 8003dba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003dbc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003dbe:	e009      	b.n	8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc4:	f043 0220 	orr.w	r2, r3, #32
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003dd2:	e000      	b.n	8003dd6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003dd4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003dde:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	377c      	adds	r7, #124	@ 0x7c
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd90      	pop	{r4, r7, pc}
 8003dea:	bf00      	nop
 8003dec:	50040000 	.word	0x50040000
 8003df0:	50040100 	.word	0x50040100
 8003df4:	50040300 	.word	0x50040300
 8003df8:	50040200 	.word	0x50040200

08003dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e40 <__NVIC_SetPriorityGrouping+0x44>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e18:	4013      	ands	r3, r2
 8003e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e2e:	4a04      	ldr	r2, [pc, #16]	@ (8003e40 <__NVIC_SetPriorityGrouping+0x44>)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	60d3      	str	r3, [r2, #12]
}
 8003e34:	bf00      	nop
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	e000ed00 	.word	0xe000ed00

08003e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e48:	4b04      	ldr	r3, [pc, #16]	@ (8003e5c <__NVIC_GetPriorityGrouping+0x18>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	0a1b      	lsrs	r3, r3, #8
 8003e4e:	f003 0307 	and.w	r3, r3, #7
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	db0b      	blt.n	8003e8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	f003 021f 	and.w	r2, r3, #31
 8003e78:	4907      	ldr	r1, [pc, #28]	@ (8003e98 <__NVIC_EnableIRQ+0x38>)
 8003e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	2001      	movs	r0, #1
 8003e82:	fa00 f202 	lsl.w	r2, r0, r2
 8003e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	e000e100 	.word	0xe000e100

08003e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	6039      	str	r1, [r7, #0]
 8003ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	db0a      	blt.n	8003ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	490c      	ldr	r1, [pc, #48]	@ (8003ee8 <__NVIC_SetPriority+0x4c>)
 8003eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eba:	0112      	lsls	r2, r2, #4
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ec4:	e00a      	b.n	8003edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	4908      	ldr	r1, [pc, #32]	@ (8003eec <__NVIC_SetPriority+0x50>)
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	3b04      	subs	r3, #4
 8003ed4:	0112      	lsls	r2, r2, #4
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	440b      	add	r3, r1
 8003eda:	761a      	strb	r2, [r3, #24]
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	e000e100 	.word	0xe000e100
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b089      	sub	sp, #36	@ 0x24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f1c3 0307 	rsb	r3, r3, #7
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	bf28      	it	cs
 8003f0e:	2304      	movcs	r3, #4
 8003f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3304      	adds	r3, #4
 8003f16:	2b06      	cmp	r3, #6
 8003f18:	d902      	bls.n	8003f20 <NVIC_EncodePriority+0x30>
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	3b03      	subs	r3, #3
 8003f1e:	e000      	b.n	8003f22 <NVIC_EncodePriority+0x32>
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f24:	f04f 32ff 	mov.w	r2, #4294967295
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43da      	mvns	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	401a      	ands	r2, r3
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f38:	f04f 31ff 	mov.w	r1, #4294967295
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f42:	43d9      	mvns	r1, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f48:	4313      	orrs	r3, r2
         );
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3724      	adds	r7, #36	@ 0x24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff ff4c 	bl	8003dfc <__NVIC_SetPriorityGrouping>
}
 8003f64:	bf00      	nop
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f7e:	f7ff ff61 	bl	8003e44 <__NVIC_GetPriorityGrouping>
 8003f82:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	6978      	ldr	r0, [r7, #20]
 8003f8a:	f7ff ffb1 	bl	8003ef0 <NVIC_EncodePriority>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f94:	4611      	mov	r1, r2
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff ff80 	bl	8003e9c <__NVIC_SetPriority>
}
 8003f9c:	bf00      	nop
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff ff54 	bl	8003e60 <__NVIC_EnableIRQ>
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e0ac      	b.n	800412c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f8b2 	bl	8004140 <DFSDM_GetChannelFromInstance>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	4a55      	ldr	r2, [pc, #340]	@ (8004134 <HAL_DFSDM_ChannelInit+0x174>)
 8003fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e09f      	b.n	800412c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7fd fd49 	bl	8001a84 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003ff2:	4b51      	ldr	r3, [pc, #324]	@ (8004138 <HAL_DFSDM_ChannelInit+0x178>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	4a4f      	ldr	r2, [pc, #316]	@ (8004138 <HAL_DFSDM_ChannelInit+0x178>)
 8003ffa:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003ffc:	4b4e      	ldr	r3, [pc, #312]	@ (8004138 <HAL_DFSDM_ChannelInit+0x178>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d125      	bne.n	8004050 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004004:	4b4d      	ldr	r3, [pc, #308]	@ (800413c <HAL_DFSDM_ChannelInit+0x17c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a4c      	ldr	r2, [pc, #304]	@ (800413c <HAL_DFSDM_ChannelInit+0x17c>)
 800400a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800400e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004010:	4b4a      	ldr	r3, [pc, #296]	@ (800413c <HAL_DFSDM_ChannelInit+0x17c>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	4948      	ldr	r1, [pc, #288]	@ (800413c <HAL_DFSDM_ChannelInit+0x17c>)
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800401e:	4b47      	ldr	r3, [pc, #284]	@ (800413c <HAL_DFSDM_ChannelInit+0x17c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a46      	ldr	r2, [pc, #280]	@ (800413c <HAL_DFSDM_ChannelInit+0x17c>)
 8004024:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8004028:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	791b      	ldrb	r3, [r3, #4]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d108      	bne.n	8004044 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004032:	4b42      	ldr	r3, [pc, #264]	@ (800413c <HAL_DFSDM_ChannelInit+0x17c>)
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	3b01      	subs	r3, #1
 800403c:	041b      	lsls	r3, r3, #16
 800403e:	493f      	ldr	r1, [pc, #252]	@ (800413c <HAL_DFSDM_ChannelInit+0x17c>)
 8004040:	4313      	orrs	r3, r2
 8004042:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004044:	4b3d      	ldr	r3, [pc, #244]	@ (800413c <HAL_DFSDM_ChannelInit+0x17c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a3c      	ldr	r2, [pc, #240]	@ (800413c <HAL_DFSDM_ChannelInit+0x17c>)
 800404a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800404e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800405e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6819      	ldr	r1, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800406e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004074:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 020f 	bic.w	r2, r2, #15
 800408c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80040b4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6899      	ldr	r1, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c4:	3b01      	subs	r3, #1
 80040c6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f002 0207 	and.w	r2, r2, #7
 80040e0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6859      	ldr	r1, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800410c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f000 f810 	bl	8004140 <DFSDM_GetChannelFromInstance>
 8004120:	4602      	mov	r2, r0
 8004122:	4904      	ldr	r1, [pc, #16]	@ (8004134 <HAL_DFSDM_ChannelInit+0x174>)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20000a90 	.word	0x20000a90
 8004138:	20000a8c 	.word	0x20000a8c
 800413c:	40016000 	.word	0x40016000

08004140 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a1c      	ldr	r2, [pc, #112]	@ (80041bc <DFSDM_GetChannelFromInstance+0x7c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d102      	bne.n	8004156 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e02b      	b.n	80041ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a19      	ldr	r2, [pc, #100]	@ (80041c0 <DFSDM_GetChannelFromInstance+0x80>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d102      	bne.n	8004164 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800415e:	2301      	movs	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e024      	b.n	80041ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a17      	ldr	r2, [pc, #92]	@ (80041c4 <DFSDM_GetChannelFromInstance+0x84>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d102      	bne.n	8004172 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800416c:	2302      	movs	r3, #2
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	e01d      	b.n	80041ae <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a14      	ldr	r2, [pc, #80]	@ (80041c8 <DFSDM_GetChannelFromInstance+0x88>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d102      	bne.n	8004180 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800417a:	2304      	movs	r3, #4
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	e016      	b.n	80041ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a12      	ldr	r2, [pc, #72]	@ (80041cc <DFSDM_GetChannelFromInstance+0x8c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d102      	bne.n	800418e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004188:	2305      	movs	r3, #5
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	e00f      	b.n	80041ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a0f      	ldr	r2, [pc, #60]	@ (80041d0 <DFSDM_GetChannelFromInstance+0x90>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d102      	bne.n	800419c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004196:	2306      	movs	r3, #6
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e008      	b.n	80041ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a0d      	ldr	r2, [pc, #52]	@ (80041d4 <DFSDM_GetChannelFromInstance+0x94>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d102      	bne.n	80041aa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80041a4:	2307      	movs	r3, #7
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	e001      	b.n	80041ae <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80041aa:	2303      	movs	r3, #3
 80041ac:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80041ae:	68fb      	ldr	r3, [r7, #12]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	40016000 	.word	0x40016000
 80041c0:	40016020 	.word	0x40016020
 80041c4:	40016040 	.word	0x40016040
 80041c8:	40016080 	.word	0x40016080
 80041cc:	400160a0 	.word	0x400160a0
 80041d0:	400160c0 	.word	0x400160c0
 80041d4:	400160e0 	.word	0x400160e0

080041d8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e098      	b.n	800431c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004328 <HAL_DMA_Init+0x150>)
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d80f      	bhi.n	8004216 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	4b4b      	ldr	r3, [pc, #300]	@ (800432c <HAL_DMA_Init+0x154>)
 80041fe:	4413      	add	r3, r2
 8004200:	4a4b      	ldr	r2, [pc, #300]	@ (8004330 <HAL_DMA_Init+0x158>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	091b      	lsrs	r3, r3, #4
 8004208:	009a      	lsls	r2, r3, #2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a48      	ldr	r2, [pc, #288]	@ (8004334 <HAL_DMA_Init+0x15c>)
 8004212:	641a      	str	r2, [r3, #64]	@ 0x40
 8004214:	e00e      	b.n	8004234 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	4b46      	ldr	r3, [pc, #280]	@ (8004338 <HAL_DMA_Init+0x160>)
 800421e:	4413      	add	r3, r2
 8004220:	4a43      	ldr	r2, [pc, #268]	@ (8004330 <HAL_DMA_Init+0x158>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	091b      	lsrs	r3, r3, #4
 8004228:	009a      	lsls	r2, r3, #2
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a42      	ldr	r2, [pc, #264]	@ (800433c <HAL_DMA_Init+0x164>)
 8004232:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800424a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800424e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004258:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004264:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004270:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800428e:	d039      	beq.n	8004304 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004294:	4a27      	ldr	r2, [pc, #156]	@ (8004334 <HAL_DMA_Init+0x15c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d11a      	bne.n	80042d0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800429a:	4b29      	ldr	r3, [pc, #164]	@ (8004340 <HAL_DMA_Init+0x168>)
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a2:	f003 031c 	and.w	r3, r3, #28
 80042a6:	210f      	movs	r1, #15
 80042a8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	4924      	ldr	r1, [pc, #144]	@ (8004340 <HAL_DMA_Init+0x168>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80042b4:	4b22      	ldr	r3, [pc, #136]	@ (8004340 <HAL_DMA_Init+0x168>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6859      	ldr	r1, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c0:	f003 031c 	and.w	r3, r3, #28
 80042c4:	fa01 f303 	lsl.w	r3, r1, r3
 80042c8:	491d      	ldr	r1, [pc, #116]	@ (8004340 <HAL_DMA_Init+0x168>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]
 80042ce:	e019      	b.n	8004304 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80042d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004344 <HAL_DMA_Init+0x16c>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d8:	f003 031c 	and.w	r3, r3, #28
 80042dc:	210f      	movs	r1, #15
 80042de:	fa01 f303 	lsl.w	r3, r1, r3
 80042e2:	43db      	mvns	r3, r3
 80042e4:	4917      	ldr	r1, [pc, #92]	@ (8004344 <HAL_DMA_Init+0x16c>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80042ea:	4b16      	ldr	r3, [pc, #88]	@ (8004344 <HAL_DMA_Init+0x16c>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6859      	ldr	r1, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f6:	f003 031c 	and.w	r3, r3, #28
 80042fa:	fa01 f303 	lsl.w	r3, r1, r3
 80042fe:	4911      	ldr	r1, [pc, #68]	@ (8004344 <HAL_DMA_Init+0x16c>)
 8004300:	4313      	orrs	r3, r2
 8004302:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	40020407 	.word	0x40020407
 800432c:	bffdfff8 	.word	0xbffdfff8
 8004330:	cccccccd 	.word	0xcccccccd
 8004334:	40020000 	.word	0x40020000
 8004338:	bffdfbf8 	.word	0xbffdfbf8
 800433c:	40020400 	.word	0x40020400
 8004340:	400200a8 	.word	0x400200a8
 8004344:	400204a8 	.word	0x400204a8

08004348 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_DMA_Start_IT+0x20>
 8004364:	2302      	movs	r3, #2
 8004366:	e04b      	b.n	8004400 <HAL_DMA_Start_IT+0xb8>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d13a      	bne.n	80043f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0201 	bic.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	68b9      	ldr	r1, [r7, #8]
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f8e0 	bl	8004566 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d008      	beq.n	80043c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 020e 	orr.w	r2, r2, #14
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e00f      	b.n	80043e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0204 	bic.w	r2, r2, #4
 80043ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 020a 	orr.w	r2, r2, #10
 80043de:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	e005      	b.n	80043fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80043fa:	2302      	movs	r3, #2
 80043fc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004424:	f003 031c 	and.w	r3, r3, #28
 8004428:	2204      	movs	r2, #4
 800442a:	409a      	lsls	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4013      	ands	r3, r2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d026      	beq.n	8004482 <HAL_DMA_IRQHandler+0x7a>
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b00      	cmp	r3, #0
 800443c:	d021      	beq.n	8004482 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d107      	bne.n	800445c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0204 	bic.w	r2, r2, #4
 800445a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004460:	f003 021c 	and.w	r2, r3, #28
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	2104      	movs	r1, #4
 800446a:	fa01 f202 	lsl.w	r2, r1, r2
 800446e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004474:	2b00      	cmp	r3, #0
 8004476:	d071      	beq.n	800455c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004480:	e06c      	b.n	800455c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004486:	f003 031c 	and.w	r3, r3, #28
 800448a:	2202      	movs	r2, #2
 800448c:	409a      	lsls	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4013      	ands	r3, r2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d02e      	beq.n	80044f4 <HAL_DMA_IRQHandler+0xec>
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d029      	beq.n	80044f4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10b      	bne.n	80044c6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 020a 	bic.w	r2, r2, #10
 80044bc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ca:	f003 021c 	and.w	r2, r3, #28
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	2102      	movs	r1, #2
 80044d4:	fa01 f202 	lsl.w	r2, r1, r2
 80044d8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d038      	beq.n	800455c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80044f2:	e033      	b.n	800455c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f8:	f003 031c 	and.w	r3, r3, #28
 80044fc:	2208      	movs	r2, #8
 80044fe:	409a      	lsls	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4013      	ands	r3, r2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d02a      	beq.n	800455e <HAL_DMA_IRQHandler+0x156>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d025      	beq.n	800455e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 020e 	bic.w	r2, r2, #14
 8004520:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004526:	f003 021c 	and.w	r2, r3, #28
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	2101      	movs	r1, #1
 8004530:	fa01 f202 	lsl.w	r2, r1, r2
 8004534:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004550:	2b00      	cmp	r3, #0
 8004552:	d004      	beq.n	800455e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800455c:	bf00      	nop
 800455e:	bf00      	nop
}
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004566:	b480      	push	{r7}
 8004568:	b085      	sub	sp, #20
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	607a      	str	r2, [r7, #4]
 8004572:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004578:	f003 021c 	and.w	r2, r3, #28
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004580:	2101      	movs	r1, #1
 8004582:	fa01 f202 	lsl.w	r2, r1, r2
 8004586:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b10      	cmp	r3, #16
 8004596:	d108      	bne.n	80045aa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045a8:	e007      	b.n	80045ba <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	60da      	str	r2, [r3, #12]
}
 80045ba:	bf00      	nop
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
	...

080045c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045d6:	e17f      	b.n	80048d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	2101      	movs	r1, #1
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	fa01 f303 	lsl.w	r3, r1, r3
 80045e4:	4013      	ands	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 8171 	beq.w	80048d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 0303 	and.w	r3, r3, #3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d005      	beq.n	8004608 <HAL_GPIO_Init+0x40>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 0303 	and.w	r3, r3, #3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d130      	bne.n	800466a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	2203      	movs	r2, #3
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	43db      	mvns	r3, r3
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4013      	ands	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800463e:	2201      	movs	r2, #1
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4013      	ands	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	f003 0201 	and.w	r2, r3, #1
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b03      	cmp	r3, #3
 8004674:	d118      	bne.n	80046a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800467c:	2201      	movs	r2, #1
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	43db      	mvns	r3, r3
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4013      	ands	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	08db      	lsrs	r3, r3, #3
 8004692:	f003 0201 	and.w	r2, r3, #1
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 0303 	and.w	r3, r3, #3
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d017      	beq.n	80046e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	2203      	movs	r2, #3
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4013      	ands	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d123      	bne.n	8004738 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	08da      	lsrs	r2, r3, #3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3208      	adds	r2, #8
 80046f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	220f      	movs	r2, #15
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	43db      	mvns	r3, r3
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4013      	ands	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	08da      	lsrs	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3208      	adds	r2, #8
 8004732:	6939      	ldr	r1, [r7, #16]
 8004734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	2203      	movs	r2, #3
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4013      	ands	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 0203 	and.w	r2, r3, #3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80ac 	beq.w	80048d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800477a:	4b5f      	ldr	r3, [pc, #380]	@ (80048f8 <HAL_GPIO_Init+0x330>)
 800477c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800477e:	4a5e      	ldr	r2, [pc, #376]	@ (80048f8 <HAL_GPIO_Init+0x330>)
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	6613      	str	r3, [r2, #96]	@ 0x60
 8004786:	4b5c      	ldr	r3, [pc, #368]	@ (80048f8 <HAL_GPIO_Init+0x330>)
 8004788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	60bb      	str	r3, [r7, #8]
 8004790:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004792:	4a5a      	ldr	r2, [pc, #360]	@ (80048fc <HAL_GPIO_Init+0x334>)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	089b      	lsrs	r3, r3, #2
 8004798:	3302      	adds	r3, #2
 800479a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	220f      	movs	r2, #15
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	43db      	mvns	r3, r3
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4013      	ands	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80047bc:	d025      	beq.n	800480a <HAL_GPIO_Init+0x242>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a4f      	ldr	r2, [pc, #316]	@ (8004900 <HAL_GPIO_Init+0x338>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d01f      	beq.n	8004806 <HAL_GPIO_Init+0x23e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a4e      	ldr	r2, [pc, #312]	@ (8004904 <HAL_GPIO_Init+0x33c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d019      	beq.n	8004802 <HAL_GPIO_Init+0x23a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a4d      	ldr	r2, [pc, #308]	@ (8004908 <HAL_GPIO_Init+0x340>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d013      	beq.n	80047fe <HAL_GPIO_Init+0x236>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a4c      	ldr	r2, [pc, #304]	@ (800490c <HAL_GPIO_Init+0x344>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00d      	beq.n	80047fa <HAL_GPIO_Init+0x232>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004910 <HAL_GPIO_Init+0x348>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d007      	beq.n	80047f6 <HAL_GPIO_Init+0x22e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a4a      	ldr	r2, [pc, #296]	@ (8004914 <HAL_GPIO_Init+0x34c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d101      	bne.n	80047f2 <HAL_GPIO_Init+0x22a>
 80047ee:	2306      	movs	r3, #6
 80047f0:	e00c      	b.n	800480c <HAL_GPIO_Init+0x244>
 80047f2:	2307      	movs	r3, #7
 80047f4:	e00a      	b.n	800480c <HAL_GPIO_Init+0x244>
 80047f6:	2305      	movs	r3, #5
 80047f8:	e008      	b.n	800480c <HAL_GPIO_Init+0x244>
 80047fa:	2304      	movs	r3, #4
 80047fc:	e006      	b.n	800480c <HAL_GPIO_Init+0x244>
 80047fe:	2303      	movs	r3, #3
 8004800:	e004      	b.n	800480c <HAL_GPIO_Init+0x244>
 8004802:	2302      	movs	r3, #2
 8004804:	e002      	b.n	800480c <HAL_GPIO_Init+0x244>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <HAL_GPIO_Init+0x244>
 800480a:	2300      	movs	r3, #0
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	f002 0203 	and.w	r2, r2, #3
 8004812:	0092      	lsls	r2, r2, #2
 8004814:	4093      	lsls	r3, r2
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800481c:	4937      	ldr	r1, [pc, #220]	@ (80048fc <HAL_GPIO_Init+0x334>)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	089b      	lsrs	r3, r3, #2
 8004822:	3302      	adds	r3, #2
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800482a:	4b3b      	ldr	r3, [pc, #236]	@ (8004918 <HAL_GPIO_Init+0x350>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	43db      	mvns	r3, r3
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4013      	ands	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800484e:	4a32      	ldr	r2, [pc, #200]	@ (8004918 <HAL_GPIO_Init+0x350>)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004854:	4b30      	ldr	r3, [pc, #192]	@ (8004918 <HAL_GPIO_Init+0x350>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	43db      	mvns	r3, r3
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4013      	ands	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004878:	4a27      	ldr	r2, [pc, #156]	@ (8004918 <HAL_GPIO_Init+0x350>)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800487e:	4b26      	ldr	r3, [pc, #152]	@ (8004918 <HAL_GPIO_Init+0x350>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	43db      	mvns	r3, r3
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4013      	ands	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004918 <HAL_GPIO_Init+0x350>)
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80048a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004918 <HAL_GPIO_Init+0x350>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	43db      	mvns	r3, r3
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048cc:	4a12      	ldr	r2, [pc, #72]	@ (8004918 <HAL_GPIO_Init+0x350>)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	3301      	adds	r3, #1
 80048d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	fa22 f303 	lsr.w	r3, r2, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f47f ae78 	bne.w	80045d8 <HAL_GPIO_Init+0x10>
  }
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40021000 	.word	0x40021000
 80048fc:	40010000 	.word	0x40010000
 8004900:	48000400 	.word	0x48000400
 8004904:	48000800 	.word	0x48000800
 8004908:	48000c00 	.word	0x48000c00
 800490c:	48001000 	.word	0x48001000
 8004910:	48001400 	.word	0x48001400
 8004914:	48001800 	.word	0x48001800
 8004918:	40010400 	.word	0x40010400

0800491c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	807b      	strh	r3, [r7, #2]
 8004928:	4613      	mov	r3, r2
 800492a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800492c:	787b      	ldrb	r3, [r7, #1]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004932:	887a      	ldrh	r2, [r7, #2]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004938:	e002      	b.n	8004940 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800493a:	887a      	ldrh	r2, [r7, #2]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004956:	4b08      	ldr	r3, [pc, #32]	@ (8004978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	4013      	ands	r3, r2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d006      	beq.n	8004970 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004962:	4a05      	ldr	r2, [pc, #20]	@ (8004978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004964:	88fb      	ldrh	r3, [r7, #6]
 8004966:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004968:	88fb      	ldrh	r3, [r7, #6]
 800496a:	4618      	mov	r0, r3
 800496c:	f000 f806 	bl	800497c <HAL_GPIO_EXTI_Callback>
  }
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40010400 	.word	0x40010400

0800497c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e08d      	b.n	8004ac0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d106      	bne.n	80049be <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7fd f8c7 	bl	8001b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2224      	movs	r2, #36	@ 0x24
 80049c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0201 	bic.w	r2, r2, #1
 80049d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80049e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d107      	bne.n	8004a0c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a08:	609a      	str	r2, [r3, #8]
 8004a0a:	e006      	b.n	8004a1a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004a18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d108      	bne.n	8004a34 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a30:	605a      	str	r2, [r3, #4]
 8004a32:	e007      	b.n	8004a44 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a42:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a56:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a66:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69d9      	ldr	r1, [r3, #28]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1a      	ldr	r2, [r3, #32]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0201 	orr.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b20      	cmp	r3, #32
 8004adc:	d138      	bne.n	8004b50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e032      	b.n	8004b52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2224      	movs	r2, #36	@ 0x24
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0201 	bic.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6819      	ldr	r1, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e000      	b.n	8004b52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b50:	2302      	movs	r3, #2
  }
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	d139      	bne.n	8004be8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e033      	b.n	8004bea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2224      	movs	r2, #36	@ 0x24
 8004b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0201 	bic.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004bb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	021b      	lsls	r3, r3, #8
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	e000      	b.n	8004bea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004be8:	2302      	movs	r3, #2
  }
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b086      	sub	sp, #24
 8004bfa:	af02      	add	r7, sp, #8
 8004bfc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e101      	b.n	8004e0c <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7fd f95f 	bl	8001ee0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2203      	movs	r2, #3
 8004c26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f003 f8d7 	bl	8007de8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	7c1a      	ldrb	r2, [r3, #16]
 8004c42:	f88d 2000 	strb.w	r2, [sp]
 8004c46:	3304      	adds	r3, #4
 8004c48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c4a:	f003 f8a0 	bl	8007d8e <USB_CoreInit>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d005      	beq.n	8004c60 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0d5      	b.n	8004e0c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2100      	movs	r1, #0
 8004c66:	4618      	mov	r0, r3
 8004c68:	f003 f8cf 	bl	8007e0a <USB_SetCurrentMode>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2202      	movs	r2, #2
 8004c76:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e0c6      	b.n	8004e0c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c7e:	2300      	movs	r3, #0
 8004c80:	73fb      	strb	r3, [r7, #15]
 8004c82:	e04a      	b.n	8004d1a <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c84:	7bfa      	ldrb	r2, [r7, #15]
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	3315      	adds	r3, #21
 8004c94:	2201      	movs	r2, #1
 8004c96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c98:	7bfa      	ldrb	r2, [r7, #15]
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	3314      	adds	r3, #20
 8004ca8:	7bfa      	ldrb	r2, [r7, #15]
 8004caa:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004cac:	7bfa      	ldrb	r2, [r7, #15]
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	b298      	uxth	r0, r3
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	4413      	add	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	332e      	adds	r3, #46	@ 0x2e
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004cc4:	7bfa      	ldrb	r2, [r7, #15]
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	3318      	adds	r3, #24
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004cd8:	7bfa      	ldrb	r2, [r7, #15]
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	331c      	adds	r3, #28
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cec:	7bfa      	ldrb	r2, [r7, #15]
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	3320      	adds	r3, #32
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d00:	7bfa      	ldrb	r2, [r7, #15]
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	3324      	adds	r3, #36	@ 0x24
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	3301      	adds	r3, #1
 8004d18:	73fb      	strb	r3, [r7, #15]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	791b      	ldrb	r3, [r3, #4]
 8004d1e:	7bfa      	ldrb	r2, [r7, #15]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d3af      	bcc.n	8004c84 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d24:	2300      	movs	r3, #0
 8004d26:	73fb      	strb	r3, [r7, #15]
 8004d28:	e044      	b.n	8004db4 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d2a:	7bfa      	ldrb	r2, [r7, #15]
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d40:	7bfa      	ldrb	r2, [r7, #15]
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4613      	mov	r3, r2
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004d52:	7bfa      	ldrb	r2, [r7, #15]
 8004d54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d56:	7bfa      	ldrb	r2, [r7, #15]
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004d68:	2200      	movs	r2, #0
 8004d6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d6c:	7bfa      	ldrb	r2, [r7, #15]
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d82:	7bfa      	ldrb	r2, [r7, #15]
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d98:	7bfa      	ldrb	r2, [r7, #15]
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
 8004db0:	3301      	adds	r3, #1
 8004db2:	73fb      	strb	r3, [r7, #15]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	791b      	ldrb	r3, [r3, #4]
 8004db8:	7bfa      	ldrb	r2, [r7, #15]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d3b5      	bcc.n	8004d2a <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	7c1a      	ldrb	r2, [r3, #16]
 8004dc6:	f88d 2000 	strb.w	r2, [sp]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dce:	f003 f869 	bl	8007ea4 <USB_DevInit>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e013      	b.n	8004e0c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	7b1b      	ldrb	r3, [r3, #12]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d102      	bne.n	8004e00 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f80a 	bl	8004e14 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f003 fa0e 	bl	8008226 <USB_DevDisconnect>

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e46:	f043 0303 	orr.w	r3, r3, #3
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e60:	4b05      	ldr	r3, [pc, #20]	@ (8004e78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a04      	ldr	r2, [pc, #16]	@ (8004e78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e6a:	6013      	str	r3, [r2, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40007000 	.word	0x40007000

08004e7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004e80:	4b04      	ldr	r3, [pc, #16]	@ (8004e94 <HAL_PWREx_GetVoltageRange+0x18>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40007000 	.word	0x40007000

08004e98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ea6:	d130      	bne.n	8004f0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ea8:	4b23      	ldr	r3, [pc, #140]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eb4:	d038      	beq.n	8004f28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eb6:	4b20      	ldr	r3, [pc, #128]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ec0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ec4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2232      	movs	r2, #50	@ 0x32
 8004ecc:	fb02 f303 	mul.w	r3, r2, r3
 8004ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8004f40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	0c9b      	lsrs	r3, r3, #18
 8004ed8:	3301      	adds	r3, #1
 8004eda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004edc:	e002      	b.n	8004ee4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ee4:	4b14      	ldr	r3, [pc, #80]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ef0:	d102      	bne.n	8004ef8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1f2      	bne.n	8004ede <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f04:	d110      	bne.n	8004f28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e00f      	b.n	8004f2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f16:	d007      	beq.n	8004f28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f18:	4b07      	ldr	r3, [pc, #28]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f20:	4a05      	ldr	r2, [pc, #20]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40007000 	.word	0x40007000
 8004f3c:	20000000 	.word	0x20000000
 8004f40:	431bde83 	.word	0x431bde83

08004f44 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004f48:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	4a04      	ldr	r2, [pc, #16]	@ (8004f60 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004f4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f52:	6053      	str	r3, [r2, #4]
}
 8004f54:	bf00      	nop
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	40007000 	.word	0x40007000

08004f64 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f6c:	f7fd fac8 	bl	8002500 <HAL_GetTick>
 8004f70:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e063      	b.n	8005044 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10b      	bne.n	8004fa0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7fc fe39 	bl	8001c08 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004f96:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f858 	bl	8005050 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	021a      	lsls	r2, r3, #8
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2120      	movs	r1, #32
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f850 	bl	800506c <QSPI_WaitFlagStateUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004fd0:	7afb      	ldrb	r3, [r7, #11]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d131      	bne.n	800503a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004fe0:	f023 0310 	bic.w	r3, r3, #16
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6852      	ldr	r2, [r2, #4]
 8004fe8:	0611      	lsls	r1, r2, #24
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	68d2      	ldr	r2, [r2, #12]
 8004fee:	4311      	orrs	r1, r2
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	4b13      	ldr	r3, [pc, #76]	@ (800504c <HAL_QSPI_Init+0xe8>)
 8005000:	4013      	ands	r3, r2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6912      	ldr	r2, [r2, #16]
 8005006:	0411      	lsls	r1, r2, #16
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6952      	ldr	r2, [r2, #20]
 800500c:	4311      	orrs	r1, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6992      	ldr	r2, [r2, #24]
 8005012:	4311      	orrs	r1, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	430b      	orrs	r3, r1
 800501a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8005042:	7afb      	ldrb	r3, [r7, #11]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	ffe0f8fe 	.word	0xffe0f8fe

08005050 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	4613      	mov	r3, r2
 800507a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800507c:	e01a      	b.n	80050b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d016      	beq.n	80050b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005086:	f7fd fa3b 	bl	8002500 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	429a      	cmp	r2, r3
 8005094:	d302      	bcc.n	800509c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10b      	bne.n	80050b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2204      	movs	r2, #4
 80050a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a8:	f043 0201 	orr.w	r2, r3, #1
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e00e      	b.n	80050d2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4013      	ands	r3, r2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	bf14      	ite	ne
 80050c2:	2301      	movne	r3, #1
 80050c4:	2300      	moveq	r3, #0
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d1d6      	bne.n	800507e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e3ca      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ee:	4b97      	ldr	r3, [pc, #604]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 030c 	and.w	r3, r3, #12
 80050f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050f8:	4b94      	ldr	r3, [pc, #592]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f003 0303 	and.w	r3, r3, #3
 8005100:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 80e4 	beq.w	80052d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <HAL_RCC_OscConfig+0x4a>
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b0c      	cmp	r3, #12
 800511a:	f040 808b 	bne.w	8005234 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b01      	cmp	r3, #1
 8005122:	f040 8087 	bne.w	8005234 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005126:	4b89      	ldr	r3, [pc, #548]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <HAL_RCC_OscConfig+0x62>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e3a2      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1a      	ldr	r2, [r3, #32]
 8005142:	4b82      	ldr	r3, [pc, #520]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d004      	beq.n	8005158 <HAL_RCC_OscConfig+0x7c>
 800514e:	4b7f      	ldr	r3, [pc, #508]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005156:	e005      	b.n	8005164 <HAL_RCC_OscConfig+0x88>
 8005158:	4b7c      	ldr	r3, [pc, #496]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 800515a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800515e:	091b      	lsrs	r3, r3, #4
 8005160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005164:	4293      	cmp	r3, r2
 8005166:	d223      	bcs.n	80051b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fd87 	bl	8005c80 <RCC_SetFlashLatencyFromMSIRange>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e383      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800517c:	4b73      	ldr	r3, [pc, #460]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a72      	ldr	r2, [pc, #456]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 8005182:	f043 0308 	orr.w	r3, r3, #8
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	4b70      	ldr	r3, [pc, #448]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	496d      	ldr	r1, [pc, #436]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 8005196:	4313      	orrs	r3, r2
 8005198:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800519a:	4b6c      	ldr	r3, [pc, #432]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	4968      	ldr	r1, [pc, #416]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	604b      	str	r3, [r1, #4]
 80051ae:	e025      	b.n	80051fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051b0:	4b66      	ldr	r3, [pc, #408]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a65      	ldr	r2, [pc, #404]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 80051b6:	f043 0308 	orr.w	r3, r3, #8
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	4b63      	ldr	r3, [pc, #396]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	4960      	ldr	r1, [pc, #384]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051ce:	4b5f      	ldr	r3, [pc, #380]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	495b      	ldr	r1, [pc, #364]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d109      	bne.n	80051fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fd47 	bl	8005c80 <RCC_SetFlashLatencyFromMSIRange>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e343      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051fc:	f000 fc4a 	bl	8005a94 <HAL_RCC_GetSysClockFreq>
 8005200:	4602      	mov	r2, r0
 8005202:	4b52      	ldr	r3, [pc, #328]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	091b      	lsrs	r3, r3, #4
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	4950      	ldr	r1, [pc, #320]	@ (8005350 <HAL_RCC_OscConfig+0x274>)
 800520e:	5ccb      	ldrb	r3, [r1, r3]
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	fa22 f303 	lsr.w	r3, r2, r3
 8005218:	4a4e      	ldr	r2, [pc, #312]	@ (8005354 <HAL_RCC_OscConfig+0x278>)
 800521a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800521c:	4b4e      	ldr	r3, [pc, #312]	@ (8005358 <HAL_RCC_OscConfig+0x27c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4618      	mov	r0, r3
 8005222:	f7fc fec9 	bl	8001fb8 <HAL_InitTick>
 8005226:	4603      	mov	r3, r0
 8005228:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800522a:	7bfb      	ldrb	r3, [r7, #15]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d052      	beq.n	80052d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005230:	7bfb      	ldrb	r3, [r7, #15]
 8005232:	e327      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d032      	beq.n	80052a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800523c:	4b43      	ldr	r3, [pc, #268]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a42      	ldr	r2, [pc, #264]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 8005242:	f043 0301 	orr.w	r3, r3, #1
 8005246:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005248:	f7fd f95a 	bl	8002500 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005250:	f7fd f956 	bl	8002500 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e310      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005262:	4b3a      	ldr	r3, [pc, #232]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800526e:	4b37      	ldr	r3, [pc, #220]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a36      	ldr	r2, [pc, #216]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 8005274:	f043 0308 	orr.w	r3, r3, #8
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	4b34      	ldr	r3, [pc, #208]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	4931      	ldr	r1, [pc, #196]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 8005288:	4313      	orrs	r3, r2
 800528a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800528c:	4b2f      	ldr	r3, [pc, #188]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	021b      	lsls	r3, r3, #8
 800529a:	492c      	ldr	r1, [pc, #176]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 800529c:	4313      	orrs	r3, r2
 800529e:	604b      	str	r3, [r1, #4]
 80052a0:	e01a      	b.n	80052d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052a2:	4b2a      	ldr	r3, [pc, #168]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a29      	ldr	r2, [pc, #164]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052ae:	f7fd f927 	bl	8002500 <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052b6:	f7fd f923 	bl	8002500 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e2dd      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052c8:	4b20      	ldr	r3, [pc, #128]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1f0      	bne.n	80052b6 <HAL_RCC_OscConfig+0x1da>
 80052d4:	e000      	b.n	80052d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d074      	beq.n	80053ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d005      	beq.n	80052f6 <HAL_RCC_OscConfig+0x21a>
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	2b0c      	cmp	r3, #12
 80052ee:	d10e      	bne.n	800530e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d10b      	bne.n	800530e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f6:	4b15      	ldr	r3, [pc, #84]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d064      	beq.n	80053cc <HAL_RCC_OscConfig+0x2f0>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d160      	bne.n	80053cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e2ba      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005316:	d106      	bne.n	8005326 <HAL_RCC_OscConfig+0x24a>
 8005318:	4b0c      	ldr	r3, [pc, #48]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a0b      	ldr	r2, [pc, #44]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 800531e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	e026      	b.n	8005374 <HAL_RCC_OscConfig+0x298>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800532e:	d115      	bne.n	800535c <HAL_RCC_OscConfig+0x280>
 8005330:	4b06      	ldr	r3, [pc, #24]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a05      	ldr	r2, [pc, #20]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 8005336:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	4b03      	ldr	r3, [pc, #12]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a02      	ldr	r2, [pc, #8]	@ (800534c <HAL_RCC_OscConfig+0x270>)
 8005342:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	e014      	b.n	8005374 <HAL_RCC_OscConfig+0x298>
 800534a:	bf00      	nop
 800534c:	40021000 	.word	0x40021000
 8005350:	0800dc34 	.word	0x0800dc34
 8005354:	20000000 	.word	0x20000000
 8005358:	20000004 	.word	0x20000004
 800535c:	4ba0      	ldr	r3, [pc, #640]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a9f      	ldr	r2, [pc, #636]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 8005362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	4b9d      	ldr	r3, [pc, #628]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a9c      	ldr	r2, [pc, #624]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 800536e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d013      	beq.n	80053a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fd f8c0 	bl	8002500 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005384:	f7fd f8bc 	bl	8002500 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b64      	cmp	r3, #100	@ 0x64
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e276      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005396:	4b92      	ldr	r3, [pc, #584]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0x2a8>
 80053a2:	e014      	b.n	80053ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a4:	f7fd f8ac 	bl	8002500 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053ac:	f7fd f8a8 	bl	8002500 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b64      	cmp	r3, #100	@ 0x64
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e262      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053be:	4b88      	ldr	r3, [pc, #544]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f0      	bne.n	80053ac <HAL_RCC_OscConfig+0x2d0>
 80053ca:	e000      	b.n	80053ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d060      	beq.n	800549c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d005      	beq.n	80053ec <HAL_RCC_OscConfig+0x310>
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	2b0c      	cmp	r3, #12
 80053e4:	d119      	bne.n	800541a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d116      	bne.n	800541a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053ec:	4b7c      	ldr	r3, [pc, #496]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d005      	beq.n	8005404 <HAL_RCC_OscConfig+0x328>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e23f      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005404:	4b76      	ldr	r3, [pc, #472]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	061b      	lsls	r3, r3, #24
 8005412:	4973      	ldr	r1, [pc, #460]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 8005414:	4313      	orrs	r3, r2
 8005416:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005418:	e040      	b.n	800549c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d023      	beq.n	800546a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005422:	4b6f      	ldr	r3, [pc, #444]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a6e      	ldr	r2, [pc, #440]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 8005428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800542c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542e:	f7fd f867 	bl	8002500 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005436:	f7fd f863 	bl	8002500 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e21d      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005448:	4b65      	ldr	r3, [pc, #404]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0f0      	beq.n	8005436 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005454:	4b62      	ldr	r3, [pc, #392]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	061b      	lsls	r3, r3, #24
 8005462:	495f      	ldr	r1, [pc, #380]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 8005464:	4313      	orrs	r3, r2
 8005466:	604b      	str	r3, [r1, #4]
 8005468:	e018      	b.n	800549c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800546a:	4b5d      	ldr	r3, [pc, #372]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a5c      	ldr	r2, [pc, #368]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 8005470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005476:	f7fd f843 	bl	8002500 <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800547e:	f7fd f83f 	bl	8002500 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e1f9      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005490:	4b53      	ldr	r3, [pc, #332]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1f0      	bne.n	800547e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d03c      	beq.n	8005522 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01c      	beq.n	80054ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054b0:	4b4b      	ldr	r3, [pc, #300]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 80054b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054b6:	4a4a      	ldr	r2, [pc, #296]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 80054b8:	f043 0301 	orr.w	r3, r3, #1
 80054bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c0:	f7fd f81e 	bl	8002500 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054c8:	f7fd f81a 	bl	8002500 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e1d4      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054da:	4b41      	ldr	r3, [pc, #260]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 80054dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0ef      	beq.n	80054c8 <HAL_RCC_OscConfig+0x3ec>
 80054e8:	e01b      	b.n	8005522 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ea:	4b3d      	ldr	r3, [pc, #244]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 80054ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054f0:	4a3b      	ldr	r2, [pc, #236]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 80054f2:	f023 0301 	bic.w	r3, r3, #1
 80054f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fa:	f7fd f801 	bl	8002500 <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005502:	f7fc fffd 	bl	8002500 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e1b7      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005514:	4b32      	ldr	r3, [pc, #200]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 8005516:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1ef      	bne.n	8005502 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 80a6 	beq.w	800567c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005530:	2300      	movs	r3, #0
 8005532:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005534:	4b2a      	ldr	r3, [pc, #168]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 8005536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10d      	bne.n	800555c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005540:	4b27      	ldr	r3, [pc, #156]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 8005542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005544:	4a26      	ldr	r2, [pc, #152]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 8005546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800554a:	6593      	str	r3, [r2, #88]	@ 0x58
 800554c:	4b24      	ldr	r3, [pc, #144]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 800554e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005554:	60bb      	str	r3, [r7, #8]
 8005556:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005558:	2301      	movs	r3, #1
 800555a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800555c:	4b21      	ldr	r3, [pc, #132]	@ (80055e4 <HAL_RCC_OscConfig+0x508>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005564:	2b00      	cmp	r3, #0
 8005566:	d118      	bne.n	800559a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005568:	4b1e      	ldr	r3, [pc, #120]	@ (80055e4 <HAL_RCC_OscConfig+0x508>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1d      	ldr	r2, [pc, #116]	@ (80055e4 <HAL_RCC_OscConfig+0x508>)
 800556e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005572:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005574:	f7fc ffc4 	bl	8002500 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800557c:	f7fc ffc0 	bl	8002500 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e17a      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800558e:	4b15      	ldr	r3, [pc, #84]	@ (80055e4 <HAL_RCC_OscConfig+0x508>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0f0      	beq.n	800557c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d108      	bne.n	80055b4 <HAL_RCC_OscConfig+0x4d8>
 80055a2:	4b0f      	ldr	r3, [pc, #60]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 80055a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a8:	4a0d      	ldr	r2, [pc, #52]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055b2:	e029      	b.n	8005608 <HAL_RCC_OscConfig+0x52c>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b05      	cmp	r3, #5
 80055ba:	d115      	bne.n	80055e8 <HAL_RCC_OscConfig+0x50c>
 80055bc:	4b08      	ldr	r3, [pc, #32]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 80055be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c2:	4a07      	ldr	r2, [pc, #28]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 80055c4:	f043 0304 	orr.w	r3, r3, #4
 80055c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055cc:	4b04      	ldr	r3, [pc, #16]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d2:	4a03      	ldr	r2, [pc, #12]	@ (80055e0 <HAL_RCC_OscConfig+0x504>)
 80055d4:	f043 0301 	orr.w	r3, r3, #1
 80055d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055dc:	e014      	b.n	8005608 <HAL_RCC_OscConfig+0x52c>
 80055de:	bf00      	nop
 80055e0:	40021000 	.word	0x40021000
 80055e4:	40007000 	.word	0x40007000
 80055e8:	4b9c      	ldr	r3, [pc, #624]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 80055ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ee:	4a9b      	ldr	r2, [pc, #620]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 80055f0:	f023 0301 	bic.w	r3, r3, #1
 80055f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055f8:	4b98      	ldr	r3, [pc, #608]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fe:	4a97      	ldr	r2, [pc, #604]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 8005600:	f023 0304 	bic.w	r3, r3, #4
 8005604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d016      	beq.n	800563e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005610:	f7fc ff76 	bl	8002500 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005616:	e00a      	b.n	800562e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005618:	f7fc ff72 	bl	8002500 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e12a      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800562e:	4b8b      	ldr	r3, [pc, #556]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 8005630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0ed      	beq.n	8005618 <HAL_RCC_OscConfig+0x53c>
 800563c:	e015      	b.n	800566a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800563e:	f7fc ff5f 	bl	8002500 <HAL_GetTick>
 8005642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005644:	e00a      	b.n	800565c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005646:	f7fc ff5b 	bl	8002500 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005654:	4293      	cmp	r3, r2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e113      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800565c:	4b7f      	ldr	r3, [pc, #508]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 800565e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1ed      	bne.n	8005646 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800566a:	7ffb      	ldrb	r3, [r7, #31]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d105      	bne.n	800567c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005670:	4b7a      	ldr	r3, [pc, #488]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 8005672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005674:	4a79      	ldr	r2, [pc, #484]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 8005676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800567a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 80fe 	beq.w	8005882 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568a:	2b02      	cmp	r3, #2
 800568c:	f040 80d0 	bne.w	8005830 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005690:	4b72      	ldr	r3, [pc, #456]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f003 0203 	and.w	r2, r3, #3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d130      	bne.n	8005706 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ae:	3b01      	subs	r3, #1
 80056b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d127      	bne.n	8005706 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d11f      	bne.n	8005706 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80056d0:	2a07      	cmp	r2, #7
 80056d2:	bf14      	ite	ne
 80056d4:	2201      	movne	r2, #1
 80056d6:	2200      	moveq	r2, #0
 80056d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056da:	4293      	cmp	r3, r2
 80056dc:	d113      	bne.n	8005706 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e8:	085b      	lsrs	r3, r3, #1
 80056ea:	3b01      	subs	r3, #1
 80056ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d109      	bne.n	8005706 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fc:	085b      	lsrs	r3, r3, #1
 80056fe:	3b01      	subs	r3, #1
 8005700:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005702:	429a      	cmp	r2, r3
 8005704:	d06e      	beq.n	80057e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b0c      	cmp	r3, #12
 800570a:	d069      	beq.n	80057e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800570c:	4b53      	ldr	r3, [pc, #332]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d105      	bne.n	8005724 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005718:	4b50      	ldr	r3, [pc, #320]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e0ad      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005728:	4b4c      	ldr	r3, [pc, #304]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a4b      	ldr	r2, [pc, #300]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 800572e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005732:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005734:	f7fc fee4 	bl	8002500 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800573c:	f7fc fee0 	bl	8002500 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e09a      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800574e:	4b43      	ldr	r3, [pc, #268]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f0      	bne.n	800573c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800575a:	4b40      	ldr	r3, [pc, #256]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	4b40      	ldr	r3, [pc, #256]	@ (8005860 <HAL_RCC_OscConfig+0x784>)
 8005760:	4013      	ands	r3, r2
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800576a:	3a01      	subs	r2, #1
 800576c:	0112      	lsls	r2, r2, #4
 800576e:	4311      	orrs	r1, r2
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005774:	0212      	lsls	r2, r2, #8
 8005776:	4311      	orrs	r1, r2
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800577c:	0852      	lsrs	r2, r2, #1
 800577e:	3a01      	subs	r2, #1
 8005780:	0552      	lsls	r2, r2, #21
 8005782:	4311      	orrs	r1, r2
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005788:	0852      	lsrs	r2, r2, #1
 800578a:	3a01      	subs	r2, #1
 800578c:	0652      	lsls	r2, r2, #25
 800578e:	4311      	orrs	r1, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005794:	0912      	lsrs	r2, r2, #4
 8005796:	0452      	lsls	r2, r2, #17
 8005798:	430a      	orrs	r2, r1
 800579a:	4930      	ldr	r1, [pc, #192]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 800579c:	4313      	orrs	r3, r2
 800579e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80057a0:	4b2e      	ldr	r3, [pc, #184]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a2d      	ldr	r2, [pc, #180]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 80057a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057ac:	4b2b      	ldr	r3, [pc, #172]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	4a2a      	ldr	r2, [pc, #168]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 80057b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057b8:	f7fc fea2 	bl	8002500 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c0:	f7fc fe9e 	bl	8002500 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e058      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057d2:	4b22      	ldr	r3, [pc, #136]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0f0      	beq.n	80057c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057de:	e050      	b.n	8005882 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e04f      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057e4:	4b1d      	ldr	r3, [pc, #116]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d148      	bne.n	8005882 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80057f0:	4b1a      	ldr	r3, [pc, #104]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a19      	ldr	r2, [pc, #100]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 80057f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057fc:	4b17      	ldr	r3, [pc, #92]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	4a16      	ldr	r2, [pc, #88]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 8005802:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005806:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005808:	f7fc fe7a 	bl	8002500 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005810:	f7fc fe76 	bl	8002500 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e030      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005822:	4b0e      	ldr	r3, [pc, #56]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0f0      	beq.n	8005810 <HAL_RCC_OscConfig+0x734>
 800582e:	e028      	b.n	8005882 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	2b0c      	cmp	r3, #12
 8005834:	d023      	beq.n	800587e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005836:	4b09      	ldr	r3, [pc, #36]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a08      	ldr	r2, [pc, #32]	@ (800585c <HAL_RCC_OscConfig+0x780>)
 800583c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005842:	f7fc fe5d 	bl	8002500 <HAL_GetTick>
 8005846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005848:	e00c      	b.n	8005864 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584a:	f7fc fe59 	bl	8002500 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d905      	bls.n	8005864 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e013      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
 800585c:	40021000 	.word	0x40021000
 8005860:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005864:	4b09      	ldr	r3, [pc, #36]	@ (800588c <HAL_RCC_OscConfig+0x7b0>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1ec      	bne.n	800584a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005870:	4b06      	ldr	r3, [pc, #24]	@ (800588c <HAL_RCC_OscConfig+0x7b0>)
 8005872:	68da      	ldr	r2, [r3, #12]
 8005874:	4905      	ldr	r1, [pc, #20]	@ (800588c <HAL_RCC_OscConfig+0x7b0>)
 8005876:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <HAL_RCC_OscConfig+0x7b4>)
 8005878:	4013      	ands	r3, r2
 800587a:	60cb      	str	r3, [r1, #12]
 800587c:	e001      	b.n	8005882 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e000      	b.n	8005884 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3720      	adds	r7, #32
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40021000 	.word	0x40021000
 8005890:	feeefffc 	.word	0xfeeefffc

08005894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e0e7      	b.n	8005a78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058a8:	4b75      	ldr	r3, [pc, #468]	@ (8005a80 <HAL_RCC_ClockConfig+0x1ec>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d910      	bls.n	80058d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b6:	4b72      	ldr	r3, [pc, #456]	@ (8005a80 <HAL_RCC_ClockConfig+0x1ec>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f023 0207 	bic.w	r2, r3, #7
 80058be:	4970      	ldr	r1, [pc, #448]	@ (8005a80 <HAL_RCC_ClockConfig+0x1ec>)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058c6:	4b6e      	ldr	r3, [pc, #440]	@ (8005a80 <HAL_RCC_ClockConfig+0x1ec>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d001      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e0cf      	b.n	8005a78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d010      	beq.n	8005906 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	4b66      	ldr	r3, [pc, #408]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d908      	bls.n	8005906 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058f4:	4b63      	ldr	r3, [pc, #396]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	4960      	ldr	r1, [pc, #384]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 8005902:	4313      	orrs	r3, r2
 8005904:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d04c      	beq.n	80059ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b03      	cmp	r3, #3
 8005918:	d107      	bne.n	800592a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800591a:	4b5a      	ldr	r3, [pc, #360]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d121      	bne.n	800596a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e0a6      	b.n	8005a78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d107      	bne.n	8005942 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005932:	4b54      	ldr	r3, [pc, #336]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d115      	bne.n	800596a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e09a      	b.n	8005a78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d107      	bne.n	800595a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800594a:	4b4e      	ldr	r3, [pc, #312]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e08e      	b.n	8005a78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800595a:	4b4a      	ldr	r3, [pc, #296]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e086      	b.n	8005a78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800596a:	4b46      	ldr	r3, [pc, #280]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f023 0203 	bic.w	r2, r3, #3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	4943      	ldr	r1, [pc, #268]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 8005978:	4313      	orrs	r3, r2
 800597a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800597c:	f7fc fdc0 	bl	8002500 <HAL_GetTick>
 8005980:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005982:	e00a      	b.n	800599a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005984:	f7fc fdbc 	bl	8002500 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e06e      	b.n	8005a78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599a:	4b3a      	ldr	r3, [pc, #232]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 020c 	and.w	r2, r3, #12
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d1eb      	bne.n	8005984 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d010      	beq.n	80059da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	4b31      	ldr	r3, [pc, #196]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d208      	bcs.n	80059da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059c8:	4b2e      	ldr	r3, [pc, #184]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	492b      	ldr	r1, [pc, #172]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059da:	4b29      	ldr	r3, [pc, #164]	@ (8005a80 <HAL_RCC_ClockConfig+0x1ec>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d210      	bcs.n	8005a0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e8:	4b25      	ldr	r3, [pc, #148]	@ (8005a80 <HAL_RCC_ClockConfig+0x1ec>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f023 0207 	bic.w	r2, r3, #7
 80059f0:	4923      	ldr	r1, [pc, #140]	@ (8005a80 <HAL_RCC_ClockConfig+0x1ec>)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f8:	4b21      	ldr	r3, [pc, #132]	@ (8005a80 <HAL_RCC_ClockConfig+0x1ec>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d001      	beq.n	8005a0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e036      	b.n	8005a78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d008      	beq.n	8005a28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a16:	4b1b      	ldr	r3, [pc, #108]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	4918      	ldr	r1, [pc, #96]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d009      	beq.n	8005a48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a34:	4b13      	ldr	r3, [pc, #76]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4910      	ldr	r1, [pc, #64]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a48:	f000 f824 	bl	8005a94 <HAL_RCC_GetSysClockFreq>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a84 <HAL_RCC_ClockConfig+0x1f0>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	091b      	lsrs	r3, r3, #4
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	490b      	ldr	r1, [pc, #44]	@ (8005a88 <HAL_RCC_ClockConfig+0x1f4>)
 8005a5a:	5ccb      	ldrb	r3, [r1, r3]
 8005a5c:	f003 031f 	and.w	r3, r3, #31
 8005a60:	fa22 f303 	lsr.w	r3, r2, r3
 8005a64:	4a09      	ldr	r2, [pc, #36]	@ (8005a8c <HAL_RCC_ClockConfig+0x1f8>)
 8005a66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a68:	4b09      	ldr	r3, [pc, #36]	@ (8005a90 <HAL_RCC_ClockConfig+0x1fc>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fc faa3 	bl	8001fb8 <HAL_InitTick>
 8005a72:	4603      	mov	r3, r0
 8005a74:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a76:	7afb      	ldrb	r3, [r7, #11]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40022000 	.word	0x40022000
 8005a84:	40021000 	.word	0x40021000
 8005a88:	0800dc34 	.word	0x0800dc34
 8005a8c:	20000000 	.word	0x20000000
 8005a90:	20000004 	.word	0x20000004

08005a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b089      	sub	sp, #36	@ 0x24
 8005a98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61fb      	str	r3, [r7, #28]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8005b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 030c 	and.w	r3, r3, #12
 8005aaa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aac:	4b3b      	ldr	r3, [pc, #236]	@ (8005b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0303 	and.w	r3, r3, #3
 8005ab4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d005      	beq.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	2b0c      	cmp	r3, #12
 8005ac0:	d121      	bne.n	8005b06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d11e      	bne.n	8005b06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ac8:	4b34      	ldr	r3, [pc, #208]	@ (8005b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d107      	bne.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ad4:	4b31      	ldr	r3, [pc, #196]	@ (8005b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ada:	0a1b      	lsrs	r3, r3, #8
 8005adc:	f003 030f 	and.w	r3, r3, #15
 8005ae0:	61fb      	str	r3, [r7, #28]
 8005ae2:	e005      	b.n	8005af0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8005b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	091b      	lsrs	r3, r3, #4
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005af0:	4a2b      	ldr	r2, [pc, #172]	@ (8005ba0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10d      	bne.n	8005b1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b04:	e00a      	b.n	8005b1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d102      	bne.n	8005b12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b0c:	4b25      	ldr	r3, [pc, #148]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b0e:	61bb      	str	r3, [r7, #24]
 8005b10:	e004      	b.n	8005b1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d101      	bne.n	8005b1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b18:	4b23      	ldr	r3, [pc, #140]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b0c      	cmp	r3, #12
 8005b20:	d134      	bne.n	8005b8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b22:	4b1e      	ldr	r3, [pc, #120]	@ (8005b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d003      	beq.n	8005b3a <HAL_RCC_GetSysClockFreq+0xa6>
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d003      	beq.n	8005b40 <HAL_RCC_GetSysClockFreq+0xac>
 8005b38:	e005      	b.n	8005b46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b3c:	617b      	str	r3, [r7, #20]
      break;
 8005b3e:	e005      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b40:	4b19      	ldr	r3, [pc, #100]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b42:	617b      	str	r3, [r7, #20]
      break;
 8005b44:	e002      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	617b      	str	r3, [r7, #20]
      break;
 8005b4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b4c:	4b13      	ldr	r3, [pc, #76]	@ (8005b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	091b      	lsrs	r3, r3, #4
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	3301      	adds	r3, #1
 8005b58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b5a:	4b10      	ldr	r3, [pc, #64]	@ (8005b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	0a1b      	lsrs	r3, r3, #8
 8005b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	fb03 f202 	mul.w	r2, r3, r2
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b72:	4b0a      	ldr	r3, [pc, #40]	@ (8005b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	0e5b      	lsrs	r3, r3, #25
 8005b78:	f003 0303 	and.w	r3, r3, #3
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b8c:	69bb      	ldr	r3, [r7, #24]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3724      	adds	r7, #36	@ 0x24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	0800dc4c 	.word	0x0800dc4c
 8005ba4:	00f42400 	.word	0x00f42400
 8005ba8:	007a1200 	.word	0x007a1200

08005bac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bb0:	4b03      	ldr	r3, [pc, #12]	@ (8005bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	20000000 	.word	0x20000000

08005bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bc8:	f7ff fff0 	bl	8005bac <HAL_RCC_GetHCLKFreq>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	4b06      	ldr	r3, [pc, #24]	@ (8005be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	0a1b      	lsrs	r3, r3, #8
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	4904      	ldr	r1, [pc, #16]	@ (8005bec <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bda:	5ccb      	ldrb	r3, [r1, r3]
 8005bdc:	f003 031f 	and.w	r3, r3, #31
 8005be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	40021000 	.word	0x40021000
 8005bec:	0800dc44 	.word	0x0800dc44

08005bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005bf4:	f7ff ffda 	bl	8005bac <HAL_RCC_GetHCLKFreq>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	4b06      	ldr	r3, [pc, #24]	@ (8005c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	0adb      	lsrs	r3, r3, #11
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	4904      	ldr	r1, [pc, #16]	@ (8005c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c06:	5ccb      	ldrb	r3, [r1, r3]
 8005c08:	f003 031f 	and.w	r3, r3, #31
 8005c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40021000 	.word	0x40021000
 8005c18:	0800dc44 	.word	0x0800dc44

08005c1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	220f      	movs	r2, #15
 8005c2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005c2c:	4b12      	ldr	r3, [pc, #72]	@ (8005c78 <HAL_RCC_GetClockConfig+0x5c>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 0203 	and.w	r2, r3, #3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005c38:	4b0f      	ldr	r3, [pc, #60]	@ (8005c78 <HAL_RCC_GetClockConfig+0x5c>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005c44:	4b0c      	ldr	r3, [pc, #48]	@ (8005c78 <HAL_RCC_GetClockConfig+0x5c>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005c50:	4b09      	ldr	r3, [pc, #36]	@ (8005c78 <HAL_RCC_GetClockConfig+0x5c>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	08db      	lsrs	r3, r3, #3
 8005c56:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005c5e:	4b07      	ldr	r3, [pc, #28]	@ (8005c7c <HAL_RCC_GetClockConfig+0x60>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0207 	and.w	r2, r3, #7
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	601a      	str	r2, [r3, #0]
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	40022000 	.word	0x40022000

08005c80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c88:	2300      	movs	r3, #0
 8005c8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8005d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c98:	f7ff f8f0 	bl	8004e7c <HAL_PWREx_GetVoltageRange>
 8005c9c:	6178      	str	r0, [r7, #20]
 8005c9e:	e014      	b.n	8005cca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ca0:	4b25      	ldr	r3, [pc, #148]	@ (8005d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca4:	4a24      	ldr	r2, [pc, #144]	@ (8005d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005caa:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cac:	4b22      	ldr	r3, [pc, #136]	@ (8005d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005cb8:	f7ff f8e0 	bl	8004e7c <HAL_PWREx_GetVoltageRange>
 8005cbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8005d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8005d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cc8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cd0:	d10b      	bne.n	8005cea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b80      	cmp	r3, #128	@ 0x80
 8005cd6:	d919      	bls.n	8005d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2ba0      	cmp	r3, #160	@ 0xa0
 8005cdc:	d902      	bls.n	8005ce4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005cde:	2302      	movs	r3, #2
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	e013      	b.n	8005d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	e010      	b.n	8005d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b80      	cmp	r3, #128	@ 0x80
 8005cee:	d902      	bls.n	8005cf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	e00a      	b.n	8005d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b80      	cmp	r3, #128	@ 0x80
 8005cfa:	d102      	bne.n	8005d02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	613b      	str	r3, [r7, #16]
 8005d00:	e004      	b.n	8005d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b70      	cmp	r3, #112	@ 0x70
 8005d06:	d101      	bne.n	8005d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d08:	2301      	movs	r3, #1
 8005d0a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f023 0207 	bic.w	r2, r3, #7
 8005d14:	4909      	ldr	r1, [pc, #36]	@ (8005d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005d1c:	4b07      	ldr	r3, [pc, #28]	@ (8005d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d001      	beq.n	8005d2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	40022000 	.word	0x40022000

08005d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d48:	2300      	movs	r3, #0
 8005d4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d041      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d60:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005d64:	d02a      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005d66:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005d6a:	d824      	bhi.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d70:	d008      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005d72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d76:	d81e      	bhi.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00a      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005d7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d80:	d010      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d82:	e018      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d84:	4b86      	ldr	r3, [pc, #536]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	4a85      	ldr	r2, [pc, #532]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d90:	e015      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3304      	adds	r3, #4
 8005d96:	2100      	movs	r1, #0
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 facb 	bl	8006334 <RCCEx_PLLSAI1_Config>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005da2:	e00c      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3320      	adds	r3, #32
 8005da8:	2100      	movs	r1, #0
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fbb6 	bl	800651c <RCCEx_PLLSAI2_Config>
 8005db0:	4603      	mov	r3, r0
 8005db2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005db4:	e003      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	74fb      	strb	r3, [r7, #19]
      break;
 8005dba:	e000      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dbe:	7cfb      	ldrb	r3, [r7, #19]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10b      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dc4:	4b76      	ldr	r3, [pc, #472]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dd2:	4973      	ldr	r1, [pc, #460]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005dda:	e001      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ddc:	7cfb      	ldrb	r3, [r7, #19]
 8005dde:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d041      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005df0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005df4:	d02a      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005df6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005dfa:	d824      	bhi.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005dfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e00:	d008      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e06:	d81e      	bhi.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e10:	d010      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e12:	e018      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e14:	4b62      	ldr	r3, [pc, #392]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4a61      	ldr	r2, [pc, #388]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e20:	e015      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3304      	adds	r3, #4
 8005e26:	2100      	movs	r1, #0
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 fa83 	bl	8006334 <RCCEx_PLLSAI1_Config>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e32:	e00c      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3320      	adds	r3, #32
 8005e38:	2100      	movs	r1, #0
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fb6e 	bl	800651c <RCCEx_PLLSAI2_Config>
 8005e40:	4603      	mov	r3, r0
 8005e42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e44:	e003      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	74fb      	strb	r3, [r7, #19]
      break;
 8005e4a:	e000      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e4e:	7cfb      	ldrb	r3, [r7, #19]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10b      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e54:	4b52      	ldr	r3, [pc, #328]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e62:	494f      	ldr	r1, [pc, #316]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005e6a:	e001      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6c:	7cfb      	ldrb	r3, [r7, #19]
 8005e6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 80a0 	beq.w	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e82:	4b47      	ldr	r3, [pc, #284]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e000      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005e92:	2300      	movs	r3, #0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00d      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e98:	4b41      	ldr	r3, [pc, #260]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9c:	4a40      	ldr	r2, [pc, #256]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ea2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ea4:	4b3e      	ldr	r3, [pc, #248]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eac:	60bb      	str	r3, [r7, #8]
 8005eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a3a      	ldr	r2, [pc, #232]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ebe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ec0:	f7fc fb1e 	bl	8002500 <HAL_GetTick>
 8005ec4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ec6:	e009      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec8:	f7fc fb1a 	bl	8002500 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d902      	bls.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	74fb      	strb	r3, [r7, #19]
        break;
 8005eda:	e005      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005edc:	4b31      	ldr	r3, [pc, #196]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0ef      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005ee8:	7cfb      	ldrb	r3, [r7, #19]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d15c      	bne.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005eee:	4b2c      	ldr	r3, [pc, #176]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ef8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01f      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d019      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f0c:	4b24      	ldr	r3, [pc, #144]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f18:	4b21      	ldr	r3, [pc, #132]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f1e:	4a20      	ldr	r2, [pc, #128]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f28:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f38:	4a19      	ldr	r2, [pc, #100]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d016      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4a:	f7fc fad9 	bl	8002500 <HAL_GetTick>
 8005f4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f50:	e00b      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f52:	f7fc fad5 	bl	8002500 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d902      	bls.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	74fb      	strb	r3, [r7, #19]
            break;
 8005f68:	e006      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0ec      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005f78:	7cfb      	ldrb	r3, [r7, #19]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10c      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f7e:	4b08      	ldr	r3, [pc, #32]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f8e:	4904      	ldr	r1, [pc, #16]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005f96:	e009      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f98:	7cfb      	ldrb	r3, [r7, #19]
 8005f9a:	74bb      	strb	r3, [r7, #18]
 8005f9c:	e006      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005f9e:	bf00      	nop
 8005fa0:	40021000 	.word	0x40021000
 8005fa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa8:	7cfb      	ldrb	r3, [r7, #19]
 8005faa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fac:	7c7b      	ldrb	r3, [r7, #17]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d105      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb2:	4b9e      	ldr	r3, [pc, #632]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fb6:	4a9d      	ldr	r2, [pc, #628]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fbc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fca:	4b98      	ldr	r3, [pc, #608]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd0:	f023 0203 	bic.w	r2, r3, #3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd8:	4994      	ldr	r1, [pc, #592]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00a      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fec:	4b8f      	ldr	r3, [pc, #572]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff2:	f023 020c 	bic.w	r2, r3, #12
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ffa:	498c      	ldr	r1, [pc, #560]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0304 	and.w	r3, r3, #4
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800600e:	4b87      	ldr	r3, [pc, #540]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006014:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601c:	4983      	ldr	r1, [pc, #524]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800601e:	4313      	orrs	r3, r2
 8006020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00a      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006030:	4b7e      	ldr	r3, [pc, #504]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006036:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603e:	497b      	ldr	r1, [pc, #492]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006040:	4313      	orrs	r3, r2
 8006042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00a      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006052:	4b76      	ldr	r3, [pc, #472]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006058:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006060:	4972      	ldr	r1, [pc, #456]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00a      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006074:	4b6d      	ldr	r3, [pc, #436]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006082:	496a      	ldr	r1, [pc, #424]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006084:	4313      	orrs	r3, r2
 8006086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006096:	4b65      	ldr	r3, [pc, #404]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800609c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a4:	4961      	ldr	r1, [pc, #388]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060b8:	4b5c      	ldr	r3, [pc, #368]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c6:	4959      	ldr	r1, [pc, #356]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060da:	4b54      	ldr	r3, [pc, #336]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e8:	4950      	ldr	r1, [pc, #320]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00a      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060fc:	4b4b      	ldr	r3, [pc, #300]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006102:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800610a:	4948      	ldr	r1, [pc, #288]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800610c:	4313      	orrs	r3, r2
 800610e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800611e:	4b43      	ldr	r3, [pc, #268]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006124:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800612c:	493f      	ldr	r1, [pc, #252]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800612e:	4313      	orrs	r3, r2
 8006130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d028      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006140:	4b3a      	ldr	r3, [pc, #232]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006146:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800614e:	4937      	ldr	r1, [pc, #220]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006150:	4313      	orrs	r3, r2
 8006152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800615a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800615e:	d106      	bne.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006160:	4b32      	ldr	r3, [pc, #200]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	4a31      	ldr	r2, [pc, #196]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006166:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800616a:	60d3      	str	r3, [r2, #12]
 800616c:	e011      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006172:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006176:	d10c      	bne.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3304      	adds	r3, #4
 800617c:	2101      	movs	r1, #1
 800617e:	4618      	mov	r0, r3
 8006180:	f000 f8d8 	bl	8006334 <RCCEx_PLLSAI1_Config>
 8006184:	4603      	mov	r3, r0
 8006186:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006188:	7cfb      	ldrb	r3, [r7, #19]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800618e:	7cfb      	ldrb	r3, [r7, #19]
 8006190:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d028      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800619e:	4b23      	ldr	r3, [pc, #140]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ac:	491f      	ldr	r1, [pc, #124]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061bc:	d106      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061be:	4b1b      	ldr	r3, [pc, #108]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	4a1a      	ldr	r2, [pc, #104]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061c8:	60d3      	str	r3, [r2, #12]
 80061ca:	e011      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061d4:	d10c      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	3304      	adds	r3, #4
 80061da:	2101      	movs	r1, #1
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 f8a9 	bl	8006334 <RCCEx_PLLSAI1_Config>
 80061e2:	4603      	mov	r3, r0
 80061e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061e6:	7cfb      	ldrb	r3, [r7, #19]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80061ec:	7cfb      	ldrb	r3, [r7, #19]
 80061ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d02b      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061fc:	4b0b      	ldr	r3, [pc, #44]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006202:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800620a:	4908      	ldr	r1, [pc, #32]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800620c:	4313      	orrs	r3, r2
 800620e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006216:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800621a:	d109      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800621c:	4b03      	ldr	r3, [pc, #12]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	4a02      	ldr	r2, [pc, #8]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006222:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006226:	60d3      	str	r3, [r2, #12]
 8006228:	e014      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800622a:	bf00      	nop
 800622c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006234:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006238:	d10c      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	3304      	adds	r3, #4
 800623e:	2101      	movs	r1, #1
 8006240:	4618      	mov	r0, r3
 8006242:	f000 f877 	bl	8006334 <RCCEx_PLLSAI1_Config>
 8006246:	4603      	mov	r3, r0
 8006248:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800624a:	7cfb      	ldrb	r3, [r7, #19]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006250:	7cfb      	ldrb	r3, [r7, #19]
 8006252:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d02f      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006260:	4b2b      	ldr	r3, [pc, #172]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006266:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800626e:	4928      	ldr	r1, [pc, #160]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006270:	4313      	orrs	r3, r2
 8006272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800627a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800627e:	d10d      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3304      	adds	r3, #4
 8006284:	2102      	movs	r1, #2
 8006286:	4618      	mov	r0, r3
 8006288:	f000 f854 	bl	8006334 <RCCEx_PLLSAI1_Config>
 800628c:	4603      	mov	r3, r0
 800628e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006290:	7cfb      	ldrb	r3, [r7, #19]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d014      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006296:	7cfb      	ldrb	r3, [r7, #19]
 8006298:	74bb      	strb	r3, [r7, #18]
 800629a:	e011      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062a4:	d10c      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3320      	adds	r3, #32
 80062aa:	2102      	movs	r1, #2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 f935 	bl	800651c <RCCEx_PLLSAI2_Config>
 80062b2:	4603      	mov	r3, r0
 80062b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062b6:	7cfb      	ldrb	r3, [r7, #19]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80062bc:	7cfb      	ldrb	r3, [r7, #19]
 80062be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062cc:	4b10      	ldr	r3, [pc, #64]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062da:	490d      	ldr	r1, [pc, #52]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00b      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062ee:	4b08      	ldr	r3, [pc, #32]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062fe:	4904      	ldr	r1, [pc, #16]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006306:	7cbb      	ldrb	r3, [r7, #18]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40021000 	.word	0x40021000

08006314 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006314:	b480      	push	{r7}
 8006316:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006318:	4b05      	ldr	r3, [pc, #20]	@ (8006330 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a04      	ldr	r2, [pc, #16]	@ (8006330 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800631e:	f043 0304 	orr.w	r3, r3, #4
 8006322:	6013      	str	r3, [r2, #0]
}
 8006324:	bf00      	nop
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40021000 	.word	0x40021000

08006334 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006342:	4b75      	ldr	r3, [pc, #468]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d018      	beq.n	8006380 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800634e:	4b72      	ldr	r3, [pc, #456]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f003 0203 	and.w	r2, r3, #3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d10d      	bne.n	800637a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
       ||
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006366:	4b6c      	ldr	r3, [pc, #432]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	091b      	lsrs	r3, r3, #4
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
       ||
 8006376:	429a      	cmp	r2, r3
 8006378:	d047      	beq.n	800640a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	73fb      	strb	r3, [r7, #15]
 800637e:	e044      	b.n	800640a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b03      	cmp	r3, #3
 8006386:	d018      	beq.n	80063ba <RCCEx_PLLSAI1_Config+0x86>
 8006388:	2b03      	cmp	r3, #3
 800638a:	d825      	bhi.n	80063d8 <RCCEx_PLLSAI1_Config+0xa4>
 800638c:	2b01      	cmp	r3, #1
 800638e:	d002      	beq.n	8006396 <RCCEx_PLLSAI1_Config+0x62>
 8006390:	2b02      	cmp	r3, #2
 8006392:	d009      	beq.n	80063a8 <RCCEx_PLLSAI1_Config+0x74>
 8006394:	e020      	b.n	80063d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006396:	4b60      	ldr	r3, [pc, #384]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d11d      	bne.n	80063de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063a6:	e01a      	b.n	80063de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063a8:	4b5b      	ldr	r3, [pc, #364]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d116      	bne.n	80063e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063b8:	e013      	b.n	80063e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80063ba:	4b57      	ldr	r3, [pc, #348]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10f      	bne.n	80063e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80063c6:	4b54      	ldr	r3, [pc, #336]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063d6:	e006      	b.n	80063e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	73fb      	strb	r3, [r7, #15]
      break;
 80063dc:	e004      	b.n	80063e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063de:	bf00      	nop
 80063e0:	e002      	b.n	80063e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063e2:	bf00      	nop
 80063e4:	e000      	b.n	80063e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10d      	bne.n	800640a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80063ee:	4b4a      	ldr	r3, [pc, #296]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6819      	ldr	r1, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	3b01      	subs	r3, #1
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	430b      	orrs	r3, r1
 8006404:	4944      	ldr	r1, [pc, #272]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006406:	4313      	orrs	r3, r2
 8006408:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d17d      	bne.n	800650c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006410:	4b41      	ldr	r3, [pc, #260]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a40      	ldr	r2, [pc, #256]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006416:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800641a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800641c:	f7fc f870 	bl	8002500 <HAL_GetTick>
 8006420:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006422:	e009      	b.n	8006438 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006424:	f7fc f86c 	bl	8002500 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d902      	bls.n	8006438 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	73fb      	strb	r3, [r7, #15]
        break;
 8006436:	e005      	b.n	8006444 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006438:	4b37      	ldr	r3, [pc, #220]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1ef      	bne.n	8006424 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d160      	bne.n	800650c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d111      	bne.n	8006474 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006450:	4b31      	ldr	r3, [pc, #196]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006458:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6892      	ldr	r2, [r2, #8]
 8006460:	0211      	lsls	r1, r2, #8
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	68d2      	ldr	r2, [r2, #12]
 8006466:	0912      	lsrs	r2, r2, #4
 8006468:	0452      	lsls	r2, r2, #17
 800646a:	430a      	orrs	r2, r1
 800646c:	492a      	ldr	r1, [pc, #168]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800646e:	4313      	orrs	r3, r2
 8006470:	610b      	str	r3, [r1, #16]
 8006472:	e027      	b.n	80064c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d112      	bne.n	80064a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800647a:	4b27      	ldr	r3, [pc, #156]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006482:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	6892      	ldr	r2, [r2, #8]
 800648a:	0211      	lsls	r1, r2, #8
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6912      	ldr	r2, [r2, #16]
 8006490:	0852      	lsrs	r2, r2, #1
 8006492:	3a01      	subs	r2, #1
 8006494:	0552      	lsls	r2, r2, #21
 8006496:	430a      	orrs	r2, r1
 8006498:	491f      	ldr	r1, [pc, #124]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800649a:	4313      	orrs	r3, r2
 800649c:	610b      	str	r3, [r1, #16]
 800649e:	e011      	b.n	80064c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80064a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6892      	ldr	r2, [r2, #8]
 80064b0:	0211      	lsls	r1, r2, #8
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6952      	ldr	r2, [r2, #20]
 80064b6:	0852      	lsrs	r2, r2, #1
 80064b8:	3a01      	subs	r2, #1
 80064ba:	0652      	lsls	r2, r2, #25
 80064bc:	430a      	orrs	r2, r1
 80064be:	4916      	ldr	r1, [pc, #88]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80064c4:	4b14      	ldr	r3, [pc, #80]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a13      	ldr	r2, [pc, #76]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80064ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d0:	f7fc f816 	bl	8002500 <HAL_GetTick>
 80064d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064d6:	e009      	b.n	80064ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064d8:	f7fc f812 	bl	8002500 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d902      	bls.n	80064ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	73fb      	strb	r3, [r7, #15]
          break;
 80064ea:	e005      	b.n	80064f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0ef      	beq.n	80064d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d106      	bne.n	800650c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80064fe:	4b06      	ldr	r3, [pc, #24]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006500:	691a      	ldr	r2, [r3, #16]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	4904      	ldr	r1, [pc, #16]	@ (8006518 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006508:	4313      	orrs	r3, r2
 800650a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800650c:	7bfb      	ldrb	r3, [r7, #15]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	40021000 	.word	0x40021000

0800651c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800652a:	4b6a      	ldr	r3, [pc, #424]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f003 0303 	and.w	r3, r3, #3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d018      	beq.n	8006568 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006536:	4b67      	ldr	r3, [pc, #412]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f003 0203 	and.w	r2, r3, #3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	429a      	cmp	r2, r3
 8006544:	d10d      	bne.n	8006562 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
       ||
 800654a:	2b00      	cmp	r3, #0
 800654c:	d009      	beq.n	8006562 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800654e:	4b61      	ldr	r3, [pc, #388]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	091b      	lsrs	r3, r3, #4
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
       ||
 800655e:	429a      	cmp	r2, r3
 8006560:	d047      	beq.n	80065f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	73fb      	strb	r3, [r7, #15]
 8006566:	e044      	b.n	80065f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b03      	cmp	r3, #3
 800656e:	d018      	beq.n	80065a2 <RCCEx_PLLSAI2_Config+0x86>
 8006570:	2b03      	cmp	r3, #3
 8006572:	d825      	bhi.n	80065c0 <RCCEx_PLLSAI2_Config+0xa4>
 8006574:	2b01      	cmp	r3, #1
 8006576:	d002      	beq.n	800657e <RCCEx_PLLSAI2_Config+0x62>
 8006578:	2b02      	cmp	r3, #2
 800657a:	d009      	beq.n	8006590 <RCCEx_PLLSAI2_Config+0x74>
 800657c:	e020      	b.n	80065c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800657e:	4b55      	ldr	r3, [pc, #340]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d11d      	bne.n	80065c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800658e:	e01a      	b.n	80065c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006590:	4b50      	ldr	r3, [pc, #320]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006598:	2b00      	cmp	r3, #0
 800659a:	d116      	bne.n	80065ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065a0:	e013      	b.n	80065ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065a2:	4b4c      	ldr	r3, [pc, #304]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10f      	bne.n	80065ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065ae:	4b49      	ldr	r3, [pc, #292]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d109      	bne.n	80065ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065be:	e006      	b.n	80065ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	73fb      	strb	r3, [r7, #15]
      break;
 80065c4:	e004      	b.n	80065d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065c6:	bf00      	nop
 80065c8:	e002      	b.n	80065d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065ca:	bf00      	nop
 80065cc:	e000      	b.n	80065d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10d      	bne.n	80065f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80065d6:	4b3f      	ldr	r3, [pc, #252]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6819      	ldr	r1, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	011b      	lsls	r3, r3, #4
 80065ea:	430b      	orrs	r3, r1
 80065ec:	4939      	ldr	r1, [pc, #228]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d167      	bne.n	80066c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80065f8:	4b36      	ldr	r3, [pc, #216]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a35      	ldr	r2, [pc, #212]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006604:	f7fb ff7c 	bl	8002500 <HAL_GetTick>
 8006608:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800660a:	e009      	b.n	8006620 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800660c:	f7fb ff78 	bl	8002500 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b02      	cmp	r3, #2
 8006618:	d902      	bls.n	8006620 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	73fb      	strb	r3, [r7, #15]
        break;
 800661e:	e005      	b.n	800662c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006620:	4b2c      	ldr	r3, [pc, #176]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1ef      	bne.n	800660c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800662c:	7bfb      	ldrb	r3, [r7, #15]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d14a      	bne.n	80066c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d111      	bne.n	800665c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006638:	4b26      	ldr	r3, [pc, #152]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6892      	ldr	r2, [r2, #8]
 8006648:	0211      	lsls	r1, r2, #8
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	68d2      	ldr	r2, [r2, #12]
 800664e:	0912      	lsrs	r2, r2, #4
 8006650:	0452      	lsls	r2, r2, #17
 8006652:	430a      	orrs	r2, r1
 8006654:	491f      	ldr	r1, [pc, #124]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006656:	4313      	orrs	r3, r2
 8006658:	614b      	str	r3, [r1, #20]
 800665a:	e011      	b.n	8006680 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800665c:	4b1d      	ldr	r3, [pc, #116]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006664:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	6892      	ldr	r2, [r2, #8]
 800666c:	0211      	lsls	r1, r2, #8
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6912      	ldr	r2, [r2, #16]
 8006672:	0852      	lsrs	r2, r2, #1
 8006674:	3a01      	subs	r2, #1
 8006676:	0652      	lsls	r2, r2, #25
 8006678:	430a      	orrs	r2, r1
 800667a:	4916      	ldr	r1, [pc, #88]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800667c:	4313      	orrs	r3, r2
 800667e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006680:	4b14      	ldr	r3, [pc, #80]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a13      	ldr	r2, [pc, #76]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800668a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668c:	f7fb ff38 	bl	8002500 <HAL_GetTick>
 8006690:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006692:	e009      	b.n	80066a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006694:	f7fb ff34 	bl	8002500 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d902      	bls.n	80066a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	73fb      	strb	r3, [r7, #15]
          break;
 80066a6:	e005      	b.n	80066b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80066a8:	4b0a      	ldr	r3, [pc, #40]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0ef      	beq.n	8006694 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d106      	bne.n	80066c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80066ba:	4b06      	ldr	r3, [pc, #24]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066bc:	695a      	ldr	r2, [r3, #20]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	4904      	ldr	r1, [pc, #16]	@ (80066d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	40021000 	.word	0x40021000

080066d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e095      	b.n	8006816 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d108      	bne.n	8006704 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066fa:	d009      	beq.n	8006710 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	61da      	str	r2, [r3, #28]
 8006702:	e005      	b.n	8006710 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fb fab0 	bl	8001c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006746:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006750:	d902      	bls.n	8006758 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	e002      	b.n	800675e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800675c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006766:	d007      	beq.n	8006778 <HAL_SPI_Init+0xa0>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006770:	d002      	beq.n	8006778 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006788:	431a      	orrs	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ba:	ea42 0103 	orr.w	r1, r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	0c1b      	lsrs	r3, r3, #16
 80067d4:	f003 0204 	and.w	r2, r3, #4
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067dc:	f003 0310 	and.w	r3, r3, #16
 80067e0:	431a      	orrs	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	431a      	orrs	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80067f4:	ea42 0103 	orr.w	r1, r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e049      	b.n	80068c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d106      	bne.n	800684a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7fb fa67 	bl	8001d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2202      	movs	r2, #2
 800684e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	3304      	adds	r3, #4
 800685a:	4619      	mov	r1, r3
 800685c:	4610      	mov	r0, r2
 800685e:	f000 fb05 	bl	8006e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d001      	beq.n	80068e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e047      	b.n	8006974 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a23      	ldr	r2, [pc, #140]	@ (8006980 <HAL_TIM_Base_Start+0xb4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d01d      	beq.n	8006932 <HAL_TIM_Base_Start+0x66>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068fe:	d018      	beq.n	8006932 <HAL_TIM_Base_Start+0x66>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a1f      	ldr	r2, [pc, #124]	@ (8006984 <HAL_TIM_Base_Start+0xb8>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d013      	beq.n	8006932 <HAL_TIM_Base_Start+0x66>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1e      	ldr	r2, [pc, #120]	@ (8006988 <HAL_TIM_Base_Start+0xbc>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00e      	beq.n	8006932 <HAL_TIM_Base_Start+0x66>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a1c      	ldr	r2, [pc, #112]	@ (800698c <HAL_TIM_Base_Start+0xc0>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d009      	beq.n	8006932 <HAL_TIM_Base_Start+0x66>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a1b      	ldr	r2, [pc, #108]	@ (8006990 <HAL_TIM_Base_Start+0xc4>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d004      	beq.n	8006932 <HAL_TIM_Base_Start+0x66>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a19      	ldr	r2, [pc, #100]	@ (8006994 <HAL_TIM_Base_Start+0xc8>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d115      	bne.n	800695e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689a      	ldr	r2, [r3, #8]
 8006938:	4b17      	ldr	r3, [pc, #92]	@ (8006998 <HAL_TIM_Base_Start+0xcc>)
 800693a:	4013      	ands	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b06      	cmp	r3, #6
 8006942:	d015      	beq.n	8006970 <HAL_TIM_Base_Start+0xa4>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800694a:	d011      	beq.n	8006970 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0201 	orr.w	r2, r2, #1
 800695a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800695c:	e008      	b.n	8006970 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0201 	orr.w	r2, r2, #1
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	e000      	b.n	8006972 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006970:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	40012c00 	.word	0x40012c00
 8006984:	40000400 	.word	0x40000400
 8006988:	40000800 	.word	0x40000800
 800698c:	40000c00 	.word	0x40000c00
 8006990:	40013400 	.word	0x40013400
 8006994:	40014000 	.word	0x40014000
 8006998:	00010007 	.word	0x00010007

0800699c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d001      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e04f      	b.n	8006a54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0201 	orr.w	r2, r2, #1
 80069ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a23      	ldr	r2, [pc, #140]	@ (8006a60 <HAL_TIM_Base_Start_IT+0xc4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d01d      	beq.n	8006a12 <HAL_TIM_Base_Start_IT+0x76>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069de:	d018      	beq.n	8006a12 <HAL_TIM_Base_Start_IT+0x76>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006a64 <HAL_TIM_Base_Start_IT+0xc8>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d013      	beq.n	8006a12 <HAL_TIM_Base_Start_IT+0x76>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006a68 <HAL_TIM_Base_Start_IT+0xcc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00e      	beq.n	8006a12 <HAL_TIM_Base_Start_IT+0x76>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a6c <HAL_TIM_Base_Start_IT+0xd0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d009      	beq.n	8006a12 <HAL_TIM_Base_Start_IT+0x76>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a1b      	ldr	r2, [pc, #108]	@ (8006a70 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d004      	beq.n	8006a12 <HAL_TIM_Base_Start_IT+0x76>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a19      	ldr	r2, [pc, #100]	@ (8006a74 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d115      	bne.n	8006a3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	4b17      	ldr	r3, [pc, #92]	@ (8006a78 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b06      	cmp	r3, #6
 8006a22:	d015      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0xb4>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a2a:	d011      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0201 	orr.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a3c:	e008      	b.n	8006a50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0201 	orr.w	r2, r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	e000      	b.n	8006a52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	40012c00 	.word	0x40012c00
 8006a64:	40000400 	.word	0x40000400
 8006a68:	40000800 	.word	0x40000800
 8006a6c:	40000c00 	.word	0x40000c00
 8006a70:	40013400 	.word	0x40013400
 8006a74:	40014000 	.word	0x40014000
 8006a78:	00010007 	.word	0x00010007

08006a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d020      	beq.n	8006ae0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01b      	beq.n	8006ae0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f06f 0202 	mvn.w	r2, #2
 8006ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f9b2 	bl	8006e30 <HAL_TIM_IC_CaptureCallback>
 8006acc:	e005      	b.n	8006ada <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f9a4 	bl	8006e1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f9b5 	bl	8006e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 0304 	and.w	r3, r3, #4
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d020      	beq.n	8006b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d01b      	beq.n	8006b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0204 	mvn.w	r2, #4
 8006afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2202      	movs	r2, #2
 8006b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f98c 	bl	8006e30 <HAL_TIM_IC_CaptureCallback>
 8006b18:	e005      	b.n	8006b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f97e 	bl	8006e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f98f 	bl	8006e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f003 0308 	and.w	r3, r3, #8
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d020      	beq.n	8006b78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f003 0308 	and.w	r3, r3, #8
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01b      	beq.n	8006b78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f06f 0208 	mvn.w	r2, #8
 8006b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2204      	movs	r2, #4
 8006b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f966 	bl	8006e30 <HAL_TIM_IC_CaptureCallback>
 8006b64:	e005      	b.n	8006b72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f958 	bl	8006e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f969 	bl	8006e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f003 0310 	and.w	r3, r3, #16
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d020      	beq.n	8006bc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f003 0310 	and.w	r3, r3, #16
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01b      	beq.n	8006bc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0210 	mvn.w	r2, #16
 8006b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2208      	movs	r2, #8
 8006b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f940 	bl	8006e30 <HAL_TIM_IC_CaptureCallback>
 8006bb0:	e005      	b.n	8006bbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f932 	bl	8006e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f943 	bl	8006e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00c      	beq.n	8006be8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d007      	beq.n	8006be8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0201 	mvn.w	r2, #1
 8006be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7fa fe64 	bl	80018b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d104      	bne.n	8006bfc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00c      	beq.n	8006c16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d007      	beq.n	8006c16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fafd 	bl	8007210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00c      	beq.n	8006c3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d007      	beq.n	8006c3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 faf5 	bl	8007224 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00c      	beq.n	8006c5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d007      	beq.n	8006c5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f8fd 	bl	8006e58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	f003 0320 	and.w	r3, r3, #32
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00c      	beq.n	8006c82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f003 0320 	and.w	r3, r3, #32
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d007      	beq.n	8006c82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f06f 0220 	mvn.w	r2, #32
 8006c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fabd 	bl	80071fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c82:	bf00      	nop
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d101      	bne.n	8006ca6 <HAL_TIM_ConfigClockSource+0x1c>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	e0b6      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x18a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cc4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006cc8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cd0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ce2:	d03e      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0xd8>
 8006ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ce8:	f200 8087 	bhi.w	8006dfa <HAL_TIM_ConfigClockSource+0x170>
 8006cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cf0:	f000 8086 	beq.w	8006e00 <HAL_TIM_ConfigClockSource+0x176>
 8006cf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cf8:	d87f      	bhi.n	8006dfa <HAL_TIM_ConfigClockSource+0x170>
 8006cfa:	2b70      	cmp	r3, #112	@ 0x70
 8006cfc:	d01a      	beq.n	8006d34 <HAL_TIM_ConfigClockSource+0xaa>
 8006cfe:	2b70      	cmp	r3, #112	@ 0x70
 8006d00:	d87b      	bhi.n	8006dfa <HAL_TIM_ConfigClockSource+0x170>
 8006d02:	2b60      	cmp	r3, #96	@ 0x60
 8006d04:	d050      	beq.n	8006da8 <HAL_TIM_ConfigClockSource+0x11e>
 8006d06:	2b60      	cmp	r3, #96	@ 0x60
 8006d08:	d877      	bhi.n	8006dfa <HAL_TIM_ConfigClockSource+0x170>
 8006d0a:	2b50      	cmp	r3, #80	@ 0x50
 8006d0c:	d03c      	beq.n	8006d88 <HAL_TIM_ConfigClockSource+0xfe>
 8006d0e:	2b50      	cmp	r3, #80	@ 0x50
 8006d10:	d873      	bhi.n	8006dfa <HAL_TIM_ConfigClockSource+0x170>
 8006d12:	2b40      	cmp	r3, #64	@ 0x40
 8006d14:	d058      	beq.n	8006dc8 <HAL_TIM_ConfigClockSource+0x13e>
 8006d16:	2b40      	cmp	r3, #64	@ 0x40
 8006d18:	d86f      	bhi.n	8006dfa <HAL_TIM_ConfigClockSource+0x170>
 8006d1a:	2b30      	cmp	r3, #48	@ 0x30
 8006d1c:	d064      	beq.n	8006de8 <HAL_TIM_ConfigClockSource+0x15e>
 8006d1e:	2b30      	cmp	r3, #48	@ 0x30
 8006d20:	d86b      	bhi.n	8006dfa <HAL_TIM_ConfigClockSource+0x170>
 8006d22:	2b20      	cmp	r3, #32
 8006d24:	d060      	beq.n	8006de8 <HAL_TIM_ConfigClockSource+0x15e>
 8006d26:	2b20      	cmp	r3, #32
 8006d28:	d867      	bhi.n	8006dfa <HAL_TIM_ConfigClockSource+0x170>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d05c      	beq.n	8006de8 <HAL_TIM_ConfigClockSource+0x15e>
 8006d2e:	2b10      	cmp	r3, #16
 8006d30:	d05a      	beq.n	8006de8 <HAL_TIM_ConfigClockSource+0x15e>
 8006d32:	e062      	b.n	8006dfa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d44:	f000 f9b2 	bl	80070ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d56:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	609a      	str	r2, [r3, #8]
      break;
 8006d60:	e04f      	b.n	8006e02 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d72:	f000 f99b 	bl	80070ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d84:	609a      	str	r2, [r3, #8]
      break;
 8006d86:	e03c      	b.n	8006e02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d94:	461a      	mov	r2, r3
 8006d96:	f000 f90f 	bl	8006fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2150      	movs	r1, #80	@ 0x50
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 f968 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006da6:	e02c      	b.n	8006e02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006db4:	461a      	mov	r2, r3
 8006db6:	f000 f92e 	bl	8007016 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2160      	movs	r1, #96	@ 0x60
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 f958 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006dc6:	e01c      	b.n	8006e02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	f000 f8ef 	bl	8006fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2140      	movs	r1, #64	@ 0x40
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 f948 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006de6:	e00c      	b.n	8006e02 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4619      	mov	r1, r3
 8006df2:	4610      	mov	r0, r2
 8006df4:	f000 f93f 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006df8:	e003      	b.n	8006e02 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8006dfe:	e000      	b.n	8006e02 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006e00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a46      	ldr	r2, [pc, #280]	@ (8006f98 <TIM_Base_SetConfig+0x12c>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d013      	beq.n	8006eac <TIM_Base_SetConfig+0x40>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e8a:	d00f      	beq.n	8006eac <TIM_Base_SetConfig+0x40>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a43      	ldr	r2, [pc, #268]	@ (8006f9c <TIM_Base_SetConfig+0x130>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d00b      	beq.n	8006eac <TIM_Base_SetConfig+0x40>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a42      	ldr	r2, [pc, #264]	@ (8006fa0 <TIM_Base_SetConfig+0x134>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d007      	beq.n	8006eac <TIM_Base_SetConfig+0x40>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a41      	ldr	r2, [pc, #260]	@ (8006fa4 <TIM_Base_SetConfig+0x138>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d003      	beq.n	8006eac <TIM_Base_SetConfig+0x40>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a40      	ldr	r2, [pc, #256]	@ (8006fa8 <TIM_Base_SetConfig+0x13c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d108      	bne.n	8006ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a35      	ldr	r2, [pc, #212]	@ (8006f98 <TIM_Base_SetConfig+0x12c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d01f      	beq.n	8006f06 <TIM_Base_SetConfig+0x9a>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ecc:	d01b      	beq.n	8006f06 <TIM_Base_SetConfig+0x9a>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a32      	ldr	r2, [pc, #200]	@ (8006f9c <TIM_Base_SetConfig+0x130>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d017      	beq.n	8006f06 <TIM_Base_SetConfig+0x9a>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a31      	ldr	r2, [pc, #196]	@ (8006fa0 <TIM_Base_SetConfig+0x134>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d013      	beq.n	8006f06 <TIM_Base_SetConfig+0x9a>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a30      	ldr	r2, [pc, #192]	@ (8006fa4 <TIM_Base_SetConfig+0x138>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00f      	beq.n	8006f06 <TIM_Base_SetConfig+0x9a>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8006fa8 <TIM_Base_SetConfig+0x13c>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d00b      	beq.n	8006f06 <TIM_Base_SetConfig+0x9a>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8006fac <TIM_Base_SetConfig+0x140>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d007      	beq.n	8006f06 <TIM_Base_SetConfig+0x9a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8006fb0 <TIM_Base_SetConfig+0x144>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d003      	beq.n	8006f06 <TIM_Base_SetConfig+0x9a>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a2c      	ldr	r2, [pc, #176]	@ (8006fb4 <TIM_Base_SetConfig+0x148>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d108      	bne.n	8006f18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a16      	ldr	r2, [pc, #88]	@ (8006f98 <TIM_Base_SetConfig+0x12c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d00f      	beq.n	8006f64 <TIM_Base_SetConfig+0xf8>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a18      	ldr	r2, [pc, #96]	@ (8006fa8 <TIM_Base_SetConfig+0x13c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00b      	beq.n	8006f64 <TIM_Base_SetConfig+0xf8>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a17      	ldr	r2, [pc, #92]	@ (8006fac <TIM_Base_SetConfig+0x140>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d007      	beq.n	8006f64 <TIM_Base_SetConfig+0xf8>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a16      	ldr	r2, [pc, #88]	@ (8006fb0 <TIM_Base_SetConfig+0x144>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d003      	beq.n	8006f64 <TIM_Base_SetConfig+0xf8>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a15      	ldr	r2, [pc, #84]	@ (8006fb4 <TIM_Base_SetConfig+0x148>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d103      	bne.n	8006f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	691a      	ldr	r2, [r3, #16]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d105      	bne.n	8006f8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	f023 0201 	bic.w	r2, r3, #1
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	611a      	str	r2, [r3, #16]
  }
}
 8006f8a:	bf00      	nop
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	40012c00 	.word	0x40012c00
 8006f9c:	40000400 	.word	0x40000400
 8006fa0:	40000800 	.word	0x40000800
 8006fa4:	40000c00 	.word	0x40000c00
 8006fa8:	40013400 	.word	0x40013400
 8006fac:	40014000 	.word	0x40014000
 8006fb0:	40014400 	.word	0x40014400
 8006fb4:	40014800 	.word	0x40014800

08006fb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	f023 0201 	bic.w	r2, r3, #1
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f023 030a 	bic.w	r3, r3, #10
 8006ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	621a      	str	r2, [r3, #32]
}
 800700a:	bf00      	nop
 800700c:	371c      	adds	r7, #28
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007016:	b480      	push	{r7}
 8007018:	b087      	sub	sp, #28
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	f023 0210 	bic.w	r2, r3, #16
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007040:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	031b      	lsls	r3, r3, #12
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007052:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	011b      	lsls	r3, r3, #4
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	4313      	orrs	r3, r2
 800705c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	621a      	str	r2, [r3, #32]
}
 800706a:	bf00      	nop
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007076:	b480      	push	{r7}
 8007078:	b085      	sub	sp, #20
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800708c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	f043 0307 	orr.w	r3, r3, #7
 8007098:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	609a      	str	r2, [r3, #8]
}
 80070a0:	bf00      	nop
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	021a      	lsls	r2, r3, #8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	431a      	orrs	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	609a      	str	r2, [r3, #8]
}
 80070e0:	bf00      	nop
 80070e2:	371c      	adds	r7, #28
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d101      	bne.n	8007104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007100:	2302      	movs	r3, #2
 8007102:	e068      	b.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a2e      	ldr	r2, [pc, #184]	@ (80071e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d004      	beq.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a2d      	ldr	r2, [pc, #180]	@ (80071e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d108      	bne.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800713e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007150:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	4313      	orrs	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a1e      	ldr	r2, [pc, #120]	@ (80071e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d01d      	beq.n	80071aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007176:	d018      	beq.n	80071aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a1b      	ldr	r2, [pc, #108]	@ (80071ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d013      	beq.n	80071aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a1a      	ldr	r2, [pc, #104]	@ (80071f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00e      	beq.n	80071aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a18      	ldr	r2, [pc, #96]	@ (80071f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d009      	beq.n	80071aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a13      	ldr	r2, [pc, #76]	@ (80071e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d004      	beq.n	80071aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a14      	ldr	r2, [pc, #80]	@ (80071f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d10c      	bne.n	80071c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	40012c00 	.word	0x40012c00
 80071e8:	40013400 	.word	0x40013400
 80071ec:	40000400 	.word	0x40000400
 80071f0:	40000800 	.word	0x40000800
 80071f4:	40000c00 	.word	0x40000c00
 80071f8:	40014000 	.word	0x40014000

080071fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e040      	b.n	80072cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7fa fd9c 	bl	8001d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2224      	movs	r2, #36	@ 0x24
 8007264:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0201 	bic.w	r2, r2, #1
 8007274:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fb6a 	bl	8007958 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f8af 	bl	80073e8 <UART_SetConfig>
 800728a:	4603      	mov	r3, r0
 800728c:	2b01      	cmp	r3, #1
 800728e:	d101      	bne.n	8007294 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e01b      	b.n	80072cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689a      	ldr	r2, [r3, #8]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f042 0201 	orr.w	r2, r2, #1
 80072c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fbe9 	bl	8007a9c <UART_CheckIdleState>
 80072ca:	4603      	mov	r3, r0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08a      	sub	sp, #40	@ 0x28
 80072d8:	af02      	add	r7, sp, #8
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	4613      	mov	r3, r2
 80072e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072e8:	2b20      	cmp	r3, #32
 80072ea:	d177      	bne.n	80073dc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <HAL_UART_Transmit+0x24>
 80072f2:	88fb      	ldrh	r3, [r7, #6]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e070      	b.n	80073de <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2221      	movs	r2, #33	@ 0x21
 8007308:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800730a:	f7fb f8f9 	bl	8002500 <HAL_GetTick>
 800730e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	88fa      	ldrh	r2, [r7, #6]
 8007314:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	88fa      	ldrh	r2, [r7, #6]
 800731c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007328:	d108      	bne.n	800733c <HAL_UART_Transmit+0x68>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d104      	bne.n	800733c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007332:	2300      	movs	r3, #0
 8007334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	61bb      	str	r3, [r7, #24]
 800733a:	e003      	b.n	8007344 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007340:	2300      	movs	r3, #0
 8007342:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007344:	e02f      	b.n	80073a6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2200      	movs	r2, #0
 800734e:	2180      	movs	r1, #128	@ 0x80
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 fc4b 	bl	8007bec <UART_WaitOnFlagUntilTimeout>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d004      	beq.n	8007366 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2220      	movs	r2, #32
 8007360:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e03b      	b.n	80073de <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10b      	bne.n	8007384 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	881a      	ldrh	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007378:	b292      	uxth	r2, r2
 800737a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	3302      	adds	r3, #2
 8007380:	61bb      	str	r3, [r7, #24]
 8007382:	e007      	b.n	8007394 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	781a      	ldrb	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	3301      	adds	r3, #1
 8007392:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800739a:	b29b      	uxth	r3, r3
 800739c:	3b01      	subs	r3, #1
 800739e:	b29a      	uxth	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1c9      	bne.n	8007346 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2200      	movs	r2, #0
 80073ba:	2140      	movs	r1, #64	@ 0x40
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 fc15 	bl	8007bec <UART_WaitOnFlagUntilTimeout>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2220      	movs	r2, #32
 80073cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e005      	b.n	80073de <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2220      	movs	r2, #32
 80073d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	e000      	b.n	80073de <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80073dc:	2302      	movs	r3, #2
  }
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3720      	adds	r7, #32
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
	...

080073e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073ec:	b08a      	sub	sp, #40	@ 0x28
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	431a      	orrs	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	431a      	orrs	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	69db      	ldr	r3, [r3, #28]
 800740c:	4313      	orrs	r3, r2
 800740e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	4ba4      	ldr	r3, [pc, #656]	@ (80076a8 <UART_SetConfig+0x2c0>)
 8007418:	4013      	ands	r3, r2
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	6812      	ldr	r2, [r2, #0]
 800741e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007420:	430b      	orrs	r3, r1
 8007422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a99      	ldr	r2, [pc, #612]	@ (80076ac <UART_SetConfig+0x2c4>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d004      	beq.n	8007454 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007450:	4313      	orrs	r3, r2
 8007452:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007464:	430a      	orrs	r2, r1
 8007466:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a90      	ldr	r2, [pc, #576]	@ (80076b0 <UART_SetConfig+0x2c8>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d126      	bne.n	80074c0 <UART_SetConfig+0xd8>
 8007472:	4b90      	ldr	r3, [pc, #576]	@ (80076b4 <UART_SetConfig+0x2cc>)
 8007474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007478:	f003 0303 	and.w	r3, r3, #3
 800747c:	2b03      	cmp	r3, #3
 800747e:	d81b      	bhi.n	80074b8 <UART_SetConfig+0xd0>
 8007480:	a201      	add	r2, pc, #4	@ (adr r2, 8007488 <UART_SetConfig+0xa0>)
 8007482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007486:	bf00      	nop
 8007488:	08007499 	.word	0x08007499
 800748c:	080074a9 	.word	0x080074a9
 8007490:	080074a1 	.word	0x080074a1
 8007494:	080074b1 	.word	0x080074b1
 8007498:	2301      	movs	r3, #1
 800749a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800749e:	e116      	b.n	80076ce <UART_SetConfig+0x2e6>
 80074a0:	2302      	movs	r3, #2
 80074a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074a6:	e112      	b.n	80076ce <UART_SetConfig+0x2e6>
 80074a8:	2304      	movs	r3, #4
 80074aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ae:	e10e      	b.n	80076ce <UART_SetConfig+0x2e6>
 80074b0:	2308      	movs	r3, #8
 80074b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074b6:	e10a      	b.n	80076ce <UART_SetConfig+0x2e6>
 80074b8:	2310      	movs	r3, #16
 80074ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074be:	e106      	b.n	80076ce <UART_SetConfig+0x2e6>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a7c      	ldr	r2, [pc, #496]	@ (80076b8 <UART_SetConfig+0x2d0>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d138      	bne.n	800753c <UART_SetConfig+0x154>
 80074ca:	4b7a      	ldr	r3, [pc, #488]	@ (80076b4 <UART_SetConfig+0x2cc>)
 80074cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d0:	f003 030c 	and.w	r3, r3, #12
 80074d4:	2b0c      	cmp	r3, #12
 80074d6:	d82d      	bhi.n	8007534 <UART_SetConfig+0x14c>
 80074d8:	a201      	add	r2, pc, #4	@ (adr r2, 80074e0 <UART_SetConfig+0xf8>)
 80074da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074de:	bf00      	nop
 80074e0:	08007515 	.word	0x08007515
 80074e4:	08007535 	.word	0x08007535
 80074e8:	08007535 	.word	0x08007535
 80074ec:	08007535 	.word	0x08007535
 80074f0:	08007525 	.word	0x08007525
 80074f4:	08007535 	.word	0x08007535
 80074f8:	08007535 	.word	0x08007535
 80074fc:	08007535 	.word	0x08007535
 8007500:	0800751d 	.word	0x0800751d
 8007504:	08007535 	.word	0x08007535
 8007508:	08007535 	.word	0x08007535
 800750c:	08007535 	.word	0x08007535
 8007510:	0800752d 	.word	0x0800752d
 8007514:	2300      	movs	r3, #0
 8007516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800751a:	e0d8      	b.n	80076ce <UART_SetConfig+0x2e6>
 800751c:	2302      	movs	r3, #2
 800751e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007522:	e0d4      	b.n	80076ce <UART_SetConfig+0x2e6>
 8007524:	2304      	movs	r3, #4
 8007526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800752a:	e0d0      	b.n	80076ce <UART_SetConfig+0x2e6>
 800752c:	2308      	movs	r3, #8
 800752e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007532:	e0cc      	b.n	80076ce <UART_SetConfig+0x2e6>
 8007534:	2310      	movs	r3, #16
 8007536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800753a:	e0c8      	b.n	80076ce <UART_SetConfig+0x2e6>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a5e      	ldr	r2, [pc, #376]	@ (80076bc <UART_SetConfig+0x2d4>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d125      	bne.n	8007592 <UART_SetConfig+0x1aa>
 8007546:	4b5b      	ldr	r3, [pc, #364]	@ (80076b4 <UART_SetConfig+0x2cc>)
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800754c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007550:	2b30      	cmp	r3, #48	@ 0x30
 8007552:	d016      	beq.n	8007582 <UART_SetConfig+0x19a>
 8007554:	2b30      	cmp	r3, #48	@ 0x30
 8007556:	d818      	bhi.n	800758a <UART_SetConfig+0x1a2>
 8007558:	2b20      	cmp	r3, #32
 800755a:	d00a      	beq.n	8007572 <UART_SetConfig+0x18a>
 800755c:	2b20      	cmp	r3, #32
 800755e:	d814      	bhi.n	800758a <UART_SetConfig+0x1a2>
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <UART_SetConfig+0x182>
 8007564:	2b10      	cmp	r3, #16
 8007566:	d008      	beq.n	800757a <UART_SetConfig+0x192>
 8007568:	e00f      	b.n	800758a <UART_SetConfig+0x1a2>
 800756a:	2300      	movs	r3, #0
 800756c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007570:	e0ad      	b.n	80076ce <UART_SetConfig+0x2e6>
 8007572:	2302      	movs	r3, #2
 8007574:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007578:	e0a9      	b.n	80076ce <UART_SetConfig+0x2e6>
 800757a:	2304      	movs	r3, #4
 800757c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007580:	e0a5      	b.n	80076ce <UART_SetConfig+0x2e6>
 8007582:	2308      	movs	r3, #8
 8007584:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007588:	e0a1      	b.n	80076ce <UART_SetConfig+0x2e6>
 800758a:	2310      	movs	r3, #16
 800758c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007590:	e09d      	b.n	80076ce <UART_SetConfig+0x2e6>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a4a      	ldr	r2, [pc, #296]	@ (80076c0 <UART_SetConfig+0x2d8>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d125      	bne.n	80075e8 <UART_SetConfig+0x200>
 800759c:	4b45      	ldr	r3, [pc, #276]	@ (80076b4 <UART_SetConfig+0x2cc>)
 800759e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80075a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80075a8:	d016      	beq.n	80075d8 <UART_SetConfig+0x1f0>
 80075aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80075ac:	d818      	bhi.n	80075e0 <UART_SetConfig+0x1f8>
 80075ae:	2b80      	cmp	r3, #128	@ 0x80
 80075b0:	d00a      	beq.n	80075c8 <UART_SetConfig+0x1e0>
 80075b2:	2b80      	cmp	r3, #128	@ 0x80
 80075b4:	d814      	bhi.n	80075e0 <UART_SetConfig+0x1f8>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <UART_SetConfig+0x1d8>
 80075ba:	2b40      	cmp	r3, #64	@ 0x40
 80075bc:	d008      	beq.n	80075d0 <UART_SetConfig+0x1e8>
 80075be:	e00f      	b.n	80075e0 <UART_SetConfig+0x1f8>
 80075c0:	2300      	movs	r3, #0
 80075c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075c6:	e082      	b.n	80076ce <UART_SetConfig+0x2e6>
 80075c8:	2302      	movs	r3, #2
 80075ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ce:	e07e      	b.n	80076ce <UART_SetConfig+0x2e6>
 80075d0:	2304      	movs	r3, #4
 80075d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075d6:	e07a      	b.n	80076ce <UART_SetConfig+0x2e6>
 80075d8:	2308      	movs	r3, #8
 80075da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075de:	e076      	b.n	80076ce <UART_SetConfig+0x2e6>
 80075e0:	2310      	movs	r3, #16
 80075e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075e6:	e072      	b.n	80076ce <UART_SetConfig+0x2e6>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a35      	ldr	r2, [pc, #212]	@ (80076c4 <UART_SetConfig+0x2dc>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d12a      	bne.n	8007648 <UART_SetConfig+0x260>
 80075f2:	4b30      	ldr	r3, [pc, #192]	@ (80076b4 <UART_SetConfig+0x2cc>)
 80075f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007600:	d01a      	beq.n	8007638 <UART_SetConfig+0x250>
 8007602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007606:	d81b      	bhi.n	8007640 <UART_SetConfig+0x258>
 8007608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800760c:	d00c      	beq.n	8007628 <UART_SetConfig+0x240>
 800760e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007612:	d815      	bhi.n	8007640 <UART_SetConfig+0x258>
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <UART_SetConfig+0x238>
 8007618:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800761c:	d008      	beq.n	8007630 <UART_SetConfig+0x248>
 800761e:	e00f      	b.n	8007640 <UART_SetConfig+0x258>
 8007620:	2300      	movs	r3, #0
 8007622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007626:	e052      	b.n	80076ce <UART_SetConfig+0x2e6>
 8007628:	2302      	movs	r3, #2
 800762a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800762e:	e04e      	b.n	80076ce <UART_SetConfig+0x2e6>
 8007630:	2304      	movs	r3, #4
 8007632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007636:	e04a      	b.n	80076ce <UART_SetConfig+0x2e6>
 8007638:	2308      	movs	r3, #8
 800763a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800763e:	e046      	b.n	80076ce <UART_SetConfig+0x2e6>
 8007640:	2310      	movs	r3, #16
 8007642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007646:	e042      	b.n	80076ce <UART_SetConfig+0x2e6>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a17      	ldr	r2, [pc, #92]	@ (80076ac <UART_SetConfig+0x2c4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d13a      	bne.n	80076c8 <UART_SetConfig+0x2e0>
 8007652:	4b18      	ldr	r3, [pc, #96]	@ (80076b4 <UART_SetConfig+0x2cc>)
 8007654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007658:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800765c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007660:	d01a      	beq.n	8007698 <UART_SetConfig+0x2b0>
 8007662:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007666:	d81b      	bhi.n	80076a0 <UART_SetConfig+0x2b8>
 8007668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800766c:	d00c      	beq.n	8007688 <UART_SetConfig+0x2a0>
 800766e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007672:	d815      	bhi.n	80076a0 <UART_SetConfig+0x2b8>
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <UART_SetConfig+0x298>
 8007678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800767c:	d008      	beq.n	8007690 <UART_SetConfig+0x2a8>
 800767e:	e00f      	b.n	80076a0 <UART_SetConfig+0x2b8>
 8007680:	2300      	movs	r3, #0
 8007682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007686:	e022      	b.n	80076ce <UART_SetConfig+0x2e6>
 8007688:	2302      	movs	r3, #2
 800768a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800768e:	e01e      	b.n	80076ce <UART_SetConfig+0x2e6>
 8007690:	2304      	movs	r3, #4
 8007692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007696:	e01a      	b.n	80076ce <UART_SetConfig+0x2e6>
 8007698:	2308      	movs	r3, #8
 800769a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800769e:	e016      	b.n	80076ce <UART_SetConfig+0x2e6>
 80076a0:	2310      	movs	r3, #16
 80076a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076a6:	e012      	b.n	80076ce <UART_SetConfig+0x2e6>
 80076a8:	efff69f3 	.word	0xefff69f3
 80076ac:	40008000 	.word	0x40008000
 80076b0:	40013800 	.word	0x40013800
 80076b4:	40021000 	.word	0x40021000
 80076b8:	40004400 	.word	0x40004400
 80076bc:	40004800 	.word	0x40004800
 80076c0:	40004c00 	.word	0x40004c00
 80076c4:	40005000 	.word	0x40005000
 80076c8:	2310      	movs	r3, #16
 80076ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a9f      	ldr	r2, [pc, #636]	@ (8007950 <UART_SetConfig+0x568>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d17a      	bne.n	80077ce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d824      	bhi.n	800772a <UART_SetConfig+0x342>
 80076e0:	a201      	add	r2, pc, #4	@ (adr r2, 80076e8 <UART_SetConfig+0x300>)
 80076e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e6:	bf00      	nop
 80076e8:	0800770d 	.word	0x0800770d
 80076ec:	0800772b 	.word	0x0800772b
 80076f0:	08007715 	.word	0x08007715
 80076f4:	0800772b 	.word	0x0800772b
 80076f8:	0800771b 	.word	0x0800771b
 80076fc:	0800772b 	.word	0x0800772b
 8007700:	0800772b 	.word	0x0800772b
 8007704:	0800772b 	.word	0x0800772b
 8007708:	08007723 	.word	0x08007723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800770c:	f7fe fa5a 	bl	8005bc4 <HAL_RCC_GetPCLK1Freq>
 8007710:	61f8      	str	r0, [r7, #28]
        break;
 8007712:	e010      	b.n	8007736 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007714:	4b8f      	ldr	r3, [pc, #572]	@ (8007954 <UART_SetConfig+0x56c>)
 8007716:	61fb      	str	r3, [r7, #28]
        break;
 8007718:	e00d      	b.n	8007736 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800771a:	f7fe f9bb 	bl	8005a94 <HAL_RCC_GetSysClockFreq>
 800771e:	61f8      	str	r0, [r7, #28]
        break;
 8007720:	e009      	b.n	8007736 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007726:	61fb      	str	r3, [r7, #28]
        break;
 8007728:	e005      	b.n	8007736 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007734:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 80fb 	beq.w	8007934 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	4613      	mov	r3, r2
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	4413      	add	r3, r2
 8007748:	69fa      	ldr	r2, [r7, #28]
 800774a:	429a      	cmp	r2, r3
 800774c:	d305      	bcc.n	800775a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007754:	69fa      	ldr	r2, [r7, #28]
 8007756:	429a      	cmp	r2, r3
 8007758:	d903      	bls.n	8007762 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007760:	e0e8      	b.n	8007934 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	2200      	movs	r2, #0
 8007766:	461c      	mov	r4, r3
 8007768:	4615      	mov	r5, r2
 800776a:	f04f 0200 	mov.w	r2, #0
 800776e:	f04f 0300 	mov.w	r3, #0
 8007772:	022b      	lsls	r3, r5, #8
 8007774:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007778:	0222      	lsls	r2, r4, #8
 800777a:	68f9      	ldr	r1, [r7, #12]
 800777c:	6849      	ldr	r1, [r1, #4]
 800777e:	0849      	lsrs	r1, r1, #1
 8007780:	2000      	movs	r0, #0
 8007782:	4688      	mov	r8, r1
 8007784:	4681      	mov	r9, r0
 8007786:	eb12 0a08 	adds.w	sl, r2, r8
 800778a:	eb43 0b09 	adc.w	fp, r3, r9
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	603b      	str	r3, [r7, #0]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800779c:	4650      	mov	r0, sl
 800779e:	4659      	mov	r1, fp
 80077a0:	f7f9 fa02 	bl	8000ba8 <__aeabi_uldivmod>
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	4613      	mov	r3, r2
 80077aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077b2:	d308      	bcc.n	80077c6 <UART_SetConfig+0x3de>
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077ba:	d204      	bcs.n	80077c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	60da      	str	r2, [r3, #12]
 80077c4:	e0b6      	b.n	8007934 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80077cc:	e0b2      	b.n	8007934 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077d6:	d15e      	bne.n	8007896 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80077d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d828      	bhi.n	8007832 <UART_SetConfig+0x44a>
 80077e0:	a201      	add	r2, pc, #4	@ (adr r2, 80077e8 <UART_SetConfig+0x400>)
 80077e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e6:	bf00      	nop
 80077e8:	0800780d 	.word	0x0800780d
 80077ec:	08007815 	.word	0x08007815
 80077f0:	0800781d 	.word	0x0800781d
 80077f4:	08007833 	.word	0x08007833
 80077f8:	08007823 	.word	0x08007823
 80077fc:	08007833 	.word	0x08007833
 8007800:	08007833 	.word	0x08007833
 8007804:	08007833 	.word	0x08007833
 8007808:	0800782b 	.word	0x0800782b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800780c:	f7fe f9da 	bl	8005bc4 <HAL_RCC_GetPCLK1Freq>
 8007810:	61f8      	str	r0, [r7, #28]
        break;
 8007812:	e014      	b.n	800783e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007814:	f7fe f9ec 	bl	8005bf0 <HAL_RCC_GetPCLK2Freq>
 8007818:	61f8      	str	r0, [r7, #28]
        break;
 800781a:	e010      	b.n	800783e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800781c:	4b4d      	ldr	r3, [pc, #308]	@ (8007954 <UART_SetConfig+0x56c>)
 800781e:	61fb      	str	r3, [r7, #28]
        break;
 8007820:	e00d      	b.n	800783e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007822:	f7fe f937 	bl	8005a94 <HAL_RCC_GetSysClockFreq>
 8007826:	61f8      	str	r0, [r7, #28]
        break;
 8007828:	e009      	b.n	800783e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800782a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800782e:	61fb      	str	r3, [r7, #28]
        break;
 8007830:	e005      	b.n	800783e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800783c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d077      	beq.n	8007934 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	005a      	lsls	r2, r3, #1
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	085b      	lsrs	r3, r3, #1
 800784e:	441a      	add	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	fbb2 f3f3 	udiv	r3, r2, r3
 8007858:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	2b0f      	cmp	r3, #15
 800785e:	d916      	bls.n	800788e <UART_SetConfig+0x4a6>
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007866:	d212      	bcs.n	800788e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f023 030f 	bic.w	r3, r3, #15
 8007870:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	085b      	lsrs	r3, r3, #1
 8007876:	b29b      	uxth	r3, r3
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	b29a      	uxth	r2, r3
 800787e:	8afb      	ldrh	r3, [r7, #22]
 8007880:	4313      	orrs	r3, r2
 8007882:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	8afa      	ldrh	r2, [r7, #22]
 800788a:	60da      	str	r2, [r3, #12]
 800788c:	e052      	b.n	8007934 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007894:	e04e      	b.n	8007934 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007896:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800789a:	2b08      	cmp	r3, #8
 800789c:	d827      	bhi.n	80078ee <UART_SetConfig+0x506>
 800789e:	a201      	add	r2, pc, #4	@ (adr r2, 80078a4 <UART_SetConfig+0x4bc>)
 80078a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a4:	080078c9 	.word	0x080078c9
 80078a8:	080078d1 	.word	0x080078d1
 80078ac:	080078d9 	.word	0x080078d9
 80078b0:	080078ef 	.word	0x080078ef
 80078b4:	080078df 	.word	0x080078df
 80078b8:	080078ef 	.word	0x080078ef
 80078bc:	080078ef 	.word	0x080078ef
 80078c0:	080078ef 	.word	0x080078ef
 80078c4:	080078e7 	.word	0x080078e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078c8:	f7fe f97c 	bl	8005bc4 <HAL_RCC_GetPCLK1Freq>
 80078cc:	61f8      	str	r0, [r7, #28]
        break;
 80078ce:	e014      	b.n	80078fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078d0:	f7fe f98e 	bl	8005bf0 <HAL_RCC_GetPCLK2Freq>
 80078d4:	61f8      	str	r0, [r7, #28]
        break;
 80078d6:	e010      	b.n	80078fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078d8:	4b1e      	ldr	r3, [pc, #120]	@ (8007954 <UART_SetConfig+0x56c>)
 80078da:	61fb      	str	r3, [r7, #28]
        break;
 80078dc:	e00d      	b.n	80078fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078de:	f7fe f8d9 	bl	8005a94 <HAL_RCC_GetSysClockFreq>
 80078e2:	61f8      	str	r0, [r7, #28]
        break;
 80078e4:	e009      	b.n	80078fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078ea:	61fb      	str	r3, [r7, #28]
        break;
 80078ec:	e005      	b.n	80078fa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80078f8:	bf00      	nop
    }

    if (pclk != 0U)
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d019      	beq.n	8007934 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	085a      	lsrs	r2, r3, #1
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	441a      	add	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007912:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	2b0f      	cmp	r3, #15
 8007918:	d909      	bls.n	800792e <UART_SetConfig+0x546>
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007920:	d205      	bcs.n	800792e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	b29a      	uxth	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60da      	str	r2, [r3, #12]
 800792c:	e002      	b.n	8007934 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007940:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007944:	4618      	mov	r0, r3
 8007946:	3728      	adds	r7, #40	@ 0x28
 8007948:	46bd      	mov	sp, r7
 800794a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800794e:	bf00      	nop
 8007950:	40008000 	.word	0x40008000
 8007954:	00f42400 	.word	0x00f42400

08007958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007964:	f003 0308 	and.w	r3, r3, #8
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00a      	beq.n	80079a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ca:	f003 0304 	and.w	r3, r3, #4
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ec:	f003 0310 	and.w	r3, r3, #16
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00a      	beq.n	8007a0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a0e:	f003 0320 	and.w	r3, r3, #32
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d01a      	beq.n	8007a6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a56:	d10a      	bne.n	8007a6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	605a      	str	r2, [r3, #4]
  }
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b098      	sub	sp, #96	@ 0x60
 8007aa0:	af02      	add	r7, sp, #8
 8007aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007aac:	f7fa fd28 	bl	8002500 <HAL_GetTick>
 8007ab0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0308 	and.w	r3, r3, #8
 8007abc:	2b08      	cmp	r3, #8
 8007abe:	d12e      	bne.n	8007b1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ac0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f88c 	bl	8007bec <UART_WaitOnFlagUntilTimeout>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d021      	beq.n	8007b1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae2:	e853 3f00 	ldrex	r3, [r3]
 8007ae6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007aee:	653b      	str	r3, [r7, #80]	@ 0x50
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	461a      	mov	r2, r3
 8007af6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007afa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007afe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b00:	e841 2300 	strex	r3, r2, [r1]
 8007b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e6      	bne.n	8007ada <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2220      	movs	r2, #32
 8007b10:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e062      	b.n	8007be4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d149      	bne.n	8007bc0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b34:	2200      	movs	r2, #0
 8007b36:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f856 	bl	8007bec <UART_WaitOnFlagUntilTimeout>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d03c      	beq.n	8007bc0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4e:	e853 3f00 	ldrex	r3, [r3]
 8007b52:	623b      	str	r3, [r7, #32]
   return(result);
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	461a      	mov	r2, r3
 8007b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b64:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b6c:	e841 2300 	strex	r3, r2, [r1]
 8007b70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e6      	bne.n	8007b46 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3308      	adds	r3, #8
 8007b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f023 0301 	bic.w	r3, r3, #1
 8007b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3308      	adds	r3, #8
 8007b96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b98:	61fa      	str	r2, [r7, #28]
 8007b9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	69b9      	ldr	r1, [r7, #24]
 8007b9e:	69fa      	ldr	r2, [r7, #28]
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e5      	bne.n	8007b78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e011      	b.n	8007be4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3758      	adds	r7, #88	@ 0x58
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	603b      	str	r3, [r7, #0]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bfc:	e04f      	b.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c04:	d04b      	beq.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c06:	f7fa fc7b 	bl	8002500 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d302      	bcc.n	8007c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e04e      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0304 	and.w	r3, r3, #4
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d037      	beq.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2b80      	cmp	r3, #128	@ 0x80
 8007c32:	d034      	beq.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b40      	cmp	r3, #64	@ 0x40
 8007c38:	d031      	beq.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f003 0308 	and.w	r3, r3, #8
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d110      	bne.n	8007c6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2208      	movs	r2, #8
 8007c4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 f838 	bl	8007cc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2208      	movs	r2, #8
 8007c5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e029      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c78:	d111      	bne.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 f81e 	bl	8007cc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e00f      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69da      	ldr	r2, [r3, #28]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	bf0c      	ite	eq
 8007cae:	2301      	moveq	r3, #1
 8007cb0:	2300      	movne	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	79fb      	ldrb	r3, [r7, #7]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d0a0      	beq.n	8007bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b095      	sub	sp, #84	@ 0x54
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cec:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e6      	bne.n	8007cce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3308      	adds	r3, #8
 8007d06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	e853 3f00 	ldrex	r3, [r3]
 8007d0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	f023 0301 	bic.w	r3, r3, #1
 8007d16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d28:	e841 2300 	strex	r3, r2, [r1]
 8007d2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e5      	bne.n	8007d00 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d118      	bne.n	8007d6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	f023 0310 	bic.w	r3, r3, #16
 8007d50:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d5a:	61bb      	str	r3, [r7, #24]
 8007d5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6979      	ldr	r1, [r7, #20]
 8007d60:	69ba      	ldr	r2, [r7, #24]
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	613b      	str	r3, [r7, #16]
   return(result);
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e6      	bne.n	8007d3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007d82:	bf00      	nop
 8007d84:	3754      	adds	r7, #84	@ 0x54
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d8e:	b084      	sub	sp, #16
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	f107 001c 	add.w	r0, r7, #28
 8007d9c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fa69 	bl	8008284 <USB_CoreReset>
 8007db2:	4603      	mov	r3, r0
 8007db4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007db6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d106      	bne.n	8007dcc <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	639a      	str	r2, [r3, #56]	@ 0x38
 8007dca:	e005      	b.n	8007dd8 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007de4:	b004      	add	sp, #16
 8007de6:	4770      	bx	lr

08007de8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f023 0201 	bic.w	r2, r3, #1
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e26:	78fb      	ldrb	r3, [r7, #3]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d115      	bne.n	8007e58 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e38:	200a      	movs	r0, #10
 8007e3a:	f7fa fb6d 	bl	8002518 <HAL_Delay>
      ms += 10U;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	330a      	adds	r3, #10
 8007e42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fa0f 	bl	8008268 <USB_GetMode>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d01e      	beq.n	8007e8e <USB_SetCurrentMode+0x84>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e54:	d9f0      	bls.n	8007e38 <USB_SetCurrentMode+0x2e>
 8007e56:	e01a      	b.n	8007e8e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e58:	78fb      	ldrb	r3, [r7, #3]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d115      	bne.n	8007e8a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e6a:	200a      	movs	r0, #10
 8007e6c:	f7fa fb54 	bl	8002518 <HAL_Delay>
      ms += 10U;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	330a      	adds	r3, #10
 8007e74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f9f6 	bl	8008268 <USB_GetMode>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d005      	beq.n	8007e8e <USB_SetCurrentMode+0x84>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e86:	d9f0      	bls.n	8007e6a <USB_SetCurrentMode+0x60>
 8007e88:	e001      	b.n	8007e8e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e005      	b.n	8007e9a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2bc8      	cmp	r3, #200	@ 0xc8
 8007e92:	d101      	bne.n	8007e98 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e000      	b.n	8007e9a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b086      	sub	sp, #24
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007eb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	613b      	str	r3, [r7, #16]
 8007ec2:	e009      	b.n	8007ed8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	3340      	adds	r3, #64	@ 0x40
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	2200      	movs	r2, #0
 8007ed0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	613b      	str	r3, [r7, #16]
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	2b0e      	cmp	r3, #14
 8007edc:	d9f2      	bls.n	8007ec4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ede:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d11c      	bne.n	8007f20 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ef4:	f043 0302 	orr.w	r3, r3, #2
 8007ef8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007efe:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	e005      	b.n	8007f2c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f24:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f32:	461a      	mov	r2, r3
 8007f34:	2300      	movs	r3, #0
 8007f36:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f38:	2103      	movs	r1, #3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f95a 	bl	80081f4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f40:	2110      	movs	r1, #16
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f8f6 	bl	8008134 <USB_FlushTxFifo>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f920 	bl	8008198 <USB_FlushRxFifo>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f68:	461a      	mov	r2, r3
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f74:	461a      	mov	r2, r3
 8007f76:	2300      	movs	r3, #0
 8007f78:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f80:	461a      	mov	r2, r3
 8007f82:	2300      	movs	r3, #0
 8007f84:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f86:	2300      	movs	r3, #0
 8007f88:	613b      	str	r3, [r7, #16]
 8007f8a:	e043      	b.n	8008014 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fa2:	d118      	bne.n	8007fd6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007fbc:	6013      	str	r3, [r2, #0]
 8007fbe:	e013      	b.n	8007fe8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fcc:	461a      	mov	r2, r3
 8007fce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007fd2:	6013      	str	r3, [r2, #0]
 8007fd4:	e008      	b.n	8007fe8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	4413      	add	r3, r2
 8008002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008006:	461a      	mov	r2, r3
 8008008:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800800c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	3301      	adds	r3, #1
 8008012:	613b      	str	r3, [r7, #16]
 8008014:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008018:	461a      	mov	r2, r3
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	4293      	cmp	r3, r2
 800801e:	d3b5      	bcc.n	8007f8c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008020:	2300      	movs	r3, #0
 8008022:	613b      	str	r3, [r7, #16]
 8008024:	e043      	b.n	80080ae <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	4413      	add	r3, r2
 800802e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008038:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800803c:	d118      	bne.n	8008070 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10a      	bne.n	800805a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4413      	add	r3, r2
 800804c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008050:	461a      	mov	r2, r3
 8008052:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	e013      	b.n	8008082 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	4413      	add	r3, r2
 8008062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008066:	461a      	mov	r2, r3
 8008068:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800806c:	6013      	str	r3, [r2, #0]
 800806e:	e008      	b.n	8008082 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800807c:	461a      	mov	r2, r3
 800807e:	2300      	movs	r3, #0
 8008080:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	4413      	add	r3, r2
 800808a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800808e:	461a      	mov	r2, r3
 8008090:	2300      	movs	r3, #0
 8008092:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4413      	add	r3, r2
 800809c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080a0:	461a      	mov	r2, r3
 80080a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80080a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	3301      	adds	r3, #1
 80080ac:	613b      	str	r3, [r7, #16]
 80080ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80080b2:	461a      	mov	r2, r3
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d3b5      	bcc.n	8008026 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80080da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	f043 0210 	orr.w	r2, r3, #16
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699a      	ldr	r2, [r3, #24]
 80080ec:	4b10      	ldr	r3, [pc, #64]	@ (8008130 <USB_DevInit+0x28c>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80080f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d005      	beq.n	8008108 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	f043 0208 	orr.w	r2, r3, #8
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008108:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800810c:	2b01      	cmp	r3, #1
 800810e:	d107      	bne.n	8008120 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008118:	f043 0304 	orr.w	r3, r3, #4
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008120:	7dfb      	ldrb	r3, [r7, #23]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3718      	adds	r7, #24
 8008126:	46bd      	mov	sp, r7
 8008128:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800812c:	b004      	add	sp, #16
 800812e:	4770      	bx	lr
 8008130:	803c3800 	.word	0x803c3800

08008134 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800813e:	2300      	movs	r3, #0
 8008140:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3301      	adds	r3, #1
 8008146:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800814e:	d901      	bls.n	8008154 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008150:	2303      	movs	r3, #3
 8008152:	e01b      	b.n	800818c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	daf2      	bge.n	8008142 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	019b      	lsls	r3, r3, #6
 8008164:	f043 0220 	orr.w	r2, r3, #32
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	3301      	adds	r3, #1
 8008170:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008178:	d901      	bls.n	800817e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e006      	b.n	800818c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b20      	cmp	r3, #32
 8008188:	d0f0      	beq.n	800816c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3301      	adds	r3, #1
 80081a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081b0:	d901      	bls.n	80081b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e018      	b.n	80081e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	daf2      	bge.n	80081a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2210      	movs	r2, #16
 80081c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3301      	adds	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081d4:	d901      	bls.n	80081da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e006      	b.n	80081e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	f003 0310 	and.w	r3, r3, #16
 80081e2:	2b10      	cmp	r3, #16
 80081e4:	d0f0      	beq.n	80081c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	68f9      	ldr	r1, [r7, #12]
 8008210:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008214:	4313      	orrs	r3, r2
 8008216:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008226:	b480      	push	{r7}
 8008228:	b085      	sub	sp, #20
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008240:	f023 0303 	bic.w	r3, r3, #3
 8008244:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008254:	f043 0302 	orr.w	r3, r3, #2
 8008258:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	f003 0301 	and.w	r3, r3, #1
}
 8008278:	4618      	mov	r0, r3
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	3301      	adds	r3, #1
 8008294:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800829c:	d901      	bls.n	80082a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e01b      	b.n	80082da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	daf2      	bge.n	8008290 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	f043 0201 	orr.w	r2, r3, #1
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3301      	adds	r3, #1
 80082be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082c6:	d901      	bls.n	80082cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e006      	b.n	80082da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d0f0      	beq.n	80082ba <USB_CoreReset+0x36>

  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
	...

080082e8 <__NVIC_SetPriority>:
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	6039      	str	r1, [r7, #0]
 80082f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	db0a      	blt.n	8008312 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	490c      	ldr	r1, [pc, #48]	@ (8008334 <__NVIC_SetPriority+0x4c>)
 8008302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008306:	0112      	lsls	r2, r2, #4
 8008308:	b2d2      	uxtb	r2, r2
 800830a:	440b      	add	r3, r1
 800830c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008310:	e00a      	b.n	8008328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	b2da      	uxtb	r2, r3
 8008316:	4908      	ldr	r1, [pc, #32]	@ (8008338 <__NVIC_SetPriority+0x50>)
 8008318:	79fb      	ldrb	r3, [r7, #7]
 800831a:	f003 030f 	and.w	r3, r3, #15
 800831e:	3b04      	subs	r3, #4
 8008320:	0112      	lsls	r2, r2, #4
 8008322:	b2d2      	uxtb	r2, r2
 8008324:	440b      	add	r3, r1
 8008326:	761a      	strb	r2, [r3, #24]
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	e000e100 	.word	0xe000e100
 8008338:	e000ed00 	.word	0xe000ed00

0800833c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800833c:	b580      	push	{r7, lr}
 800833e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008340:	4b05      	ldr	r3, [pc, #20]	@ (8008358 <SysTick_Handler+0x1c>)
 8008342:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008344:	f001 fd18 	bl	8009d78 <xTaskGetSchedulerState>
 8008348:	4603      	mov	r3, r0
 800834a:	2b01      	cmp	r3, #1
 800834c:	d001      	beq.n	8008352 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800834e:	f002 fb13 	bl	800a978 <xPortSysTickHandler>
  }
}
 8008352:	bf00      	nop
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	e000e010 	.word	0xe000e010

0800835c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800835c:	b580      	push	{r7, lr}
 800835e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008360:	2100      	movs	r1, #0
 8008362:	f06f 0004 	mvn.w	r0, #4
 8008366:	f7ff ffbf 	bl	80082e8 <__NVIC_SetPriority>
#endif
}
 800836a:	bf00      	nop
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008376:	f3ef 8305 	mrs	r3, IPSR
 800837a:	603b      	str	r3, [r7, #0]
  return(result);
 800837c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008382:	f06f 0305 	mvn.w	r3, #5
 8008386:	607b      	str	r3, [r7, #4]
 8008388:	e00c      	b.n	80083a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800838a:	4b0a      	ldr	r3, [pc, #40]	@ (80083b4 <osKernelInitialize+0x44>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d105      	bne.n	800839e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008392:	4b08      	ldr	r3, [pc, #32]	@ (80083b4 <osKernelInitialize+0x44>)
 8008394:	2201      	movs	r2, #1
 8008396:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008398:	2300      	movs	r3, #0
 800839a:	607b      	str	r3, [r7, #4]
 800839c:	e002      	b.n	80083a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800839e:	f04f 33ff 	mov.w	r3, #4294967295
 80083a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083a4:	687b      	ldr	r3, [r7, #4]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	20000ab0 	.word	0x20000ab0

080083b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083be:	f3ef 8305 	mrs	r3, IPSR
 80083c2:	603b      	str	r3, [r7, #0]
  return(result);
 80083c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d003      	beq.n	80083d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80083ca:	f06f 0305 	mvn.w	r3, #5
 80083ce:	607b      	str	r3, [r7, #4]
 80083d0:	e010      	b.n	80083f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80083d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008400 <osKernelStart+0x48>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d109      	bne.n	80083ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80083da:	f7ff ffbf 	bl	800835c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80083de:	4b08      	ldr	r3, [pc, #32]	@ (8008400 <osKernelStart+0x48>)
 80083e0:	2202      	movs	r2, #2
 80083e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80083e4:	f001 f87a 	bl	80094dc <vTaskStartScheduler>
      stat = osOK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	607b      	str	r3, [r7, #4]
 80083ec:	e002      	b.n	80083f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80083ee:	f04f 33ff 	mov.w	r3, #4294967295
 80083f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083f4:	687b      	ldr	r3, [r7, #4]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	20000ab0 	.word	0x20000ab0

08008404 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008404:	b580      	push	{r7, lr}
 8008406:	b08e      	sub	sp, #56	@ 0x38
 8008408:	af04      	add	r7, sp, #16
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008410:	2300      	movs	r3, #0
 8008412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008414:	f3ef 8305 	mrs	r3, IPSR
 8008418:	617b      	str	r3, [r7, #20]
  return(result);
 800841a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800841c:	2b00      	cmp	r3, #0
 800841e:	d17e      	bne.n	800851e <osThreadNew+0x11a>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d07b      	beq.n	800851e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008426:	2380      	movs	r3, #128	@ 0x80
 8008428:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800842a:	2318      	movs	r3, #24
 800842c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800842e:	2300      	movs	r3, #0
 8008430:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008432:	f04f 33ff 	mov.w	r3, #4294967295
 8008436:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d045      	beq.n	80084ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d002      	beq.n	800844c <osThreadNew+0x48>
        name = attr->name;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d008      	beq.n	8008472 <osThreadNew+0x6e>
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	2b38      	cmp	r3, #56	@ 0x38
 8008464:	d805      	bhi.n	8008472 <osThreadNew+0x6e>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <osThreadNew+0x72>
        return (NULL);
 8008472:	2300      	movs	r3, #0
 8008474:	e054      	b.n	8008520 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	089b      	lsrs	r3, r3, #2
 8008484:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00e      	beq.n	80084ac <osThreadNew+0xa8>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	2b5b      	cmp	r3, #91	@ 0x5b
 8008494:	d90a      	bls.n	80084ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800849a:	2b00      	cmp	r3, #0
 800849c:	d006      	beq.n	80084ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <osThreadNew+0xa8>
        mem = 1;
 80084a6:	2301      	movs	r3, #1
 80084a8:	61bb      	str	r3, [r7, #24]
 80084aa:	e010      	b.n	80084ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10c      	bne.n	80084ce <osThreadNew+0xca>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d108      	bne.n	80084ce <osThreadNew+0xca>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d104      	bne.n	80084ce <osThreadNew+0xca>
          mem = 0;
 80084c4:	2300      	movs	r3, #0
 80084c6:	61bb      	str	r3, [r7, #24]
 80084c8:	e001      	b.n	80084ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80084ca:	2300      	movs	r3, #0
 80084cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d110      	bne.n	80084f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084dc:	9202      	str	r2, [sp, #8]
 80084de:	9301      	str	r3, [sp, #4]
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	6a3a      	ldr	r2, [r7, #32]
 80084e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 fe1a 	bl	8009124 <xTaskCreateStatic>
 80084f0:	4603      	mov	r3, r0
 80084f2:	613b      	str	r3, [r7, #16]
 80084f4:	e013      	b.n	800851e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d110      	bne.n	800851e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	b29a      	uxth	r2, r3
 8008500:	f107 0310 	add.w	r3, r7, #16
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 fe68 	bl	80091e4 <xTaskCreate>
 8008514:	4603      	mov	r3, r0
 8008516:	2b01      	cmp	r3, #1
 8008518:	d001      	beq.n	800851e <osThreadNew+0x11a>
            hTask = NULL;
 800851a:	2300      	movs	r3, #0
 800851c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800851e:	693b      	ldr	r3, [r7, #16]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3728      	adds	r7, #40	@ 0x28
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008530:	f3ef 8305 	mrs	r3, IPSR
 8008534:	60bb      	str	r3, [r7, #8]
  return(result);
 8008536:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008538:	2b00      	cmp	r3, #0
 800853a:	d003      	beq.n	8008544 <osDelay+0x1c>
    stat = osErrorISR;
 800853c:	f06f 0305 	mvn.w	r3, #5
 8008540:	60fb      	str	r3, [r7, #12]
 8008542:	e007      	b.n	8008554 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008544:	2300      	movs	r3, #0
 8008546:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d002      	beq.n	8008554 <osDelay+0x2c>
      vTaskDelay(ticks);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 ff8e 	bl	8009470 <vTaskDelay>
    }
  }

  return (stat);
 8008554:	68fb      	ldr	r3, [r7, #12]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	4a07      	ldr	r2, [pc, #28]	@ (800858c <vApplicationGetIdleTaskMemory+0x2c>)
 8008570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	4a06      	ldr	r2, [pc, #24]	@ (8008590 <vApplicationGetIdleTaskMemory+0x30>)
 8008576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2280      	movs	r2, #128	@ 0x80
 800857c:	601a      	str	r2, [r3, #0]
}
 800857e:	bf00      	nop
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	20000ab4 	.word	0x20000ab4
 8008590:	20000b10 	.word	0x20000b10

08008594 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4a07      	ldr	r2, [pc, #28]	@ (80085c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80085a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	4a06      	ldr	r2, [pc, #24]	@ (80085c4 <vApplicationGetTimerTaskMemory+0x30>)
 80085aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80085b2:	601a      	str	r2, [r3, #0]
}
 80085b4:	bf00      	nop
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	20000d10 	.word	0x20000d10
 80085c4:	20000d6c 	.word	0x20000d6c

080085c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f103 0208 	add.w	r2, r3, #8
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f04f 32ff 	mov.w	r2, #4294967295
 80085e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f103 0208 	add.w	r2, r3, #8
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f103 0208 	add.w	r2, r3, #8
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008622:	b480      	push	{r7}
 8008624:	b085      	sub	sp, #20
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	689a      	ldr	r2, [r3, #8]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	683a      	ldr	r2, [r7, #0]
 8008646:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	1c5a      	adds	r2, r3, #1
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	601a      	str	r2, [r3, #0]
}
 800865e:	bf00      	nop
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800866a:	b480      	push	{r7}
 800866c:	b085      	sub	sp, #20
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008680:	d103      	bne.n	800868a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	e00c      	b.n	80086a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	3308      	adds	r3, #8
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	e002      	b.n	8008698 <vListInsert+0x2e>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	60fb      	str	r3, [r7, #12]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d2f6      	bcs.n	8008692 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	683a      	ldr	r2, [r7, #0]
 80086be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	1c5a      	adds	r2, r3, #1
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	601a      	str	r2, [r3, #0]
}
 80086d0:	bf00      	nop
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	6892      	ldr	r2, [r2, #8]
 80086f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	6852      	ldr	r2, [r2, #4]
 80086fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	429a      	cmp	r2, r3
 8008706:	d103      	bne.n	8008710 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	1e5a      	subs	r2, r3, #1
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10b      	bne.n	800875c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008756:	bf00      	nop
 8008758:	bf00      	nop
 800875a:	e7fd      	b.n	8008758 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800875c:	f002 f87c 	bl	800a858 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008768:	68f9      	ldr	r1, [r7, #12]
 800876a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800876c:	fb01 f303 	mul.w	r3, r1, r3
 8008770:	441a      	add	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800878c:	3b01      	subs	r3, #1
 800878e:	68f9      	ldr	r1, [r7, #12]
 8008790:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008792:	fb01 f303 	mul.w	r3, r1, r3
 8008796:	441a      	add	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	22ff      	movs	r2, #255	@ 0xff
 80087a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	22ff      	movs	r2, #255	@ 0xff
 80087a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d114      	bne.n	80087dc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d01a      	beq.n	80087f0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3310      	adds	r3, #16
 80087be:	4618      	mov	r0, r3
 80087c0:	f001 f91a 	bl	80099f8 <xTaskRemoveFromEventList>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d012      	beq.n	80087f0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80087ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008800 <xQueueGenericReset+0xd0>)
 80087cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	e009      	b.n	80087f0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	3310      	adds	r3, #16
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7ff fef1 	bl	80085c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	3324      	adds	r3, #36	@ 0x24
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7ff feec 	bl	80085c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80087f0:	f002 f864 	bl	800a8bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80087f4:	2301      	movs	r3, #1
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	e000ed04 	.word	0xe000ed04

08008804 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008804:	b580      	push	{r7, lr}
 8008806:	b08e      	sub	sp, #56	@ 0x38
 8008808:	af02      	add	r7, sp, #8
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
 8008810:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10b      	bne.n	8008830 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800882a:	bf00      	nop
 800882c:	bf00      	nop
 800882e:	e7fd      	b.n	800882c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10b      	bne.n	800884e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008848:	bf00      	nop
 800884a:	bf00      	nop
 800884c:	e7fd      	b.n	800884a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <xQueueGenericCreateStatic+0x56>
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <xQueueGenericCreateStatic+0x5a>
 800885a:	2301      	movs	r3, #1
 800885c:	e000      	b.n	8008860 <xQueueGenericCreateStatic+0x5c>
 800885e:	2300      	movs	r3, #0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10b      	bne.n	800887c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	623b      	str	r3, [r7, #32]
}
 8008876:	bf00      	nop
 8008878:	bf00      	nop
 800887a:	e7fd      	b.n	8008878 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d102      	bne.n	8008888 <xQueueGenericCreateStatic+0x84>
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <xQueueGenericCreateStatic+0x88>
 8008888:	2301      	movs	r3, #1
 800888a:	e000      	b.n	800888e <xQueueGenericCreateStatic+0x8a>
 800888c:	2300      	movs	r3, #0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10b      	bne.n	80088aa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	61fb      	str	r3, [r7, #28]
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop
 80088a8:	e7fd      	b.n	80088a6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80088aa:	2350      	movs	r3, #80	@ 0x50
 80088ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b50      	cmp	r3, #80	@ 0x50
 80088b2:	d00b      	beq.n	80088cc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	61bb      	str	r3, [r7, #24]
}
 80088c6:	bf00      	nop
 80088c8:	bf00      	nop
 80088ca:	e7fd      	b.n	80088c8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80088cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80088d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00d      	beq.n	80088f4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80088d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088e0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80088e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	4613      	mov	r3, r2
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	68b9      	ldr	r1, [r7, #8]
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f000 f805 	bl	80088fe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3730      	adds	r7, #48	@ 0x30
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	60f8      	str	r0, [r7, #12]
 8008906:	60b9      	str	r1, [r7, #8]
 8008908:	607a      	str	r2, [r7, #4]
 800890a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d103      	bne.n	800891a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	601a      	str	r2, [r3, #0]
 8008918:	e002      	b.n	8008920 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800892c:	2101      	movs	r1, #1
 800892e:	69b8      	ldr	r0, [r7, #24]
 8008930:	f7ff fefe 	bl	8008730 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	78fa      	ldrb	r2, [r7, #3]
 8008938:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800893c:	bf00      	nop
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08e      	sub	sp, #56	@ 0x38
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
 8008950:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008952:	2300      	movs	r3, #0
 8008954:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800895a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10b      	bne.n	8008978 <xQueueGenericSend+0x34>
	__asm volatile
 8008960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008972:	bf00      	nop
 8008974:	bf00      	nop
 8008976:	e7fd      	b.n	8008974 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d103      	bne.n	8008986 <xQueueGenericSend+0x42>
 800897e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <xQueueGenericSend+0x46>
 8008986:	2301      	movs	r3, #1
 8008988:	e000      	b.n	800898c <xQueueGenericSend+0x48>
 800898a:	2300      	movs	r3, #0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10b      	bne.n	80089a8 <xQueueGenericSend+0x64>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089a2:	bf00      	nop
 80089a4:	bf00      	nop
 80089a6:	e7fd      	b.n	80089a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d103      	bne.n	80089b6 <xQueueGenericSend+0x72>
 80089ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d101      	bne.n	80089ba <xQueueGenericSend+0x76>
 80089b6:	2301      	movs	r3, #1
 80089b8:	e000      	b.n	80089bc <xQueueGenericSend+0x78>
 80089ba:	2300      	movs	r3, #0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d10b      	bne.n	80089d8 <xQueueGenericSend+0x94>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	623b      	str	r3, [r7, #32]
}
 80089d2:	bf00      	nop
 80089d4:	bf00      	nop
 80089d6:	e7fd      	b.n	80089d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089d8:	f001 f9ce 	bl	8009d78 <xTaskGetSchedulerState>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d102      	bne.n	80089e8 <xQueueGenericSend+0xa4>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d101      	bne.n	80089ec <xQueueGenericSend+0xa8>
 80089e8:	2301      	movs	r3, #1
 80089ea:	e000      	b.n	80089ee <xQueueGenericSend+0xaa>
 80089ec:	2300      	movs	r3, #0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10b      	bne.n	8008a0a <xQueueGenericSend+0xc6>
	__asm volatile
 80089f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f6:	f383 8811 	msr	BASEPRI, r3
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	61fb      	str	r3, [r7, #28]
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop
 8008a08:	e7fd      	b.n	8008a06 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a0a:	f001 ff25 	bl	800a858 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d302      	bcc.n	8008a20 <xQueueGenericSend+0xdc>
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d129      	bne.n	8008a74 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	68b9      	ldr	r1, [r7, #8]
 8008a24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a26:	f000 fa0f 	bl	8008e48 <prvCopyDataToQueue>
 8008a2a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d010      	beq.n	8008a56 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a36:	3324      	adds	r3, #36	@ 0x24
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 ffdd 	bl	80099f8 <xTaskRemoveFromEventList>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d013      	beq.n	8008a6c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a44:	4b3f      	ldr	r3, [pc, #252]	@ (8008b44 <xQueueGenericSend+0x200>)
 8008a46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	e00a      	b.n	8008a6c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d007      	beq.n	8008a6c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a5c:	4b39      	ldr	r3, [pc, #228]	@ (8008b44 <xQueueGenericSend+0x200>)
 8008a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a6c:	f001 ff26 	bl	800a8bc <vPortExitCritical>
				return pdPASS;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e063      	b.n	8008b3c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d103      	bne.n	8008a82 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a7a:	f001 ff1f 	bl	800a8bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	e05c      	b.n	8008b3c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d106      	bne.n	8008a96 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a88:	f107 0314 	add.w	r3, r7, #20
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f001 f817 	bl	8009ac0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a92:	2301      	movs	r3, #1
 8008a94:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a96:	f001 ff11 	bl	800a8bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a9a:	f000 fd87 	bl	80095ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a9e:	f001 fedb 	bl	800a858 <vPortEnterCritical>
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008aa8:	b25b      	sxtb	r3, r3
 8008aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aae:	d103      	bne.n	8008ab8 <xQueueGenericSend+0x174>
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008abe:	b25b      	sxtb	r3, r3
 8008ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac4:	d103      	bne.n	8008ace <xQueueGenericSend+0x18a>
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ace:	f001 fef5 	bl	800a8bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ad2:	1d3a      	adds	r2, r7, #4
 8008ad4:	f107 0314 	add.w	r3, r7, #20
 8008ad8:	4611      	mov	r1, r2
 8008ada:	4618      	mov	r0, r3
 8008adc:	f001 f806 	bl	8009aec <xTaskCheckForTimeOut>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d124      	bne.n	8008b30 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ae6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ae8:	f000 faa6 	bl	8009038 <prvIsQueueFull>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d018      	beq.n	8008b24 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af4:	3310      	adds	r3, #16
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	4611      	mov	r1, r2
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 ff2a 	bl	8009954 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b02:	f000 fa31 	bl	8008f68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b06:	f000 fd5f 	bl	80095c8 <xTaskResumeAll>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f47f af7c 	bne.w	8008a0a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008b12:	4b0c      	ldr	r3, [pc, #48]	@ (8008b44 <xQueueGenericSend+0x200>)
 8008b14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b18:	601a      	str	r2, [r3, #0]
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	e772      	b.n	8008a0a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b26:	f000 fa1f 	bl	8008f68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b2a:	f000 fd4d 	bl	80095c8 <xTaskResumeAll>
 8008b2e:	e76c      	b.n	8008a0a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b32:	f000 fa19 	bl	8008f68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b36:	f000 fd47 	bl	80095c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3738      	adds	r7, #56	@ 0x38
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	e000ed04 	.word	0xe000ed04

08008b48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b090      	sub	sp, #64	@ 0x40
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10b      	bne.n	8008b78 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008b72:	bf00      	nop
 8008b74:	bf00      	nop
 8008b76:	e7fd      	b.n	8008b74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d103      	bne.n	8008b86 <xQueueGenericSendFromISR+0x3e>
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d101      	bne.n	8008b8a <xQueueGenericSendFromISR+0x42>
 8008b86:	2301      	movs	r3, #1
 8008b88:	e000      	b.n	8008b8c <xQueueGenericSendFromISR+0x44>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10b      	bne.n	8008ba8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008ba2:	bf00      	nop
 8008ba4:	bf00      	nop
 8008ba6:	e7fd      	b.n	8008ba4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d103      	bne.n	8008bb6 <xQueueGenericSendFromISR+0x6e>
 8008bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d101      	bne.n	8008bba <xQueueGenericSendFromISR+0x72>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e000      	b.n	8008bbc <xQueueGenericSendFromISR+0x74>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10b      	bne.n	8008bd8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	623b      	str	r3, [r7, #32]
}
 8008bd2:	bf00      	nop
 8008bd4:	bf00      	nop
 8008bd6:	e7fd      	b.n	8008bd4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bd8:	f001 ff1e 	bl	800aa18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008bdc:	f3ef 8211 	mrs	r2, BASEPRI
 8008be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	61fa      	str	r2, [r7, #28]
 8008bf2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008bf4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bf6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d302      	bcc.n	8008c0a <xQueueGenericSendFromISR+0xc2>
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d12f      	bne.n	8008c6a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	68b9      	ldr	r1, [r7, #8]
 8008c1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c20:	f000 f912 	bl	8008e48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c24:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2c:	d112      	bne.n	8008c54 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d016      	beq.n	8008c64 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c38:	3324      	adds	r3, #36	@ 0x24
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 fedc 	bl	80099f8 <xTaskRemoveFromEventList>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00e      	beq.n	8008c64 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00b      	beq.n	8008c64 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	601a      	str	r2, [r3, #0]
 8008c52:	e007      	b.n	8008c64 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008c58:	3301      	adds	r3, #1
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	b25a      	sxtb	r2, r3
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008c64:	2301      	movs	r3, #1
 8008c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008c68:	e001      	b.n	8008c6e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c70:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3740      	adds	r7, #64	@ 0x40
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b08c      	sub	sp, #48	@ 0x30
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c90:	2300      	movs	r3, #0
 8008c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10b      	bne.n	8008cb6 <xQueueReceive+0x32>
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	623b      	str	r3, [r7, #32]
}
 8008cb0:	bf00      	nop
 8008cb2:	bf00      	nop
 8008cb4:	e7fd      	b.n	8008cb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d103      	bne.n	8008cc4 <xQueueReceive+0x40>
 8008cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <xQueueReceive+0x44>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e000      	b.n	8008cca <xQueueReceive+0x46>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10b      	bne.n	8008ce6 <xQueueReceive+0x62>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	61fb      	str	r3, [r7, #28]
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	e7fd      	b.n	8008ce2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ce6:	f001 f847 	bl	8009d78 <xTaskGetSchedulerState>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d102      	bne.n	8008cf6 <xQueueReceive+0x72>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <xQueueReceive+0x76>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e000      	b.n	8008cfc <xQueueReceive+0x78>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10b      	bne.n	8008d18 <xQueueReceive+0x94>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	61bb      	str	r3, [r7, #24]
}
 8008d12:	bf00      	nop
 8008d14:	bf00      	nop
 8008d16:	e7fd      	b.n	8008d14 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d18:	f001 fd9e 	bl	800a858 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d20:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d01f      	beq.n	8008d68 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d28:	68b9      	ldr	r1, [r7, #8]
 8008d2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d2c:	f000 f8f6 	bl	8008f1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d32:	1e5a      	subs	r2, r3, #1
 8008d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d36:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00f      	beq.n	8008d60 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d42:	3310      	adds	r3, #16
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 fe57 	bl	80099f8 <xTaskRemoveFromEventList>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d007      	beq.n	8008d60 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d50:	4b3c      	ldr	r3, [pc, #240]	@ (8008e44 <xQueueReceive+0x1c0>)
 8008d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d60:	f001 fdac 	bl	800a8bc <vPortExitCritical>
				return pdPASS;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e069      	b.n	8008e3c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d103      	bne.n	8008d76 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d6e:	f001 fda5 	bl	800a8bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d72:	2300      	movs	r3, #0
 8008d74:	e062      	b.n	8008e3c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d106      	bne.n	8008d8a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d7c:	f107 0310 	add.w	r3, r7, #16
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 fe9d 	bl	8009ac0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d86:	2301      	movs	r3, #1
 8008d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d8a:	f001 fd97 	bl	800a8bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d8e:	f000 fc0d 	bl	80095ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d92:	f001 fd61 	bl	800a858 <vPortEnterCritical>
 8008d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d9c:	b25b      	sxtb	r3, r3
 8008d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da2:	d103      	bne.n	8008dac <xQueueReceive+0x128>
 8008da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008db2:	b25b      	sxtb	r3, r3
 8008db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db8:	d103      	bne.n	8008dc2 <xQueueReceive+0x13e>
 8008dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008dc2:	f001 fd7b 	bl	800a8bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008dc6:	1d3a      	adds	r2, r7, #4
 8008dc8:	f107 0310 	add.w	r3, r7, #16
 8008dcc:	4611      	mov	r1, r2
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 fe8c 	bl	8009aec <xTaskCheckForTimeOut>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d123      	bne.n	8008e22 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ddc:	f000 f916 	bl	800900c <prvIsQueueEmpty>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d017      	beq.n	8008e16 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de8:	3324      	adds	r3, #36	@ 0x24
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	4611      	mov	r1, r2
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 fdb0 	bl	8009954 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008df4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008df6:	f000 f8b7 	bl	8008f68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008dfa:	f000 fbe5 	bl	80095c8 <xTaskResumeAll>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d189      	bne.n	8008d18 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e04:	4b0f      	ldr	r3, [pc, #60]	@ (8008e44 <xQueueReceive+0x1c0>)
 8008e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	e780      	b.n	8008d18 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e18:	f000 f8a6 	bl	8008f68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e1c:	f000 fbd4 	bl	80095c8 <xTaskResumeAll>
 8008e20:	e77a      	b.n	8008d18 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e24:	f000 f8a0 	bl	8008f68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e28:	f000 fbce 	bl	80095c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e2e:	f000 f8ed 	bl	800900c <prvIsQueueEmpty>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f43f af6f 	beq.w	8008d18 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3730      	adds	r7, #48	@ 0x30
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	e000ed04 	.word	0xe000ed04

08008e48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e54:	2300      	movs	r3, #0
 8008e56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10d      	bne.n	8008e82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d14d      	bne.n	8008f0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 ff9e 	bl	8009db4 <xTaskPriorityDisinherit>
 8008e78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	609a      	str	r2, [r3, #8]
 8008e80:	e043      	b.n	8008f0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d119      	bne.n	8008ebc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6858      	ldr	r0, [r3, #4]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e90:	461a      	mov	r2, r3
 8008e92:	68b9      	ldr	r1, [r7, #8]
 8008e94:	f002 fe05 	bl	800baa2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea0:	441a      	add	r2, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	685a      	ldr	r2, [r3, #4]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d32b      	bcc.n	8008f0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	605a      	str	r2, [r3, #4]
 8008eba:	e026      	b.n	8008f0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	68d8      	ldr	r0, [r3, #12]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	f002 fdeb 	bl	800baa2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	68da      	ldr	r2, [r3, #12]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed4:	425b      	negs	r3, r3
 8008ed6:	441a      	add	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	68da      	ldr	r2, [r3, #12]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d207      	bcs.n	8008ef8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	689a      	ldr	r2, [r3, #8]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef0:	425b      	negs	r3, r3
 8008ef2:	441a      	add	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d105      	bne.n	8008f0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d002      	beq.n	8008f0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	1c5a      	adds	r2, r3, #1
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f12:	697b      	ldr	r3, [r7, #20]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d018      	beq.n	8008f60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68da      	ldr	r2, [r3, #12]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f36:	441a      	add	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d303      	bcc.n	8008f50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	68d9      	ldr	r1, [r3, #12]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f58:	461a      	mov	r2, r3
 8008f5a:	6838      	ldr	r0, [r7, #0]
 8008f5c:	f002 fda1 	bl	800baa2 <memcpy>
	}
}
 8008f60:	bf00      	nop
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f70:	f001 fc72 	bl	800a858 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f7c:	e011      	b.n	8008fa2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d012      	beq.n	8008fac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	3324      	adds	r3, #36	@ 0x24
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fd34 	bl	80099f8 <xTaskRemoveFromEventList>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f96:	f000 fe0d 	bl	8009bb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	dce9      	bgt.n	8008f7e <prvUnlockQueue+0x16>
 8008faa:	e000      	b.n	8008fae <prvUnlockQueue+0x46>
					break;
 8008fac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	22ff      	movs	r2, #255	@ 0xff
 8008fb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008fb6:	f001 fc81 	bl	800a8bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008fba:	f001 fc4d 	bl	800a858 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fc6:	e011      	b.n	8008fec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d012      	beq.n	8008ff6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	3310      	adds	r3, #16
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 fd0f 	bl	80099f8 <xTaskRemoveFromEventList>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d001      	beq.n	8008fe4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008fe0:	f000 fde8 	bl	8009bb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008fe4:	7bbb      	ldrb	r3, [r7, #14]
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	dce9      	bgt.n	8008fc8 <prvUnlockQueue+0x60>
 8008ff4:	e000      	b.n	8008ff8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008ff6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	22ff      	movs	r2, #255	@ 0xff
 8008ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009000:	f001 fc5c 	bl	800a8bc <vPortExitCritical>
}
 8009004:	bf00      	nop
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009014:	f001 fc20 	bl	800a858 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800901c:	2b00      	cmp	r3, #0
 800901e:	d102      	bne.n	8009026 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009020:	2301      	movs	r3, #1
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	e001      	b.n	800902a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009026:	2300      	movs	r3, #0
 8009028:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800902a:	f001 fc47 	bl	800a8bc <vPortExitCritical>

	return xReturn;
 800902e:	68fb      	ldr	r3, [r7, #12]
}
 8009030:	4618      	mov	r0, r3
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009040:	f001 fc0a 	bl	800a858 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800904c:	429a      	cmp	r2, r3
 800904e:	d102      	bne.n	8009056 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009050:	2301      	movs	r3, #1
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	e001      	b.n	800905a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009056:	2300      	movs	r3, #0
 8009058:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800905a:	f001 fc2f 	bl	800a8bc <vPortExitCritical>

	return xReturn;
 800905e:	68fb      	ldr	r3, [r7, #12]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009072:	2300      	movs	r3, #0
 8009074:	60fb      	str	r3, [r7, #12]
 8009076:	e014      	b.n	80090a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009078:	4a0f      	ldr	r2, [pc, #60]	@ (80090b8 <vQueueAddToRegistry+0x50>)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d10b      	bne.n	800909c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009084:	490c      	ldr	r1, [pc, #48]	@ (80090b8 <vQueueAddToRegistry+0x50>)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800908e:	4a0a      	ldr	r2, [pc, #40]	@ (80090b8 <vQueueAddToRegistry+0x50>)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	4413      	add	r3, r2
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800909a:	e006      	b.n	80090aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	3301      	adds	r3, #1
 80090a0:	60fb      	str	r3, [r7, #12]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b07      	cmp	r3, #7
 80090a6:	d9e7      	bls.n	8009078 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090a8:	bf00      	nop
 80090aa:	bf00      	nop
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	2000116c 	.word	0x2000116c

080090bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80090cc:	f001 fbc4 	bl	800a858 <vPortEnterCritical>
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090d6:	b25b      	sxtb	r3, r3
 80090d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090dc:	d103      	bne.n	80090e6 <vQueueWaitForMessageRestricted+0x2a>
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090ec:	b25b      	sxtb	r3, r3
 80090ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f2:	d103      	bne.n	80090fc <vQueueWaitForMessageRestricted+0x40>
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80090fc:	f001 fbde 	bl	800a8bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009104:	2b00      	cmp	r3, #0
 8009106:	d106      	bne.n	8009116 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	3324      	adds	r3, #36	@ 0x24
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	68b9      	ldr	r1, [r7, #8]
 8009110:	4618      	mov	r0, r3
 8009112:	f000 fc45 	bl	80099a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009116:	6978      	ldr	r0, [r7, #20]
 8009118:	f7ff ff26 	bl	8008f68 <prvUnlockQueue>
	}
 800911c:	bf00      	nop
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009124:	b580      	push	{r7, lr}
 8009126:	b08e      	sub	sp, #56	@ 0x38
 8009128:	af04      	add	r7, sp, #16
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
 8009130:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10b      	bne.n	8009150 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800913c:	f383 8811 	msr	BASEPRI, r3
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	623b      	str	r3, [r7, #32]
}
 800914a:	bf00      	nop
 800914c:	bf00      	nop
 800914e:	e7fd      	b.n	800914c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10b      	bne.n	800916e <xTaskCreateStatic+0x4a>
	__asm volatile
 8009156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800915a:	f383 8811 	msr	BASEPRI, r3
 800915e:	f3bf 8f6f 	isb	sy
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	61fb      	str	r3, [r7, #28]
}
 8009168:	bf00      	nop
 800916a:	bf00      	nop
 800916c:	e7fd      	b.n	800916a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800916e:	235c      	movs	r3, #92	@ 0x5c
 8009170:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	2b5c      	cmp	r3, #92	@ 0x5c
 8009176:	d00b      	beq.n	8009190 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	61bb      	str	r3, [r7, #24]
}
 800918a:	bf00      	nop
 800918c:	bf00      	nop
 800918e:	e7fd      	b.n	800918c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009190:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009194:	2b00      	cmp	r3, #0
 8009196:	d01e      	beq.n	80091d6 <xTaskCreateStatic+0xb2>
 8009198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800919a:	2b00      	cmp	r3, #0
 800919c:	d01b      	beq.n	80091d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800919e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091aa:	2202      	movs	r2, #2
 80091ac:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091b0:	2300      	movs	r3, #0
 80091b2:	9303      	str	r3, [sp, #12]
 80091b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b6:	9302      	str	r3, [sp, #8]
 80091b8:	f107 0314 	add.w	r3, r7, #20
 80091bc:	9301      	str	r3, [sp, #4]
 80091be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	68b9      	ldr	r1, [r7, #8]
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 f850 	bl	800926e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80091d0:	f000 f8de 	bl	8009390 <prvAddNewTaskToReadyList>
 80091d4:	e001      	b.n	80091da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80091d6:	2300      	movs	r3, #0
 80091d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80091da:	697b      	ldr	r3, [r7, #20]
	}
 80091dc:	4618      	mov	r0, r3
 80091de:	3728      	adds	r7, #40	@ 0x28
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b08c      	sub	sp, #48	@ 0x30
 80091e8:	af04      	add	r7, sp, #16
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	603b      	str	r3, [r7, #0]
 80091f0:	4613      	mov	r3, r2
 80091f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091f4:	88fb      	ldrh	r3, [r7, #6]
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4618      	mov	r0, r3
 80091fa:	f001 fc4f 	bl	800aa9c <pvPortMalloc>
 80091fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00e      	beq.n	8009224 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009206:	205c      	movs	r0, #92	@ 0x5c
 8009208:	f001 fc48 	bl	800aa9c <pvPortMalloc>
 800920c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	631a      	str	r2, [r3, #48]	@ 0x30
 800921a:	e005      	b.n	8009228 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800921c:	6978      	ldr	r0, [r7, #20]
 800921e:	f001 fd0b 	bl	800ac38 <vPortFree>
 8009222:	e001      	b.n	8009228 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009224:	2300      	movs	r3, #0
 8009226:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d017      	beq.n	800925e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009236:	88fa      	ldrh	r2, [r7, #6]
 8009238:	2300      	movs	r3, #0
 800923a:	9303      	str	r3, [sp, #12]
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	9302      	str	r3, [sp, #8]
 8009240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009242:	9301      	str	r3, [sp, #4]
 8009244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	68b9      	ldr	r1, [r7, #8]
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 f80e 	bl	800926e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009252:	69f8      	ldr	r0, [r7, #28]
 8009254:	f000 f89c 	bl	8009390 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009258:	2301      	movs	r3, #1
 800925a:	61bb      	str	r3, [r7, #24]
 800925c:	e002      	b.n	8009264 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800925e:	f04f 33ff 	mov.w	r3, #4294967295
 8009262:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009264:	69bb      	ldr	r3, [r7, #24]
	}
 8009266:	4618      	mov	r0, r3
 8009268:	3720      	adds	r7, #32
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b088      	sub	sp, #32
 8009272:	af00      	add	r7, sp, #0
 8009274:	60f8      	str	r0, [r7, #12]
 8009276:	60b9      	str	r1, [r7, #8]
 8009278:	607a      	str	r2, [r7, #4]
 800927a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800927c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	461a      	mov	r2, r3
 8009286:	21a5      	movs	r1, #165	@ 0xa5
 8009288:	f002 fb8c 	bl	800b9a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800928c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009296:	3b01      	subs	r3, #1
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	f023 0307 	bic.w	r3, r3, #7
 80092a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	f003 0307 	and.w	r3, r3, #7
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00b      	beq.n	80092c8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	617b      	str	r3, [r7, #20]
}
 80092c2:	bf00      	nop
 80092c4:	bf00      	nop
 80092c6:	e7fd      	b.n	80092c4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d01f      	beq.n	800930e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092ce:	2300      	movs	r3, #0
 80092d0:	61fb      	str	r3, [r7, #28]
 80092d2:	e012      	b.n	80092fa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	4413      	add	r3, r2
 80092da:	7819      	ldrb	r1, [r3, #0]
 80092dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	4413      	add	r3, r2
 80092e2:	3334      	adds	r3, #52	@ 0x34
 80092e4:	460a      	mov	r2, r1
 80092e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	4413      	add	r3, r2
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d006      	beq.n	8009302 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	3301      	adds	r3, #1
 80092f8:	61fb      	str	r3, [r7, #28]
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	2b0f      	cmp	r3, #15
 80092fe:	d9e9      	bls.n	80092d4 <prvInitialiseNewTask+0x66>
 8009300:	e000      	b.n	8009304 <prvInitialiseNewTask+0x96>
			{
				break;
 8009302:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009306:	2200      	movs	r2, #0
 8009308:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800930c:	e003      	b.n	8009316 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800930e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009318:	2b37      	cmp	r3, #55	@ 0x37
 800931a:	d901      	bls.n	8009320 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800931c:	2337      	movs	r3, #55	@ 0x37
 800931e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009322:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009324:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009328:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800932a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800932c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932e:	2200      	movs	r2, #0
 8009330:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009334:	3304      	adds	r3, #4
 8009336:	4618      	mov	r0, r3
 8009338:	f7ff f966 	bl	8008608 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800933c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933e:	3318      	adds	r3, #24
 8009340:	4618      	mov	r0, r3
 8009342:	f7ff f961 	bl	8008608 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800934a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800934c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800934e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009354:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800935a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800935c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935e:	2200      	movs	r2, #0
 8009360:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009364:	2200      	movs	r2, #0
 8009366:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	68f9      	ldr	r1, [r7, #12]
 800936e:	69b8      	ldr	r0, [r7, #24]
 8009370:	f001 f93e 	bl	800a5f0 <pxPortInitialiseStack>
 8009374:	4602      	mov	r2, r0
 8009376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009378:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800937a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009386:	bf00      	nop
 8009388:	3720      	adds	r7, #32
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
	...

08009390 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009398:	f001 fa5e 	bl	800a858 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800939c:	4b2d      	ldr	r3, [pc, #180]	@ (8009454 <prvAddNewTaskToReadyList+0xc4>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3301      	adds	r3, #1
 80093a2:	4a2c      	ldr	r2, [pc, #176]	@ (8009454 <prvAddNewTaskToReadyList+0xc4>)
 80093a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093a6:	4b2c      	ldr	r3, [pc, #176]	@ (8009458 <prvAddNewTaskToReadyList+0xc8>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d109      	bne.n	80093c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093ae:	4a2a      	ldr	r2, [pc, #168]	@ (8009458 <prvAddNewTaskToReadyList+0xc8>)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093b4:	4b27      	ldr	r3, [pc, #156]	@ (8009454 <prvAddNewTaskToReadyList+0xc4>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d110      	bne.n	80093de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093bc:	f000 fc1e 	bl	8009bfc <prvInitialiseTaskLists>
 80093c0:	e00d      	b.n	80093de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093c2:	4b26      	ldr	r3, [pc, #152]	@ (800945c <prvAddNewTaskToReadyList+0xcc>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d109      	bne.n	80093de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093ca:	4b23      	ldr	r3, [pc, #140]	@ (8009458 <prvAddNewTaskToReadyList+0xc8>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d802      	bhi.n	80093de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093d8:	4a1f      	ldr	r2, [pc, #124]	@ (8009458 <prvAddNewTaskToReadyList+0xc8>)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093de:	4b20      	ldr	r3, [pc, #128]	@ (8009460 <prvAddNewTaskToReadyList+0xd0>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	3301      	adds	r3, #1
 80093e4:	4a1e      	ldr	r2, [pc, #120]	@ (8009460 <prvAddNewTaskToReadyList+0xd0>)
 80093e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80093e8:	4b1d      	ldr	r3, [pc, #116]	@ (8009460 <prvAddNewTaskToReadyList+0xd0>)
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f4:	4b1b      	ldr	r3, [pc, #108]	@ (8009464 <prvAddNewTaskToReadyList+0xd4>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d903      	bls.n	8009404 <prvAddNewTaskToReadyList+0x74>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009400:	4a18      	ldr	r2, [pc, #96]	@ (8009464 <prvAddNewTaskToReadyList+0xd4>)
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009408:	4613      	mov	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4a15      	ldr	r2, [pc, #84]	@ (8009468 <prvAddNewTaskToReadyList+0xd8>)
 8009412:	441a      	add	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	3304      	adds	r3, #4
 8009418:	4619      	mov	r1, r3
 800941a:	4610      	mov	r0, r2
 800941c:	f7ff f901 	bl	8008622 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009420:	f001 fa4c 	bl	800a8bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009424:	4b0d      	ldr	r3, [pc, #52]	@ (800945c <prvAddNewTaskToReadyList+0xcc>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00e      	beq.n	800944a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800942c:	4b0a      	ldr	r3, [pc, #40]	@ (8009458 <prvAddNewTaskToReadyList+0xc8>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009436:	429a      	cmp	r2, r3
 8009438:	d207      	bcs.n	800944a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800943a:	4b0c      	ldr	r3, [pc, #48]	@ (800946c <prvAddNewTaskToReadyList+0xdc>)
 800943c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800944a:	bf00      	nop
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20001680 	.word	0x20001680
 8009458:	200011ac 	.word	0x200011ac
 800945c:	2000168c 	.word	0x2000168c
 8009460:	2000169c 	.word	0x2000169c
 8009464:	20001688 	.word	0x20001688
 8009468:	200011b0 	.word	0x200011b0
 800946c:	e000ed04 	.word	0xe000ed04

08009470 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009478:	2300      	movs	r3, #0
 800947a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d018      	beq.n	80094b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009482:	4b14      	ldr	r3, [pc, #80]	@ (80094d4 <vTaskDelay+0x64>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00b      	beq.n	80094a2 <vTaskDelay+0x32>
	__asm volatile
 800948a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800948e:	f383 8811 	msr	BASEPRI, r3
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	60bb      	str	r3, [r7, #8]
}
 800949c:	bf00      	nop
 800949e:	bf00      	nop
 80094a0:	e7fd      	b.n	800949e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80094a2:	f000 f883 	bl	80095ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094a6:	2100      	movs	r1, #0
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fcf3 	bl	8009e94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094ae:	f000 f88b 	bl	80095c8 <xTaskResumeAll>
 80094b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d107      	bne.n	80094ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80094ba:	4b07      	ldr	r3, [pc, #28]	@ (80094d8 <vTaskDelay+0x68>)
 80094bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094ca:	bf00      	nop
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	200016a8 	.word	0x200016a8
 80094d8:	e000ed04 	.word	0xe000ed04

080094dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08a      	sub	sp, #40	@ 0x28
 80094e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80094ea:	463a      	mov	r2, r7
 80094ec:	1d39      	adds	r1, r7, #4
 80094ee:	f107 0308 	add.w	r3, r7, #8
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7ff f834 	bl	8008560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	9202      	str	r2, [sp, #8]
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	2300      	movs	r3, #0
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	2300      	movs	r3, #0
 8009508:	460a      	mov	r2, r1
 800950a:	4922      	ldr	r1, [pc, #136]	@ (8009594 <vTaskStartScheduler+0xb8>)
 800950c:	4822      	ldr	r0, [pc, #136]	@ (8009598 <vTaskStartScheduler+0xbc>)
 800950e:	f7ff fe09 	bl	8009124 <xTaskCreateStatic>
 8009512:	4603      	mov	r3, r0
 8009514:	4a21      	ldr	r2, [pc, #132]	@ (800959c <vTaskStartScheduler+0xc0>)
 8009516:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009518:	4b20      	ldr	r3, [pc, #128]	@ (800959c <vTaskStartScheduler+0xc0>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009520:	2301      	movs	r3, #1
 8009522:	617b      	str	r3, [r7, #20]
 8009524:	e001      	b.n	800952a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009526:	2300      	movs	r3, #0
 8009528:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d102      	bne.n	8009536 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009530:	f000 fd04 	bl	8009f3c <xTimerCreateTimerTask>
 8009534:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d116      	bne.n	800956a <vTaskStartScheduler+0x8e>
	__asm volatile
 800953c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	613b      	str	r3, [r7, #16]
}
 800954e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009550:	4b13      	ldr	r3, [pc, #76]	@ (80095a0 <vTaskStartScheduler+0xc4>)
 8009552:	f04f 32ff 	mov.w	r2, #4294967295
 8009556:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009558:	4b12      	ldr	r3, [pc, #72]	@ (80095a4 <vTaskStartScheduler+0xc8>)
 800955a:	2201      	movs	r2, #1
 800955c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800955e:	4b12      	ldr	r3, [pc, #72]	@ (80095a8 <vTaskStartScheduler+0xcc>)
 8009560:	2200      	movs	r2, #0
 8009562:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009564:	f001 f8d4 	bl	800a710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009568:	e00f      	b.n	800958a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009570:	d10b      	bne.n	800958a <vTaskStartScheduler+0xae>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	60fb      	str	r3, [r7, #12]
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop
 8009588:	e7fd      	b.n	8009586 <vTaskStartScheduler+0xaa>
}
 800958a:	bf00      	nop
 800958c:	3718      	adds	r7, #24
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	0800dbd4 	.word	0x0800dbd4
 8009598:	08009bcd 	.word	0x08009bcd
 800959c:	200016a4 	.word	0x200016a4
 80095a0:	200016a0 	.word	0x200016a0
 80095a4:	2000168c 	.word	0x2000168c
 80095a8:	20001684 	.word	0x20001684

080095ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095ac:	b480      	push	{r7}
 80095ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80095b0:	4b04      	ldr	r3, [pc, #16]	@ (80095c4 <vTaskSuspendAll+0x18>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3301      	adds	r3, #1
 80095b6:	4a03      	ldr	r2, [pc, #12]	@ (80095c4 <vTaskSuspendAll+0x18>)
 80095b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80095ba:	bf00      	nop
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	200016a8 	.word	0x200016a8

080095c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095d2:	2300      	movs	r3, #0
 80095d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80095d6:	4b42      	ldr	r3, [pc, #264]	@ (80096e0 <xTaskResumeAll+0x118>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10b      	bne.n	80095f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80095de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	603b      	str	r3, [r7, #0]
}
 80095f0:	bf00      	nop
 80095f2:	bf00      	nop
 80095f4:	e7fd      	b.n	80095f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80095f6:	f001 f92f 	bl	800a858 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80095fa:	4b39      	ldr	r3, [pc, #228]	@ (80096e0 <xTaskResumeAll+0x118>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3b01      	subs	r3, #1
 8009600:	4a37      	ldr	r2, [pc, #220]	@ (80096e0 <xTaskResumeAll+0x118>)
 8009602:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009604:	4b36      	ldr	r3, [pc, #216]	@ (80096e0 <xTaskResumeAll+0x118>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d162      	bne.n	80096d2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800960c:	4b35      	ldr	r3, [pc, #212]	@ (80096e4 <xTaskResumeAll+0x11c>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d05e      	beq.n	80096d2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009614:	e02f      	b.n	8009676 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009616:	4b34      	ldr	r3, [pc, #208]	@ (80096e8 <xTaskResumeAll+0x120>)
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	3318      	adds	r3, #24
 8009622:	4618      	mov	r0, r3
 8009624:	f7ff f85a 	bl	80086dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3304      	adds	r3, #4
 800962c:	4618      	mov	r0, r3
 800962e:	f7ff f855 	bl	80086dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009636:	4b2d      	ldr	r3, [pc, #180]	@ (80096ec <xTaskResumeAll+0x124>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	429a      	cmp	r2, r3
 800963c:	d903      	bls.n	8009646 <xTaskResumeAll+0x7e>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009642:	4a2a      	ldr	r2, [pc, #168]	@ (80096ec <xTaskResumeAll+0x124>)
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800964a:	4613      	mov	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4a27      	ldr	r2, [pc, #156]	@ (80096f0 <xTaskResumeAll+0x128>)
 8009654:	441a      	add	r2, r3
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	3304      	adds	r3, #4
 800965a:	4619      	mov	r1, r3
 800965c:	4610      	mov	r0, r2
 800965e:	f7fe ffe0 	bl	8008622 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009666:	4b23      	ldr	r3, [pc, #140]	@ (80096f4 <xTaskResumeAll+0x12c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966c:	429a      	cmp	r2, r3
 800966e:	d302      	bcc.n	8009676 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009670:	4b21      	ldr	r3, [pc, #132]	@ (80096f8 <xTaskResumeAll+0x130>)
 8009672:	2201      	movs	r2, #1
 8009674:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009676:	4b1c      	ldr	r3, [pc, #112]	@ (80096e8 <xTaskResumeAll+0x120>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1cb      	bne.n	8009616 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009684:	f000 fb58 	bl	8009d38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009688:	4b1c      	ldr	r3, [pc, #112]	@ (80096fc <xTaskResumeAll+0x134>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d010      	beq.n	80096b6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009694:	f000 f846 	bl	8009724 <xTaskIncrementTick>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d002      	beq.n	80096a4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800969e:	4b16      	ldr	r3, [pc, #88]	@ (80096f8 <xTaskResumeAll+0x130>)
 80096a0:	2201      	movs	r2, #1
 80096a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1f1      	bne.n	8009694 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80096b0:	4b12      	ldr	r3, [pc, #72]	@ (80096fc <xTaskResumeAll+0x134>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80096b6:	4b10      	ldr	r3, [pc, #64]	@ (80096f8 <xTaskResumeAll+0x130>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d009      	beq.n	80096d2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096be:	2301      	movs	r3, #1
 80096c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096c2:	4b0f      	ldr	r3, [pc, #60]	@ (8009700 <xTaskResumeAll+0x138>)
 80096c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096d2:	f001 f8f3 	bl	800a8bc <vPortExitCritical>

	return xAlreadyYielded;
 80096d6:	68bb      	ldr	r3, [r7, #8]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	200016a8 	.word	0x200016a8
 80096e4:	20001680 	.word	0x20001680
 80096e8:	20001640 	.word	0x20001640
 80096ec:	20001688 	.word	0x20001688
 80096f0:	200011b0 	.word	0x200011b0
 80096f4:	200011ac 	.word	0x200011ac
 80096f8:	20001694 	.word	0x20001694
 80096fc:	20001690 	.word	0x20001690
 8009700:	e000ed04 	.word	0xe000ed04

08009704 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800970a:	4b05      	ldr	r3, [pc, #20]	@ (8009720 <xTaskGetTickCount+0x1c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009710:	687b      	ldr	r3, [r7, #4]
}
 8009712:	4618      	mov	r0, r3
 8009714:	370c      	adds	r7, #12
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	20001684 	.word	0x20001684

08009724 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800972a:	2300      	movs	r3, #0
 800972c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800972e:	4b4f      	ldr	r3, [pc, #316]	@ (800986c <xTaskIncrementTick+0x148>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	f040 8090 	bne.w	8009858 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009738:	4b4d      	ldr	r3, [pc, #308]	@ (8009870 <xTaskIncrementTick+0x14c>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	3301      	adds	r3, #1
 800973e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009740:	4a4b      	ldr	r2, [pc, #300]	@ (8009870 <xTaskIncrementTick+0x14c>)
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d121      	bne.n	8009790 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800974c:	4b49      	ldr	r3, [pc, #292]	@ (8009874 <xTaskIncrementTick+0x150>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00b      	beq.n	800976e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	603b      	str	r3, [r7, #0]
}
 8009768:	bf00      	nop
 800976a:	bf00      	nop
 800976c:	e7fd      	b.n	800976a <xTaskIncrementTick+0x46>
 800976e:	4b41      	ldr	r3, [pc, #260]	@ (8009874 <xTaskIncrementTick+0x150>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	60fb      	str	r3, [r7, #12]
 8009774:	4b40      	ldr	r3, [pc, #256]	@ (8009878 <xTaskIncrementTick+0x154>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a3e      	ldr	r2, [pc, #248]	@ (8009874 <xTaskIncrementTick+0x150>)
 800977a:	6013      	str	r3, [r2, #0]
 800977c:	4a3e      	ldr	r2, [pc, #248]	@ (8009878 <xTaskIncrementTick+0x154>)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6013      	str	r3, [r2, #0]
 8009782:	4b3e      	ldr	r3, [pc, #248]	@ (800987c <xTaskIncrementTick+0x158>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3301      	adds	r3, #1
 8009788:	4a3c      	ldr	r2, [pc, #240]	@ (800987c <xTaskIncrementTick+0x158>)
 800978a:	6013      	str	r3, [r2, #0]
 800978c:	f000 fad4 	bl	8009d38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009790:	4b3b      	ldr	r3, [pc, #236]	@ (8009880 <xTaskIncrementTick+0x15c>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	429a      	cmp	r2, r3
 8009798:	d349      	bcc.n	800982e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800979a:	4b36      	ldr	r3, [pc, #216]	@ (8009874 <xTaskIncrementTick+0x150>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d104      	bne.n	80097ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097a4:	4b36      	ldr	r3, [pc, #216]	@ (8009880 <xTaskIncrementTick+0x15c>)
 80097a6:	f04f 32ff 	mov.w	r2, #4294967295
 80097aa:	601a      	str	r2, [r3, #0]
					break;
 80097ac:	e03f      	b.n	800982e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ae:	4b31      	ldr	r3, [pc, #196]	@ (8009874 <xTaskIncrementTick+0x150>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d203      	bcs.n	80097ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097c6:	4a2e      	ldr	r2, [pc, #184]	@ (8009880 <xTaskIncrementTick+0x15c>)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097cc:	e02f      	b.n	800982e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	3304      	adds	r3, #4
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fe ff82 	bl	80086dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d004      	beq.n	80097ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	3318      	adds	r3, #24
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7fe ff79 	bl	80086dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ee:	4b25      	ldr	r3, [pc, #148]	@ (8009884 <xTaskIncrementTick+0x160>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d903      	bls.n	80097fe <xTaskIncrementTick+0xda>
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097fa:	4a22      	ldr	r2, [pc, #136]	@ (8009884 <xTaskIncrementTick+0x160>)
 80097fc:	6013      	str	r3, [r2, #0]
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009802:	4613      	mov	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4a1f      	ldr	r2, [pc, #124]	@ (8009888 <xTaskIncrementTick+0x164>)
 800980c:	441a      	add	r2, r3
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	3304      	adds	r3, #4
 8009812:	4619      	mov	r1, r3
 8009814:	4610      	mov	r0, r2
 8009816:	f7fe ff04 	bl	8008622 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800981e:	4b1b      	ldr	r3, [pc, #108]	@ (800988c <xTaskIncrementTick+0x168>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009824:	429a      	cmp	r2, r3
 8009826:	d3b8      	bcc.n	800979a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009828:	2301      	movs	r3, #1
 800982a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800982c:	e7b5      	b.n	800979a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800982e:	4b17      	ldr	r3, [pc, #92]	@ (800988c <xTaskIncrementTick+0x168>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009834:	4914      	ldr	r1, [pc, #80]	@ (8009888 <xTaskIncrementTick+0x164>)
 8009836:	4613      	mov	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	440b      	add	r3, r1
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d901      	bls.n	800984a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009846:	2301      	movs	r3, #1
 8009848:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800984a:	4b11      	ldr	r3, [pc, #68]	@ (8009890 <xTaskIncrementTick+0x16c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d007      	beq.n	8009862 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009852:	2301      	movs	r3, #1
 8009854:	617b      	str	r3, [r7, #20]
 8009856:	e004      	b.n	8009862 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009858:	4b0e      	ldr	r3, [pc, #56]	@ (8009894 <xTaskIncrementTick+0x170>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	3301      	adds	r3, #1
 800985e:	4a0d      	ldr	r2, [pc, #52]	@ (8009894 <xTaskIncrementTick+0x170>)
 8009860:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009862:	697b      	ldr	r3, [r7, #20]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	200016a8 	.word	0x200016a8
 8009870:	20001684 	.word	0x20001684
 8009874:	20001638 	.word	0x20001638
 8009878:	2000163c 	.word	0x2000163c
 800987c:	20001698 	.word	0x20001698
 8009880:	200016a0 	.word	0x200016a0
 8009884:	20001688 	.word	0x20001688
 8009888:	200011b0 	.word	0x200011b0
 800988c:	200011ac 	.word	0x200011ac
 8009890:	20001694 	.word	0x20001694
 8009894:	20001690 	.word	0x20001690

08009898 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800989e:	4b28      	ldr	r3, [pc, #160]	@ (8009940 <vTaskSwitchContext+0xa8>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098a6:	4b27      	ldr	r3, [pc, #156]	@ (8009944 <vTaskSwitchContext+0xac>)
 80098a8:	2201      	movs	r2, #1
 80098aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098ac:	e042      	b.n	8009934 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80098ae:	4b25      	ldr	r3, [pc, #148]	@ (8009944 <vTaskSwitchContext+0xac>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098b4:	4b24      	ldr	r3, [pc, #144]	@ (8009948 <vTaskSwitchContext+0xb0>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	60fb      	str	r3, [r7, #12]
 80098ba:	e011      	b.n	80098e0 <vTaskSwitchContext+0x48>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10b      	bne.n	80098da <vTaskSwitchContext+0x42>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	607b      	str	r3, [r7, #4]
}
 80098d4:	bf00      	nop
 80098d6:	bf00      	nop
 80098d8:	e7fd      	b.n	80098d6 <vTaskSwitchContext+0x3e>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	3b01      	subs	r3, #1
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	491a      	ldr	r1, [pc, #104]	@ (800994c <vTaskSwitchContext+0xb4>)
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	4613      	mov	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	440b      	add	r3, r1
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d0e3      	beq.n	80098bc <vTaskSwitchContext+0x24>
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	4613      	mov	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4413      	add	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4a13      	ldr	r2, [pc, #76]	@ (800994c <vTaskSwitchContext+0xb4>)
 8009900:	4413      	add	r3, r2
 8009902:	60bb      	str	r3, [r7, #8]
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	685a      	ldr	r2, [r3, #4]
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	605a      	str	r2, [r3, #4]
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	3308      	adds	r3, #8
 8009916:	429a      	cmp	r2, r3
 8009918:	d104      	bne.n	8009924 <vTaskSwitchContext+0x8c>
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	605a      	str	r2, [r3, #4]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	4a09      	ldr	r2, [pc, #36]	@ (8009950 <vTaskSwitchContext+0xb8>)
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	4a06      	ldr	r2, [pc, #24]	@ (8009948 <vTaskSwitchContext+0xb0>)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6013      	str	r3, [r2, #0]
}
 8009934:	bf00      	nop
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	200016a8 	.word	0x200016a8
 8009944:	20001694 	.word	0x20001694
 8009948:	20001688 	.word	0x20001688
 800994c:	200011b0 	.word	0x200011b0
 8009950:	200011ac 	.word	0x200011ac

08009954 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10b      	bne.n	800997c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	60fb      	str	r3, [r7, #12]
}
 8009976:	bf00      	nop
 8009978:	bf00      	nop
 800997a:	e7fd      	b.n	8009978 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800997c:	4b07      	ldr	r3, [pc, #28]	@ (800999c <vTaskPlaceOnEventList+0x48>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3318      	adds	r3, #24
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7fe fe70 	bl	800866a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800998a:	2101      	movs	r1, #1
 800998c:	6838      	ldr	r0, [r7, #0]
 800998e:	f000 fa81 	bl	8009e94 <prvAddCurrentTaskToDelayedList>
}
 8009992:	bf00      	nop
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	200011ac 	.word	0x200011ac

080099a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10b      	bne.n	80099ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	617b      	str	r3, [r7, #20]
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop
 80099c8:	e7fd      	b.n	80099c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099ca:	4b0a      	ldr	r3, [pc, #40]	@ (80099f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	3318      	adds	r3, #24
 80099d0:	4619      	mov	r1, r3
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f7fe fe25 	bl	8008622 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80099de:	f04f 33ff 	mov.w	r3, #4294967295
 80099e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80099e4:	6879      	ldr	r1, [r7, #4]
 80099e6:	68b8      	ldr	r0, [r7, #8]
 80099e8:	f000 fa54 	bl	8009e94 <prvAddCurrentTaskToDelayedList>
	}
 80099ec:	bf00      	nop
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	200011ac 	.word	0x200011ac

080099f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10b      	bne.n	8009a26 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	60fb      	str	r3, [r7, #12]
}
 8009a20:	bf00      	nop
 8009a22:	bf00      	nop
 8009a24:	e7fd      	b.n	8009a22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	3318      	adds	r3, #24
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fe fe56 	bl	80086dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a30:	4b1d      	ldr	r3, [pc, #116]	@ (8009aa8 <xTaskRemoveFromEventList+0xb0>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d11d      	bne.n	8009a74 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	3304      	adds	r3, #4
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7fe fe4d 	bl	80086dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a46:	4b19      	ldr	r3, [pc, #100]	@ (8009aac <xTaskRemoveFromEventList+0xb4>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d903      	bls.n	8009a56 <xTaskRemoveFromEventList+0x5e>
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a52:	4a16      	ldr	r2, [pc, #88]	@ (8009aac <xTaskRemoveFromEventList+0xb4>)
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4413      	add	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4a13      	ldr	r2, [pc, #76]	@ (8009ab0 <xTaskRemoveFromEventList+0xb8>)
 8009a64:	441a      	add	r2, r3
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	3304      	adds	r3, #4
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	f7fe fdd8 	bl	8008622 <vListInsertEnd>
 8009a72:	e005      	b.n	8009a80 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	3318      	adds	r3, #24
 8009a78:	4619      	mov	r1, r3
 8009a7a:	480e      	ldr	r0, [pc, #56]	@ (8009ab4 <xTaskRemoveFromEventList+0xbc>)
 8009a7c:	f7fe fdd1 	bl	8008622 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a84:	4b0c      	ldr	r3, [pc, #48]	@ (8009ab8 <xTaskRemoveFromEventList+0xc0>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d905      	bls.n	8009a9a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a92:	4b0a      	ldr	r3, [pc, #40]	@ (8009abc <xTaskRemoveFromEventList+0xc4>)
 8009a94:	2201      	movs	r2, #1
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	e001      	b.n	8009a9e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009a9e:	697b      	ldr	r3, [r7, #20]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3718      	adds	r7, #24
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	200016a8 	.word	0x200016a8
 8009aac:	20001688 	.word	0x20001688
 8009ab0:	200011b0 	.word	0x200011b0
 8009ab4:	20001640 	.word	0x20001640
 8009ab8:	200011ac 	.word	0x200011ac
 8009abc:	20001694 	.word	0x20001694

08009ac0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ac8:	4b06      	ldr	r3, [pc, #24]	@ (8009ae4 <vTaskInternalSetTimeOutState+0x24>)
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ad0:	4b05      	ldr	r3, [pc, #20]	@ (8009ae8 <vTaskInternalSetTimeOutState+0x28>)
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	605a      	str	r2, [r3, #4]
}
 8009ad8:	bf00      	nop
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr
 8009ae4:	20001698 	.word	0x20001698
 8009ae8:	20001684 	.word	0x20001684

08009aec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b088      	sub	sp, #32
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10b      	bne.n	8009b14 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	613b      	str	r3, [r7, #16]
}
 8009b0e:	bf00      	nop
 8009b10:	bf00      	nop
 8009b12:	e7fd      	b.n	8009b10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10b      	bne.n	8009b32 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	60fb      	str	r3, [r7, #12]
}
 8009b2c:	bf00      	nop
 8009b2e:	bf00      	nop
 8009b30:	e7fd      	b.n	8009b2e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009b32:	f000 fe91 	bl	800a858 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b36:	4b1d      	ldr	r3, [pc, #116]	@ (8009bac <xTaskCheckForTimeOut+0xc0>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	69ba      	ldr	r2, [r7, #24]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4e:	d102      	bne.n	8009b56 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b50:	2300      	movs	r3, #0
 8009b52:	61fb      	str	r3, [r7, #28]
 8009b54:	e023      	b.n	8009b9e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	4b15      	ldr	r3, [pc, #84]	@ (8009bb0 <xTaskCheckForTimeOut+0xc4>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d007      	beq.n	8009b72 <xTaskCheckForTimeOut+0x86>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	69ba      	ldr	r2, [r7, #24]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d302      	bcc.n	8009b72 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	61fb      	str	r3, [r7, #28]
 8009b70:	e015      	b.n	8009b9e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d20b      	bcs.n	8009b94 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	1ad2      	subs	r2, r2, r3
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f7ff ff99 	bl	8009ac0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	61fb      	str	r3, [r7, #28]
 8009b92:	e004      	b.n	8009b9e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	2200      	movs	r2, #0
 8009b98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b9e:	f000 fe8d 	bl	800a8bc <vPortExitCritical>

	return xReturn;
 8009ba2:	69fb      	ldr	r3, [r7, #28]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3720      	adds	r7, #32
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	20001684 	.word	0x20001684
 8009bb0:	20001698 	.word	0x20001698

08009bb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009bb8:	4b03      	ldr	r3, [pc, #12]	@ (8009bc8 <vTaskMissedYield+0x14>)
 8009bba:	2201      	movs	r2, #1
 8009bbc:	601a      	str	r2, [r3, #0]
}
 8009bbe:	bf00      	nop
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	20001694 	.word	0x20001694

08009bcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009bd4:	f000 f852 	bl	8009c7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bd8:	4b06      	ldr	r3, [pc, #24]	@ (8009bf4 <prvIdleTask+0x28>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d9f9      	bls.n	8009bd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009be0:	4b05      	ldr	r3, [pc, #20]	@ (8009bf8 <prvIdleTask+0x2c>)
 8009be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009be6:	601a      	str	r2, [r3, #0]
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009bf0:	e7f0      	b.n	8009bd4 <prvIdleTask+0x8>
 8009bf2:	bf00      	nop
 8009bf4:	200011b0 	.word	0x200011b0
 8009bf8:	e000ed04 	.word	0xe000ed04

08009bfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c02:	2300      	movs	r3, #0
 8009c04:	607b      	str	r3, [r7, #4]
 8009c06:	e00c      	b.n	8009c22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4a12      	ldr	r2, [pc, #72]	@ (8009c5c <prvInitialiseTaskLists+0x60>)
 8009c14:	4413      	add	r3, r2
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fe fcd6 	bl	80085c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	607b      	str	r3, [r7, #4]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b37      	cmp	r3, #55	@ 0x37
 8009c26:	d9ef      	bls.n	8009c08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c28:	480d      	ldr	r0, [pc, #52]	@ (8009c60 <prvInitialiseTaskLists+0x64>)
 8009c2a:	f7fe fccd 	bl	80085c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c2e:	480d      	ldr	r0, [pc, #52]	@ (8009c64 <prvInitialiseTaskLists+0x68>)
 8009c30:	f7fe fcca 	bl	80085c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c34:	480c      	ldr	r0, [pc, #48]	@ (8009c68 <prvInitialiseTaskLists+0x6c>)
 8009c36:	f7fe fcc7 	bl	80085c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c3a:	480c      	ldr	r0, [pc, #48]	@ (8009c6c <prvInitialiseTaskLists+0x70>)
 8009c3c:	f7fe fcc4 	bl	80085c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c40:	480b      	ldr	r0, [pc, #44]	@ (8009c70 <prvInitialiseTaskLists+0x74>)
 8009c42:	f7fe fcc1 	bl	80085c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c46:	4b0b      	ldr	r3, [pc, #44]	@ (8009c74 <prvInitialiseTaskLists+0x78>)
 8009c48:	4a05      	ldr	r2, [pc, #20]	@ (8009c60 <prvInitialiseTaskLists+0x64>)
 8009c4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c78 <prvInitialiseTaskLists+0x7c>)
 8009c4e:	4a05      	ldr	r2, [pc, #20]	@ (8009c64 <prvInitialiseTaskLists+0x68>)
 8009c50:	601a      	str	r2, [r3, #0]
}
 8009c52:	bf00      	nop
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	200011b0 	.word	0x200011b0
 8009c60:	20001610 	.word	0x20001610
 8009c64:	20001624 	.word	0x20001624
 8009c68:	20001640 	.word	0x20001640
 8009c6c:	20001654 	.word	0x20001654
 8009c70:	2000166c 	.word	0x2000166c
 8009c74:	20001638 	.word	0x20001638
 8009c78:	2000163c 	.word	0x2000163c

08009c7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c82:	e019      	b.n	8009cb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c84:	f000 fde8 	bl	800a858 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c88:	4b10      	ldr	r3, [pc, #64]	@ (8009ccc <prvCheckTasksWaitingTermination+0x50>)
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	3304      	adds	r3, #4
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7fe fd21 	bl	80086dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd0 <prvCheckTasksWaitingTermination+0x54>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	4a0b      	ldr	r2, [pc, #44]	@ (8009cd0 <prvCheckTasksWaitingTermination+0x54>)
 8009ca2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd4 <prvCheckTasksWaitingTermination+0x58>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	4a0a      	ldr	r2, [pc, #40]	@ (8009cd4 <prvCheckTasksWaitingTermination+0x58>)
 8009cac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009cae:	f000 fe05 	bl	800a8bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f810 	bl	8009cd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cb8:	4b06      	ldr	r3, [pc, #24]	@ (8009cd4 <prvCheckTasksWaitingTermination+0x58>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1e1      	bne.n	8009c84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009cc0:	bf00      	nop
 8009cc2:	bf00      	nop
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	20001654 	.word	0x20001654
 8009cd0:	20001680 	.word	0x20001680
 8009cd4:	20001668 	.word	0x20001668

08009cd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d108      	bne.n	8009cfc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 ffa2 	bl	800ac38 <vPortFree>
				vPortFree( pxTCB );
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 ff9f 	bl	800ac38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009cfa:	e019      	b.n	8009d30 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d103      	bne.n	8009d0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 ff96 	bl	800ac38 <vPortFree>
	}
 8009d0c:	e010      	b.n	8009d30 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d00b      	beq.n	8009d30 <prvDeleteTCB+0x58>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	60fb      	str	r3, [r7, #12]
}
 8009d2a:	bf00      	nop
 8009d2c:	bf00      	nop
 8009d2e:	e7fd      	b.n	8009d2c <prvDeleteTCB+0x54>
	}
 8009d30:	bf00      	nop
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8009d70 <prvResetNextTaskUnblockTime+0x38>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d104      	bne.n	8009d52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d48:	4b0a      	ldr	r3, [pc, #40]	@ (8009d74 <prvResetNextTaskUnblockTime+0x3c>)
 8009d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d50:	e008      	b.n	8009d64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d52:	4b07      	ldr	r3, [pc, #28]	@ (8009d70 <prvResetNextTaskUnblockTime+0x38>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	4a04      	ldr	r2, [pc, #16]	@ (8009d74 <prvResetNextTaskUnblockTime+0x3c>)
 8009d62:	6013      	str	r3, [r2, #0]
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr
 8009d70:	20001638 	.word	0x20001638
 8009d74:	200016a0 	.word	0x200016a0

08009d78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8009dac <xTaskGetSchedulerState+0x34>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d102      	bne.n	8009d8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d86:	2301      	movs	r3, #1
 8009d88:	607b      	str	r3, [r7, #4]
 8009d8a:	e008      	b.n	8009d9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d8c:	4b08      	ldr	r3, [pc, #32]	@ (8009db0 <xTaskGetSchedulerState+0x38>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d102      	bne.n	8009d9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d94:	2302      	movs	r3, #2
 8009d96:	607b      	str	r3, [r7, #4]
 8009d98:	e001      	b.n	8009d9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d9e:	687b      	ldr	r3, [r7, #4]
	}
 8009da0:	4618      	mov	r0, r3
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr
 8009dac:	2000168c 	.word	0x2000168c
 8009db0:	200016a8 	.word	0x200016a8

08009db4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d058      	beq.n	8009e7c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009dca:	4b2f      	ldr	r3, [pc, #188]	@ (8009e88 <xTaskPriorityDisinherit+0xd4>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	693a      	ldr	r2, [r7, #16]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d00b      	beq.n	8009dec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd8:	f383 8811 	msr	BASEPRI, r3
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	60fb      	str	r3, [r7, #12]
}
 8009de6:	bf00      	nop
 8009de8:	bf00      	nop
 8009dea:	e7fd      	b.n	8009de8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10b      	bne.n	8009e0c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	60bb      	str	r3, [r7, #8]
}
 8009e06:	bf00      	nop
 8009e08:	bf00      	nop
 8009e0a:	e7fd      	b.n	8009e08 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e10:	1e5a      	subs	r2, r3, #1
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d02c      	beq.n	8009e7c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d128      	bne.n	8009e7c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fe fc54 	bl	80086dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e40:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8009e8c <xTaskPriorityDisinherit+0xd8>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d903      	bls.n	8009e5c <xTaskPriorityDisinherit+0xa8>
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e58:	4a0c      	ldr	r2, [pc, #48]	@ (8009e8c <xTaskPriorityDisinherit+0xd8>)
 8009e5a:	6013      	str	r3, [r2, #0]
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e60:	4613      	mov	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	4a09      	ldr	r2, [pc, #36]	@ (8009e90 <xTaskPriorityDisinherit+0xdc>)
 8009e6a:	441a      	add	r2, r3
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	3304      	adds	r3, #4
 8009e70:	4619      	mov	r1, r3
 8009e72:	4610      	mov	r0, r2
 8009e74:	f7fe fbd5 	bl	8008622 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e7c:	697b      	ldr	r3, [r7, #20]
	}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3718      	adds	r7, #24
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	200011ac 	.word	0x200011ac
 8009e8c:	20001688 	.word	0x20001688
 8009e90:	200011b0 	.word	0x200011b0

08009e94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e9e:	4b21      	ldr	r3, [pc, #132]	@ (8009f24 <prvAddCurrentTaskToDelayedList+0x90>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ea4:	4b20      	ldr	r3, [pc, #128]	@ (8009f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	3304      	adds	r3, #4
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7fe fc16 	bl	80086dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb6:	d10a      	bne.n	8009ece <prvAddCurrentTaskToDelayedList+0x3a>
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d007      	beq.n	8009ece <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8009f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3304      	adds	r3, #4
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	4819      	ldr	r0, [pc, #100]	@ (8009f2c <prvAddCurrentTaskToDelayedList+0x98>)
 8009ec8:	f7fe fbab 	bl	8008622 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ecc:	e026      	b.n	8009f1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ed6:	4b14      	ldr	r3, [pc, #80]	@ (8009f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d209      	bcs.n	8009efa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ee6:	4b12      	ldr	r3, [pc, #72]	@ (8009f30 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	4b0f      	ldr	r3, [pc, #60]	@ (8009f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	3304      	adds	r3, #4
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	f7fe fbb9 	bl	800866a <vListInsert>
}
 8009ef8:	e010      	b.n	8009f1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009efa:	4b0e      	ldr	r3, [pc, #56]	@ (8009f34 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	4b0a      	ldr	r3, [pc, #40]	@ (8009f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3304      	adds	r3, #4
 8009f04:	4619      	mov	r1, r3
 8009f06:	4610      	mov	r0, r2
 8009f08:	f7fe fbaf 	bl	800866a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d202      	bcs.n	8009f1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f16:	4a08      	ldr	r2, [pc, #32]	@ (8009f38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	6013      	str	r3, [r2, #0]
}
 8009f1c:	bf00      	nop
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	20001684 	.word	0x20001684
 8009f28:	200011ac 	.word	0x200011ac
 8009f2c:	2000166c 	.word	0x2000166c
 8009f30:	2000163c 	.word	0x2000163c
 8009f34:	20001638 	.word	0x20001638
 8009f38:	200016a0 	.word	0x200016a0

08009f3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08a      	sub	sp, #40	@ 0x28
 8009f40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009f46:	f000 fb13 	bl	800a570 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8009fc0 <xTimerCreateTimerTask+0x84>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d021      	beq.n	8009f96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009f52:	2300      	movs	r3, #0
 8009f54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f56:	2300      	movs	r3, #0
 8009f58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f5a:	1d3a      	adds	r2, r7, #4
 8009f5c:	f107 0108 	add.w	r1, r7, #8
 8009f60:	f107 030c 	add.w	r3, r7, #12
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fe fb15 	bl	8008594 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009f6a:	6879      	ldr	r1, [r7, #4]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	9202      	str	r2, [sp, #8]
 8009f72:	9301      	str	r3, [sp, #4]
 8009f74:	2302      	movs	r3, #2
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	2300      	movs	r3, #0
 8009f7a:	460a      	mov	r2, r1
 8009f7c:	4911      	ldr	r1, [pc, #68]	@ (8009fc4 <xTimerCreateTimerTask+0x88>)
 8009f7e:	4812      	ldr	r0, [pc, #72]	@ (8009fc8 <xTimerCreateTimerTask+0x8c>)
 8009f80:	f7ff f8d0 	bl	8009124 <xTaskCreateStatic>
 8009f84:	4603      	mov	r3, r0
 8009f86:	4a11      	ldr	r2, [pc, #68]	@ (8009fcc <xTimerCreateTimerTask+0x90>)
 8009f88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009f8a:	4b10      	ldr	r3, [pc, #64]	@ (8009fcc <xTimerCreateTimerTask+0x90>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009f92:	2301      	movs	r3, #1
 8009f94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10b      	bne.n	8009fb4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	613b      	str	r3, [r7, #16]
}
 8009fae:	bf00      	nop
 8009fb0:	bf00      	nop
 8009fb2:	e7fd      	b.n	8009fb0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009fb4:	697b      	ldr	r3, [r7, #20]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3718      	adds	r7, #24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	200016dc 	.word	0x200016dc
 8009fc4:	0800dbdc 	.word	0x0800dbdc
 8009fc8:	0800a109 	.word	0x0800a109
 8009fcc:	200016e0 	.word	0x200016e0

08009fd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b08a      	sub	sp, #40	@ 0x28
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
 8009fdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10b      	bne.n	800a000 <xTimerGenericCommand+0x30>
	__asm volatile
 8009fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	623b      	str	r3, [r7, #32]
}
 8009ffa:	bf00      	nop
 8009ffc:	bf00      	nop
 8009ffe:	e7fd      	b.n	8009ffc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a000:	4b19      	ldr	r3, [pc, #100]	@ (800a068 <xTimerGenericCommand+0x98>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d02a      	beq.n	800a05e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2b05      	cmp	r3, #5
 800a018:	dc18      	bgt.n	800a04c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a01a:	f7ff fead 	bl	8009d78 <xTaskGetSchedulerState>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b02      	cmp	r3, #2
 800a022:	d109      	bne.n	800a038 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a024:	4b10      	ldr	r3, [pc, #64]	@ (800a068 <xTimerGenericCommand+0x98>)
 800a026:	6818      	ldr	r0, [r3, #0]
 800a028:	f107 0110 	add.w	r1, r7, #16
 800a02c:	2300      	movs	r3, #0
 800a02e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a030:	f7fe fc88 	bl	8008944 <xQueueGenericSend>
 800a034:	6278      	str	r0, [r7, #36]	@ 0x24
 800a036:	e012      	b.n	800a05e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a038:	4b0b      	ldr	r3, [pc, #44]	@ (800a068 <xTimerGenericCommand+0x98>)
 800a03a:	6818      	ldr	r0, [r3, #0]
 800a03c:	f107 0110 	add.w	r1, r7, #16
 800a040:	2300      	movs	r3, #0
 800a042:	2200      	movs	r2, #0
 800a044:	f7fe fc7e 	bl	8008944 <xQueueGenericSend>
 800a048:	6278      	str	r0, [r7, #36]	@ 0x24
 800a04a:	e008      	b.n	800a05e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a04c:	4b06      	ldr	r3, [pc, #24]	@ (800a068 <xTimerGenericCommand+0x98>)
 800a04e:	6818      	ldr	r0, [r3, #0]
 800a050:	f107 0110 	add.w	r1, r7, #16
 800a054:	2300      	movs	r3, #0
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	f7fe fd76 	bl	8008b48 <xQueueGenericSendFromISR>
 800a05c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a060:	4618      	mov	r0, r3
 800a062:	3728      	adds	r7, #40	@ 0x28
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	200016dc 	.word	0x200016dc

0800a06c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b088      	sub	sp, #32
 800a070:	af02      	add	r7, sp, #8
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a076:	4b23      	ldr	r3, [pc, #140]	@ (800a104 <prvProcessExpiredTimer+0x98>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	3304      	adds	r3, #4
 800a084:	4618      	mov	r0, r3
 800a086:	f7fe fb29 	bl	80086dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a090:	f003 0304 	and.w	r3, r3, #4
 800a094:	2b00      	cmp	r3, #0
 800a096:	d023      	beq.n	800a0e0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	699a      	ldr	r2, [r3, #24]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	18d1      	adds	r1, r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	6978      	ldr	r0, [r7, #20]
 800a0a6:	f000 f8d5 	bl	800a254 <prvInsertTimerInActiveList>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d020      	beq.n	800a0f2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	6978      	ldr	r0, [r7, #20]
 800a0bc:	f7ff ff88 	bl	8009fd0 <xTimerGenericCommand>
 800a0c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d114      	bne.n	800a0f2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0cc:	f383 8811 	msr	BASEPRI, r3
 800a0d0:	f3bf 8f6f 	isb	sy
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	60fb      	str	r3, [r7, #12]
}
 800a0da:	bf00      	nop
 800a0dc:	bf00      	nop
 800a0de:	e7fd      	b.n	800a0dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0e6:	f023 0301 	bic.w	r3, r3, #1
 800a0ea:	b2da      	uxtb	r2, r3
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	6a1b      	ldr	r3, [r3, #32]
 800a0f6:	6978      	ldr	r0, [r7, #20]
 800a0f8:	4798      	blx	r3
}
 800a0fa:	bf00      	nop
 800a0fc:	3718      	adds	r7, #24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	200016d4 	.word	0x200016d4

0800a108 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a110:	f107 0308 	add.w	r3, r7, #8
 800a114:	4618      	mov	r0, r3
 800a116:	f000 f859 	bl	800a1cc <prvGetNextExpireTime>
 800a11a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	4619      	mov	r1, r3
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f000 f805 	bl	800a130 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a126:	f000 f8d7 	bl	800a2d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a12a:	bf00      	nop
 800a12c:	e7f0      	b.n	800a110 <prvTimerTask+0x8>
	...

0800a130 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a13a:	f7ff fa37 	bl	80095ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a13e:	f107 0308 	add.w	r3, r7, #8
 800a142:	4618      	mov	r0, r3
 800a144:	f000 f866 	bl	800a214 <prvSampleTimeNow>
 800a148:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d130      	bne.n	800a1b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10a      	bne.n	800a16c <prvProcessTimerOrBlockTask+0x3c>
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d806      	bhi.n	800a16c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a15e:	f7ff fa33 	bl	80095c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a162:	68f9      	ldr	r1, [r7, #12]
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7ff ff81 	bl	800a06c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a16a:	e024      	b.n	800a1b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d008      	beq.n	800a184 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a172:	4b13      	ldr	r3, [pc, #76]	@ (800a1c0 <prvProcessTimerOrBlockTask+0x90>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <prvProcessTimerOrBlockTask+0x50>
 800a17c:	2301      	movs	r3, #1
 800a17e:	e000      	b.n	800a182 <prvProcessTimerOrBlockTask+0x52>
 800a180:	2300      	movs	r3, #0
 800a182:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a184:	4b0f      	ldr	r3, [pc, #60]	@ (800a1c4 <prvProcessTimerOrBlockTask+0x94>)
 800a186:	6818      	ldr	r0, [r3, #0]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	683a      	ldr	r2, [r7, #0]
 800a190:	4619      	mov	r1, r3
 800a192:	f7fe ff93 	bl	80090bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a196:	f7ff fa17 	bl	80095c8 <xTaskResumeAll>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10a      	bne.n	800a1b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a1a0:	4b09      	ldr	r3, [pc, #36]	@ (800a1c8 <prvProcessTimerOrBlockTask+0x98>)
 800a1a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1a6:	601a      	str	r2, [r3, #0]
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	f3bf 8f6f 	isb	sy
}
 800a1b0:	e001      	b.n	800a1b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a1b2:	f7ff fa09 	bl	80095c8 <xTaskResumeAll>
}
 800a1b6:	bf00      	nop
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	200016d8 	.word	0x200016d8
 800a1c4:	200016dc 	.word	0x200016dc
 800a1c8:	e000ed04 	.word	0xe000ed04

0800a1cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a1d4:	4b0e      	ldr	r3, [pc, #56]	@ (800a210 <prvGetNextExpireTime+0x44>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d101      	bne.n	800a1e2 <prvGetNextExpireTime+0x16>
 800a1de:	2201      	movs	r2, #1
 800a1e0:	e000      	b.n	800a1e4 <prvGetNextExpireTime+0x18>
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d105      	bne.n	800a1fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a1f0:	4b07      	ldr	r3, [pc, #28]	@ (800a210 <prvGetNextExpireTime+0x44>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	e001      	b.n	800a200 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a200:	68fb      	ldr	r3, [r7, #12]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3714      	adds	r7, #20
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	200016d4 	.word	0x200016d4

0800a214 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a21c:	f7ff fa72 	bl	8009704 <xTaskGetTickCount>
 800a220:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a222:	4b0b      	ldr	r3, [pc, #44]	@ (800a250 <prvSampleTimeNow+0x3c>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d205      	bcs.n	800a238 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a22c:	f000 f93a 	bl	800a4a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	e002      	b.n	800a23e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a23e:	4a04      	ldr	r2, [pc, #16]	@ (800a250 <prvSampleTimeNow+0x3c>)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a244:	68fb      	ldr	r3, [r7, #12]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	200016e4 	.word	0x200016e4

0800a254 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a262:	2300      	movs	r3, #0
 800a264:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	429a      	cmp	r2, r3
 800a278:	d812      	bhi.n	800a2a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	1ad2      	subs	r2, r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	699b      	ldr	r3, [r3, #24]
 800a284:	429a      	cmp	r2, r3
 800a286:	d302      	bcc.n	800a28e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a288:	2301      	movs	r3, #1
 800a28a:	617b      	str	r3, [r7, #20]
 800a28c:	e01b      	b.n	800a2c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a28e:	4b10      	ldr	r3, [pc, #64]	@ (800a2d0 <prvInsertTimerInActiveList+0x7c>)
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	3304      	adds	r3, #4
 800a296:	4619      	mov	r1, r3
 800a298:	4610      	mov	r0, r2
 800a29a:	f7fe f9e6 	bl	800866a <vListInsert>
 800a29e:	e012      	b.n	800a2c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d206      	bcs.n	800a2b6 <prvInsertTimerInActiveList+0x62>
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d302      	bcc.n	800a2b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	617b      	str	r3, [r7, #20]
 800a2b4:	e007      	b.n	800a2c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2b6:	4b07      	ldr	r3, [pc, #28]	@ (800a2d4 <prvInsertTimerInActiveList+0x80>)
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3304      	adds	r3, #4
 800a2be:	4619      	mov	r1, r3
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	f7fe f9d2 	bl	800866a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a2c6:	697b      	ldr	r3, [r7, #20]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3718      	adds	r7, #24
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	200016d8 	.word	0x200016d8
 800a2d4:	200016d4 	.word	0x200016d4

0800a2d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08e      	sub	sp, #56	@ 0x38
 800a2dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a2de:	e0ce      	b.n	800a47e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	da19      	bge.n	800a31a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a2e6:	1d3b      	adds	r3, r7, #4
 800a2e8:	3304      	adds	r3, #4
 800a2ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10b      	bne.n	800a30a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	61fb      	str	r3, [r7, #28]
}
 800a304:	bf00      	nop
 800a306:	bf00      	nop
 800a308:	e7fd      	b.n	800a306 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a310:	6850      	ldr	r0, [r2, #4]
 800a312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a314:	6892      	ldr	r2, [r2, #8]
 800a316:	4611      	mov	r1, r2
 800a318:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f2c0 80ae 	blt.w	800a47e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d004      	beq.n	800a338 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a330:	3304      	adds	r3, #4
 800a332:	4618      	mov	r0, r3
 800a334:	f7fe f9d2 	bl	80086dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a338:	463b      	mov	r3, r7
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7ff ff6a 	bl	800a214 <prvSampleTimeNow>
 800a340:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2b09      	cmp	r3, #9
 800a346:	f200 8097 	bhi.w	800a478 <prvProcessReceivedCommands+0x1a0>
 800a34a:	a201      	add	r2, pc, #4	@ (adr r2, 800a350 <prvProcessReceivedCommands+0x78>)
 800a34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a350:	0800a379 	.word	0x0800a379
 800a354:	0800a379 	.word	0x0800a379
 800a358:	0800a379 	.word	0x0800a379
 800a35c:	0800a3ef 	.word	0x0800a3ef
 800a360:	0800a403 	.word	0x0800a403
 800a364:	0800a44f 	.word	0x0800a44f
 800a368:	0800a379 	.word	0x0800a379
 800a36c:	0800a379 	.word	0x0800a379
 800a370:	0800a3ef 	.word	0x0800a3ef
 800a374:	0800a403 	.word	0x0800a403
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a37e:	f043 0301 	orr.w	r3, r3, #1
 800a382:	b2da      	uxtb	r2, r3
 800a384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a386:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a38a:	68ba      	ldr	r2, [r7, #8]
 800a38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	18d1      	adds	r1, r2, r3
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a398:	f7ff ff5c 	bl	800a254 <prvInsertTimerInActiveList>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d06c      	beq.n	800a47c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3b0:	f003 0304 	and.w	r3, r3, #4
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d061      	beq.n	800a47c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	441a      	add	r2, r3
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3ca:	f7ff fe01 	bl	8009fd0 <xTimerGenericCommand>
 800a3ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a3d0:	6a3b      	ldr	r3, [r7, #32]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d152      	bne.n	800a47c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3da:	f383 8811 	msr	BASEPRI, r3
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	61bb      	str	r3, [r7, #24]
}
 800a3e8:	bf00      	nop
 800a3ea:	bf00      	nop
 800a3ec:	e7fd      	b.n	800a3ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3f4:	f023 0301 	bic.w	r3, r3, #1
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a400:	e03d      	b.n	800a47e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a404:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a408:	f043 0301 	orr.w	r3, r3, #1
 800a40c:	b2da      	uxtb	r2, r3
 800a40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a410:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a418:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a41c:	699b      	ldr	r3, [r3, #24]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d10b      	bne.n	800a43a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	617b      	str	r3, [r7, #20]
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop
 800a438:	e7fd      	b.n	800a436 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a43c:	699a      	ldr	r2, [r3, #24]
 800a43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a440:	18d1      	adds	r1, r2, r3
 800a442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a446:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a448:	f7ff ff04 	bl	800a254 <prvInsertTimerInActiveList>
					break;
 800a44c:	e017      	b.n	800a47e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a450:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a454:	f003 0302 	and.w	r3, r3, #2
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d103      	bne.n	800a464 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a45c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a45e:	f000 fbeb 	bl	800ac38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a462:	e00c      	b.n	800a47e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a466:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a46a:	f023 0301 	bic.w	r3, r3, #1
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a472:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a476:	e002      	b.n	800a47e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a478:	bf00      	nop
 800a47a:	e000      	b.n	800a47e <prvProcessReceivedCommands+0x1a6>
					break;
 800a47c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a47e:	4b08      	ldr	r3, [pc, #32]	@ (800a4a0 <prvProcessReceivedCommands+0x1c8>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	1d39      	adds	r1, r7, #4
 800a484:	2200      	movs	r2, #0
 800a486:	4618      	mov	r0, r3
 800a488:	f7fe fbfc 	bl	8008c84 <xQueueReceive>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f47f af26 	bne.w	800a2e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a494:	bf00      	nop
 800a496:	bf00      	nop
 800a498:	3730      	adds	r7, #48	@ 0x30
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	200016dc 	.word	0x200016dc

0800a4a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b088      	sub	sp, #32
 800a4a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4aa:	e049      	b.n	800a540 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4ac:	4b2e      	ldr	r3, [pc, #184]	@ (800a568 <prvSwitchTimerLists+0xc4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4b6:	4b2c      	ldr	r3, [pc, #176]	@ (800a568 <prvSwitchTimerLists+0xc4>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	3304      	adds	r3, #4
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7fe f909 	bl	80086dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6a1b      	ldr	r3, [r3, #32]
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4d8:	f003 0304 	and.w	r3, r3, #4
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d02f      	beq.n	800a540 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	699b      	ldr	r3, [r3, #24]
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d90e      	bls.n	800a510 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	68ba      	ldr	r2, [r7, #8]
 800a4f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4fe:	4b1a      	ldr	r3, [pc, #104]	@ (800a568 <prvSwitchTimerLists+0xc4>)
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	3304      	adds	r3, #4
 800a506:	4619      	mov	r1, r3
 800a508:	4610      	mov	r0, r2
 800a50a:	f7fe f8ae 	bl	800866a <vListInsert>
 800a50e:	e017      	b.n	800a540 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a510:	2300      	movs	r3, #0
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	2300      	movs	r3, #0
 800a516:	693a      	ldr	r2, [r7, #16]
 800a518:	2100      	movs	r1, #0
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f7ff fd58 	bl	8009fd0 <xTimerGenericCommand>
 800a520:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10b      	bne.n	800a540 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52c:	f383 8811 	msr	BASEPRI, r3
 800a530:	f3bf 8f6f 	isb	sy
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	603b      	str	r3, [r7, #0]
}
 800a53a:	bf00      	nop
 800a53c:	bf00      	nop
 800a53e:	e7fd      	b.n	800a53c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a540:	4b09      	ldr	r3, [pc, #36]	@ (800a568 <prvSwitchTimerLists+0xc4>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1b0      	bne.n	800a4ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a54a:	4b07      	ldr	r3, [pc, #28]	@ (800a568 <prvSwitchTimerLists+0xc4>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a550:	4b06      	ldr	r3, [pc, #24]	@ (800a56c <prvSwitchTimerLists+0xc8>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a04      	ldr	r2, [pc, #16]	@ (800a568 <prvSwitchTimerLists+0xc4>)
 800a556:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a558:	4a04      	ldr	r2, [pc, #16]	@ (800a56c <prvSwitchTimerLists+0xc8>)
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	6013      	str	r3, [r2, #0]
}
 800a55e:	bf00      	nop
 800a560:	3718      	adds	r7, #24
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	200016d4 	.word	0x200016d4
 800a56c:	200016d8 	.word	0x200016d8

0800a570 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a576:	f000 f96f 	bl	800a858 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a57a:	4b15      	ldr	r3, [pc, #84]	@ (800a5d0 <prvCheckForValidListAndQueue+0x60>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d120      	bne.n	800a5c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a582:	4814      	ldr	r0, [pc, #80]	@ (800a5d4 <prvCheckForValidListAndQueue+0x64>)
 800a584:	f7fe f820 	bl	80085c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a588:	4813      	ldr	r0, [pc, #76]	@ (800a5d8 <prvCheckForValidListAndQueue+0x68>)
 800a58a:	f7fe f81d 	bl	80085c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a58e:	4b13      	ldr	r3, [pc, #76]	@ (800a5dc <prvCheckForValidListAndQueue+0x6c>)
 800a590:	4a10      	ldr	r2, [pc, #64]	@ (800a5d4 <prvCheckForValidListAndQueue+0x64>)
 800a592:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a594:	4b12      	ldr	r3, [pc, #72]	@ (800a5e0 <prvCheckForValidListAndQueue+0x70>)
 800a596:	4a10      	ldr	r2, [pc, #64]	@ (800a5d8 <prvCheckForValidListAndQueue+0x68>)
 800a598:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a59a:	2300      	movs	r3, #0
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	4b11      	ldr	r3, [pc, #68]	@ (800a5e4 <prvCheckForValidListAndQueue+0x74>)
 800a5a0:	4a11      	ldr	r2, [pc, #68]	@ (800a5e8 <prvCheckForValidListAndQueue+0x78>)
 800a5a2:	2110      	movs	r1, #16
 800a5a4:	200a      	movs	r0, #10
 800a5a6:	f7fe f92d 	bl	8008804 <xQueueGenericCreateStatic>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	4a08      	ldr	r2, [pc, #32]	@ (800a5d0 <prvCheckForValidListAndQueue+0x60>)
 800a5ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a5b0:	4b07      	ldr	r3, [pc, #28]	@ (800a5d0 <prvCheckForValidListAndQueue+0x60>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d005      	beq.n	800a5c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a5b8:	4b05      	ldr	r3, [pc, #20]	@ (800a5d0 <prvCheckForValidListAndQueue+0x60>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	490b      	ldr	r1, [pc, #44]	@ (800a5ec <prvCheckForValidListAndQueue+0x7c>)
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fe fd52 	bl	8009068 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a5c4:	f000 f97a 	bl	800a8bc <vPortExitCritical>
}
 800a5c8:	bf00      	nop
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	200016dc 	.word	0x200016dc
 800a5d4:	200016ac 	.word	0x200016ac
 800a5d8:	200016c0 	.word	0x200016c0
 800a5dc:	200016d4 	.word	0x200016d4
 800a5e0:	200016d8 	.word	0x200016d8
 800a5e4:	20001788 	.word	0x20001788
 800a5e8:	200016e8 	.word	0x200016e8
 800a5ec:	0800dbe4 	.word	0x0800dbe4

0800a5f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b085      	sub	sp, #20
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	3b04      	subs	r3, #4
 800a600:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a608:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	3b04      	subs	r3, #4
 800a60e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	f023 0201 	bic.w	r2, r3, #1
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	3b04      	subs	r3, #4
 800a61e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a620:	4a0c      	ldr	r2, [pc, #48]	@ (800a654 <pxPortInitialiseStack+0x64>)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	3b14      	subs	r3, #20
 800a62a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	3b04      	subs	r3, #4
 800a636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f06f 0202 	mvn.w	r2, #2
 800a63e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	3b20      	subs	r3, #32
 800a644:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a646:	68fb      	ldr	r3, [r7, #12]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3714      	adds	r7, #20
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr
 800a654:	0800a659 	.word	0x0800a659

0800a658 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a65e:	2300      	movs	r3, #0
 800a660:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a662:	4b13      	ldr	r3, [pc, #76]	@ (800a6b0 <prvTaskExitError+0x58>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a66a:	d00b      	beq.n	800a684 <prvTaskExitError+0x2c>
	__asm volatile
 800a66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a670:	f383 8811 	msr	BASEPRI, r3
 800a674:	f3bf 8f6f 	isb	sy
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	60fb      	str	r3, [r7, #12]
}
 800a67e:	bf00      	nop
 800a680:	bf00      	nop
 800a682:	e7fd      	b.n	800a680 <prvTaskExitError+0x28>
	__asm volatile
 800a684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	60bb      	str	r3, [r7, #8]
}
 800a696:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a698:	bf00      	nop
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d0fc      	beq.n	800a69a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a6a0:	bf00      	nop
 800a6a2:	bf00      	nop
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	2000000c 	.word	0x2000000c
	...

0800a6c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a6c0:	4b07      	ldr	r3, [pc, #28]	@ (800a6e0 <pxCurrentTCBConst2>)
 800a6c2:	6819      	ldr	r1, [r3, #0]
 800a6c4:	6808      	ldr	r0, [r1, #0]
 800a6c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ca:	f380 8809 	msr	PSP, r0
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f04f 0000 	mov.w	r0, #0
 800a6d6:	f380 8811 	msr	BASEPRI, r0
 800a6da:	4770      	bx	lr
 800a6dc:	f3af 8000 	nop.w

0800a6e0 <pxCurrentTCBConst2>:
 800a6e0:	200011ac 	.word	0x200011ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a6e4:	bf00      	nop
 800a6e6:	bf00      	nop

0800a6e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a6e8:	4808      	ldr	r0, [pc, #32]	@ (800a70c <prvPortStartFirstTask+0x24>)
 800a6ea:	6800      	ldr	r0, [r0, #0]
 800a6ec:	6800      	ldr	r0, [r0, #0]
 800a6ee:	f380 8808 	msr	MSP, r0
 800a6f2:	f04f 0000 	mov.w	r0, #0
 800a6f6:	f380 8814 	msr	CONTROL, r0
 800a6fa:	b662      	cpsie	i
 800a6fc:	b661      	cpsie	f
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	df00      	svc	0
 800a708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a70a:	bf00      	nop
 800a70c:	e000ed08 	.word	0xe000ed08

0800a710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a716:	4b47      	ldr	r3, [pc, #284]	@ (800a834 <xPortStartScheduler+0x124>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a47      	ldr	r2, [pc, #284]	@ (800a838 <xPortStartScheduler+0x128>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d10b      	bne.n	800a738 <xPortStartScheduler+0x28>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	613b      	str	r3, [r7, #16]
}
 800a732:	bf00      	nop
 800a734:	bf00      	nop
 800a736:	e7fd      	b.n	800a734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a738:	4b3e      	ldr	r3, [pc, #248]	@ (800a834 <xPortStartScheduler+0x124>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a3f      	ldr	r2, [pc, #252]	@ (800a83c <xPortStartScheduler+0x12c>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d10b      	bne.n	800a75a <xPortStartScheduler+0x4a>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	60fb      	str	r3, [r7, #12]
}
 800a754:	bf00      	nop
 800a756:	bf00      	nop
 800a758:	e7fd      	b.n	800a756 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a75a:	4b39      	ldr	r3, [pc, #228]	@ (800a840 <xPortStartScheduler+0x130>)
 800a75c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	b2db      	uxtb	r3, r3
 800a764:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	22ff      	movs	r2, #255	@ 0xff
 800a76a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	b2db      	uxtb	r3, r3
 800a772:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a774:	78fb      	ldrb	r3, [r7, #3]
 800a776:	b2db      	uxtb	r3, r3
 800a778:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	4b31      	ldr	r3, [pc, #196]	@ (800a844 <xPortStartScheduler+0x134>)
 800a780:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a782:	4b31      	ldr	r3, [pc, #196]	@ (800a848 <xPortStartScheduler+0x138>)
 800a784:	2207      	movs	r2, #7
 800a786:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a788:	e009      	b.n	800a79e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a78a:	4b2f      	ldr	r3, [pc, #188]	@ (800a848 <xPortStartScheduler+0x138>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	3b01      	subs	r3, #1
 800a790:	4a2d      	ldr	r2, [pc, #180]	@ (800a848 <xPortStartScheduler+0x138>)
 800a792:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a794:	78fb      	ldrb	r3, [r7, #3]
 800a796:	b2db      	uxtb	r3, r3
 800a798:	005b      	lsls	r3, r3, #1
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a79e:	78fb      	ldrb	r3, [r7, #3]
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7a6:	2b80      	cmp	r3, #128	@ 0x80
 800a7a8:	d0ef      	beq.n	800a78a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a7aa:	4b27      	ldr	r3, [pc, #156]	@ (800a848 <xPortStartScheduler+0x138>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f1c3 0307 	rsb	r3, r3, #7
 800a7b2:	2b04      	cmp	r3, #4
 800a7b4:	d00b      	beq.n	800a7ce <xPortStartScheduler+0xbe>
	__asm volatile
 800a7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ba:	f383 8811 	msr	BASEPRI, r3
 800a7be:	f3bf 8f6f 	isb	sy
 800a7c2:	f3bf 8f4f 	dsb	sy
 800a7c6:	60bb      	str	r3, [r7, #8]
}
 800a7c8:	bf00      	nop
 800a7ca:	bf00      	nop
 800a7cc:	e7fd      	b.n	800a7ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a7ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a848 <xPortStartScheduler+0x138>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	021b      	lsls	r3, r3, #8
 800a7d4:	4a1c      	ldr	r2, [pc, #112]	@ (800a848 <xPortStartScheduler+0x138>)
 800a7d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a7d8:	4b1b      	ldr	r3, [pc, #108]	@ (800a848 <xPortStartScheduler+0x138>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a7e0:	4a19      	ldr	r2, [pc, #100]	@ (800a848 <xPortStartScheduler+0x138>)
 800a7e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	b2da      	uxtb	r2, r3
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a7ec:	4b17      	ldr	r3, [pc, #92]	@ (800a84c <xPortStartScheduler+0x13c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a16      	ldr	r2, [pc, #88]	@ (800a84c <xPortStartScheduler+0x13c>)
 800a7f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a7f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a7f8:	4b14      	ldr	r3, [pc, #80]	@ (800a84c <xPortStartScheduler+0x13c>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a13      	ldr	r2, [pc, #76]	@ (800a84c <xPortStartScheduler+0x13c>)
 800a7fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a802:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a804:	f000 f8da 	bl	800a9bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a808:	4b11      	ldr	r3, [pc, #68]	@ (800a850 <xPortStartScheduler+0x140>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a80e:	f000 f8f9 	bl	800aa04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a812:	4b10      	ldr	r3, [pc, #64]	@ (800a854 <xPortStartScheduler+0x144>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a0f      	ldr	r2, [pc, #60]	@ (800a854 <xPortStartScheduler+0x144>)
 800a818:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a81c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a81e:	f7ff ff63 	bl	800a6e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a822:	f7ff f839 	bl	8009898 <vTaskSwitchContext>
	prvTaskExitError();
 800a826:	f7ff ff17 	bl	800a658 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3718      	adds	r7, #24
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	e000ed00 	.word	0xe000ed00
 800a838:	410fc271 	.word	0x410fc271
 800a83c:	410fc270 	.word	0x410fc270
 800a840:	e000e400 	.word	0xe000e400
 800a844:	200017d8 	.word	0x200017d8
 800a848:	200017dc 	.word	0x200017dc
 800a84c:	e000ed20 	.word	0xe000ed20
 800a850:	2000000c 	.word	0x2000000c
 800a854:	e000ef34 	.word	0xe000ef34

0800a858 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
	__asm volatile
 800a85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a862:	f383 8811 	msr	BASEPRI, r3
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	f3bf 8f4f 	dsb	sy
 800a86e:	607b      	str	r3, [r7, #4]
}
 800a870:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a872:	4b10      	ldr	r3, [pc, #64]	@ (800a8b4 <vPortEnterCritical+0x5c>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	3301      	adds	r3, #1
 800a878:	4a0e      	ldr	r2, [pc, #56]	@ (800a8b4 <vPortEnterCritical+0x5c>)
 800a87a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a87c:	4b0d      	ldr	r3, [pc, #52]	@ (800a8b4 <vPortEnterCritical+0x5c>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d110      	bne.n	800a8a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a884:	4b0c      	ldr	r3, [pc, #48]	@ (800a8b8 <vPortEnterCritical+0x60>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00b      	beq.n	800a8a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	603b      	str	r3, [r7, #0]
}
 800a8a0:	bf00      	nop
 800a8a2:	bf00      	nop
 800a8a4:	e7fd      	b.n	800a8a2 <vPortEnterCritical+0x4a>
	}
}
 800a8a6:	bf00      	nop
 800a8a8:	370c      	adds	r7, #12
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	2000000c 	.word	0x2000000c
 800a8b8:	e000ed04 	.word	0xe000ed04

0800a8bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a8c2:	4b12      	ldr	r3, [pc, #72]	@ (800a90c <vPortExitCritical+0x50>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10b      	bne.n	800a8e2 <vPortExitCritical+0x26>
	__asm volatile
 800a8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ce:	f383 8811 	msr	BASEPRI, r3
 800a8d2:	f3bf 8f6f 	isb	sy
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	607b      	str	r3, [r7, #4]
}
 800a8dc:	bf00      	nop
 800a8de:	bf00      	nop
 800a8e0:	e7fd      	b.n	800a8de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a8e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a90c <vPortExitCritical+0x50>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	4a08      	ldr	r2, [pc, #32]	@ (800a90c <vPortExitCritical+0x50>)
 800a8ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a8ec:	4b07      	ldr	r3, [pc, #28]	@ (800a90c <vPortExitCritical+0x50>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d105      	bne.n	800a900 <vPortExitCritical+0x44>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	f383 8811 	msr	BASEPRI, r3
}
 800a8fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr
 800a90c:	2000000c 	.word	0x2000000c

0800a910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a910:	f3ef 8009 	mrs	r0, PSP
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	4b15      	ldr	r3, [pc, #84]	@ (800a970 <pxCurrentTCBConst>)
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	f01e 0f10 	tst.w	lr, #16
 800a920:	bf08      	it	eq
 800a922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92a:	6010      	str	r0, [r2, #0]
 800a92c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a930:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a934:	f380 8811 	msr	BASEPRI, r0
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f7fe ffaa 	bl	8009898 <vTaskSwitchContext>
 800a944:	f04f 0000 	mov.w	r0, #0
 800a948:	f380 8811 	msr	BASEPRI, r0
 800a94c:	bc09      	pop	{r0, r3}
 800a94e:	6819      	ldr	r1, [r3, #0]
 800a950:	6808      	ldr	r0, [r1, #0]
 800a952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a956:	f01e 0f10 	tst.w	lr, #16
 800a95a:	bf08      	it	eq
 800a95c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a960:	f380 8809 	msr	PSP, r0
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	f3af 8000 	nop.w

0800a970 <pxCurrentTCBConst>:
 800a970:	200011ac 	.word	0x200011ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a974:	bf00      	nop
 800a976:	bf00      	nop

0800a978 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
	__asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	607b      	str	r3, [r7, #4]
}
 800a990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a992:	f7fe fec7 	bl	8009724 <xTaskIncrementTick>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d003      	beq.n	800a9a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a99c:	4b06      	ldr	r3, [pc, #24]	@ (800a9b8 <xPortSysTickHandler+0x40>)
 800a99e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9a2:	601a      	str	r2, [r3, #0]
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	f383 8811 	msr	BASEPRI, r3
}
 800a9ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a9b0:	bf00      	nop
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	e000ed04 	.word	0xe000ed04

0800a9bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a9bc:	b480      	push	{r7}
 800a9be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a9c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a9f0 <vPortSetupTimerInterrupt+0x34>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a9c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a9f4 <vPortSetupTimerInterrupt+0x38>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a9cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a9f8 <vPortSetupTimerInterrupt+0x3c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a0a      	ldr	r2, [pc, #40]	@ (800a9fc <vPortSetupTimerInterrupt+0x40>)
 800a9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9d6:	099b      	lsrs	r3, r3, #6
 800a9d8:	4a09      	ldr	r2, [pc, #36]	@ (800aa00 <vPortSetupTimerInterrupt+0x44>)
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a9de:	4b04      	ldr	r3, [pc, #16]	@ (800a9f0 <vPortSetupTimerInterrupt+0x34>)
 800a9e0:	2207      	movs	r2, #7
 800a9e2:	601a      	str	r2, [r3, #0]
}
 800a9e4:	bf00      	nop
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	e000e010 	.word	0xe000e010
 800a9f4:	e000e018 	.word	0xe000e018
 800a9f8:	20000000 	.word	0x20000000
 800a9fc:	10624dd3 	.word	0x10624dd3
 800aa00:	e000e014 	.word	0xe000e014

0800aa04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800aa14 <vPortEnableVFP+0x10>
 800aa08:	6801      	ldr	r1, [r0, #0]
 800aa0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aa0e:	6001      	str	r1, [r0, #0]
 800aa10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa12:	bf00      	nop
 800aa14:	e000ed88 	.word	0xe000ed88

0800aa18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa1e:	f3ef 8305 	mrs	r3, IPSR
 800aa22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2b0f      	cmp	r3, #15
 800aa28:	d915      	bls.n	800aa56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa2a:	4a18      	ldr	r2, [pc, #96]	@ (800aa8c <vPortValidateInterruptPriority+0x74>)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	4413      	add	r3, r2
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa34:	4b16      	ldr	r3, [pc, #88]	@ (800aa90 <vPortValidateInterruptPriority+0x78>)
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	7afa      	ldrb	r2, [r7, #11]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d20b      	bcs.n	800aa56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	607b      	str	r3, [r7, #4]
}
 800aa50:	bf00      	nop
 800aa52:	bf00      	nop
 800aa54:	e7fd      	b.n	800aa52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa56:	4b0f      	ldr	r3, [pc, #60]	@ (800aa94 <vPortValidateInterruptPriority+0x7c>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800aa5e:	4b0e      	ldr	r3, [pc, #56]	@ (800aa98 <vPortValidateInterruptPriority+0x80>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d90b      	bls.n	800aa7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800aa66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa6a:	f383 8811 	msr	BASEPRI, r3
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	603b      	str	r3, [r7, #0]
}
 800aa78:	bf00      	nop
 800aa7a:	bf00      	nop
 800aa7c:	e7fd      	b.n	800aa7a <vPortValidateInterruptPriority+0x62>
	}
 800aa7e:	bf00      	nop
 800aa80:	3714      	adds	r7, #20
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	e000e3f0 	.word	0xe000e3f0
 800aa90:	200017d8 	.word	0x200017d8
 800aa94:	e000ed0c 	.word	0xe000ed0c
 800aa98:	200017dc 	.word	0x200017dc

0800aa9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b08a      	sub	sp, #40	@ 0x28
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aaa8:	f7fe fd80 	bl	80095ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aaac:	4b5c      	ldr	r3, [pc, #368]	@ (800ac20 <pvPortMalloc+0x184>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aab4:	f000 f924 	bl	800ad00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aab8:	4b5a      	ldr	r3, [pc, #360]	@ (800ac24 <pvPortMalloc+0x188>)
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4013      	ands	r3, r2
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f040 8095 	bne.w	800abf0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d01e      	beq.n	800ab0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800aacc:	2208      	movs	r2, #8
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4413      	add	r3, r2
 800aad2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f003 0307 	and.w	r3, r3, #7
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d015      	beq.n	800ab0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f023 0307 	bic.w	r3, r3, #7
 800aae4:	3308      	adds	r3, #8
 800aae6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f003 0307 	and.w	r3, r3, #7
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00b      	beq.n	800ab0a <pvPortMalloc+0x6e>
	__asm volatile
 800aaf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	617b      	str	r3, [r7, #20]
}
 800ab04:	bf00      	nop
 800ab06:	bf00      	nop
 800ab08:	e7fd      	b.n	800ab06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d06f      	beq.n	800abf0 <pvPortMalloc+0x154>
 800ab10:	4b45      	ldr	r3, [pc, #276]	@ (800ac28 <pvPortMalloc+0x18c>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d86a      	bhi.n	800abf0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab1a:	4b44      	ldr	r3, [pc, #272]	@ (800ac2c <pvPortMalloc+0x190>)
 800ab1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab1e:	4b43      	ldr	r3, [pc, #268]	@ (800ac2c <pvPortMalloc+0x190>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab24:	e004      	b.n	800ab30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ab26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d903      	bls.n	800ab42 <pvPortMalloc+0xa6>
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1f1      	bne.n	800ab26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab42:	4b37      	ldr	r3, [pc, #220]	@ (800ac20 <pvPortMalloc+0x184>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d051      	beq.n	800abf0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab4c:	6a3b      	ldr	r3, [r7, #32]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2208      	movs	r2, #8
 800ab52:	4413      	add	r3, r2
 800ab54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	6a3b      	ldr	r3, [r7, #32]
 800ab5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab60:	685a      	ldr	r2, [r3, #4]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	1ad2      	subs	r2, r2, r3
 800ab66:	2308      	movs	r3, #8
 800ab68:	005b      	lsls	r3, r3, #1
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d920      	bls.n	800abb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4413      	add	r3, r2
 800ab74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	f003 0307 	and.w	r3, r3, #7
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00b      	beq.n	800ab98 <pvPortMalloc+0xfc>
	__asm volatile
 800ab80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	613b      	str	r3, [r7, #16]
}
 800ab92:	bf00      	nop
 800ab94:	bf00      	nop
 800ab96:	e7fd      	b.n	800ab94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	1ad2      	subs	r2, r2, r3
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800abaa:	69b8      	ldr	r0, [r7, #24]
 800abac:	f000 f90a 	bl	800adc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800abb0:	4b1d      	ldr	r3, [pc, #116]	@ (800ac28 <pvPortMalloc+0x18c>)
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	1ad3      	subs	r3, r2, r3
 800abba:	4a1b      	ldr	r2, [pc, #108]	@ (800ac28 <pvPortMalloc+0x18c>)
 800abbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800abbe:	4b1a      	ldr	r3, [pc, #104]	@ (800ac28 <pvPortMalloc+0x18c>)
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	4b1b      	ldr	r3, [pc, #108]	@ (800ac30 <pvPortMalloc+0x194>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d203      	bcs.n	800abd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800abca:	4b17      	ldr	r3, [pc, #92]	@ (800ac28 <pvPortMalloc+0x18c>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a18      	ldr	r2, [pc, #96]	@ (800ac30 <pvPortMalloc+0x194>)
 800abd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800abd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd4:	685a      	ldr	r2, [r3, #4]
 800abd6:	4b13      	ldr	r3, [pc, #76]	@ (800ac24 <pvPortMalloc+0x188>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	431a      	orrs	r2, r3
 800abdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800abe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe2:	2200      	movs	r2, #0
 800abe4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800abe6:	4b13      	ldr	r3, [pc, #76]	@ (800ac34 <pvPortMalloc+0x198>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	3301      	adds	r3, #1
 800abec:	4a11      	ldr	r2, [pc, #68]	@ (800ac34 <pvPortMalloc+0x198>)
 800abee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800abf0:	f7fe fcea 	bl	80095c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	f003 0307 	and.w	r3, r3, #7
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00b      	beq.n	800ac16 <pvPortMalloc+0x17a>
	__asm volatile
 800abfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac02:	f383 8811 	msr	BASEPRI, r3
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	60fb      	str	r3, [r7, #12]
}
 800ac10:	bf00      	nop
 800ac12:	bf00      	nop
 800ac14:	e7fd      	b.n	800ac12 <pvPortMalloc+0x176>
	return pvReturn;
 800ac16:	69fb      	ldr	r3, [r7, #28]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3728      	adds	r7, #40	@ 0x28
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	200023a0 	.word	0x200023a0
 800ac24:	200023b4 	.word	0x200023b4
 800ac28:	200023a4 	.word	0x200023a4
 800ac2c:	20002398 	.word	0x20002398
 800ac30:	200023a8 	.word	0x200023a8
 800ac34:	200023ac 	.word	0x200023ac

0800ac38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d04f      	beq.n	800acea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac4a:	2308      	movs	r3, #8
 800ac4c:	425b      	negs	r3, r3
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	4413      	add	r3, r2
 800ac52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	4b25      	ldr	r3, [pc, #148]	@ (800acf4 <vPortFree+0xbc>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4013      	ands	r3, r2
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d10b      	bne.n	800ac7e <vPortFree+0x46>
	__asm volatile
 800ac66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac6a:	f383 8811 	msr	BASEPRI, r3
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	60fb      	str	r3, [r7, #12]
}
 800ac78:	bf00      	nop
 800ac7a:	bf00      	nop
 800ac7c:	e7fd      	b.n	800ac7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d00b      	beq.n	800ac9e <vPortFree+0x66>
	__asm volatile
 800ac86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac8a:	f383 8811 	msr	BASEPRI, r3
 800ac8e:	f3bf 8f6f 	isb	sy
 800ac92:	f3bf 8f4f 	dsb	sy
 800ac96:	60bb      	str	r3, [r7, #8]
}
 800ac98:	bf00      	nop
 800ac9a:	bf00      	nop
 800ac9c:	e7fd      	b.n	800ac9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	685a      	ldr	r2, [r3, #4]
 800aca2:	4b14      	ldr	r3, [pc, #80]	@ (800acf4 <vPortFree+0xbc>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4013      	ands	r3, r2
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d01e      	beq.n	800acea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d11a      	bne.n	800acea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	685a      	ldr	r2, [r3, #4]
 800acb8:	4b0e      	ldr	r3, [pc, #56]	@ (800acf4 <vPortFree+0xbc>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	43db      	mvns	r3, r3
 800acbe:	401a      	ands	r2, r3
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800acc4:	f7fe fc72 	bl	80095ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	685a      	ldr	r2, [r3, #4]
 800accc:	4b0a      	ldr	r3, [pc, #40]	@ (800acf8 <vPortFree+0xc0>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4413      	add	r3, r2
 800acd2:	4a09      	ldr	r2, [pc, #36]	@ (800acf8 <vPortFree+0xc0>)
 800acd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800acd6:	6938      	ldr	r0, [r7, #16]
 800acd8:	f000 f874 	bl	800adc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800acdc:	4b07      	ldr	r3, [pc, #28]	@ (800acfc <vPortFree+0xc4>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	3301      	adds	r3, #1
 800ace2:	4a06      	ldr	r2, [pc, #24]	@ (800acfc <vPortFree+0xc4>)
 800ace4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ace6:	f7fe fc6f 	bl	80095c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800acea:	bf00      	nop
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	200023b4 	.word	0x200023b4
 800acf8:	200023a4 	.word	0x200023a4
 800acfc:	200023b0 	.word	0x200023b0

0800ad00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad06:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800ad0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad0c:	4b27      	ldr	r3, [pc, #156]	@ (800adac <prvHeapInit+0xac>)
 800ad0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f003 0307 	and.w	r3, r3, #7
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d00c      	beq.n	800ad34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	3307      	adds	r3, #7
 800ad1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f023 0307 	bic.w	r3, r3, #7
 800ad26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad28:	68ba      	ldr	r2, [r7, #8]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	4a1f      	ldr	r2, [pc, #124]	@ (800adac <prvHeapInit+0xac>)
 800ad30:	4413      	add	r3, r2
 800ad32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad38:	4a1d      	ldr	r2, [pc, #116]	@ (800adb0 <prvHeapInit+0xb0>)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad3e:	4b1c      	ldr	r3, [pc, #112]	@ (800adb0 <prvHeapInit+0xb0>)
 800ad40:	2200      	movs	r2, #0
 800ad42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	4413      	add	r3, r2
 800ad4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad4c:	2208      	movs	r2, #8
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	1a9b      	subs	r3, r3, r2
 800ad52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f023 0307 	bic.w	r3, r3, #7
 800ad5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	4a15      	ldr	r2, [pc, #84]	@ (800adb4 <prvHeapInit+0xb4>)
 800ad60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ad62:	4b14      	ldr	r3, [pc, #80]	@ (800adb4 <prvHeapInit+0xb4>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2200      	movs	r2, #0
 800ad68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad6a:	4b12      	ldr	r3, [pc, #72]	@ (800adb4 <prvHeapInit+0xb4>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	1ad2      	subs	r2, r2, r3
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad80:	4b0c      	ldr	r3, [pc, #48]	@ (800adb4 <prvHeapInit+0xb4>)
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	4a0a      	ldr	r2, [pc, #40]	@ (800adb8 <prvHeapInit+0xb8>)
 800ad8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	4a09      	ldr	r2, [pc, #36]	@ (800adbc <prvHeapInit+0xbc>)
 800ad96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad98:	4b09      	ldr	r3, [pc, #36]	@ (800adc0 <prvHeapInit+0xc0>)
 800ad9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ad9e:	601a      	str	r2, [r3, #0]
}
 800ada0:	bf00      	nop
 800ada2:	3714      	adds	r7, #20
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	200017e0 	.word	0x200017e0
 800adb0:	20002398 	.word	0x20002398
 800adb4:	200023a0 	.word	0x200023a0
 800adb8:	200023a8 	.word	0x200023a8
 800adbc:	200023a4 	.word	0x200023a4
 800adc0:	200023b4 	.word	0x200023b4

0800adc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800adcc:	4b28      	ldr	r3, [pc, #160]	@ (800ae70 <prvInsertBlockIntoFreeList+0xac>)
 800adce:	60fb      	str	r3, [r7, #12]
 800add0:	e002      	b.n	800add8 <prvInsertBlockIntoFreeList+0x14>
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	60fb      	str	r3, [r7, #12]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d8f7      	bhi.n	800add2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	4413      	add	r3, r2
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d108      	bne.n	800ae06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	685a      	ldr	r2, [r3, #4]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	441a      	add	r2, r3
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	68ba      	ldr	r2, [r7, #8]
 800ae10:	441a      	add	r2, r3
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d118      	bne.n	800ae4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681a      	ldr	r2, [r3, #0]
 800ae1e:	4b15      	ldr	r3, [pc, #84]	@ (800ae74 <prvInsertBlockIntoFreeList+0xb0>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d00d      	beq.n	800ae42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	685a      	ldr	r2, [r3, #4]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	441a      	add	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	601a      	str	r2, [r3, #0]
 800ae40:	e008      	b.n	800ae54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae42:	4b0c      	ldr	r3, [pc, #48]	@ (800ae74 <prvInsertBlockIntoFreeList+0xb0>)
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	601a      	str	r2, [r3, #0]
 800ae4a:	e003      	b.n	800ae54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d002      	beq.n	800ae62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae62:	bf00      	nop
 800ae64:	3714      	adds	r7, #20
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	20002398 	.word	0x20002398
 800ae74:	200023a0 	.word	0x200023a0

0800ae78 <__cvt>:
 800ae78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae7c:	ec57 6b10 	vmov	r6, r7, d0
 800ae80:	2f00      	cmp	r7, #0
 800ae82:	460c      	mov	r4, r1
 800ae84:	4619      	mov	r1, r3
 800ae86:	463b      	mov	r3, r7
 800ae88:	bfbb      	ittet	lt
 800ae8a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ae8e:	461f      	movlt	r7, r3
 800ae90:	2300      	movge	r3, #0
 800ae92:	232d      	movlt	r3, #45	@ 0x2d
 800ae94:	700b      	strb	r3, [r1, #0]
 800ae96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae98:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ae9c:	4691      	mov	r9, r2
 800ae9e:	f023 0820 	bic.w	r8, r3, #32
 800aea2:	bfbc      	itt	lt
 800aea4:	4632      	movlt	r2, r6
 800aea6:	4616      	movlt	r6, r2
 800aea8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aeac:	d005      	beq.n	800aeba <__cvt+0x42>
 800aeae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800aeb2:	d100      	bne.n	800aeb6 <__cvt+0x3e>
 800aeb4:	3401      	adds	r4, #1
 800aeb6:	2102      	movs	r1, #2
 800aeb8:	e000      	b.n	800aebc <__cvt+0x44>
 800aeba:	2103      	movs	r1, #3
 800aebc:	ab03      	add	r3, sp, #12
 800aebe:	9301      	str	r3, [sp, #4]
 800aec0:	ab02      	add	r3, sp, #8
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	ec47 6b10 	vmov	d0, r6, r7
 800aec8:	4653      	mov	r3, sl
 800aeca:	4622      	mov	r2, r4
 800aecc:	f000 fe80 	bl	800bbd0 <_dtoa_r>
 800aed0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aed4:	4605      	mov	r5, r0
 800aed6:	d119      	bne.n	800af0c <__cvt+0x94>
 800aed8:	f019 0f01 	tst.w	r9, #1
 800aedc:	d00e      	beq.n	800aefc <__cvt+0x84>
 800aede:	eb00 0904 	add.w	r9, r0, r4
 800aee2:	2200      	movs	r2, #0
 800aee4:	2300      	movs	r3, #0
 800aee6:	4630      	mov	r0, r6
 800aee8:	4639      	mov	r1, r7
 800aeea:	f7f5 fded 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeee:	b108      	cbz	r0, 800aef4 <__cvt+0x7c>
 800aef0:	f8cd 900c 	str.w	r9, [sp, #12]
 800aef4:	2230      	movs	r2, #48	@ 0x30
 800aef6:	9b03      	ldr	r3, [sp, #12]
 800aef8:	454b      	cmp	r3, r9
 800aefa:	d31e      	bcc.n	800af3a <__cvt+0xc2>
 800aefc:	9b03      	ldr	r3, [sp, #12]
 800aefe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af00:	1b5b      	subs	r3, r3, r5
 800af02:	4628      	mov	r0, r5
 800af04:	6013      	str	r3, [r2, #0]
 800af06:	b004      	add	sp, #16
 800af08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800af10:	eb00 0904 	add.w	r9, r0, r4
 800af14:	d1e5      	bne.n	800aee2 <__cvt+0x6a>
 800af16:	7803      	ldrb	r3, [r0, #0]
 800af18:	2b30      	cmp	r3, #48	@ 0x30
 800af1a:	d10a      	bne.n	800af32 <__cvt+0xba>
 800af1c:	2200      	movs	r2, #0
 800af1e:	2300      	movs	r3, #0
 800af20:	4630      	mov	r0, r6
 800af22:	4639      	mov	r1, r7
 800af24:	f7f5 fdd0 	bl	8000ac8 <__aeabi_dcmpeq>
 800af28:	b918      	cbnz	r0, 800af32 <__cvt+0xba>
 800af2a:	f1c4 0401 	rsb	r4, r4, #1
 800af2e:	f8ca 4000 	str.w	r4, [sl]
 800af32:	f8da 3000 	ldr.w	r3, [sl]
 800af36:	4499      	add	r9, r3
 800af38:	e7d3      	b.n	800aee2 <__cvt+0x6a>
 800af3a:	1c59      	adds	r1, r3, #1
 800af3c:	9103      	str	r1, [sp, #12]
 800af3e:	701a      	strb	r2, [r3, #0]
 800af40:	e7d9      	b.n	800aef6 <__cvt+0x7e>

0800af42 <__exponent>:
 800af42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af44:	2900      	cmp	r1, #0
 800af46:	bfba      	itte	lt
 800af48:	4249      	neglt	r1, r1
 800af4a:	232d      	movlt	r3, #45	@ 0x2d
 800af4c:	232b      	movge	r3, #43	@ 0x2b
 800af4e:	2909      	cmp	r1, #9
 800af50:	7002      	strb	r2, [r0, #0]
 800af52:	7043      	strb	r3, [r0, #1]
 800af54:	dd29      	ble.n	800afaa <__exponent+0x68>
 800af56:	f10d 0307 	add.w	r3, sp, #7
 800af5a:	461d      	mov	r5, r3
 800af5c:	270a      	movs	r7, #10
 800af5e:	461a      	mov	r2, r3
 800af60:	fbb1 f6f7 	udiv	r6, r1, r7
 800af64:	fb07 1416 	mls	r4, r7, r6, r1
 800af68:	3430      	adds	r4, #48	@ 0x30
 800af6a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800af6e:	460c      	mov	r4, r1
 800af70:	2c63      	cmp	r4, #99	@ 0x63
 800af72:	f103 33ff 	add.w	r3, r3, #4294967295
 800af76:	4631      	mov	r1, r6
 800af78:	dcf1      	bgt.n	800af5e <__exponent+0x1c>
 800af7a:	3130      	adds	r1, #48	@ 0x30
 800af7c:	1e94      	subs	r4, r2, #2
 800af7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800af82:	1c41      	adds	r1, r0, #1
 800af84:	4623      	mov	r3, r4
 800af86:	42ab      	cmp	r3, r5
 800af88:	d30a      	bcc.n	800afa0 <__exponent+0x5e>
 800af8a:	f10d 0309 	add.w	r3, sp, #9
 800af8e:	1a9b      	subs	r3, r3, r2
 800af90:	42ac      	cmp	r4, r5
 800af92:	bf88      	it	hi
 800af94:	2300      	movhi	r3, #0
 800af96:	3302      	adds	r3, #2
 800af98:	4403      	add	r3, r0
 800af9a:	1a18      	subs	r0, r3, r0
 800af9c:	b003      	add	sp, #12
 800af9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afa0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800afa4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800afa8:	e7ed      	b.n	800af86 <__exponent+0x44>
 800afaa:	2330      	movs	r3, #48	@ 0x30
 800afac:	3130      	adds	r1, #48	@ 0x30
 800afae:	7083      	strb	r3, [r0, #2]
 800afb0:	70c1      	strb	r1, [r0, #3]
 800afb2:	1d03      	adds	r3, r0, #4
 800afb4:	e7f1      	b.n	800af9a <__exponent+0x58>
	...

0800afb8 <_printf_float>:
 800afb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afbc:	b08d      	sub	sp, #52	@ 0x34
 800afbe:	460c      	mov	r4, r1
 800afc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800afc4:	4616      	mov	r6, r2
 800afc6:	461f      	mov	r7, r3
 800afc8:	4605      	mov	r5, r0
 800afca:	f000 fcf3 	bl	800b9b4 <_localeconv_r>
 800afce:	6803      	ldr	r3, [r0, #0]
 800afd0:	9304      	str	r3, [sp, #16]
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7f5 f94c 	bl	8000270 <strlen>
 800afd8:	2300      	movs	r3, #0
 800afda:	930a      	str	r3, [sp, #40]	@ 0x28
 800afdc:	f8d8 3000 	ldr.w	r3, [r8]
 800afe0:	9005      	str	r0, [sp, #20]
 800afe2:	3307      	adds	r3, #7
 800afe4:	f023 0307 	bic.w	r3, r3, #7
 800afe8:	f103 0208 	add.w	r2, r3, #8
 800afec:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aff0:	f8d4 b000 	ldr.w	fp, [r4]
 800aff4:	f8c8 2000 	str.w	r2, [r8]
 800aff8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800affc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b000:	9307      	str	r3, [sp, #28]
 800b002:	f8cd 8018 	str.w	r8, [sp, #24]
 800b006:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b00a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b00e:	4b9c      	ldr	r3, [pc, #624]	@ (800b280 <_printf_float+0x2c8>)
 800b010:	f04f 32ff 	mov.w	r2, #4294967295
 800b014:	f7f5 fd8a 	bl	8000b2c <__aeabi_dcmpun>
 800b018:	bb70      	cbnz	r0, 800b078 <_printf_float+0xc0>
 800b01a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b01e:	4b98      	ldr	r3, [pc, #608]	@ (800b280 <_printf_float+0x2c8>)
 800b020:	f04f 32ff 	mov.w	r2, #4294967295
 800b024:	f7f5 fd64 	bl	8000af0 <__aeabi_dcmple>
 800b028:	bb30      	cbnz	r0, 800b078 <_printf_float+0xc0>
 800b02a:	2200      	movs	r2, #0
 800b02c:	2300      	movs	r3, #0
 800b02e:	4640      	mov	r0, r8
 800b030:	4649      	mov	r1, r9
 800b032:	f7f5 fd53 	bl	8000adc <__aeabi_dcmplt>
 800b036:	b110      	cbz	r0, 800b03e <_printf_float+0x86>
 800b038:	232d      	movs	r3, #45	@ 0x2d
 800b03a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b03e:	4a91      	ldr	r2, [pc, #580]	@ (800b284 <_printf_float+0x2cc>)
 800b040:	4b91      	ldr	r3, [pc, #580]	@ (800b288 <_printf_float+0x2d0>)
 800b042:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b046:	bf94      	ite	ls
 800b048:	4690      	movls	r8, r2
 800b04a:	4698      	movhi	r8, r3
 800b04c:	2303      	movs	r3, #3
 800b04e:	6123      	str	r3, [r4, #16]
 800b050:	f02b 0304 	bic.w	r3, fp, #4
 800b054:	6023      	str	r3, [r4, #0]
 800b056:	f04f 0900 	mov.w	r9, #0
 800b05a:	9700      	str	r7, [sp, #0]
 800b05c:	4633      	mov	r3, r6
 800b05e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b060:	4621      	mov	r1, r4
 800b062:	4628      	mov	r0, r5
 800b064:	f000 f9d2 	bl	800b40c <_printf_common>
 800b068:	3001      	adds	r0, #1
 800b06a:	f040 808d 	bne.w	800b188 <_printf_float+0x1d0>
 800b06e:	f04f 30ff 	mov.w	r0, #4294967295
 800b072:	b00d      	add	sp, #52	@ 0x34
 800b074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b078:	4642      	mov	r2, r8
 800b07a:	464b      	mov	r3, r9
 800b07c:	4640      	mov	r0, r8
 800b07e:	4649      	mov	r1, r9
 800b080:	f7f5 fd54 	bl	8000b2c <__aeabi_dcmpun>
 800b084:	b140      	cbz	r0, 800b098 <_printf_float+0xe0>
 800b086:	464b      	mov	r3, r9
 800b088:	2b00      	cmp	r3, #0
 800b08a:	bfbc      	itt	lt
 800b08c:	232d      	movlt	r3, #45	@ 0x2d
 800b08e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b092:	4a7e      	ldr	r2, [pc, #504]	@ (800b28c <_printf_float+0x2d4>)
 800b094:	4b7e      	ldr	r3, [pc, #504]	@ (800b290 <_printf_float+0x2d8>)
 800b096:	e7d4      	b.n	800b042 <_printf_float+0x8a>
 800b098:	6863      	ldr	r3, [r4, #4]
 800b09a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b09e:	9206      	str	r2, [sp, #24]
 800b0a0:	1c5a      	adds	r2, r3, #1
 800b0a2:	d13b      	bne.n	800b11c <_printf_float+0x164>
 800b0a4:	2306      	movs	r3, #6
 800b0a6:	6063      	str	r3, [r4, #4]
 800b0a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	6022      	str	r2, [r4, #0]
 800b0b0:	9303      	str	r3, [sp, #12]
 800b0b2:	ab0a      	add	r3, sp, #40	@ 0x28
 800b0b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b0b8:	ab09      	add	r3, sp, #36	@ 0x24
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	6861      	ldr	r1, [r4, #4]
 800b0be:	ec49 8b10 	vmov	d0, r8, r9
 800b0c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	f7ff fed6 	bl	800ae78 <__cvt>
 800b0cc:	9b06      	ldr	r3, [sp, #24]
 800b0ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b0d0:	2b47      	cmp	r3, #71	@ 0x47
 800b0d2:	4680      	mov	r8, r0
 800b0d4:	d129      	bne.n	800b12a <_printf_float+0x172>
 800b0d6:	1cc8      	adds	r0, r1, #3
 800b0d8:	db02      	blt.n	800b0e0 <_printf_float+0x128>
 800b0da:	6863      	ldr	r3, [r4, #4]
 800b0dc:	4299      	cmp	r1, r3
 800b0de:	dd41      	ble.n	800b164 <_printf_float+0x1ac>
 800b0e0:	f1aa 0a02 	sub.w	sl, sl, #2
 800b0e4:	fa5f fa8a 	uxtb.w	sl, sl
 800b0e8:	3901      	subs	r1, #1
 800b0ea:	4652      	mov	r2, sl
 800b0ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b0f0:	9109      	str	r1, [sp, #36]	@ 0x24
 800b0f2:	f7ff ff26 	bl	800af42 <__exponent>
 800b0f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0f8:	1813      	adds	r3, r2, r0
 800b0fa:	2a01      	cmp	r2, #1
 800b0fc:	4681      	mov	r9, r0
 800b0fe:	6123      	str	r3, [r4, #16]
 800b100:	dc02      	bgt.n	800b108 <_printf_float+0x150>
 800b102:	6822      	ldr	r2, [r4, #0]
 800b104:	07d2      	lsls	r2, r2, #31
 800b106:	d501      	bpl.n	800b10c <_printf_float+0x154>
 800b108:	3301      	adds	r3, #1
 800b10a:	6123      	str	r3, [r4, #16]
 800b10c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b110:	2b00      	cmp	r3, #0
 800b112:	d0a2      	beq.n	800b05a <_printf_float+0xa2>
 800b114:	232d      	movs	r3, #45	@ 0x2d
 800b116:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b11a:	e79e      	b.n	800b05a <_printf_float+0xa2>
 800b11c:	9a06      	ldr	r2, [sp, #24]
 800b11e:	2a47      	cmp	r2, #71	@ 0x47
 800b120:	d1c2      	bne.n	800b0a8 <_printf_float+0xf0>
 800b122:	2b00      	cmp	r3, #0
 800b124:	d1c0      	bne.n	800b0a8 <_printf_float+0xf0>
 800b126:	2301      	movs	r3, #1
 800b128:	e7bd      	b.n	800b0a6 <_printf_float+0xee>
 800b12a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b12e:	d9db      	bls.n	800b0e8 <_printf_float+0x130>
 800b130:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b134:	d118      	bne.n	800b168 <_printf_float+0x1b0>
 800b136:	2900      	cmp	r1, #0
 800b138:	6863      	ldr	r3, [r4, #4]
 800b13a:	dd0b      	ble.n	800b154 <_printf_float+0x19c>
 800b13c:	6121      	str	r1, [r4, #16]
 800b13e:	b913      	cbnz	r3, 800b146 <_printf_float+0x18e>
 800b140:	6822      	ldr	r2, [r4, #0]
 800b142:	07d0      	lsls	r0, r2, #31
 800b144:	d502      	bpl.n	800b14c <_printf_float+0x194>
 800b146:	3301      	adds	r3, #1
 800b148:	440b      	add	r3, r1
 800b14a:	6123      	str	r3, [r4, #16]
 800b14c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b14e:	f04f 0900 	mov.w	r9, #0
 800b152:	e7db      	b.n	800b10c <_printf_float+0x154>
 800b154:	b913      	cbnz	r3, 800b15c <_printf_float+0x1a4>
 800b156:	6822      	ldr	r2, [r4, #0]
 800b158:	07d2      	lsls	r2, r2, #31
 800b15a:	d501      	bpl.n	800b160 <_printf_float+0x1a8>
 800b15c:	3302      	adds	r3, #2
 800b15e:	e7f4      	b.n	800b14a <_printf_float+0x192>
 800b160:	2301      	movs	r3, #1
 800b162:	e7f2      	b.n	800b14a <_printf_float+0x192>
 800b164:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b168:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b16a:	4299      	cmp	r1, r3
 800b16c:	db05      	blt.n	800b17a <_printf_float+0x1c2>
 800b16e:	6823      	ldr	r3, [r4, #0]
 800b170:	6121      	str	r1, [r4, #16]
 800b172:	07d8      	lsls	r0, r3, #31
 800b174:	d5ea      	bpl.n	800b14c <_printf_float+0x194>
 800b176:	1c4b      	adds	r3, r1, #1
 800b178:	e7e7      	b.n	800b14a <_printf_float+0x192>
 800b17a:	2900      	cmp	r1, #0
 800b17c:	bfd4      	ite	le
 800b17e:	f1c1 0202 	rsble	r2, r1, #2
 800b182:	2201      	movgt	r2, #1
 800b184:	4413      	add	r3, r2
 800b186:	e7e0      	b.n	800b14a <_printf_float+0x192>
 800b188:	6823      	ldr	r3, [r4, #0]
 800b18a:	055a      	lsls	r2, r3, #21
 800b18c:	d407      	bmi.n	800b19e <_printf_float+0x1e6>
 800b18e:	6923      	ldr	r3, [r4, #16]
 800b190:	4642      	mov	r2, r8
 800b192:	4631      	mov	r1, r6
 800b194:	4628      	mov	r0, r5
 800b196:	47b8      	blx	r7
 800b198:	3001      	adds	r0, #1
 800b19a:	d12b      	bne.n	800b1f4 <_printf_float+0x23c>
 800b19c:	e767      	b.n	800b06e <_printf_float+0xb6>
 800b19e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b1a2:	f240 80dd 	bls.w	800b360 <_printf_float+0x3a8>
 800b1a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	f7f5 fc8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	d033      	beq.n	800b21e <_printf_float+0x266>
 800b1b6:	4a37      	ldr	r2, [pc, #220]	@ (800b294 <_printf_float+0x2dc>)
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	4631      	mov	r1, r6
 800b1bc:	4628      	mov	r0, r5
 800b1be:	47b8      	blx	r7
 800b1c0:	3001      	adds	r0, #1
 800b1c2:	f43f af54 	beq.w	800b06e <_printf_float+0xb6>
 800b1c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b1ca:	4543      	cmp	r3, r8
 800b1cc:	db02      	blt.n	800b1d4 <_printf_float+0x21c>
 800b1ce:	6823      	ldr	r3, [r4, #0]
 800b1d0:	07d8      	lsls	r0, r3, #31
 800b1d2:	d50f      	bpl.n	800b1f4 <_printf_float+0x23c>
 800b1d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1d8:	4631      	mov	r1, r6
 800b1da:	4628      	mov	r0, r5
 800b1dc:	47b8      	blx	r7
 800b1de:	3001      	adds	r0, #1
 800b1e0:	f43f af45 	beq.w	800b06e <_printf_float+0xb6>
 800b1e4:	f04f 0900 	mov.w	r9, #0
 800b1e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b1ec:	f104 0a1a 	add.w	sl, r4, #26
 800b1f0:	45c8      	cmp	r8, r9
 800b1f2:	dc09      	bgt.n	800b208 <_printf_float+0x250>
 800b1f4:	6823      	ldr	r3, [r4, #0]
 800b1f6:	079b      	lsls	r3, r3, #30
 800b1f8:	f100 8103 	bmi.w	800b402 <_printf_float+0x44a>
 800b1fc:	68e0      	ldr	r0, [r4, #12]
 800b1fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b200:	4298      	cmp	r0, r3
 800b202:	bfb8      	it	lt
 800b204:	4618      	movlt	r0, r3
 800b206:	e734      	b.n	800b072 <_printf_float+0xba>
 800b208:	2301      	movs	r3, #1
 800b20a:	4652      	mov	r2, sl
 800b20c:	4631      	mov	r1, r6
 800b20e:	4628      	mov	r0, r5
 800b210:	47b8      	blx	r7
 800b212:	3001      	adds	r0, #1
 800b214:	f43f af2b 	beq.w	800b06e <_printf_float+0xb6>
 800b218:	f109 0901 	add.w	r9, r9, #1
 800b21c:	e7e8      	b.n	800b1f0 <_printf_float+0x238>
 800b21e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b220:	2b00      	cmp	r3, #0
 800b222:	dc39      	bgt.n	800b298 <_printf_float+0x2e0>
 800b224:	4a1b      	ldr	r2, [pc, #108]	@ (800b294 <_printf_float+0x2dc>)
 800b226:	2301      	movs	r3, #1
 800b228:	4631      	mov	r1, r6
 800b22a:	4628      	mov	r0, r5
 800b22c:	47b8      	blx	r7
 800b22e:	3001      	adds	r0, #1
 800b230:	f43f af1d 	beq.w	800b06e <_printf_float+0xb6>
 800b234:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b238:	ea59 0303 	orrs.w	r3, r9, r3
 800b23c:	d102      	bne.n	800b244 <_printf_float+0x28c>
 800b23e:	6823      	ldr	r3, [r4, #0]
 800b240:	07d9      	lsls	r1, r3, #31
 800b242:	d5d7      	bpl.n	800b1f4 <_printf_float+0x23c>
 800b244:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b248:	4631      	mov	r1, r6
 800b24a:	4628      	mov	r0, r5
 800b24c:	47b8      	blx	r7
 800b24e:	3001      	adds	r0, #1
 800b250:	f43f af0d 	beq.w	800b06e <_printf_float+0xb6>
 800b254:	f04f 0a00 	mov.w	sl, #0
 800b258:	f104 0b1a 	add.w	fp, r4, #26
 800b25c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b25e:	425b      	negs	r3, r3
 800b260:	4553      	cmp	r3, sl
 800b262:	dc01      	bgt.n	800b268 <_printf_float+0x2b0>
 800b264:	464b      	mov	r3, r9
 800b266:	e793      	b.n	800b190 <_printf_float+0x1d8>
 800b268:	2301      	movs	r3, #1
 800b26a:	465a      	mov	r2, fp
 800b26c:	4631      	mov	r1, r6
 800b26e:	4628      	mov	r0, r5
 800b270:	47b8      	blx	r7
 800b272:	3001      	adds	r0, #1
 800b274:	f43f aefb 	beq.w	800b06e <_printf_float+0xb6>
 800b278:	f10a 0a01 	add.w	sl, sl, #1
 800b27c:	e7ee      	b.n	800b25c <_printf_float+0x2a4>
 800b27e:	bf00      	nop
 800b280:	7fefffff 	.word	0x7fefffff
 800b284:	0800dc7c 	.word	0x0800dc7c
 800b288:	0800dc80 	.word	0x0800dc80
 800b28c:	0800dc84 	.word	0x0800dc84
 800b290:	0800dc88 	.word	0x0800dc88
 800b294:	0800dc8c 	.word	0x0800dc8c
 800b298:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b29a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b29e:	4553      	cmp	r3, sl
 800b2a0:	bfa8      	it	ge
 800b2a2:	4653      	movge	r3, sl
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	4699      	mov	r9, r3
 800b2a8:	dc36      	bgt.n	800b318 <_printf_float+0x360>
 800b2aa:	f04f 0b00 	mov.w	fp, #0
 800b2ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2b2:	f104 021a 	add.w	r2, r4, #26
 800b2b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b2b8:	9306      	str	r3, [sp, #24]
 800b2ba:	eba3 0309 	sub.w	r3, r3, r9
 800b2be:	455b      	cmp	r3, fp
 800b2c0:	dc31      	bgt.n	800b326 <_printf_float+0x36e>
 800b2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2c4:	459a      	cmp	sl, r3
 800b2c6:	dc3a      	bgt.n	800b33e <_printf_float+0x386>
 800b2c8:	6823      	ldr	r3, [r4, #0]
 800b2ca:	07da      	lsls	r2, r3, #31
 800b2cc:	d437      	bmi.n	800b33e <_printf_float+0x386>
 800b2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2d0:	ebaa 0903 	sub.w	r9, sl, r3
 800b2d4:	9b06      	ldr	r3, [sp, #24]
 800b2d6:	ebaa 0303 	sub.w	r3, sl, r3
 800b2da:	4599      	cmp	r9, r3
 800b2dc:	bfa8      	it	ge
 800b2de:	4699      	movge	r9, r3
 800b2e0:	f1b9 0f00 	cmp.w	r9, #0
 800b2e4:	dc33      	bgt.n	800b34e <_printf_float+0x396>
 800b2e6:	f04f 0800 	mov.w	r8, #0
 800b2ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2ee:	f104 0b1a 	add.w	fp, r4, #26
 800b2f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2f4:	ebaa 0303 	sub.w	r3, sl, r3
 800b2f8:	eba3 0309 	sub.w	r3, r3, r9
 800b2fc:	4543      	cmp	r3, r8
 800b2fe:	f77f af79 	ble.w	800b1f4 <_printf_float+0x23c>
 800b302:	2301      	movs	r3, #1
 800b304:	465a      	mov	r2, fp
 800b306:	4631      	mov	r1, r6
 800b308:	4628      	mov	r0, r5
 800b30a:	47b8      	blx	r7
 800b30c:	3001      	adds	r0, #1
 800b30e:	f43f aeae 	beq.w	800b06e <_printf_float+0xb6>
 800b312:	f108 0801 	add.w	r8, r8, #1
 800b316:	e7ec      	b.n	800b2f2 <_printf_float+0x33a>
 800b318:	4642      	mov	r2, r8
 800b31a:	4631      	mov	r1, r6
 800b31c:	4628      	mov	r0, r5
 800b31e:	47b8      	blx	r7
 800b320:	3001      	adds	r0, #1
 800b322:	d1c2      	bne.n	800b2aa <_printf_float+0x2f2>
 800b324:	e6a3      	b.n	800b06e <_printf_float+0xb6>
 800b326:	2301      	movs	r3, #1
 800b328:	4631      	mov	r1, r6
 800b32a:	4628      	mov	r0, r5
 800b32c:	9206      	str	r2, [sp, #24]
 800b32e:	47b8      	blx	r7
 800b330:	3001      	adds	r0, #1
 800b332:	f43f ae9c 	beq.w	800b06e <_printf_float+0xb6>
 800b336:	9a06      	ldr	r2, [sp, #24]
 800b338:	f10b 0b01 	add.w	fp, fp, #1
 800b33c:	e7bb      	b.n	800b2b6 <_printf_float+0x2fe>
 800b33e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b342:	4631      	mov	r1, r6
 800b344:	4628      	mov	r0, r5
 800b346:	47b8      	blx	r7
 800b348:	3001      	adds	r0, #1
 800b34a:	d1c0      	bne.n	800b2ce <_printf_float+0x316>
 800b34c:	e68f      	b.n	800b06e <_printf_float+0xb6>
 800b34e:	9a06      	ldr	r2, [sp, #24]
 800b350:	464b      	mov	r3, r9
 800b352:	4442      	add	r2, r8
 800b354:	4631      	mov	r1, r6
 800b356:	4628      	mov	r0, r5
 800b358:	47b8      	blx	r7
 800b35a:	3001      	adds	r0, #1
 800b35c:	d1c3      	bne.n	800b2e6 <_printf_float+0x32e>
 800b35e:	e686      	b.n	800b06e <_printf_float+0xb6>
 800b360:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b364:	f1ba 0f01 	cmp.w	sl, #1
 800b368:	dc01      	bgt.n	800b36e <_printf_float+0x3b6>
 800b36a:	07db      	lsls	r3, r3, #31
 800b36c:	d536      	bpl.n	800b3dc <_printf_float+0x424>
 800b36e:	2301      	movs	r3, #1
 800b370:	4642      	mov	r2, r8
 800b372:	4631      	mov	r1, r6
 800b374:	4628      	mov	r0, r5
 800b376:	47b8      	blx	r7
 800b378:	3001      	adds	r0, #1
 800b37a:	f43f ae78 	beq.w	800b06e <_printf_float+0xb6>
 800b37e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b382:	4631      	mov	r1, r6
 800b384:	4628      	mov	r0, r5
 800b386:	47b8      	blx	r7
 800b388:	3001      	adds	r0, #1
 800b38a:	f43f ae70 	beq.w	800b06e <_printf_float+0xb6>
 800b38e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b392:	2200      	movs	r2, #0
 800b394:	2300      	movs	r3, #0
 800b396:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b39a:	f7f5 fb95 	bl	8000ac8 <__aeabi_dcmpeq>
 800b39e:	b9c0      	cbnz	r0, 800b3d2 <_printf_float+0x41a>
 800b3a0:	4653      	mov	r3, sl
 800b3a2:	f108 0201 	add.w	r2, r8, #1
 800b3a6:	4631      	mov	r1, r6
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	47b8      	blx	r7
 800b3ac:	3001      	adds	r0, #1
 800b3ae:	d10c      	bne.n	800b3ca <_printf_float+0x412>
 800b3b0:	e65d      	b.n	800b06e <_printf_float+0xb6>
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	465a      	mov	r2, fp
 800b3b6:	4631      	mov	r1, r6
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	47b8      	blx	r7
 800b3bc:	3001      	adds	r0, #1
 800b3be:	f43f ae56 	beq.w	800b06e <_printf_float+0xb6>
 800b3c2:	f108 0801 	add.w	r8, r8, #1
 800b3c6:	45d0      	cmp	r8, sl
 800b3c8:	dbf3      	blt.n	800b3b2 <_printf_float+0x3fa>
 800b3ca:	464b      	mov	r3, r9
 800b3cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b3d0:	e6df      	b.n	800b192 <_printf_float+0x1da>
 800b3d2:	f04f 0800 	mov.w	r8, #0
 800b3d6:	f104 0b1a 	add.w	fp, r4, #26
 800b3da:	e7f4      	b.n	800b3c6 <_printf_float+0x40e>
 800b3dc:	2301      	movs	r3, #1
 800b3de:	4642      	mov	r2, r8
 800b3e0:	e7e1      	b.n	800b3a6 <_printf_float+0x3ee>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	464a      	mov	r2, r9
 800b3e6:	4631      	mov	r1, r6
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	47b8      	blx	r7
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	f43f ae3e 	beq.w	800b06e <_printf_float+0xb6>
 800b3f2:	f108 0801 	add.w	r8, r8, #1
 800b3f6:	68e3      	ldr	r3, [r4, #12]
 800b3f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b3fa:	1a5b      	subs	r3, r3, r1
 800b3fc:	4543      	cmp	r3, r8
 800b3fe:	dcf0      	bgt.n	800b3e2 <_printf_float+0x42a>
 800b400:	e6fc      	b.n	800b1fc <_printf_float+0x244>
 800b402:	f04f 0800 	mov.w	r8, #0
 800b406:	f104 0919 	add.w	r9, r4, #25
 800b40a:	e7f4      	b.n	800b3f6 <_printf_float+0x43e>

0800b40c <_printf_common>:
 800b40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b410:	4616      	mov	r6, r2
 800b412:	4698      	mov	r8, r3
 800b414:	688a      	ldr	r2, [r1, #8]
 800b416:	690b      	ldr	r3, [r1, #16]
 800b418:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b41c:	4293      	cmp	r3, r2
 800b41e:	bfb8      	it	lt
 800b420:	4613      	movlt	r3, r2
 800b422:	6033      	str	r3, [r6, #0]
 800b424:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b428:	4607      	mov	r7, r0
 800b42a:	460c      	mov	r4, r1
 800b42c:	b10a      	cbz	r2, 800b432 <_printf_common+0x26>
 800b42e:	3301      	adds	r3, #1
 800b430:	6033      	str	r3, [r6, #0]
 800b432:	6823      	ldr	r3, [r4, #0]
 800b434:	0699      	lsls	r1, r3, #26
 800b436:	bf42      	ittt	mi
 800b438:	6833      	ldrmi	r3, [r6, #0]
 800b43a:	3302      	addmi	r3, #2
 800b43c:	6033      	strmi	r3, [r6, #0]
 800b43e:	6825      	ldr	r5, [r4, #0]
 800b440:	f015 0506 	ands.w	r5, r5, #6
 800b444:	d106      	bne.n	800b454 <_printf_common+0x48>
 800b446:	f104 0a19 	add.w	sl, r4, #25
 800b44a:	68e3      	ldr	r3, [r4, #12]
 800b44c:	6832      	ldr	r2, [r6, #0]
 800b44e:	1a9b      	subs	r3, r3, r2
 800b450:	42ab      	cmp	r3, r5
 800b452:	dc26      	bgt.n	800b4a2 <_printf_common+0x96>
 800b454:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b458:	6822      	ldr	r2, [r4, #0]
 800b45a:	3b00      	subs	r3, #0
 800b45c:	bf18      	it	ne
 800b45e:	2301      	movne	r3, #1
 800b460:	0692      	lsls	r2, r2, #26
 800b462:	d42b      	bmi.n	800b4bc <_printf_common+0xb0>
 800b464:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b468:	4641      	mov	r1, r8
 800b46a:	4638      	mov	r0, r7
 800b46c:	47c8      	blx	r9
 800b46e:	3001      	adds	r0, #1
 800b470:	d01e      	beq.n	800b4b0 <_printf_common+0xa4>
 800b472:	6823      	ldr	r3, [r4, #0]
 800b474:	6922      	ldr	r2, [r4, #16]
 800b476:	f003 0306 	and.w	r3, r3, #6
 800b47a:	2b04      	cmp	r3, #4
 800b47c:	bf02      	ittt	eq
 800b47e:	68e5      	ldreq	r5, [r4, #12]
 800b480:	6833      	ldreq	r3, [r6, #0]
 800b482:	1aed      	subeq	r5, r5, r3
 800b484:	68a3      	ldr	r3, [r4, #8]
 800b486:	bf0c      	ite	eq
 800b488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b48c:	2500      	movne	r5, #0
 800b48e:	4293      	cmp	r3, r2
 800b490:	bfc4      	itt	gt
 800b492:	1a9b      	subgt	r3, r3, r2
 800b494:	18ed      	addgt	r5, r5, r3
 800b496:	2600      	movs	r6, #0
 800b498:	341a      	adds	r4, #26
 800b49a:	42b5      	cmp	r5, r6
 800b49c:	d11a      	bne.n	800b4d4 <_printf_common+0xc8>
 800b49e:	2000      	movs	r0, #0
 800b4a0:	e008      	b.n	800b4b4 <_printf_common+0xa8>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	4652      	mov	r2, sl
 800b4a6:	4641      	mov	r1, r8
 800b4a8:	4638      	mov	r0, r7
 800b4aa:	47c8      	blx	r9
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	d103      	bne.n	800b4b8 <_printf_common+0xac>
 800b4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4b8:	3501      	adds	r5, #1
 800b4ba:	e7c6      	b.n	800b44a <_printf_common+0x3e>
 800b4bc:	18e1      	adds	r1, r4, r3
 800b4be:	1c5a      	adds	r2, r3, #1
 800b4c0:	2030      	movs	r0, #48	@ 0x30
 800b4c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b4c6:	4422      	add	r2, r4
 800b4c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b4cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b4d0:	3302      	adds	r3, #2
 800b4d2:	e7c7      	b.n	800b464 <_printf_common+0x58>
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	4622      	mov	r2, r4
 800b4d8:	4641      	mov	r1, r8
 800b4da:	4638      	mov	r0, r7
 800b4dc:	47c8      	blx	r9
 800b4de:	3001      	adds	r0, #1
 800b4e0:	d0e6      	beq.n	800b4b0 <_printf_common+0xa4>
 800b4e2:	3601      	adds	r6, #1
 800b4e4:	e7d9      	b.n	800b49a <_printf_common+0x8e>
	...

0800b4e8 <_printf_i>:
 800b4e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4ec:	7e0f      	ldrb	r7, [r1, #24]
 800b4ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b4f0:	2f78      	cmp	r7, #120	@ 0x78
 800b4f2:	4691      	mov	r9, r2
 800b4f4:	4680      	mov	r8, r0
 800b4f6:	460c      	mov	r4, r1
 800b4f8:	469a      	mov	sl, r3
 800b4fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b4fe:	d807      	bhi.n	800b510 <_printf_i+0x28>
 800b500:	2f62      	cmp	r7, #98	@ 0x62
 800b502:	d80a      	bhi.n	800b51a <_printf_i+0x32>
 800b504:	2f00      	cmp	r7, #0
 800b506:	f000 80d2 	beq.w	800b6ae <_printf_i+0x1c6>
 800b50a:	2f58      	cmp	r7, #88	@ 0x58
 800b50c:	f000 80b9 	beq.w	800b682 <_printf_i+0x19a>
 800b510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b514:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b518:	e03a      	b.n	800b590 <_printf_i+0xa8>
 800b51a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b51e:	2b15      	cmp	r3, #21
 800b520:	d8f6      	bhi.n	800b510 <_printf_i+0x28>
 800b522:	a101      	add	r1, pc, #4	@ (adr r1, 800b528 <_printf_i+0x40>)
 800b524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b528:	0800b581 	.word	0x0800b581
 800b52c:	0800b595 	.word	0x0800b595
 800b530:	0800b511 	.word	0x0800b511
 800b534:	0800b511 	.word	0x0800b511
 800b538:	0800b511 	.word	0x0800b511
 800b53c:	0800b511 	.word	0x0800b511
 800b540:	0800b595 	.word	0x0800b595
 800b544:	0800b511 	.word	0x0800b511
 800b548:	0800b511 	.word	0x0800b511
 800b54c:	0800b511 	.word	0x0800b511
 800b550:	0800b511 	.word	0x0800b511
 800b554:	0800b695 	.word	0x0800b695
 800b558:	0800b5bf 	.word	0x0800b5bf
 800b55c:	0800b64f 	.word	0x0800b64f
 800b560:	0800b511 	.word	0x0800b511
 800b564:	0800b511 	.word	0x0800b511
 800b568:	0800b6b7 	.word	0x0800b6b7
 800b56c:	0800b511 	.word	0x0800b511
 800b570:	0800b5bf 	.word	0x0800b5bf
 800b574:	0800b511 	.word	0x0800b511
 800b578:	0800b511 	.word	0x0800b511
 800b57c:	0800b657 	.word	0x0800b657
 800b580:	6833      	ldr	r3, [r6, #0]
 800b582:	1d1a      	adds	r2, r3, #4
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	6032      	str	r2, [r6, #0]
 800b588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b58c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b590:	2301      	movs	r3, #1
 800b592:	e09d      	b.n	800b6d0 <_printf_i+0x1e8>
 800b594:	6833      	ldr	r3, [r6, #0]
 800b596:	6820      	ldr	r0, [r4, #0]
 800b598:	1d19      	adds	r1, r3, #4
 800b59a:	6031      	str	r1, [r6, #0]
 800b59c:	0606      	lsls	r6, r0, #24
 800b59e:	d501      	bpl.n	800b5a4 <_printf_i+0xbc>
 800b5a0:	681d      	ldr	r5, [r3, #0]
 800b5a2:	e003      	b.n	800b5ac <_printf_i+0xc4>
 800b5a4:	0645      	lsls	r5, r0, #25
 800b5a6:	d5fb      	bpl.n	800b5a0 <_printf_i+0xb8>
 800b5a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b5ac:	2d00      	cmp	r5, #0
 800b5ae:	da03      	bge.n	800b5b8 <_printf_i+0xd0>
 800b5b0:	232d      	movs	r3, #45	@ 0x2d
 800b5b2:	426d      	negs	r5, r5
 800b5b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5b8:	4859      	ldr	r0, [pc, #356]	@ (800b720 <_printf_i+0x238>)
 800b5ba:	230a      	movs	r3, #10
 800b5bc:	e011      	b.n	800b5e2 <_printf_i+0xfa>
 800b5be:	6821      	ldr	r1, [r4, #0]
 800b5c0:	6833      	ldr	r3, [r6, #0]
 800b5c2:	0608      	lsls	r0, r1, #24
 800b5c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b5c8:	d402      	bmi.n	800b5d0 <_printf_i+0xe8>
 800b5ca:	0649      	lsls	r1, r1, #25
 800b5cc:	bf48      	it	mi
 800b5ce:	b2ad      	uxthmi	r5, r5
 800b5d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b5d2:	4853      	ldr	r0, [pc, #332]	@ (800b720 <_printf_i+0x238>)
 800b5d4:	6033      	str	r3, [r6, #0]
 800b5d6:	bf14      	ite	ne
 800b5d8:	230a      	movne	r3, #10
 800b5da:	2308      	moveq	r3, #8
 800b5dc:	2100      	movs	r1, #0
 800b5de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b5e2:	6866      	ldr	r6, [r4, #4]
 800b5e4:	60a6      	str	r6, [r4, #8]
 800b5e6:	2e00      	cmp	r6, #0
 800b5e8:	bfa2      	ittt	ge
 800b5ea:	6821      	ldrge	r1, [r4, #0]
 800b5ec:	f021 0104 	bicge.w	r1, r1, #4
 800b5f0:	6021      	strge	r1, [r4, #0]
 800b5f2:	b90d      	cbnz	r5, 800b5f8 <_printf_i+0x110>
 800b5f4:	2e00      	cmp	r6, #0
 800b5f6:	d04b      	beq.n	800b690 <_printf_i+0x1a8>
 800b5f8:	4616      	mov	r6, r2
 800b5fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5fe:	fb03 5711 	mls	r7, r3, r1, r5
 800b602:	5dc7      	ldrb	r7, [r0, r7]
 800b604:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b608:	462f      	mov	r7, r5
 800b60a:	42bb      	cmp	r3, r7
 800b60c:	460d      	mov	r5, r1
 800b60e:	d9f4      	bls.n	800b5fa <_printf_i+0x112>
 800b610:	2b08      	cmp	r3, #8
 800b612:	d10b      	bne.n	800b62c <_printf_i+0x144>
 800b614:	6823      	ldr	r3, [r4, #0]
 800b616:	07df      	lsls	r7, r3, #31
 800b618:	d508      	bpl.n	800b62c <_printf_i+0x144>
 800b61a:	6923      	ldr	r3, [r4, #16]
 800b61c:	6861      	ldr	r1, [r4, #4]
 800b61e:	4299      	cmp	r1, r3
 800b620:	bfde      	ittt	le
 800b622:	2330      	movle	r3, #48	@ 0x30
 800b624:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b628:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b62c:	1b92      	subs	r2, r2, r6
 800b62e:	6122      	str	r2, [r4, #16]
 800b630:	f8cd a000 	str.w	sl, [sp]
 800b634:	464b      	mov	r3, r9
 800b636:	aa03      	add	r2, sp, #12
 800b638:	4621      	mov	r1, r4
 800b63a:	4640      	mov	r0, r8
 800b63c:	f7ff fee6 	bl	800b40c <_printf_common>
 800b640:	3001      	adds	r0, #1
 800b642:	d14a      	bne.n	800b6da <_printf_i+0x1f2>
 800b644:	f04f 30ff 	mov.w	r0, #4294967295
 800b648:	b004      	add	sp, #16
 800b64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b64e:	6823      	ldr	r3, [r4, #0]
 800b650:	f043 0320 	orr.w	r3, r3, #32
 800b654:	6023      	str	r3, [r4, #0]
 800b656:	4833      	ldr	r0, [pc, #204]	@ (800b724 <_printf_i+0x23c>)
 800b658:	2778      	movs	r7, #120	@ 0x78
 800b65a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b65e:	6823      	ldr	r3, [r4, #0]
 800b660:	6831      	ldr	r1, [r6, #0]
 800b662:	061f      	lsls	r7, r3, #24
 800b664:	f851 5b04 	ldr.w	r5, [r1], #4
 800b668:	d402      	bmi.n	800b670 <_printf_i+0x188>
 800b66a:	065f      	lsls	r7, r3, #25
 800b66c:	bf48      	it	mi
 800b66e:	b2ad      	uxthmi	r5, r5
 800b670:	6031      	str	r1, [r6, #0]
 800b672:	07d9      	lsls	r1, r3, #31
 800b674:	bf44      	itt	mi
 800b676:	f043 0320 	orrmi.w	r3, r3, #32
 800b67a:	6023      	strmi	r3, [r4, #0]
 800b67c:	b11d      	cbz	r5, 800b686 <_printf_i+0x19e>
 800b67e:	2310      	movs	r3, #16
 800b680:	e7ac      	b.n	800b5dc <_printf_i+0xf4>
 800b682:	4827      	ldr	r0, [pc, #156]	@ (800b720 <_printf_i+0x238>)
 800b684:	e7e9      	b.n	800b65a <_printf_i+0x172>
 800b686:	6823      	ldr	r3, [r4, #0]
 800b688:	f023 0320 	bic.w	r3, r3, #32
 800b68c:	6023      	str	r3, [r4, #0]
 800b68e:	e7f6      	b.n	800b67e <_printf_i+0x196>
 800b690:	4616      	mov	r6, r2
 800b692:	e7bd      	b.n	800b610 <_printf_i+0x128>
 800b694:	6833      	ldr	r3, [r6, #0]
 800b696:	6825      	ldr	r5, [r4, #0]
 800b698:	6961      	ldr	r1, [r4, #20]
 800b69a:	1d18      	adds	r0, r3, #4
 800b69c:	6030      	str	r0, [r6, #0]
 800b69e:	062e      	lsls	r6, r5, #24
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	d501      	bpl.n	800b6a8 <_printf_i+0x1c0>
 800b6a4:	6019      	str	r1, [r3, #0]
 800b6a6:	e002      	b.n	800b6ae <_printf_i+0x1c6>
 800b6a8:	0668      	lsls	r0, r5, #25
 800b6aa:	d5fb      	bpl.n	800b6a4 <_printf_i+0x1bc>
 800b6ac:	8019      	strh	r1, [r3, #0]
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	6123      	str	r3, [r4, #16]
 800b6b2:	4616      	mov	r6, r2
 800b6b4:	e7bc      	b.n	800b630 <_printf_i+0x148>
 800b6b6:	6833      	ldr	r3, [r6, #0]
 800b6b8:	1d1a      	adds	r2, r3, #4
 800b6ba:	6032      	str	r2, [r6, #0]
 800b6bc:	681e      	ldr	r6, [r3, #0]
 800b6be:	6862      	ldr	r2, [r4, #4]
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f7f4 fd84 	bl	80001d0 <memchr>
 800b6c8:	b108      	cbz	r0, 800b6ce <_printf_i+0x1e6>
 800b6ca:	1b80      	subs	r0, r0, r6
 800b6cc:	6060      	str	r0, [r4, #4]
 800b6ce:	6863      	ldr	r3, [r4, #4]
 800b6d0:	6123      	str	r3, [r4, #16]
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6d8:	e7aa      	b.n	800b630 <_printf_i+0x148>
 800b6da:	6923      	ldr	r3, [r4, #16]
 800b6dc:	4632      	mov	r2, r6
 800b6de:	4649      	mov	r1, r9
 800b6e0:	4640      	mov	r0, r8
 800b6e2:	47d0      	blx	sl
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	d0ad      	beq.n	800b644 <_printf_i+0x15c>
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	079b      	lsls	r3, r3, #30
 800b6ec:	d413      	bmi.n	800b716 <_printf_i+0x22e>
 800b6ee:	68e0      	ldr	r0, [r4, #12]
 800b6f0:	9b03      	ldr	r3, [sp, #12]
 800b6f2:	4298      	cmp	r0, r3
 800b6f4:	bfb8      	it	lt
 800b6f6:	4618      	movlt	r0, r3
 800b6f8:	e7a6      	b.n	800b648 <_printf_i+0x160>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	4632      	mov	r2, r6
 800b6fe:	4649      	mov	r1, r9
 800b700:	4640      	mov	r0, r8
 800b702:	47d0      	blx	sl
 800b704:	3001      	adds	r0, #1
 800b706:	d09d      	beq.n	800b644 <_printf_i+0x15c>
 800b708:	3501      	adds	r5, #1
 800b70a:	68e3      	ldr	r3, [r4, #12]
 800b70c:	9903      	ldr	r1, [sp, #12]
 800b70e:	1a5b      	subs	r3, r3, r1
 800b710:	42ab      	cmp	r3, r5
 800b712:	dcf2      	bgt.n	800b6fa <_printf_i+0x212>
 800b714:	e7eb      	b.n	800b6ee <_printf_i+0x206>
 800b716:	2500      	movs	r5, #0
 800b718:	f104 0619 	add.w	r6, r4, #25
 800b71c:	e7f5      	b.n	800b70a <_printf_i+0x222>
 800b71e:	bf00      	nop
 800b720:	0800dc8e 	.word	0x0800dc8e
 800b724:	0800dc9f 	.word	0x0800dc9f

0800b728 <std>:
 800b728:	2300      	movs	r3, #0
 800b72a:	b510      	push	{r4, lr}
 800b72c:	4604      	mov	r4, r0
 800b72e:	e9c0 3300 	strd	r3, r3, [r0]
 800b732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b736:	6083      	str	r3, [r0, #8]
 800b738:	8181      	strh	r1, [r0, #12]
 800b73a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b73c:	81c2      	strh	r2, [r0, #14]
 800b73e:	6183      	str	r3, [r0, #24]
 800b740:	4619      	mov	r1, r3
 800b742:	2208      	movs	r2, #8
 800b744:	305c      	adds	r0, #92	@ 0x5c
 800b746:	f000 f92d 	bl	800b9a4 <memset>
 800b74a:	4b0d      	ldr	r3, [pc, #52]	@ (800b780 <std+0x58>)
 800b74c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b74e:	4b0d      	ldr	r3, [pc, #52]	@ (800b784 <std+0x5c>)
 800b750:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b752:	4b0d      	ldr	r3, [pc, #52]	@ (800b788 <std+0x60>)
 800b754:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b756:	4b0d      	ldr	r3, [pc, #52]	@ (800b78c <std+0x64>)
 800b758:	6323      	str	r3, [r4, #48]	@ 0x30
 800b75a:	4b0d      	ldr	r3, [pc, #52]	@ (800b790 <std+0x68>)
 800b75c:	6224      	str	r4, [r4, #32]
 800b75e:	429c      	cmp	r4, r3
 800b760:	d006      	beq.n	800b770 <std+0x48>
 800b762:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b766:	4294      	cmp	r4, r2
 800b768:	d002      	beq.n	800b770 <std+0x48>
 800b76a:	33d0      	adds	r3, #208	@ 0xd0
 800b76c:	429c      	cmp	r4, r3
 800b76e:	d105      	bne.n	800b77c <std+0x54>
 800b770:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b778:	f000 b990 	b.w	800ba9c <__retarget_lock_init_recursive>
 800b77c:	bd10      	pop	{r4, pc}
 800b77e:	bf00      	nop
 800b780:	0800b8ad 	.word	0x0800b8ad
 800b784:	0800b8cf 	.word	0x0800b8cf
 800b788:	0800b907 	.word	0x0800b907
 800b78c:	0800b92b 	.word	0x0800b92b
 800b790:	200023b8 	.word	0x200023b8

0800b794 <stdio_exit_handler>:
 800b794:	4a02      	ldr	r2, [pc, #8]	@ (800b7a0 <stdio_exit_handler+0xc>)
 800b796:	4903      	ldr	r1, [pc, #12]	@ (800b7a4 <stdio_exit_handler+0x10>)
 800b798:	4803      	ldr	r0, [pc, #12]	@ (800b7a8 <stdio_exit_handler+0x14>)
 800b79a:	f000 b869 	b.w	800b870 <_fwalk_sglue>
 800b79e:	bf00      	nop
 800b7a0:	20000010 	.word	0x20000010
 800b7a4:	0800d415 	.word	0x0800d415
 800b7a8:	20000020 	.word	0x20000020

0800b7ac <cleanup_stdio>:
 800b7ac:	6841      	ldr	r1, [r0, #4]
 800b7ae:	4b0c      	ldr	r3, [pc, #48]	@ (800b7e0 <cleanup_stdio+0x34>)
 800b7b0:	4299      	cmp	r1, r3
 800b7b2:	b510      	push	{r4, lr}
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	d001      	beq.n	800b7bc <cleanup_stdio+0x10>
 800b7b8:	f001 fe2c 	bl	800d414 <_fflush_r>
 800b7bc:	68a1      	ldr	r1, [r4, #8]
 800b7be:	4b09      	ldr	r3, [pc, #36]	@ (800b7e4 <cleanup_stdio+0x38>)
 800b7c0:	4299      	cmp	r1, r3
 800b7c2:	d002      	beq.n	800b7ca <cleanup_stdio+0x1e>
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f001 fe25 	bl	800d414 <_fflush_r>
 800b7ca:	68e1      	ldr	r1, [r4, #12]
 800b7cc:	4b06      	ldr	r3, [pc, #24]	@ (800b7e8 <cleanup_stdio+0x3c>)
 800b7ce:	4299      	cmp	r1, r3
 800b7d0:	d004      	beq.n	800b7dc <cleanup_stdio+0x30>
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7d8:	f001 be1c 	b.w	800d414 <_fflush_r>
 800b7dc:	bd10      	pop	{r4, pc}
 800b7de:	bf00      	nop
 800b7e0:	200023b8 	.word	0x200023b8
 800b7e4:	20002420 	.word	0x20002420
 800b7e8:	20002488 	.word	0x20002488

0800b7ec <global_stdio_init.part.0>:
 800b7ec:	b510      	push	{r4, lr}
 800b7ee:	4b0b      	ldr	r3, [pc, #44]	@ (800b81c <global_stdio_init.part.0+0x30>)
 800b7f0:	4c0b      	ldr	r4, [pc, #44]	@ (800b820 <global_stdio_init.part.0+0x34>)
 800b7f2:	4a0c      	ldr	r2, [pc, #48]	@ (800b824 <global_stdio_init.part.0+0x38>)
 800b7f4:	601a      	str	r2, [r3, #0]
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	2104      	movs	r1, #4
 800b7fc:	f7ff ff94 	bl	800b728 <std>
 800b800:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b804:	2201      	movs	r2, #1
 800b806:	2109      	movs	r1, #9
 800b808:	f7ff ff8e 	bl	800b728 <std>
 800b80c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b810:	2202      	movs	r2, #2
 800b812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b816:	2112      	movs	r1, #18
 800b818:	f7ff bf86 	b.w	800b728 <std>
 800b81c:	200024f0 	.word	0x200024f0
 800b820:	200023b8 	.word	0x200023b8
 800b824:	0800b795 	.word	0x0800b795

0800b828 <__sfp_lock_acquire>:
 800b828:	4801      	ldr	r0, [pc, #4]	@ (800b830 <__sfp_lock_acquire+0x8>)
 800b82a:	f000 b938 	b.w	800ba9e <__retarget_lock_acquire_recursive>
 800b82e:	bf00      	nop
 800b830:	200024f9 	.word	0x200024f9

0800b834 <__sfp_lock_release>:
 800b834:	4801      	ldr	r0, [pc, #4]	@ (800b83c <__sfp_lock_release+0x8>)
 800b836:	f000 b933 	b.w	800baa0 <__retarget_lock_release_recursive>
 800b83a:	bf00      	nop
 800b83c:	200024f9 	.word	0x200024f9

0800b840 <__sinit>:
 800b840:	b510      	push	{r4, lr}
 800b842:	4604      	mov	r4, r0
 800b844:	f7ff fff0 	bl	800b828 <__sfp_lock_acquire>
 800b848:	6a23      	ldr	r3, [r4, #32]
 800b84a:	b11b      	cbz	r3, 800b854 <__sinit+0x14>
 800b84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b850:	f7ff bff0 	b.w	800b834 <__sfp_lock_release>
 800b854:	4b04      	ldr	r3, [pc, #16]	@ (800b868 <__sinit+0x28>)
 800b856:	6223      	str	r3, [r4, #32]
 800b858:	4b04      	ldr	r3, [pc, #16]	@ (800b86c <__sinit+0x2c>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1f5      	bne.n	800b84c <__sinit+0xc>
 800b860:	f7ff ffc4 	bl	800b7ec <global_stdio_init.part.0>
 800b864:	e7f2      	b.n	800b84c <__sinit+0xc>
 800b866:	bf00      	nop
 800b868:	0800b7ad 	.word	0x0800b7ad
 800b86c:	200024f0 	.word	0x200024f0

0800b870 <_fwalk_sglue>:
 800b870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b874:	4607      	mov	r7, r0
 800b876:	4688      	mov	r8, r1
 800b878:	4614      	mov	r4, r2
 800b87a:	2600      	movs	r6, #0
 800b87c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b880:	f1b9 0901 	subs.w	r9, r9, #1
 800b884:	d505      	bpl.n	800b892 <_fwalk_sglue+0x22>
 800b886:	6824      	ldr	r4, [r4, #0]
 800b888:	2c00      	cmp	r4, #0
 800b88a:	d1f7      	bne.n	800b87c <_fwalk_sglue+0xc>
 800b88c:	4630      	mov	r0, r6
 800b88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b892:	89ab      	ldrh	r3, [r5, #12]
 800b894:	2b01      	cmp	r3, #1
 800b896:	d907      	bls.n	800b8a8 <_fwalk_sglue+0x38>
 800b898:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b89c:	3301      	adds	r3, #1
 800b89e:	d003      	beq.n	800b8a8 <_fwalk_sglue+0x38>
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	4638      	mov	r0, r7
 800b8a4:	47c0      	blx	r8
 800b8a6:	4306      	orrs	r6, r0
 800b8a8:	3568      	adds	r5, #104	@ 0x68
 800b8aa:	e7e9      	b.n	800b880 <_fwalk_sglue+0x10>

0800b8ac <__sread>:
 800b8ac:	b510      	push	{r4, lr}
 800b8ae:	460c      	mov	r4, r1
 800b8b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b4:	f000 f8a4 	bl	800ba00 <_read_r>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	bfab      	itete	ge
 800b8bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b8be:	89a3      	ldrhlt	r3, [r4, #12]
 800b8c0:	181b      	addge	r3, r3, r0
 800b8c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b8c6:	bfac      	ite	ge
 800b8c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b8ca:	81a3      	strhlt	r3, [r4, #12]
 800b8cc:	bd10      	pop	{r4, pc}

0800b8ce <__swrite>:
 800b8ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d2:	461f      	mov	r7, r3
 800b8d4:	898b      	ldrh	r3, [r1, #12]
 800b8d6:	05db      	lsls	r3, r3, #23
 800b8d8:	4605      	mov	r5, r0
 800b8da:	460c      	mov	r4, r1
 800b8dc:	4616      	mov	r6, r2
 800b8de:	d505      	bpl.n	800b8ec <__swrite+0x1e>
 800b8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f000 f878 	bl	800b9dc <_lseek_r>
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b8f6:	81a3      	strh	r3, [r4, #12]
 800b8f8:	4632      	mov	r2, r6
 800b8fa:	463b      	mov	r3, r7
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b902:	f000 b88f 	b.w	800ba24 <_write_r>

0800b906 <__sseek>:
 800b906:	b510      	push	{r4, lr}
 800b908:	460c      	mov	r4, r1
 800b90a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b90e:	f000 f865 	bl	800b9dc <_lseek_r>
 800b912:	1c43      	adds	r3, r0, #1
 800b914:	89a3      	ldrh	r3, [r4, #12]
 800b916:	bf15      	itete	ne
 800b918:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b91a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b91e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b922:	81a3      	strheq	r3, [r4, #12]
 800b924:	bf18      	it	ne
 800b926:	81a3      	strhne	r3, [r4, #12]
 800b928:	bd10      	pop	{r4, pc}

0800b92a <__sclose>:
 800b92a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b92e:	f000 b845 	b.w	800b9bc <_close_r>

0800b932 <_vsniprintf_r>:
 800b932:	b530      	push	{r4, r5, lr}
 800b934:	4614      	mov	r4, r2
 800b936:	2c00      	cmp	r4, #0
 800b938:	b09b      	sub	sp, #108	@ 0x6c
 800b93a:	4605      	mov	r5, r0
 800b93c:	461a      	mov	r2, r3
 800b93e:	da05      	bge.n	800b94c <_vsniprintf_r+0x1a>
 800b940:	238b      	movs	r3, #139	@ 0x8b
 800b942:	6003      	str	r3, [r0, #0]
 800b944:	f04f 30ff 	mov.w	r0, #4294967295
 800b948:	b01b      	add	sp, #108	@ 0x6c
 800b94a:	bd30      	pop	{r4, r5, pc}
 800b94c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b950:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b954:	bf14      	ite	ne
 800b956:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b95a:	4623      	moveq	r3, r4
 800b95c:	9302      	str	r3, [sp, #8]
 800b95e:	9305      	str	r3, [sp, #20]
 800b960:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b964:	9100      	str	r1, [sp, #0]
 800b966:	9104      	str	r1, [sp, #16]
 800b968:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b96c:	4669      	mov	r1, sp
 800b96e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b970:	f001 fbd0 	bl	800d114 <_svfiprintf_r>
 800b974:	1c43      	adds	r3, r0, #1
 800b976:	bfbc      	itt	lt
 800b978:	238b      	movlt	r3, #139	@ 0x8b
 800b97a:	602b      	strlt	r3, [r5, #0]
 800b97c:	2c00      	cmp	r4, #0
 800b97e:	d0e3      	beq.n	800b948 <_vsniprintf_r+0x16>
 800b980:	9b00      	ldr	r3, [sp, #0]
 800b982:	2200      	movs	r2, #0
 800b984:	701a      	strb	r2, [r3, #0]
 800b986:	e7df      	b.n	800b948 <_vsniprintf_r+0x16>

0800b988 <vsniprintf>:
 800b988:	b507      	push	{r0, r1, r2, lr}
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	4613      	mov	r3, r2
 800b98e:	460a      	mov	r2, r1
 800b990:	4601      	mov	r1, r0
 800b992:	4803      	ldr	r0, [pc, #12]	@ (800b9a0 <vsniprintf+0x18>)
 800b994:	6800      	ldr	r0, [r0, #0]
 800b996:	f7ff ffcc 	bl	800b932 <_vsniprintf_r>
 800b99a:	b003      	add	sp, #12
 800b99c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b9a0:	2000001c 	.word	0x2000001c

0800b9a4 <memset>:
 800b9a4:	4402      	add	r2, r0
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d100      	bne.n	800b9ae <memset+0xa>
 800b9ac:	4770      	bx	lr
 800b9ae:	f803 1b01 	strb.w	r1, [r3], #1
 800b9b2:	e7f9      	b.n	800b9a8 <memset+0x4>

0800b9b4 <_localeconv_r>:
 800b9b4:	4800      	ldr	r0, [pc, #0]	@ (800b9b8 <_localeconv_r+0x4>)
 800b9b6:	4770      	bx	lr
 800b9b8:	2000015c 	.word	0x2000015c

0800b9bc <_close_r>:
 800b9bc:	b538      	push	{r3, r4, r5, lr}
 800b9be:	4d06      	ldr	r5, [pc, #24]	@ (800b9d8 <_close_r+0x1c>)
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	4608      	mov	r0, r1
 800b9c6:	602b      	str	r3, [r5, #0]
 800b9c8:	f7f6 fc24 	bl	8002214 <_close>
 800b9cc:	1c43      	adds	r3, r0, #1
 800b9ce:	d102      	bne.n	800b9d6 <_close_r+0x1a>
 800b9d0:	682b      	ldr	r3, [r5, #0]
 800b9d2:	b103      	cbz	r3, 800b9d6 <_close_r+0x1a>
 800b9d4:	6023      	str	r3, [r4, #0]
 800b9d6:	bd38      	pop	{r3, r4, r5, pc}
 800b9d8:	200024f4 	.word	0x200024f4

0800b9dc <_lseek_r>:
 800b9dc:	b538      	push	{r3, r4, r5, lr}
 800b9de:	4d07      	ldr	r5, [pc, #28]	@ (800b9fc <_lseek_r+0x20>)
 800b9e0:	4604      	mov	r4, r0
 800b9e2:	4608      	mov	r0, r1
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	602a      	str	r2, [r5, #0]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	f7f6 fc39 	bl	8002262 <_lseek>
 800b9f0:	1c43      	adds	r3, r0, #1
 800b9f2:	d102      	bne.n	800b9fa <_lseek_r+0x1e>
 800b9f4:	682b      	ldr	r3, [r5, #0]
 800b9f6:	b103      	cbz	r3, 800b9fa <_lseek_r+0x1e>
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	bd38      	pop	{r3, r4, r5, pc}
 800b9fc:	200024f4 	.word	0x200024f4

0800ba00 <_read_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4d07      	ldr	r5, [pc, #28]	@ (800ba20 <_read_r+0x20>)
 800ba04:	4604      	mov	r4, r0
 800ba06:	4608      	mov	r0, r1
 800ba08:	4611      	mov	r1, r2
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	602a      	str	r2, [r5, #0]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	f7f6 fbc7 	bl	80021a2 <_read>
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	d102      	bne.n	800ba1e <_read_r+0x1e>
 800ba18:	682b      	ldr	r3, [r5, #0]
 800ba1a:	b103      	cbz	r3, 800ba1e <_read_r+0x1e>
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	200024f4 	.word	0x200024f4

0800ba24 <_write_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	4d07      	ldr	r5, [pc, #28]	@ (800ba44 <_write_r+0x20>)
 800ba28:	4604      	mov	r4, r0
 800ba2a:	4608      	mov	r0, r1
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	2200      	movs	r2, #0
 800ba30:	602a      	str	r2, [r5, #0]
 800ba32:	461a      	mov	r2, r3
 800ba34:	f7f6 fbd2 	bl	80021dc <_write>
 800ba38:	1c43      	adds	r3, r0, #1
 800ba3a:	d102      	bne.n	800ba42 <_write_r+0x1e>
 800ba3c:	682b      	ldr	r3, [r5, #0]
 800ba3e:	b103      	cbz	r3, 800ba42 <_write_r+0x1e>
 800ba40:	6023      	str	r3, [r4, #0]
 800ba42:	bd38      	pop	{r3, r4, r5, pc}
 800ba44:	200024f4 	.word	0x200024f4

0800ba48 <__errno>:
 800ba48:	4b01      	ldr	r3, [pc, #4]	@ (800ba50 <__errno+0x8>)
 800ba4a:	6818      	ldr	r0, [r3, #0]
 800ba4c:	4770      	bx	lr
 800ba4e:	bf00      	nop
 800ba50:	2000001c 	.word	0x2000001c

0800ba54 <__libc_init_array>:
 800ba54:	b570      	push	{r4, r5, r6, lr}
 800ba56:	4d0d      	ldr	r5, [pc, #52]	@ (800ba8c <__libc_init_array+0x38>)
 800ba58:	4c0d      	ldr	r4, [pc, #52]	@ (800ba90 <__libc_init_array+0x3c>)
 800ba5a:	1b64      	subs	r4, r4, r5
 800ba5c:	10a4      	asrs	r4, r4, #2
 800ba5e:	2600      	movs	r6, #0
 800ba60:	42a6      	cmp	r6, r4
 800ba62:	d109      	bne.n	800ba78 <__libc_init_array+0x24>
 800ba64:	4d0b      	ldr	r5, [pc, #44]	@ (800ba94 <__libc_init_array+0x40>)
 800ba66:	4c0c      	ldr	r4, [pc, #48]	@ (800ba98 <__libc_init_array+0x44>)
 800ba68:	f002 f864 	bl	800db34 <_init>
 800ba6c:	1b64      	subs	r4, r4, r5
 800ba6e:	10a4      	asrs	r4, r4, #2
 800ba70:	2600      	movs	r6, #0
 800ba72:	42a6      	cmp	r6, r4
 800ba74:	d105      	bne.n	800ba82 <__libc_init_array+0x2e>
 800ba76:	bd70      	pop	{r4, r5, r6, pc}
 800ba78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba7c:	4798      	blx	r3
 800ba7e:	3601      	adds	r6, #1
 800ba80:	e7ee      	b.n	800ba60 <__libc_init_array+0xc>
 800ba82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba86:	4798      	blx	r3
 800ba88:	3601      	adds	r6, #1
 800ba8a:	e7f2      	b.n	800ba72 <__libc_init_array+0x1e>
 800ba8c:	0800dff8 	.word	0x0800dff8
 800ba90:	0800dff8 	.word	0x0800dff8
 800ba94:	0800dff8 	.word	0x0800dff8
 800ba98:	0800dffc 	.word	0x0800dffc

0800ba9c <__retarget_lock_init_recursive>:
 800ba9c:	4770      	bx	lr

0800ba9e <__retarget_lock_acquire_recursive>:
 800ba9e:	4770      	bx	lr

0800baa0 <__retarget_lock_release_recursive>:
 800baa0:	4770      	bx	lr

0800baa2 <memcpy>:
 800baa2:	440a      	add	r2, r1
 800baa4:	4291      	cmp	r1, r2
 800baa6:	f100 33ff 	add.w	r3, r0, #4294967295
 800baaa:	d100      	bne.n	800baae <memcpy+0xc>
 800baac:	4770      	bx	lr
 800baae:	b510      	push	{r4, lr}
 800bab0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bab8:	4291      	cmp	r1, r2
 800baba:	d1f9      	bne.n	800bab0 <memcpy+0xe>
 800babc:	bd10      	pop	{r4, pc}

0800babe <quorem>:
 800babe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac2:	6903      	ldr	r3, [r0, #16]
 800bac4:	690c      	ldr	r4, [r1, #16]
 800bac6:	42a3      	cmp	r3, r4
 800bac8:	4607      	mov	r7, r0
 800baca:	db7e      	blt.n	800bbca <quorem+0x10c>
 800bacc:	3c01      	subs	r4, #1
 800bace:	f101 0814 	add.w	r8, r1, #20
 800bad2:	00a3      	lsls	r3, r4, #2
 800bad4:	f100 0514 	add.w	r5, r0, #20
 800bad8:	9300      	str	r3, [sp, #0]
 800bada:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bade:	9301      	str	r3, [sp, #4]
 800bae0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bae4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bae8:	3301      	adds	r3, #1
 800baea:	429a      	cmp	r2, r3
 800baec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800baf0:	fbb2 f6f3 	udiv	r6, r2, r3
 800baf4:	d32e      	bcc.n	800bb54 <quorem+0x96>
 800baf6:	f04f 0a00 	mov.w	sl, #0
 800bafa:	46c4      	mov	ip, r8
 800bafc:	46ae      	mov	lr, r5
 800bafe:	46d3      	mov	fp, sl
 800bb00:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb04:	b298      	uxth	r0, r3
 800bb06:	fb06 a000 	mla	r0, r6, r0, sl
 800bb0a:	0c02      	lsrs	r2, r0, #16
 800bb0c:	0c1b      	lsrs	r3, r3, #16
 800bb0e:	fb06 2303 	mla	r3, r6, r3, r2
 800bb12:	f8de 2000 	ldr.w	r2, [lr]
 800bb16:	b280      	uxth	r0, r0
 800bb18:	b292      	uxth	r2, r2
 800bb1a:	1a12      	subs	r2, r2, r0
 800bb1c:	445a      	add	r2, fp
 800bb1e:	f8de 0000 	ldr.w	r0, [lr]
 800bb22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bb2c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bb30:	b292      	uxth	r2, r2
 800bb32:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bb36:	45e1      	cmp	r9, ip
 800bb38:	f84e 2b04 	str.w	r2, [lr], #4
 800bb3c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bb40:	d2de      	bcs.n	800bb00 <quorem+0x42>
 800bb42:	9b00      	ldr	r3, [sp, #0]
 800bb44:	58eb      	ldr	r3, [r5, r3]
 800bb46:	b92b      	cbnz	r3, 800bb54 <quorem+0x96>
 800bb48:	9b01      	ldr	r3, [sp, #4]
 800bb4a:	3b04      	subs	r3, #4
 800bb4c:	429d      	cmp	r5, r3
 800bb4e:	461a      	mov	r2, r3
 800bb50:	d32f      	bcc.n	800bbb2 <quorem+0xf4>
 800bb52:	613c      	str	r4, [r7, #16]
 800bb54:	4638      	mov	r0, r7
 800bb56:	f001 f979 	bl	800ce4c <__mcmp>
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	db25      	blt.n	800bbaa <quorem+0xec>
 800bb5e:	4629      	mov	r1, r5
 800bb60:	2000      	movs	r0, #0
 800bb62:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb66:	f8d1 c000 	ldr.w	ip, [r1]
 800bb6a:	fa1f fe82 	uxth.w	lr, r2
 800bb6e:	fa1f f38c 	uxth.w	r3, ip
 800bb72:	eba3 030e 	sub.w	r3, r3, lr
 800bb76:	4403      	add	r3, r0
 800bb78:	0c12      	lsrs	r2, r2, #16
 800bb7a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bb7e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb88:	45c1      	cmp	r9, r8
 800bb8a:	f841 3b04 	str.w	r3, [r1], #4
 800bb8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bb92:	d2e6      	bcs.n	800bb62 <quorem+0xa4>
 800bb94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb9c:	b922      	cbnz	r2, 800bba8 <quorem+0xea>
 800bb9e:	3b04      	subs	r3, #4
 800bba0:	429d      	cmp	r5, r3
 800bba2:	461a      	mov	r2, r3
 800bba4:	d30b      	bcc.n	800bbbe <quorem+0x100>
 800bba6:	613c      	str	r4, [r7, #16]
 800bba8:	3601      	adds	r6, #1
 800bbaa:	4630      	mov	r0, r6
 800bbac:	b003      	add	sp, #12
 800bbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb2:	6812      	ldr	r2, [r2, #0]
 800bbb4:	3b04      	subs	r3, #4
 800bbb6:	2a00      	cmp	r2, #0
 800bbb8:	d1cb      	bne.n	800bb52 <quorem+0x94>
 800bbba:	3c01      	subs	r4, #1
 800bbbc:	e7c6      	b.n	800bb4c <quorem+0x8e>
 800bbbe:	6812      	ldr	r2, [r2, #0]
 800bbc0:	3b04      	subs	r3, #4
 800bbc2:	2a00      	cmp	r2, #0
 800bbc4:	d1ef      	bne.n	800bba6 <quorem+0xe8>
 800bbc6:	3c01      	subs	r4, #1
 800bbc8:	e7ea      	b.n	800bba0 <quorem+0xe2>
 800bbca:	2000      	movs	r0, #0
 800bbcc:	e7ee      	b.n	800bbac <quorem+0xee>
	...

0800bbd0 <_dtoa_r>:
 800bbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd4:	69c7      	ldr	r7, [r0, #28]
 800bbd6:	b099      	sub	sp, #100	@ 0x64
 800bbd8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bbdc:	ec55 4b10 	vmov	r4, r5, d0
 800bbe0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bbe2:	9109      	str	r1, [sp, #36]	@ 0x24
 800bbe4:	4683      	mov	fp, r0
 800bbe6:	920e      	str	r2, [sp, #56]	@ 0x38
 800bbe8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bbea:	b97f      	cbnz	r7, 800bc0c <_dtoa_r+0x3c>
 800bbec:	2010      	movs	r0, #16
 800bbee:	f000 fdfd 	bl	800c7ec <malloc>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	f8cb 001c 	str.w	r0, [fp, #28]
 800bbf8:	b920      	cbnz	r0, 800bc04 <_dtoa_r+0x34>
 800bbfa:	4ba7      	ldr	r3, [pc, #668]	@ (800be98 <_dtoa_r+0x2c8>)
 800bbfc:	21ef      	movs	r1, #239	@ 0xef
 800bbfe:	48a7      	ldr	r0, [pc, #668]	@ (800be9c <_dtoa_r+0x2cc>)
 800bc00:	f001 fc5a 	bl	800d4b8 <__assert_func>
 800bc04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bc08:	6007      	str	r7, [r0, #0]
 800bc0a:	60c7      	str	r7, [r0, #12]
 800bc0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc10:	6819      	ldr	r1, [r3, #0]
 800bc12:	b159      	cbz	r1, 800bc2c <_dtoa_r+0x5c>
 800bc14:	685a      	ldr	r2, [r3, #4]
 800bc16:	604a      	str	r2, [r1, #4]
 800bc18:	2301      	movs	r3, #1
 800bc1a:	4093      	lsls	r3, r2
 800bc1c:	608b      	str	r3, [r1, #8]
 800bc1e:	4658      	mov	r0, fp
 800bc20:	f000 feda 	bl	800c9d8 <_Bfree>
 800bc24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	601a      	str	r2, [r3, #0]
 800bc2c:	1e2b      	subs	r3, r5, #0
 800bc2e:	bfb9      	ittee	lt
 800bc30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bc34:	9303      	strlt	r3, [sp, #12]
 800bc36:	2300      	movge	r3, #0
 800bc38:	6033      	strge	r3, [r6, #0]
 800bc3a:	9f03      	ldr	r7, [sp, #12]
 800bc3c:	4b98      	ldr	r3, [pc, #608]	@ (800bea0 <_dtoa_r+0x2d0>)
 800bc3e:	bfbc      	itt	lt
 800bc40:	2201      	movlt	r2, #1
 800bc42:	6032      	strlt	r2, [r6, #0]
 800bc44:	43bb      	bics	r3, r7
 800bc46:	d112      	bne.n	800bc6e <_dtoa_r+0x9e>
 800bc48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bc4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bc4e:	6013      	str	r3, [r2, #0]
 800bc50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc54:	4323      	orrs	r3, r4
 800bc56:	f000 854d 	beq.w	800c6f4 <_dtoa_r+0xb24>
 800bc5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800beb4 <_dtoa_r+0x2e4>
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f000 854f 	beq.w	800c704 <_dtoa_r+0xb34>
 800bc66:	f10a 0303 	add.w	r3, sl, #3
 800bc6a:	f000 bd49 	b.w	800c700 <_dtoa_r+0xb30>
 800bc6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc72:	2200      	movs	r2, #0
 800bc74:	ec51 0b17 	vmov	r0, r1, d7
 800bc78:	2300      	movs	r3, #0
 800bc7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bc7e:	f7f4 ff23 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc82:	4680      	mov	r8, r0
 800bc84:	b158      	cbz	r0, 800bc9e <_dtoa_r+0xce>
 800bc86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bc88:	2301      	movs	r3, #1
 800bc8a:	6013      	str	r3, [r2, #0]
 800bc8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc8e:	b113      	cbz	r3, 800bc96 <_dtoa_r+0xc6>
 800bc90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bc92:	4b84      	ldr	r3, [pc, #528]	@ (800bea4 <_dtoa_r+0x2d4>)
 800bc94:	6013      	str	r3, [r2, #0]
 800bc96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800beb8 <_dtoa_r+0x2e8>
 800bc9a:	f000 bd33 	b.w	800c704 <_dtoa_r+0xb34>
 800bc9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bca2:	aa16      	add	r2, sp, #88	@ 0x58
 800bca4:	a917      	add	r1, sp, #92	@ 0x5c
 800bca6:	4658      	mov	r0, fp
 800bca8:	f001 f980 	bl	800cfac <__d2b>
 800bcac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bcb0:	4681      	mov	r9, r0
 800bcb2:	2e00      	cmp	r6, #0
 800bcb4:	d077      	beq.n	800bda6 <_dtoa_r+0x1d6>
 800bcb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bcb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bcbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bcc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bccc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	4b74      	ldr	r3, [pc, #464]	@ (800bea8 <_dtoa_r+0x2d8>)
 800bcd6:	f7f4 fad7 	bl	8000288 <__aeabi_dsub>
 800bcda:	a369      	add	r3, pc, #420	@ (adr r3, 800be80 <_dtoa_r+0x2b0>)
 800bcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce0:	f7f4 fc8a 	bl	80005f8 <__aeabi_dmul>
 800bce4:	a368      	add	r3, pc, #416	@ (adr r3, 800be88 <_dtoa_r+0x2b8>)
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7f4 facf 	bl	800028c <__adddf3>
 800bcee:	4604      	mov	r4, r0
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	460d      	mov	r5, r1
 800bcf4:	f7f4 fc16 	bl	8000524 <__aeabi_i2d>
 800bcf8:	a365      	add	r3, pc, #404	@ (adr r3, 800be90 <_dtoa_r+0x2c0>)
 800bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfe:	f7f4 fc7b 	bl	80005f8 <__aeabi_dmul>
 800bd02:	4602      	mov	r2, r0
 800bd04:	460b      	mov	r3, r1
 800bd06:	4620      	mov	r0, r4
 800bd08:	4629      	mov	r1, r5
 800bd0a:	f7f4 fabf 	bl	800028c <__adddf3>
 800bd0e:	4604      	mov	r4, r0
 800bd10:	460d      	mov	r5, r1
 800bd12:	f7f4 ff21 	bl	8000b58 <__aeabi_d2iz>
 800bd16:	2200      	movs	r2, #0
 800bd18:	4607      	mov	r7, r0
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	4629      	mov	r1, r5
 800bd20:	f7f4 fedc 	bl	8000adc <__aeabi_dcmplt>
 800bd24:	b140      	cbz	r0, 800bd38 <_dtoa_r+0x168>
 800bd26:	4638      	mov	r0, r7
 800bd28:	f7f4 fbfc 	bl	8000524 <__aeabi_i2d>
 800bd2c:	4622      	mov	r2, r4
 800bd2e:	462b      	mov	r3, r5
 800bd30:	f7f4 feca 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd34:	b900      	cbnz	r0, 800bd38 <_dtoa_r+0x168>
 800bd36:	3f01      	subs	r7, #1
 800bd38:	2f16      	cmp	r7, #22
 800bd3a:	d851      	bhi.n	800bde0 <_dtoa_r+0x210>
 800bd3c:	4b5b      	ldr	r3, [pc, #364]	@ (800beac <_dtoa_r+0x2dc>)
 800bd3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd4a:	f7f4 fec7 	bl	8000adc <__aeabi_dcmplt>
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	d048      	beq.n	800bde4 <_dtoa_r+0x214>
 800bd52:	3f01      	subs	r7, #1
 800bd54:	2300      	movs	r3, #0
 800bd56:	9312      	str	r3, [sp, #72]	@ 0x48
 800bd58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bd5a:	1b9b      	subs	r3, r3, r6
 800bd5c:	1e5a      	subs	r2, r3, #1
 800bd5e:	bf44      	itt	mi
 800bd60:	f1c3 0801 	rsbmi	r8, r3, #1
 800bd64:	2300      	movmi	r3, #0
 800bd66:	9208      	str	r2, [sp, #32]
 800bd68:	bf54      	ite	pl
 800bd6a:	f04f 0800 	movpl.w	r8, #0
 800bd6e:	9308      	strmi	r3, [sp, #32]
 800bd70:	2f00      	cmp	r7, #0
 800bd72:	db39      	blt.n	800bde8 <_dtoa_r+0x218>
 800bd74:	9b08      	ldr	r3, [sp, #32]
 800bd76:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bd78:	443b      	add	r3, r7
 800bd7a:	9308      	str	r3, [sp, #32]
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd82:	2b09      	cmp	r3, #9
 800bd84:	d864      	bhi.n	800be50 <_dtoa_r+0x280>
 800bd86:	2b05      	cmp	r3, #5
 800bd88:	bfc4      	itt	gt
 800bd8a:	3b04      	subgt	r3, #4
 800bd8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bd8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd90:	f1a3 0302 	sub.w	r3, r3, #2
 800bd94:	bfcc      	ite	gt
 800bd96:	2400      	movgt	r4, #0
 800bd98:	2401      	movle	r4, #1
 800bd9a:	2b03      	cmp	r3, #3
 800bd9c:	d863      	bhi.n	800be66 <_dtoa_r+0x296>
 800bd9e:	e8df f003 	tbb	[pc, r3]
 800bda2:	372a      	.short	0x372a
 800bda4:	5535      	.short	0x5535
 800bda6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bdaa:	441e      	add	r6, r3
 800bdac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bdb0:	2b20      	cmp	r3, #32
 800bdb2:	bfc1      	itttt	gt
 800bdb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bdb8:	409f      	lslgt	r7, r3
 800bdba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bdbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bdc2:	bfd6      	itet	le
 800bdc4:	f1c3 0320 	rsble	r3, r3, #32
 800bdc8:	ea47 0003 	orrgt.w	r0, r7, r3
 800bdcc:	fa04 f003 	lslle.w	r0, r4, r3
 800bdd0:	f7f4 fb98 	bl	8000504 <__aeabi_ui2d>
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bdda:	3e01      	subs	r6, #1
 800bddc:	9214      	str	r2, [sp, #80]	@ 0x50
 800bdde:	e777      	b.n	800bcd0 <_dtoa_r+0x100>
 800bde0:	2301      	movs	r3, #1
 800bde2:	e7b8      	b.n	800bd56 <_dtoa_r+0x186>
 800bde4:	9012      	str	r0, [sp, #72]	@ 0x48
 800bde6:	e7b7      	b.n	800bd58 <_dtoa_r+0x188>
 800bde8:	427b      	negs	r3, r7
 800bdea:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdec:	2300      	movs	r3, #0
 800bdee:	eba8 0807 	sub.w	r8, r8, r7
 800bdf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bdf4:	e7c4      	b.n	800bd80 <_dtoa_r+0x1b0>
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	dc35      	bgt.n	800be6c <_dtoa_r+0x29c>
 800be00:	2301      	movs	r3, #1
 800be02:	9300      	str	r3, [sp, #0]
 800be04:	9307      	str	r3, [sp, #28]
 800be06:	461a      	mov	r2, r3
 800be08:	920e      	str	r2, [sp, #56]	@ 0x38
 800be0a:	e00b      	b.n	800be24 <_dtoa_r+0x254>
 800be0c:	2301      	movs	r3, #1
 800be0e:	e7f3      	b.n	800bdf8 <_dtoa_r+0x228>
 800be10:	2300      	movs	r3, #0
 800be12:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be16:	18fb      	adds	r3, r7, r3
 800be18:	9300      	str	r3, [sp, #0]
 800be1a:	3301      	adds	r3, #1
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	9307      	str	r3, [sp, #28]
 800be20:	bfb8      	it	lt
 800be22:	2301      	movlt	r3, #1
 800be24:	f8db 001c 	ldr.w	r0, [fp, #28]
 800be28:	2100      	movs	r1, #0
 800be2a:	2204      	movs	r2, #4
 800be2c:	f102 0514 	add.w	r5, r2, #20
 800be30:	429d      	cmp	r5, r3
 800be32:	d91f      	bls.n	800be74 <_dtoa_r+0x2a4>
 800be34:	6041      	str	r1, [r0, #4]
 800be36:	4658      	mov	r0, fp
 800be38:	f000 fd8e 	bl	800c958 <_Balloc>
 800be3c:	4682      	mov	sl, r0
 800be3e:	2800      	cmp	r0, #0
 800be40:	d13c      	bne.n	800bebc <_dtoa_r+0x2ec>
 800be42:	4b1b      	ldr	r3, [pc, #108]	@ (800beb0 <_dtoa_r+0x2e0>)
 800be44:	4602      	mov	r2, r0
 800be46:	f240 11af 	movw	r1, #431	@ 0x1af
 800be4a:	e6d8      	b.n	800bbfe <_dtoa_r+0x2e>
 800be4c:	2301      	movs	r3, #1
 800be4e:	e7e0      	b.n	800be12 <_dtoa_r+0x242>
 800be50:	2401      	movs	r4, #1
 800be52:	2300      	movs	r3, #0
 800be54:	9309      	str	r3, [sp, #36]	@ 0x24
 800be56:	940b      	str	r4, [sp, #44]	@ 0x2c
 800be58:	f04f 33ff 	mov.w	r3, #4294967295
 800be5c:	9300      	str	r3, [sp, #0]
 800be5e:	9307      	str	r3, [sp, #28]
 800be60:	2200      	movs	r2, #0
 800be62:	2312      	movs	r3, #18
 800be64:	e7d0      	b.n	800be08 <_dtoa_r+0x238>
 800be66:	2301      	movs	r3, #1
 800be68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be6a:	e7f5      	b.n	800be58 <_dtoa_r+0x288>
 800be6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be6e:	9300      	str	r3, [sp, #0]
 800be70:	9307      	str	r3, [sp, #28]
 800be72:	e7d7      	b.n	800be24 <_dtoa_r+0x254>
 800be74:	3101      	adds	r1, #1
 800be76:	0052      	lsls	r2, r2, #1
 800be78:	e7d8      	b.n	800be2c <_dtoa_r+0x25c>
 800be7a:	bf00      	nop
 800be7c:	f3af 8000 	nop.w
 800be80:	636f4361 	.word	0x636f4361
 800be84:	3fd287a7 	.word	0x3fd287a7
 800be88:	8b60c8b3 	.word	0x8b60c8b3
 800be8c:	3fc68a28 	.word	0x3fc68a28
 800be90:	509f79fb 	.word	0x509f79fb
 800be94:	3fd34413 	.word	0x3fd34413
 800be98:	0800dcbd 	.word	0x0800dcbd
 800be9c:	0800dcd4 	.word	0x0800dcd4
 800bea0:	7ff00000 	.word	0x7ff00000
 800bea4:	0800dc8d 	.word	0x0800dc8d
 800bea8:	3ff80000 	.word	0x3ff80000
 800beac:	0800ddd0 	.word	0x0800ddd0
 800beb0:	0800dd2c 	.word	0x0800dd2c
 800beb4:	0800dcb9 	.word	0x0800dcb9
 800beb8:	0800dc8c 	.word	0x0800dc8c
 800bebc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bec0:	6018      	str	r0, [r3, #0]
 800bec2:	9b07      	ldr	r3, [sp, #28]
 800bec4:	2b0e      	cmp	r3, #14
 800bec6:	f200 80a4 	bhi.w	800c012 <_dtoa_r+0x442>
 800beca:	2c00      	cmp	r4, #0
 800becc:	f000 80a1 	beq.w	800c012 <_dtoa_r+0x442>
 800bed0:	2f00      	cmp	r7, #0
 800bed2:	dd33      	ble.n	800bf3c <_dtoa_r+0x36c>
 800bed4:	4bad      	ldr	r3, [pc, #692]	@ (800c18c <_dtoa_r+0x5bc>)
 800bed6:	f007 020f 	and.w	r2, r7, #15
 800beda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bede:	ed93 7b00 	vldr	d7, [r3]
 800bee2:	05f8      	lsls	r0, r7, #23
 800bee4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bee8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800beec:	d516      	bpl.n	800bf1c <_dtoa_r+0x34c>
 800beee:	4ba8      	ldr	r3, [pc, #672]	@ (800c190 <_dtoa_r+0x5c0>)
 800bef0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bef4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bef8:	f7f4 fca8 	bl	800084c <__aeabi_ddiv>
 800befc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf00:	f004 040f 	and.w	r4, r4, #15
 800bf04:	2603      	movs	r6, #3
 800bf06:	4da2      	ldr	r5, [pc, #648]	@ (800c190 <_dtoa_r+0x5c0>)
 800bf08:	b954      	cbnz	r4, 800bf20 <_dtoa_r+0x350>
 800bf0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf12:	f7f4 fc9b 	bl	800084c <__aeabi_ddiv>
 800bf16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf1a:	e028      	b.n	800bf6e <_dtoa_r+0x39e>
 800bf1c:	2602      	movs	r6, #2
 800bf1e:	e7f2      	b.n	800bf06 <_dtoa_r+0x336>
 800bf20:	07e1      	lsls	r1, r4, #31
 800bf22:	d508      	bpl.n	800bf36 <_dtoa_r+0x366>
 800bf24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf28:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf2c:	f7f4 fb64 	bl	80005f8 <__aeabi_dmul>
 800bf30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf34:	3601      	adds	r6, #1
 800bf36:	1064      	asrs	r4, r4, #1
 800bf38:	3508      	adds	r5, #8
 800bf3a:	e7e5      	b.n	800bf08 <_dtoa_r+0x338>
 800bf3c:	f000 80d2 	beq.w	800c0e4 <_dtoa_r+0x514>
 800bf40:	427c      	negs	r4, r7
 800bf42:	4b92      	ldr	r3, [pc, #584]	@ (800c18c <_dtoa_r+0x5bc>)
 800bf44:	4d92      	ldr	r5, [pc, #584]	@ (800c190 <_dtoa_r+0x5c0>)
 800bf46:	f004 020f 	and.w	r2, r4, #15
 800bf4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf56:	f7f4 fb4f 	bl	80005f8 <__aeabi_dmul>
 800bf5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf5e:	1124      	asrs	r4, r4, #4
 800bf60:	2300      	movs	r3, #0
 800bf62:	2602      	movs	r6, #2
 800bf64:	2c00      	cmp	r4, #0
 800bf66:	f040 80b2 	bne.w	800c0ce <_dtoa_r+0x4fe>
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1d3      	bne.n	800bf16 <_dtoa_r+0x346>
 800bf6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f000 80b7 	beq.w	800c0e8 <_dtoa_r+0x518>
 800bf7a:	4b86      	ldr	r3, [pc, #536]	@ (800c194 <_dtoa_r+0x5c4>)
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	4620      	mov	r0, r4
 800bf80:	4629      	mov	r1, r5
 800bf82:	f7f4 fdab 	bl	8000adc <__aeabi_dcmplt>
 800bf86:	2800      	cmp	r0, #0
 800bf88:	f000 80ae 	beq.w	800c0e8 <_dtoa_r+0x518>
 800bf8c:	9b07      	ldr	r3, [sp, #28]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	f000 80aa 	beq.w	800c0e8 <_dtoa_r+0x518>
 800bf94:	9b00      	ldr	r3, [sp, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	dd37      	ble.n	800c00a <_dtoa_r+0x43a>
 800bf9a:	1e7b      	subs	r3, r7, #1
 800bf9c:	9304      	str	r3, [sp, #16]
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	4b7d      	ldr	r3, [pc, #500]	@ (800c198 <_dtoa_r+0x5c8>)
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	4629      	mov	r1, r5
 800bfa6:	f7f4 fb27 	bl	80005f8 <__aeabi_dmul>
 800bfaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfae:	9c00      	ldr	r4, [sp, #0]
 800bfb0:	3601      	adds	r6, #1
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	f7f4 fab6 	bl	8000524 <__aeabi_i2d>
 800bfb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfbc:	f7f4 fb1c 	bl	80005f8 <__aeabi_dmul>
 800bfc0:	4b76      	ldr	r3, [pc, #472]	@ (800c19c <_dtoa_r+0x5cc>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f7f4 f962 	bl	800028c <__adddf3>
 800bfc8:	4605      	mov	r5, r0
 800bfca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bfce:	2c00      	cmp	r4, #0
 800bfd0:	f040 808d 	bne.w	800c0ee <_dtoa_r+0x51e>
 800bfd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfd8:	4b71      	ldr	r3, [pc, #452]	@ (800c1a0 <_dtoa_r+0x5d0>)
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f7f4 f954 	bl	8000288 <__aeabi_dsub>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	460b      	mov	r3, r1
 800bfe4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfe8:	462a      	mov	r2, r5
 800bfea:	4633      	mov	r3, r6
 800bfec:	f7f4 fd94 	bl	8000b18 <__aeabi_dcmpgt>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	f040 828b 	bne.w	800c50c <_dtoa_r+0x93c>
 800bff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bffa:	462a      	mov	r2, r5
 800bffc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c000:	f7f4 fd6c 	bl	8000adc <__aeabi_dcmplt>
 800c004:	2800      	cmp	r0, #0
 800c006:	f040 8128 	bne.w	800c25a <_dtoa_r+0x68a>
 800c00a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c00e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c012:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c014:	2b00      	cmp	r3, #0
 800c016:	f2c0 815a 	blt.w	800c2ce <_dtoa_r+0x6fe>
 800c01a:	2f0e      	cmp	r7, #14
 800c01c:	f300 8157 	bgt.w	800c2ce <_dtoa_r+0x6fe>
 800c020:	4b5a      	ldr	r3, [pc, #360]	@ (800c18c <_dtoa_r+0x5bc>)
 800c022:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c026:	ed93 7b00 	vldr	d7, [r3]
 800c02a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	ed8d 7b00 	vstr	d7, [sp]
 800c032:	da03      	bge.n	800c03c <_dtoa_r+0x46c>
 800c034:	9b07      	ldr	r3, [sp, #28]
 800c036:	2b00      	cmp	r3, #0
 800c038:	f340 8101 	ble.w	800c23e <_dtoa_r+0x66e>
 800c03c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c040:	4656      	mov	r6, sl
 800c042:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c046:	4620      	mov	r0, r4
 800c048:	4629      	mov	r1, r5
 800c04a:	f7f4 fbff 	bl	800084c <__aeabi_ddiv>
 800c04e:	f7f4 fd83 	bl	8000b58 <__aeabi_d2iz>
 800c052:	4680      	mov	r8, r0
 800c054:	f7f4 fa66 	bl	8000524 <__aeabi_i2d>
 800c058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c05c:	f7f4 facc 	bl	80005f8 <__aeabi_dmul>
 800c060:	4602      	mov	r2, r0
 800c062:	460b      	mov	r3, r1
 800c064:	4620      	mov	r0, r4
 800c066:	4629      	mov	r1, r5
 800c068:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c06c:	f7f4 f90c 	bl	8000288 <__aeabi_dsub>
 800c070:	f806 4b01 	strb.w	r4, [r6], #1
 800c074:	9d07      	ldr	r5, [sp, #28]
 800c076:	eba6 040a 	sub.w	r4, r6, sl
 800c07a:	42a5      	cmp	r5, r4
 800c07c:	4602      	mov	r2, r0
 800c07e:	460b      	mov	r3, r1
 800c080:	f040 8117 	bne.w	800c2b2 <_dtoa_r+0x6e2>
 800c084:	f7f4 f902 	bl	800028c <__adddf3>
 800c088:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c08c:	4604      	mov	r4, r0
 800c08e:	460d      	mov	r5, r1
 800c090:	f7f4 fd42 	bl	8000b18 <__aeabi_dcmpgt>
 800c094:	2800      	cmp	r0, #0
 800c096:	f040 80f9 	bne.w	800c28c <_dtoa_r+0x6bc>
 800c09a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c09e:	4620      	mov	r0, r4
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	f7f4 fd11 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0a6:	b118      	cbz	r0, 800c0b0 <_dtoa_r+0x4e0>
 800c0a8:	f018 0f01 	tst.w	r8, #1
 800c0ac:	f040 80ee 	bne.w	800c28c <_dtoa_r+0x6bc>
 800c0b0:	4649      	mov	r1, r9
 800c0b2:	4658      	mov	r0, fp
 800c0b4:	f000 fc90 	bl	800c9d8 <_Bfree>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	7033      	strb	r3, [r6, #0]
 800c0bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c0be:	3701      	adds	r7, #1
 800c0c0:	601f      	str	r7, [r3, #0]
 800c0c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f000 831d 	beq.w	800c704 <_dtoa_r+0xb34>
 800c0ca:	601e      	str	r6, [r3, #0]
 800c0cc:	e31a      	b.n	800c704 <_dtoa_r+0xb34>
 800c0ce:	07e2      	lsls	r2, r4, #31
 800c0d0:	d505      	bpl.n	800c0de <_dtoa_r+0x50e>
 800c0d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c0d6:	f7f4 fa8f 	bl	80005f8 <__aeabi_dmul>
 800c0da:	3601      	adds	r6, #1
 800c0dc:	2301      	movs	r3, #1
 800c0de:	1064      	asrs	r4, r4, #1
 800c0e0:	3508      	adds	r5, #8
 800c0e2:	e73f      	b.n	800bf64 <_dtoa_r+0x394>
 800c0e4:	2602      	movs	r6, #2
 800c0e6:	e742      	b.n	800bf6e <_dtoa_r+0x39e>
 800c0e8:	9c07      	ldr	r4, [sp, #28]
 800c0ea:	9704      	str	r7, [sp, #16]
 800c0ec:	e761      	b.n	800bfb2 <_dtoa_r+0x3e2>
 800c0ee:	4b27      	ldr	r3, [pc, #156]	@ (800c18c <_dtoa_r+0x5bc>)
 800c0f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c0f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c0f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c0fa:	4454      	add	r4, sl
 800c0fc:	2900      	cmp	r1, #0
 800c0fe:	d053      	beq.n	800c1a8 <_dtoa_r+0x5d8>
 800c100:	4928      	ldr	r1, [pc, #160]	@ (800c1a4 <_dtoa_r+0x5d4>)
 800c102:	2000      	movs	r0, #0
 800c104:	f7f4 fba2 	bl	800084c <__aeabi_ddiv>
 800c108:	4633      	mov	r3, r6
 800c10a:	462a      	mov	r2, r5
 800c10c:	f7f4 f8bc 	bl	8000288 <__aeabi_dsub>
 800c110:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c114:	4656      	mov	r6, sl
 800c116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c11a:	f7f4 fd1d 	bl	8000b58 <__aeabi_d2iz>
 800c11e:	4605      	mov	r5, r0
 800c120:	f7f4 fa00 	bl	8000524 <__aeabi_i2d>
 800c124:	4602      	mov	r2, r0
 800c126:	460b      	mov	r3, r1
 800c128:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c12c:	f7f4 f8ac 	bl	8000288 <__aeabi_dsub>
 800c130:	3530      	adds	r5, #48	@ 0x30
 800c132:	4602      	mov	r2, r0
 800c134:	460b      	mov	r3, r1
 800c136:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c13a:	f806 5b01 	strb.w	r5, [r6], #1
 800c13e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c142:	f7f4 fccb 	bl	8000adc <__aeabi_dcmplt>
 800c146:	2800      	cmp	r0, #0
 800c148:	d171      	bne.n	800c22e <_dtoa_r+0x65e>
 800c14a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c14e:	4911      	ldr	r1, [pc, #68]	@ (800c194 <_dtoa_r+0x5c4>)
 800c150:	2000      	movs	r0, #0
 800c152:	f7f4 f899 	bl	8000288 <__aeabi_dsub>
 800c156:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c15a:	f7f4 fcbf 	bl	8000adc <__aeabi_dcmplt>
 800c15e:	2800      	cmp	r0, #0
 800c160:	f040 8095 	bne.w	800c28e <_dtoa_r+0x6be>
 800c164:	42a6      	cmp	r6, r4
 800c166:	f43f af50 	beq.w	800c00a <_dtoa_r+0x43a>
 800c16a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c16e:	4b0a      	ldr	r3, [pc, #40]	@ (800c198 <_dtoa_r+0x5c8>)
 800c170:	2200      	movs	r2, #0
 800c172:	f7f4 fa41 	bl	80005f8 <__aeabi_dmul>
 800c176:	4b08      	ldr	r3, [pc, #32]	@ (800c198 <_dtoa_r+0x5c8>)
 800c178:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c17c:	2200      	movs	r2, #0
 800c17e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c182:	f7f4 fa39 	bl	80005f8 <__aeabi_dmul>
 800c186:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c18a:	e7c4      	b.n	800c116 <_dtoa_r+0x546>
 800c18c:	0800ddd0 	.word	0x0800ddd0
 800c190:	0800dda8 	.word	0x0800dda8
 800c194:	3ff00000 	.word	0x3ff00000
 800c198:	40240000 	.word	0x40240000
 800c19c:	401c0000 	.word	0x401c0000
 800c1a0:	40140000 	.word	0x40140000
 800c1a4:	3fe00000 	.word	0x3fe00000
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	f7f4 fa24 	bl	80005f8 <__aeabi_dmul>
 800c1b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c1b4:	9415      	str	r4, [sp, #84]	@ 0x54
 800c1b6:	4656      	mov	r6, sl
 800c1b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1bc:	f7f4 fccc 	bl	8000b58 <__aeabi_d2iz>
 800c1c0:	4605      	mov	r5, r0
 800c1c2:	f7f4 f9af 	bl	8000524 <__aeabi_i2d>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1ce:	f7f4 f85b 	bl	8000288 <__aeabi_dsub>
 800c1d2:	3530      	adds	r5, #48	@ 0x30
 800c1d4:	f806 5b01 	strb.w	r5, [r6], #1
 800c1d8:	4602      	mov	r2, r0
 800c1da:	460b      	mov	r3, r1
 800c1dc:	42a6      	cmp	r6, r4
 800c1de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c1e2:	f04f 0200 	mov.w	r2, #0
 800c1e6:	d124      	bne.n	800c232 <_dtoa_r+0x662>
 800c1e8:	4bac      	ldr	r3, [pc, #688]	@ (800c49c <_dtoa_r+0x8cc>)
 800c1ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c1ee:	f7f4 f84d 	bl	800028c <__adddf3>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1fa:	f7f4 fc8d 	bl	8000b18 <__aeabi_dcmpgt>
 800c1fe:	2800      	cmp	r0, #0
 800c200:	d145      	bne.n	800c28e <_dtoa_r+0x6be>
 800c202:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c206:	49a5      	ldr	r1, [pc, #660]	@ (800c49c <_dtoa_r+0x8cc>)
 800c208:	2000      	movs	r0, #0
 800c20a:	f7f4 f83d 	bl	8000288 <__aeabi_dsub>
 800c20e:	4602      	mov	r2, r0
 800c210:	460b      	mov	r3, r1
 800c212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c216:	f7f4 fc61 	bl	8000adc <__aeabi_dcmplt>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	f43f aef5 	beq.w	800c00a <_dtoa_r+0x43a>
 800c220:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c222:	1e73      	subs	r3, r6, #1
 800c224:	9315      	str	r3, [sp, #84]	@ 0x54
 800c226:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c22a:	2b30      	cmp	r3, #48	@ 0x30
 800c22c:	d0f8      	beq.n	800c220 <_dtoa_r+0x650>
 800c22e:	9f04      	ldr	r7, [sp, #16]
 800c230:	e73e      	b.n	800c0b0 <_dtoa_r+0x4e0>
 800c232:	4b9b      	ldr	r3, [pc, #620]	@ (800c4a0 <_dtoa_r+0x8d0>)
 800c234:	f7f4 f9e0 	bl	80005f8 <__aeabi_dmul>
 800c238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c23c:	e7bc      	b.n	800c1b8 <_dtoa_r+0x5e8>
 800c23e:	d10c      	bne.n	800c25a <_dtoa_r+0x68a>
 800c240:	4b98      	ldr	r3, [pc, #608]	@ (800c4a4 <_dtoa_r+0x8d4>)
 800c242:	2200      	movs	r2, #0
 800c244:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c248:	f7f4 f9d6 	bl	80005f8 <__aeabi_dmul>
 800c24c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c250:	f7f4 fc58 	bl	8000b04 <__aeabi_dcmpge>
 800c254:	2800      	cmp	r0, #0
 800c256:	f000 8157 	beq.w	800c508 <_dtoa_r+0x938>
 800c25a:	2400      	movs	r4, #0
 800c25c:	4625      	mov	r5, r4
 800c25e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c260:	43db      	mvns	r3, r3
 800c262:	9304      	str	r3, [sp, #16]
 800c264:	4656      	mov	r6, sl
 800c266:	2700      	movs	r7, #0
 800c268:	4621      	mov	r1, r4
 800c26a:	4658      	mov	r0, fp
 800c26c:	f000 fbb4 	bl	800c9d8 <_Bfree>
 800c270:	2d00      	cmp	r5, #0
 800c272:	d0dc      	beq.n	800c22e <_dtoa_r+0x65e>
 800c274:	b12f      	cbz	r7, 800c282 <_dtoa_r+0x6b2>
 800c276:	42af      	cmp	r7, r5
 800c278:	d003      	beq.n	800c282 <_dtoa_r+0x6b2>
 800c27a:	4639      	mov	r1, r7
 800c27c:	4658      	mov	r0, fp
 800c27e:	f000 fbab 	bl	800c9d8 <_Bfree>
 800c282:	4629      	mov	r1, r5
 800c284:	4658      	mov	r0, fp
 800c286:	f000 fba7 	bl	800c9d8 <_Bfree>
 800c28a:	e7d0      	b.n	800c22e <_dtoa_r+0x65e>
 800c28c:	9704      	str	r7, [sp, #16]
 800c28e:	4633      	mov	r3, r6
 800c290:	461e      	mov	r6, r3
 800c292:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c296:	2a39      	cmp	r2, #57	@ 0x39
 800c298:	d107      	bne.n	800c2aa <_dtoa_r+0x6da>
 800c29a:	459a      	cmp	sl, r3
 800c29c:	d1f8      	bne.n	800c290 <_dtoa_r+0x6c0>
 800c29e:	9a04      	ldr	r2, [sp, #16]
 800c2a0:	3201      	adds	r2, #1
 800c2a2:	9204      	str	r2, [sp, #16]
 800c2a4:	2230      	movs	r2, #48	@ 0x30
 800c2a6:	f88a 2000 	strb.w	r2, [sl]
 800c2aa:	781a      	ldrb	r2, [r3, #0]
 800c2ac:	3201      	adds	r2, #1
 800c2ae:	701a      	strb	r2, [r3, #0]
 800c2b0:	e7bd      	b.n	800c22e <_dtoa_r+0x65e>
 800c2b2:	4b7b      	ldr	r3, [pc, #492]	@ (800c4a0 <_dtoa_r+0x8d0>)
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	f7f4 f99f 	bl	80005f8 <__aeabi_dmul>
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	2300      	movs	r3, #0
 800c2be:	4604      	mov	r4, r0
 800c2c0:	460d      	mov	r5, r1
 800c2c2:	f7f4 fc01 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	f43f aebb 	beq.w	800c042 <_dtoa_r+0x472>
 800c2cc:	e6f0      	b.n	800c0b0 <_dtoa_r+0x4e0>
 800c2ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c2d0:	2a00      	cmp	r2, #0
 800c2d2:	f000 80db 	beq.w	800c48c <_dtoa_r+0x8bc>
 800c2d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2d8:	2a01      	cmp	r2, #1
 800c2da:	f300 80bf 	bgt.w	800c45c <_dtoa_r+0x88c>
 800c2de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c2e0:	2a00      	cmp	r2, #0
 800c2e2:	f000 80b7 	beq.w	800c454 <_dtoa_r+0x884>
 800c2e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c2ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c2ec:	4646      	mov	r6, r8
 800c2ee:	9a08      	ldr	r2, [sp, #32]
 800c2f0:	2101      	movs	r1, #1
 800c2f2:	441a      	add	r2, r3
 800c2f4:	4658      	mov	r0, fp
 800c2f6:	4498      	add	r8, r3
 800c2f8:	9208      	str	r2, [sp, #32]
 800c2fa:	f000 fc21 	bl	800cb40 <__i2b>
 800c2fe:	4605      	mov	r5, r0
 800c300:	b15e      	cbz	r6, 800c31a <_dtoa_r+0x74a>
 800c302:	9b08      	ldr	r3, [sp, #32]
 800c304:	2b00      	cmp	r3, #0
 800c306:	dd08      	ble.n	800c31a <_dtoa_r+0x74a>
 800c308:	42b3      	cmp	r3, r6
 800c30a:	9a08      	ldr	r2, [sp, #32]
 800c30c:	bfa8      	it	ge
 800c30e:	4633      	movge	r3, r6
 800c310:	eba8 0803 	sub.w	r8, r8, r3
 800c314:	1af6      	subs	r6, r6, r3
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	9308      	str	r3, [sp, #32]
 800c31a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c31c:	b1f3      	cbz	r3, 800c35c <_dtoa_r+0x78c>
 800c31e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c320:	2b00      	cmp	r3, #0
 800c322:	f000 80b7 	beq.w	800c494 <_dtoa_r+0x8c4>
 800c326:	b18c      	cbz	r4, 800c34c <_dtoa_r+0x77c>
 800c328:	4629      	mov	r1, r5
 800c32a:	4622      	mov	r2, r4
 800c32c:	4658      	mov	r0, fp
 800c32e:	f000 fcc7 	bl	800ccc0 <__pow5mult>
 800c332:	464a      	mov	r2, r9
 800c334:	4601      	mov	r1, r0
 800c336:	4605      	mov	r5, r0
 800c338:	4658      	mov	r0, fp
 800c33a:	f000 fc17 	bl	800cb6c <__multiply>
 800c33e:	4649      	mov	r1, r9
 800c340:	9004      	str	r0, [sp, #16]
 800c342:	4658      	mov	r0, fp
 800c344:	f000 fb48 	bl	800c9d8 <_Bfree>
 800c348:	9b04      	ldr	r3, [sp, #16]
 800c34a:	4699      	mov	r9, r3
 800c34c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c34e:	1b1a      	subs	r2, r3, r4
 800c350:	d004      	beq.n	800c35c <_dtoa_r+0x78c>
 800c352:	4649      	mov	r1, r9
 800c354:	4658      	mov	r0, fp
 800c356:	f000 fcb3 	bl	800ccc0 <__pow5mult>
 800c35a:	4681      	mov	r9, r0
 800c35c:	2101      	movs	r1, #1
 800c35e:	4658      	mov	r0, fp
 800c360:	f000 fbee 	bl	800cb40 <__i2b>
 800c364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c366:	4604      	mov	r4, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	f000 81cf 	beq.w	800c70c <_dtoa_r+0xb3c>
 800c36e:	461a      	mov	r2, r3
 800c370:	4601      	mov	r1, r0
 800c372:	4658      	mov	r0, fp
 800c374:	f000 fca4 	bl	800ccc0 <__pow5mult>
 800c378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	4604      	mov	r4, r0
 800c37e:	f300 8095 	bgt.w	800c4ac <_dtoa_r+0x8dc>
 800c382:	9b02      	ldr	r3, [sp, #8]
 800c384:	2b00      	cmp	r3, #0
 800c386:	f040 8087 	bne.w	800c498 <_dtoa_r+0x8c8>
 800c38a:	9b03      	ldr	r3, [sp, #12]
 800c38c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c390:	2b00      	cmp	r3, #0
 800c392:	f040 8089 	bne.w	800c4a8 <_dtoa_r+0x8d8>
 800c396:	9b03      	ldr	r3, [sp, #12]
 800c398:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c39c:	0d1b      	lsrs	r3, r3, #20
 800c39e:	051b      	lsls	r3, r3, #20
 800c3a0:	b12b      	cbz	r3, 800c3ae <_dtoa_r+0x7de>
 800c3a2:	9b08      	ldr	r3, [sp, #32]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	9308      	str	r3, [sp, #32]
 800c3a8:	f108 0801 	add.w	r8, r8, #1
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	f000 81b0 	beq.w	800c718 <_dtoa_r+0xb48>
 800c3b8:	6923      	ldr	r3, [r4, #16]
 800c3ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c3be:	6918      	ldr	r0, [r3, #16]
 800c3c0:	f000 fb72 	bl	800caa8 <__hi0bits>
 800c3c4:	f1c0 0020 	rsb	r0, r0, #32
 800c3c8:	9b08      	ldr	r3, [sp, #32]
 800c3ca:	4418      	add	r0, r3
 800c3cc:	f010 001f 	ands.w	r0, r0, #31
 800c3d0:	d077      	beq.n	800c4c2 <_dtoa_r+0x8f2>
 800c3d2:	f1c0 0320 	rsb	r3, r0, #32
 800c3d6:	2b04      	cmp	r3, #4
 800c3d8:	dd6b      	ble.n	800c4b2 <_dtoa_r+0x8e2>
 800c3da:	9b08      	ldr	r3, [sp, #32]
 800c3dc:	f1c0 001c 	rsb	r0, r0, #28
 800c3e0:	4403      	add	r3, r0
 800c3e2:	4480      	add	r8, r0
 800c3e4:	4406      	add	r6, r0
 800c3e6:	9308      	str	r3, [sp, #32]
 800c3e8:	f1b8 0f00 	cmp.w	r8, #0
 800c3ec:	dd05      	ble.n	800c3fa <_dtoa_r+0x82a>
 800c3ee:	4649      	mov	r1, r9
 800c3f0:	4642      	mov	r2, r8
 800c3f2:	4658      	mov	r0, fp
 800c3f4:	f000 fcbe 	bl	800cd74 <__lshift>
 800c3f8:	4681      	mov	r9, r0
 800c3fa:	9b08      	ldr	r3, [sp, #32]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	dd05      	ble.n	800c40c <_dtoa_r+0x83c>
 800c400:	4621      	mov	r1, r4
 800c402:	461a      	mov	r2, r3
 800c404:	4658      	mov	r0, fp
 800c406:	f000 fcb5 	bl	800cd74 <__lshift>
 800c40a:	4604      	mov	r4, r0
 800c40c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d059      	beq.n	800c4c6 <_dtoa_r+0x8f6>
 800c412:	4621      	mov	r1, r4
 800c414:	4648      	mov	r0, r9
 800c416:	f000 fd19 	bl	800ce4c <__mcmp>
 800c41a:	2800      	cmp	r0, #0
 800c41c:	da53      	bge.n	800c4c6 <_dtoa_r+0x8f6>
 800c41e:	1e7b      	subs	r3, r7, #1
 800c420:	9304      	str	r3, [sp, #16]
 800c422:	4649      	mov	r1, r9
 800c424:	2300      	movs	r3, #0
 800c426:	220a      	movs	r2, #10
 800c428:	4658      	mov	r0, fp
 800c42a:	f000 faf7 	bl	800ca1c <__multadd>
 800c42e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c430:	4681      	mov	r9, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	f000 8172 	beq.w	800c71c <_dtoa_r+0xb4c>
 800c438:	2300      	movs	r3, #0
 800c43a:	4629      	mov	r1, r5
 800c43c:	220a      	movs	r2, #10
 800c43e:	4658      	mov	r0, fp
 800c440:	f000 faec 	bl	800ca1c <__multadd>
 800c444:	9b00      	ldr	r3, [sp, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	4605      	mov	r5, r0
 800c44a:	dc67      	bgt.n	800c51c <_dtoa_r+0x94c>
 800c44c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c44e:	2b02      	cmp	r3, #2
 800c450:	dc41      	bgt.n	800c4d6 <_dtoa_r+0x906>
 800c452:	e063      	b.n	800c51c <_dtoa_r+0x94c>
 800c454:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c456:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c45a:	e746      	b.n	800c2ea <_dtoa_r+0x71a>
 800c45c:	9b07      	ldr	r3, [sp, #28]
 800c45e:	1e5c      	subs	r4, r3, #1
 800c460:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c462:	42a3      	cmp	r3, r4
 800c464:	bfbf      	itttt	lt
 800c466:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c468:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c46a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c46c:	1ae3      	sublt	r3, r4, r3
 800c46e:	bfb4      	ite	lt
 800c470:	18d2      	addlt	r2, r2, r3
 800c472:	1b1c      	subge	r4, r3, r4
 800c474:	9b07      	ldr	r3, [sp, #28]
 800c476:	bfbc      	itt	lt
 800c478:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c47a:	2400      	movlt	r4, #0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	bfb5      	itete	lt
 800c480:	eba8 0603 	sublt.w	r6, r8, r3
 800c484:	9b07      	ldrge	r3, [sp, #28]
 800c486:	2300      	movlt	r3, #0
 800c488:	4646      	movge	r6, r8
 800c48a:	e730      	b.n	800c2ee <_dtoa_r+0x71e>
 800c48c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c48e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c490:	4646      	mov	r6, r8
 800c492:	e735      	b.n	800c300 <_dtoa_r+0x730>
 800c494:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c496:	e75c      	b.n	800c352 <_dtoa_r+0x782>
 800c498:	2300      	movs	r3, #0
 800c49a:	e788      	b.n	800c3ae <_dtoa_r+0x7de>
 800c49c:	3fe00000 	.word	0x3fe00000
 800c4a0:	40240000 	.word	0x40240000
 800c4a4:	40140000 	.word	0x40140000
 800c4a8:	9b02      	ldr	r3, [sp, #8]
 800c4aa:	e780      	b.n	800c3ae <_dtoa_r+0x7de>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4b0:	e782      	b.n	800c3b8 <_dtoa_r+0x7e8>
 800c4b2:	d099      	beq.n	800c3e8 <_dtoa_r+0x818>
 800c4b4:	9a08      	ldr	r2, [sp, #32]
 800c4b6:	331c      	adds	r3, #28
 800c4b8:	441a      	add	r2, r3
 800c4ba:	4498      	add	r8, r3
 800c4bc:	441e      	add	r6, r3
 800c4be:	9208      	str	r2, [sp, #32]
 800c4c0:	e792      	b.n	800c3e8 <_dtoa_r+0x818>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	e7f6      	b.n	800c4b4 <_dtoa_r+0x8e4>
 800c4c6:	9b07      	ldr	r3, [sp, #28]
 800c4c8:	9704      	str	r7, [sp, #16]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	dc20      	bgt.n	800c510 <_dtoa_r+0x940>
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4d2:	2b02      	cmp	r3, #2
 800c4d4:	dd1e      	ble.n	800c514 <_dtoa_r+0x944>
 800c4d6:	9b00      	ldr	r3, [sp, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	f47f aec0 	bne.w	800c25e <_dtoa_r+0x68e>
 800c4de:	4621      	mov	r1, r4
 800c4e0:	2205      	movs	r2, #5
 800c4e2:	4658      	mov	r0, fp
 800c4e4:	f000 fa9a 	bl	800ca1c <__multadd>
 800c4e8:	4601      	mov	r1, r0
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	4648      	mov	r0, r9
 800c4ee:	f000 fcad 	bl	800ce4c <__mcmp>
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	f77f aeb3 	ble.w	800c25e <_dtoa_r+0x68e>
 800c4f8:	4656      	mov	r6, sl
 800c4fa:	2331      	movs	r3, #49	@ 0x31
 800c4fc:	f806 3b01 	strb.w	r3, [r6], #1
 800c500:	9b04      	ldr	r3, [sp, #16]
 800c502:	3301      	adds	r3, #1
 800c504:	9304      	str	r3, [sp, #16]
 800c506:	e6ae      	b.n	800c266 <_dtoa_r+0x696>
 800c508:	9c07      	ldr	r4, [sp, #28]
 800c50a:	9704      	str	r7, [sp, #16]
 800c50c:	4625      	mov	r5, r4
 800c50e:	e7f3      	b.n	800c4f8 <_dtoa_r+0x928>
 800c510:	9b07      	ldr	r3, [sp, #28]
 800c512:	9300      	str	r3, [sp, #0]
 800c514:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c516:	2b00      	cmp	r3, #0
 800c518:	f000 8104 	beq.w	800c724 <_dtoa_r+0xb54>
 800c51c:	2e00      	cmp	r6, #0
 800c51e:	dd05      	ble.n	800c52c <_dtoa_r+0x95c>
 800c520:	4629      	mov	r1, r5
 800c522:	4632      	mov	r2, r6
 800c524:	4658      	mov	r0, fp
 800c526:	f000 fc25 	bl	800cd74 <__lshift>
 800c52a:	4605      	mov	r5, r0
 800c52c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d05a      	beq.n	800c5e8 <_dtoa_r+0xa18>
 800c532:	6869      	ldr	r1, [r5, #4]
 800c534:	4658      	mov	r0, fp
 800c536:	f000 fa0f 	bl	800c958 <_Balloc>
 800c53a:	4606      	mov	r6, r0
 800c53c:	b928      	cbnz	r0, 800c54a <_dtoa_r+0x97a>
 800c53e:	4b84      	ldr	r3, [pc, #528]	@ (800c750 <_dtoa_r+0xb80>)
 800c540:	4602      	mov	r2, r0
 800c542:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c546:	f7ff bb5a 	b.w	800bbfe <_dtoa_r+0x2e>
 800c54a:	692a      	ldr	r2, [r5, #16]
 800c54c:	3202      	adds	r2, #2
 800c54e:	0092      	lsls	r2, r2, #2
 800c550:	f105 010c 	add.w	r1, r5, #12
 800c554:	300c      	adds	r0, #12
 800c556:	f7ff faa4 	bl	800baa2 <memcpy>
 800c55a:	2201      	movs	r2, #1
 800c55c:	4631      	mov	r1, r6
 800c55e:	4658      	mov	r0, fp
 800c560:	f000 fc08 	bl	800cd74 <__lshift>
 800c564:	f10a 0301 	add.w	r3, sl, #1
 800c568:	9307      	str	r3, [sp, #28]
 800c56a:	9b00      	ldr	r3, [sp, #0]
 800c56c:	4453      	add	r3, sl
 800c56e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c570:	9b02      	ldr	r3, [sp, #8]
 800c572:	f003 0301 	and.w	r3, r3, #1
 800c576:	462f      	mov	r7, r5
 800c578:	930a      	str	r3, [sp, #40]	@ 0x28
 800c57a:	4605      	mov	r5, r0
 800c57c:	9b07      	ldr	r3, [sp, #28]
 800c57e:	4621      	mov	r1, r4
 800c580:	3b01      	subs	r3, #1
 800c582:	4648      	mov	r0, r9
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	f7ff fa9a 	bl	800babe <quorem>
 800c58a:	4639      	mov	r1, r7
 800c58c:	9002      	str	r0, [sp, #8]
 800c58e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c592:	4648      	mov	r0, r9
 800c594:	f000 fc5a 	bl	800ce4c <__mcmp>
 800c598:	462a      	mov	r2, r5
 800c59a:	9008      	str	r0, [sp, #32]
 800c59c:	4621      	mov	r1, r4
 800c59e:	4658      	mov	r0, fp
 800c5a0:	f000 fc70 	bl	800ce84 <__mdiff>
 800c5a4:	68c2      	ldr	r2, [r0, #12]
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	bb02      	cbnz	r2, 800c5ec <_dtoa_r+0xa1c>
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	4648      	mov	r0, r9
 800c5ae:	f000 fc4d 	bl	800ce4c <__mcmp>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	4631      	mov	r1, r6
 800c5b6:	4658      	mov	r0, fp
 800c5b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c5ba:	f000 fa0d 	bl	800c9d8 <_Bfree>
 800c5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5c2:	9e07      	ldr	r6, [sp, #28]
 800c5c4:	ea43 0102 	orr.w	r1, r3, r2
 800c5c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5ca:	4319      	orrs	r1, r3
 800c5cc:	d110      	bne.n	800c5f0 <_dtoa_r+0xa20>
 800c5ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c5d2:	d029      	beq.n	800c628 <_dtoa_r+0xa58>
 800c5d4:	9b08      	ldr	r3, [sp, #32]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	dd02      	ble.n	800c5e0 <_dtoa_r+0xa10>
 800c5da:	9b02      	ldr	r3, [sp, #8]
 800c5dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c5e0:	9b00      	ldr	r3, [sp, #0]
 800c5e2:	f883 8000 	strb.w	r8, [r3]
 800c5e6:	e63f      	b.n	800c268 <_dtoa_r+0x698>
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	e7bb      	b.n	800c564 <_dtoa_r+0x994>
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	e7e1      	b.n	800c5b4 <_dtoa_r+0x9e4>
 800c5f0:	9b08      	ldr	r3, [sp, #32]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	db04      	blt.n	800c600 <_dtoa_r+0xa30>
 800c5f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c5f8:	430b      	orrs	r3, r1
 800c5fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c5fc:	430b      	orrs	r3, r1
 800c5fe:	d120      	bne.n	800c642 <_dtoa_r+0xa72>
 800c600:	2a00      	cmp	r2, #0
 800c602:	dded      	ble.n	800c5e0 <_dtoa_r+0xa10>
 800c604:	4649      	mov	r1, r9
 800c606:	2201      	movs	r2, #1
 800c608:	4658      	mov	r0, fp
 800c60a:	f000 fbb3 	bl	800cd74 <__lshift>
 800c60e:	4621      	mov	r1, r4
 800c610:	4681      	mov	r9, r0
 800c612:	f000 fc1b 	bl	800ce4c <__mcmp>
 800c616:	2800      	cmp	r0, #0
 800c618:	dc03      	bgt.n	800c622 <_dtoa_r+0xa52>
 800c61a:	d1e1      	bne.n	800c5e0 <_dtoa_r+0xa10>
 800c61c:	f018 0f01 	tst.w	r8, #1
 800c620:	d0de      	beq.n	800c5e0 <_dtoa_r+0xa10>
 800c622:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c626:	d1d8      	bne.n	800c5da <_dtoa_r+0xa0a>
 800c628:	9a00      	ldr	r2, [sp, #0]
 800c62a:	2339      	movs	r3, #57	@ 0x39
 800c62c:	7013      	strb	r3, [r2, #0]
 800c62e:	4633      	mov	r3, r6
 800c630:	461e      	mov	r6, r3
 800c632:	3b01      	subs	r3, #1
 800c634:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c638:	2a39      	cmp	r2, #57	@ 0x39
 800c63a:	d052      	beq.n	800c6e2 <_dtoa_r+0xb12>
 800c63c:	3201      	adds	r2, #1
 800c63e:	701a      	strb	r2, [r3, #0]
 800c640:	e612      	b.n	800c268 <_dtoa_r+0x698>
 800c642:	2a00      	cmp	r2, #0
 800c644:	dd07      	ble.n	800c656 <_dtoa_r+0xa86>
 800c646:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c64a:	d0ed      	beq.n	800c628 <_dtoa_r+0xa58>
 800c64c:	9a00      	ldr	r2, [sp, #0]
 800c64e:	f108 0301 	add.w	r3, r8, #1
 800c652:	7013      	strb	r3, [r2, #0]
 800c654:	e608      	b.n	800c268 <_dtoa_r+0x698>
 800c656:	9b07      	ldr	r3, [sp, #28]
 800c658:	9a07      	ldr	r2, [sp, #28]
 800c65a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c65e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c660:	4293      	cmp	r3, r2
 800c662:	d028      	beq.n	800c6b6 <_dtoa_r+0xae6>
 800c664:	4649      	mov	r1, r9
 800c666:	2300      	movs	r3, #0
 800c668:	220a      	movs	r2, #10
 800c66a:	4658      	mov	r0, fp
 800c66c:	f000 f9d6 	bl	800ca1c <__multadd>
 800c670:	42af      	cmp	r7, r5
 800c672:	4681      	mov	r9, r0
 800c674:	f04f 0300 	mov.w	r3, #0
 800c678:	f04f 020a 	mov.w	r2, #10
 800c67c:	4639      	mov	r1, r7
 800c67e:	4658      	mov	r0, fp
 800c680:	d107      	bne.n	800c692 <_dtoa_r+0xac2>
 800c682:	f000 f9cb 	bl	800ca1c <__multadd>
 800c686:	4607      	mov	r7, r0
 800c688:	4605      	mov	r5, r0
 800c68a:	9b07      	ldr	r3, [sp, #28]
 800c68c:	3301      	adds	r3, #1
 800c68e:	9307      	str	r3, [sp, #28]
 800c690:	e774      	b.n	800c57c <_dtoa_r+0x9ac>
 800c692:	f000 f9c3 	bl	800ca1c <__multadd>
 800c696:	4629      	mov	r1, r5
 800c698:	4607      	mov	r7, r0
 800c69a:	2300      	movs	r3, #0
 800c69c:	220a      	movs	r2, #10
 800c69e:	4658      	mov	r0, fp
 800c6a0:	f000 f9bc 	bl	800ca1c <__multadd>
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	e7f0      	b.n	800c68a <_dtoa_r+0xaba>
 800c6a8:	9b00      	ldr	r3, [sp, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	bfcc      	ite	gt
 800c6ae:	461e      	movgt	r6, r3
 800c6b0:	2601      	movle	r6, #1
 800c6b2:	4456      	add	r6, sl
 800c6b4:	2700      	movs	r7, #0
 800c6b6:	4649      	mov	r1, r9
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	4658      	mov	r0, fp
 800c6bc:	f000 fb5a 	bl	800cd74 <__lshift>
 800c6c0:	4621      	mov	r1, r4
 800c6c2:	4681      	mov	r9, r0
 800c6c4:	f000 fbc2 	bl	800ce4c <__mcmp>
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	dcb0      	bgt.n	800c62e <_dtoa_r+0xa5e>
 800c6cc:	d102      	bne.n	800c6d4 <_dtoa_r+0xb04>
 800c6ce:	f018 0f01 	tst.w	r8, #1
 800c6d2:	d1ac      	bne.n	800c62e <_dtoa_r+0xa5e>
 800c6d4:	4633      	mov	r3, r6
 800c6d6:	461e      	mov	r6, r3
 800c6d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6dc:	2a30      	cmp	r2, #48	@ 0x30
 800c6de:	d0fa      	beq.n	800c6d6 <_dtoa_r+0xb06>
 800c6e0:	e5c2      	b.n	800c268 <_dtoa_r+0x698>
 800c6e2:	459a      	cmp	sl, r3
 800c6e4:	d1a4      	bne.n	800c630 <_dtoa_r+0xa60>
 800c6e6:	9b04      	ldr	r3, [sp, #16]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	9304      	str	r3, [sp, #16]
 800c6ec:	2331      	movs	r3, #49	@ 0x31
 800c6ee:	f88a 3000 	strb.w	r3, [sl]
 800c6f2:	e5b9      	b.n	800c268 <_dtoa_r+0x698>
 800c6f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c6f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c754 <_dtoa_r+0xb84>
 800c6fa:	b11b      	cbz	r3, 800c704 <_dtoa_r+0xb34>
 800c6fc:	f10a 0308 	add.w	r3, sl, #8
 800c700:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c702:	6013      	str	r3, [r2, #0]
 800c704:	4650      	mov	r0, sl
 800c706:	b019      	add	sp, #100	@ 0x64
 800c708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c70c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c70e:	2b01      	cmp	r3, #1
 800c710:	f77f ae37 	ble.w	800c382 <_dtoa_r+0x7b2>
 800c714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c716:	930a      	str	r3, [sp, #40]	@ 0x28
 800c718:	2001      	movs	r0, #1
 800c71a:	e655      	b.n	800c3c8 <_dtoa_r+0x7f8>
 800c71c:	9b00      	ldr	r3, [sp, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	f77f aed6 	ble.w	800c4d0 <_dtoa_r+0x900>
 800c724:	4656      	mov	r6, sl
 800c726:	4621      	mov	r1, r4
 800c728:	4648      	mov	r0, r9
 800c72a:	f7ff f9c8 	bl	800babe <quorem>
 800c72e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c732:	f806 8b01 	strb.w	r8, [r6], #1
 800c736:	9b00      	ldr	r3, [sp, #0]
 800c738:	eba6 020a 	sub.w	r2, r6, sl
 800c73c:	4293      	cmp	r3, r2
 800c73e:	ddb3      	ble.n	800c6a8 <_dtoa_r+0xad8>
 800c740:	4649      	mov	r1, r9
 800c742:	2300      	movs	r3, #0
 800c744:	220a      	movs	r2, #10
 800c746:	4658      	mov	r0, fp
 800c748:	f000 f968 	bl	800ca1c <__multadd>
 800c74c:	4681      	mov	r9, r0
 800c74e:	e7ea      	b.n	800c726 <_dtoa_r+0xb56>
 800c750:	0800dd2c 	.word	0x0800dd2c
 800c754:	0800dcb0 	.word	0x0800dcb0

0800c758 <_free_r>:
 800c758:	b538      	push	{r3, r4, r5, lr}
 800c75a:	4605      	mov	r5, r0
 800c75c:	2900      	cmp	r1, #0
 800c75e:	d041      	beq.n	800c7e4 <_free_r+0x8c>
 800c760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c764:	1f0c      	subs	r4, r1, #4
 800c766:	2b00      	cmp	r3, #0
 800c768:	bfb8      	it	lt
 800c76a:	18e4      	addlt	r4, r4, r3
 800c76c:	f000 f8e8 	bl	800c940 <__malloc_lock>
 800c770:	4a1d      	ldr	r2, [pc, #116]	@ (800c7e8 <_free_r+0x90>)
 800c772:	6813      	ldr	r3, [r2, #0]
 800c774:	b933      	cbnz	r3, 800c784 <_free_r+0x2c>
 800c776:	6063      	str	r3, [r4, #4]
 800c778:	6014      	str	r4, [r2, #0]
 800c77a:	4628      	mov	r0, r5
 800c77c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c780:	f000 b8e4 	b.w	800c94c <__malloc_unlock>
 800c784:	42a3      	cmp	r3, r4
 800c786:	d908      	bls.n	800c79a <_free_r+0x42>
 800c788:	6820      	ldr	r0, [r4, #0]
 800c78a:	1821      	adds	r1, r4, r0
 800c78c:	428b      	cmp	r3, r1
 800c78e:	bf01      	itttt	eq
 800c790:	6819      	ldreq	r1, [r3, #0]
 800c792:	685b      	ldreq	r3, [r3, #4]
 800c794:	1809      	addeq	r1, r1, r0
 800c796:	6021      	streq	r1, [r4, #0]
 800c798:	e7ed      	b.n	800c776 <_free_r+0x1e>
 800c79a:	461a      	mov	r2, r3
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	b10b      	cbz	r3, 800c7a4 <_free_r+0x4c>
 800c7a0:	42a3      	cmp	r3, r4
 800c7a2:	d9fa      	bls.n	800c79a <_free_r+0x42>
 800c7a4:	6811      	ldr	r1, [r2, #0]
 800c7a6:	1850      	adds	r0, r2, r1
 800c7a8:	42a0      	cmp	r0, r4
 800c7aa:	d10b      	bne.n	800c7c4 <_free_r+0x6c>
 800c7ac:	6820      	ldr	r0, [r4, #0]
 800c7ae:	4401      	add	r1, r0
 800c7b0:	1850      	adds	r0, r2, r1
 800c7b2:	4283      	cmp	r3, r0
 800c7b4:	6011      	str	r1, [r2, #0]
 800c7b6:	d1e0      	bne.n	800c77a <_free_r+0x22>
 800c7b8:	6818      	ldr	r0, [r3, #0]
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	6053      	str	r3, [r2, #4]
 800c7be:	4408      	add	r0, r1
 800c7c0:	6010      	str	r0, [r2, #0]
 800c7c2:	e7da      	b.n	800c77a <_free_r+0x22>
 800c7c4:	d902      	bls.n	800c7cc <_free_r+0x74>
 800c7c6:	230c      	movs	r3, #12
 800c7c8:	602b      	str	r3, [r5, #0]
 800c7ca:	e7d6      	b.n	800c77a <_free_r+0x22>
 800c7cc:	6820      	ldr	r0, [r4, #0]
 800c7ce:	1821      	adds	r1, r4, r0
 800c7d0:	428b      	cmp	r3, r1
 800c7d2:	bf04      	itt	eq
 800c7d4:	6819      	ldreq	r1, [r3, #0]
 800c7d6:	685b      	ldreq	r3, [r3, #4]
 800c7d8:	6063      	str	r3, [r4, #4]
 800c7da:	bf04      	itt	eq
 800c7dc:	1809      	addeq	r1, r1, r0
 800c7de:	6021      	streq	r1, [r4, #0]
 800c7e0:	6054      	str	r4, [r2, #4]
 800c7e2:	e7ca      	b.n	800c77a <_free_r+0x22>
 800c7e4:	bd38      	pop	{r3, r4, r5, pc}
 800c7e6:	bf00      	nop
 800c7e8:	20002500 	.word	0x20002500

0800c7ec <malloc>:
 800c7ec:	4b02      	ldr	r3, [pc, #8]	@ (800c7f8 <malloc+0xc>)
 800c7ee:	4601      	mov	r1, r0
 800c7f0:	6818      	ldr	r0, [r3, #0]
 800c7f2:	f000 b825 	b.w	800c840 <_malloc_r>
 800c7f6:	bf00      	nop
 800c7f8:	2000001c 	.word	0x2000001c

0800c7fc <sbrk_aligned>:
 800c7fc:	b570      	push	{r4, r5, r6, lr}
 800c7fe:	4e0f      	ldr	r6, [pc, #60]	@ (800c83c <sbrk_aligned+0x40>)
 800c800:	460c      	mov	r4, r1
 800c802:	6831      	ldr	r1, [r6, #0]
 800c804:	4605      	mov	r5, r0
 800c806:	b911      	cbnz	r1, 800c80e <sbrk_aligned+0x12>
 800c808:	f000 fe46 	bl	800d498 <_sbrk_r>
 800c80c:	6030      	str	r0, [r6, #0]
 800c80e:	4621      	mov	r1, r4
 800c810:	4628      	mov	r0, r5
 800c812:	f000 fe41 	bl	800d498 <_sbrk_r>
 800c816:	1c43      	adds	r3, r0, #1
 800c818:	d103      	bne.n	800c822 <sbrk_aligned+0x26>
 800c81a:	f04f 34ff 	mov.w	r4, #4294967295
 800c81e:	4620      	mov	r0, r4
 800c820:	bd70      	pop	{r4, r5, r6, pc}
 800c822:	1cc4      	adds	r4, r0, #3
 800c824:	f024 0403 	bic.w	r4, r4, #3
 800c828:	42a0      	cmp	r0, r4
 800c82a:	d0f8      	beq.n	800c81e <sbrk_aligned+0x22>
 800c82c:	1a21      	subs	r1, r4, r0
 800c82e:	4628      	mov	r0, r5
 800c830:	f000 fe32 	bl	800d498 <_sbrk_r>
 800c834:	3001      	adds	r0, #1
 800c836:	d1f2      	bne.n	800c81e <sbrk_aligned+0x22>
 800c838:	e7ef      	b.n	800c81a <sbrk_aligned+0x1e>
 800c83a:	bf00      	nop
 800c83c:	200024fc 	.word	0x200024fc

0800c840 <_malloc_r>:
 800c840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c844:	1ccd      	adds	r5, r1, #3
 800c846:	f025 0503 	bic.w	r5, r5, #3
 800c84a:	3508      	adds	r5, #8
 800c84c:	2d0c      	cmp	r5, #12
 800c84e:	bf38      	it	cc
 800c850:	250c      	movcc	r5, #12
 800c852:	2d00      	cmp	r5, #0
 800c854:	4606      	mov	r6, r0
 800c856:	db01      	blt.n	800c85c <_malloc_r+0x1c>
 800c858:	42a9      	cmp	r1, r5
 800c85a:	d904      	bls.n	800c866 <_malloc_r+0x26>
 800c85c:	230c      	movs	r3, #12
 800c85e:	6033      	str	r3, [r6, #0]
 800c860:	2000      	movs	r0, #0
 800c862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c866:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c93c <_malloc_r+0xfc>
 800c86a:	f000 f869 	bl	800c940 <__malloc_lock>
 800c86e:	f8d8 3000 	ldr.w	r3, [r8]
 800c872:	461c      	mov	r4, r3
 800c874:	bb44      	cbnz	r4, 800c8c8 <_malloc_r+0x88>
 800c876:	4629      	mov	r1, r5
 800c878:	4630      	mov	r0, r6
 800c87a:	f7ff ffbf 	bl	800c7fc <sbrk_aligned>
 800c87e:	1c43      	adds	r3, r0, #1
 800c880:	4604      	mov	r4, r0
 800c882:	d158      	bne.n	800c936 <_malloc_r+0xf6>
 800c884:	f8d8 4000 	ldr.w	r4, [r8]
 800c888:	4627      	mov	r7, r4
 800c88a:	2f00      	cmp	r7, #0
 800c88c:	d143      	bne.n	800c916 <_malloc_r+0xd6>
 800c88e:	2c00      	cmp	r4, #0
 800c890:	d04b      	beq.n	800c92a <_malloc_r+0xea>
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	4639      	mov	r1, r7
 800c896:	4630      	mov	r0, r6
 800c898:	eb04 0903 	add.w	r9, r4, r3
 800c89c:	f000 fdfc 	bl	800d498 <_sbrk_r>
 800c8a0:	4581      	cmp	r9, r0
 800c8a2:	d142      	bne.n	800c92a <_malloc_r+0xea>
 800c8a4:	6821      	ldr	r1, [r4, #0]
 800c8a6:	1a6d      	subs	r5, r5, r1
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	f7ff ffa6 	bl	800c7fc <sbrk_aligned>
 800c8b0:	3001      	adds	r0, #1
 800c8b2:	d03a      	beq.n	800c92a <_malloc_r+0xea>
 800c8b4:	6823      	ldr	r3, [r4, #0]
 800c8b6:	442b      	add	r3, r5
 800c8b8:	6023      	str	r3, [r4, #0]
 800c8ba:	f8d8 3000 	ldr.w	r3, [r8]
 800c8be:	685a      	ldr	r2, [r3, #4]
 800c8c0:	bb62      	cbnz	r2, 800c91c <_malloc_r+0xdc>
 800c8c2:	f8c8 7000 	str.w	r7, [r8]
 800c8c6:	e00f      	b.n	800c8e8 <_malloc_r+0xa8>
 800c8c8:	6822      	ldr	r2, [r4, #0]
 800c8ca:	1b52      	subs	r2, r2, r5
 800c8cc:	d420      	bmi.n	800c910 <_malloc_r+0xd0>
 800c8ce:	2a0b      	cmp	r2, #11
 800c8d0:	d917      	bls.n	800c902 <_malloc_r+0xc2>
 800c8d2:	1961      	adds	r1, r4, r5
 800c8d4:	42a3      	cmp	r3, r4
 800c8d6:	6025      	str	r5, [r4, #0]
 800c8d8:	bf18      	it	ne
 800c8da:	6059      	strne	r1, [r3, #4]
 800c8dc:	6863      	ldr	r3, [r4, #4]
 800c8de:	bf08      	it	eq
 800c8e0:	f8c8 1000 	streq.w	r1, [r8]
 800c8e4:	5162      	str	r2, [r4, r5]
 800c8e6:	604b      	str	r3, [r1, #4]
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f000 f82f 	bl	800c94c <__malloc_unlock>
 800c8ee:	f104 000b 	add.w	r0, r4, #11
 800c8f2:	1d23      	adds	r3, r4, #4
 800c8f4:	f020 0007 	bic.w	r0, r0, #7
 800c8f8:	1ac2      	subs	r2, r0, r3
 800c8fa:	bf1c      	itt	ne
 800c8fc:	1a1b      	subne	r3, r3, r0
 800c8fe:	50a3      	strne	r3, [r4, r2]
 800c900:	e7af      	b.n	800c862 <_malloc_r+0x22>
 800c902:	6862      	ldr	r2, [r4, #4]
 800c904:	42a3      	cmp	r3, r4
 800c906:	bf0c      	ite	eq
 800c908:	f8c8 2000 	streq.w	r2, [r8]
 800c90c:	605a      	strne	r2, [r3, #4]
 800c90e:	e7eb      	b.n	800c8e8 <_malloc_r+0xa8>
 800c910:	4623      	mov	r3, r4
 800c912:	6864      	ldr	r4, [r4, #4]
 800c914:	e7ae      	b.n	800c874 <_malloc_r+0x34>
 800c916:	463c      	mov	r4, r7
 800c918:	687f      	ldr	r7, [r7, #4]
 800c91a:	e7b6      	b.n	800c88a <_malloc_r+0x4a>
 800c91c:	461a      	mov	r2, r3
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	42a3      	cmp	r3, r4
 800c922:	d1fb      	bne.n	800c91c <_malloc_r+0xdc>
 800c924:	2300      	movs	r3, #0
 800c926:	6053      	str	r3, [r2, #4]
 800c928:	e7de      	b.n	800c8e8 <_malloc_r+0xa8>
 800c92a:	230c      	movs	r3, #12
 800c92c:	6033      	str	r3, [r6, #0]
 800c92e:	4630      	mov	r0, r6
 800c930:	f000 f80c 	bl	800c94c <__malloc_unlock>
 800c934:	e794      	b.n	800c860 <_malloc_r+0x20>
 800c936:	6005      	str	r5, [r0, #0]
 800c938:	e7d6      	b.n	800c8e8 <_malloc_r+0xa8>
 800c93a:	bf00      	nop
 800c93c:	20002500 	.word	0x20002500

0800c940 <__malloc_lock>:
 800c940:	4801      	ldr	r0, [pc, #4]	@ (800c948 <__malloc_lock+0x8>)
 800c942:	f7ff b8ac 	b.w	800ba9e <__retarget_lock_acquire_recursive>
 800c946:	bf00      	nop
 800c948:	200024f8 	.word	0x200024f8

0800c94c <__malloc_unlock>:
 800c94c:	4801      	ldr	r0, [pc, #4]	@ (800c954 <__malloc_unlock+0x8>)
 800c94e:	f7ff b8a7 	b.w	800baa0 <__retarget_lock_release_recursive>
 800c952:	bf00      	nop
 800c954:	200024f8 	.word	0x200024f8

0800c958 <_Balloc>:
 800c958:	b570      	push	{r4, r5, r6, lr}
 800c95a:	69c6      	ldr	r6, [r0, #28]
 800c95c:	4604      	mov	r4, r0
 800c95e:	460d      	mov	r5, r1
 800c960:	b976      	cbnz	r6, 800c980 <_Balloc+0x28>
 800c962:	2010      	movs	r0, #16
 800c964:	f7ff ff42 	bl	800c7ec <malloc>
 800c968:	4602      	mov	r2, r0
 800c96a:	61e0      	str	r0, [r4, #28]
 800c96c:	b920      	cbnz	r0, 800c978 <_Balloc+0x20>
 800c96e:	4b18      	ldr	r3, [pc, #96]	@ (800c9d0 <_Balloc+0x78>)
 800c970:	4818      	ldr	r0, [pc, #96]	@ (800c9d4 <_Balloc+0x7c>)
 800c972:	216b      	movs	r1, #107	@ 0x6b
 800c974:	f000 fda0 	bl	800d4b8 <__assert_func>
 800c978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c97c:	6006      	str	r6, [r0, #0]
 800c97e:	60c6      	str	r6, [r0, #12]
 800c980:	69e6      	ldr	r6, [r4, #28]
 800c982:	68f3      	ldr	r3, [r6, #12]
 800c984:	b183      	cbz	r3, 800c9a8 <_Balloc+0x50>
 800c986:	69e3      	ldr	r3, [r4, #28]
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c98e:	b9b8      	cbnz	r0, 800c9c0 <_Balloc+0x68>
 800c990:	2101      	movs	r1, #1
 800c992:	fa01 f605 	lsl.w	r6, r1, r5
 800c996:	1d72      	adds	r2, r6, #5
 800c998:	0092      	lsls	r2, r2, #2
 800c99a:	4620      	mov	r0, r4
 800c99c:	f000 fdaa 	bl	800d4f4 <_calloc_r>
 800c9a0:	b160      	cbz	r0, 800c9bc <_Balloc+0x64>
 800c9a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c9a6:	e00e      	b.n	800c9c6 <_Balloc+0x6e>
 800c9a8:	2221      	movs	r2, #33	@ 0x21
 800c9aa:	2104      	movs	r1, #4
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f000 fda1 	bl	800d4f4 <_calloc_r>
 800c9b2:	69e3      	ldr	r3, [r4, #28]
 800c9b4:	60f0      	str	r0, [r6, #12]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1e4      	bne.n	800c986 <_Balloc+0x2e>
 800c9bc:	2000      	movs	r0, #0
 800c9be:	bd70      	pop	{r4, r5, r6, pc}
 800c9c0:	6802      	ldr	r2, [r0, #0]
 800c9c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c9cc:	e7f7      	b.n	800c9be <_Balloc+0x66>
 800c9ce:	bf00      	nop
 800c9d0:	0800dcbd 	.word	0x0800dcbd
 800c9d4:	0800dd3d 	.word	0x0800dd3d

0800c9d8 <_Bfree>:
 800c9d8:	b570      	push	{r4, r5, r6, lr}
 800c9da:	69c6      	ldr	r6, [r0, #28]
 800c9dc:	4605      	mov	r5, r0
 800c9de:	460c      	mov	r4, r1
 800c9e0:	b976      	cbnz	r6, 800ca00 <_Bfree+0x28>
 800c9e2:	2010      	movs	r0, #16
 800c9e4:	f7ff ff02 	bl	800c7ec <malloc>
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	61e8      	str	r0, [r5, #28]
 800c9ec:	b920      	cbnz	r0, 800c9f8 <_Bfree+0x20>
 800c9ee:	4b09      	ldr	r3, [pc, #36]	@ (800ca14 <_Bfree+0x3c>)
 800c9f0:	4809      	ldr	r0, [pc, #36]	@ (800ca18 <_Bfree+0x40>)
 800c9f2:	218f      	movs	r1, #143	@ 0x8f
 800c9f4:	f000 fd60 	bl	800d4b8 <__assert_func>
 800c9f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9fc:	6006      	str	r6, [r0, #0]
 800c9fe:	60c6      	str	r6, [r0, #12]
 800ca00:	b13c      	cbz	r4, 800ca12 <_Bfree+0x3a>
 800ca02:	69eb      	ldr	r3, [r5, #28]
 800ca04:	6862      	ldr	r2, [r4, #4]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca0c:	6021      	str	r1, [r4, #0]
 800ca0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca12:	bd70      	pop	{r4, r5, r6, pc}
 800ca14:	0800dcbd 	.word	0x0800dcbd
 800ca18:	0800dd3d 	.word	0x0800dd3d

0800ca1c <__multadd>:
 800ca1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca20:	690d      	ldr	r5, [r1, #16]
 800ca22:	4607      	mov	r7, r0
 800ca24:	460c      	mov	r4, r1
 800ca26:	461e      	mov	r6, r3
 800ca28:	f101 0c14 	add.w	ip, r1, #20
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	f8dc 3000 	ldr.w	r3, [ip]
 800ca32:	b299      	uxth	r1, r3
 800ca34:	fb02 6101 	mla	r1, r2, r1, r6
 800ca38:	0c1e      	lsrs	r6, r3, #16
 800ca3a:	0c0b      	lsrs	r3, r1, #16
 800ca3c:	fb02 3306 	mla	r3, r2, r6, r3
 800ca40:	b289      	uxth	r1, r1
 800ca42:	3001      	adds	r0, #1
 800ca44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ca48:	4285      	cmp	r5, r0
 800ca4a:	f84c 1b04 	str.w	r1, [ip], #4
 800ca4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca52:	dcec      	bgt.n	800ca2e <__multadd+0x12>
 800ca54:	b30e      	cbz	r6, 800ca9a <__multadd+0x7e>
 800ca56:	68a3      	ldr	r3, [r4, #8]
 800ca58:	42ab      	cmp	r3, r5
 800ca5a:	dc19      	bgt.n	800ca90 <__multadd+0x74>
 800ca5c:	6861      	ldr	r1, [r4, #4]
 800ca5e:	4638      	mov	r0, r7
 800ca60:	3101      	adds	r1, #1
 800ca62:	f7ff ff79 	bl	800c958 <_Balloc>
 800ca66:	4680      	mov	r8, r0
 800ca68:	b928      	cbnz	r0, 800ca76 <__multadd+0x5a>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	4b0c      	ldr	r3, [pc, #48]	@ (800caa0 <__multadd+0x84>)
 800ca6e:	480d      	ldr	r0, [pc, #52]	@ (800caa4 <__multadd+0x88>)
 800ca70:	21ba      	movs	r1, #186	@ 0xba
 800ca72:	f000 fd21 	bl	800d4b8 <__assert_func>
 800ca76:	6922      	ldr	r2, [r4, #16]
 800ca78:	3202      	adds	r2, #2
 800ca7a:	f104 010c 	add.w	r1, r4, #12
 800ca7e:	0092      	lsls	r2, r2, #2
 800ca80:	300c      	adds	r0, #12
 800ca82:	f7ff f80e 	bl	800baa2 <memcpy>
 800ca86:	4621      	mov	r1, r4
 800ca88:	4638      	mov	r0, r7
 800ca8a:	f7ff ffa5 	bl	800c9d8 <_Bfree>
 800ca8e:	4644      	mov	r4, r8
 800ca90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ca94:	3501      	adds	r5, #1
 800ca96:	615e      	str	r6, [r3, #20]
 800ca98:	6125      	str	r5, [r4, #16]
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa0:	0800dd2c 	.word	0x0800dd2c
 800caa4:	0800dd3d 	.word	0x0800dd3d

0800caa8 <__hi0bits>:
 800caa8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800caac:	4603      	mov	r3, r0
 800caae:	bf36      	itet	cc
 800cab0:	0403      	lslcc	r3, r0, #16
 800cab2:	2000      	movcs	r0, #0
 800cab4:	2010      	movcc	r0, #16
 800cab6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800caba:	bf3c      	itt	cc
 800cabc:	021b      	lslcc	r3, r3, #8
 800cabe:	3008      	addcc	r0, #8
 800cac0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cac4:	bf3c      	itt	cc
 800cac6:	011b      	lslcc	r3, r3, #4
 800cac8:	3004      	addcc	r0, #4
 800caca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cace:	bf3c      	itt	cc
 800cad0:	009b      	lslcc	r3, r3, #2
 800cad2:	3002      	addcc	r0, #2
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	db05      	blt.n	800cae4 <__hi0bits+0x3c>
 800cad8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cadc:	f100 0001 	add.w	r0, r0, #1
 800cae0:	bf08      	it	eq
 800cae2:	2020      	moveq	r0, #32
 800cae4:	4770      	bx	lr

0800cae6 <__lo0bits>:
 800cae6:	6803      	ldr	r3, [r0, #0]
 800cae8:	4602      	mov	r2, r0
 800caea:	f013 0007 	ands.w	r0, r3, #7
 800caee:	d00b      	beq.n	800cb08 <__lo0bits+0x22>
 800caf0:	07d9      	lsls	r1, r3, #31
 800caf2:	d421      	bmi.n	800cb38 <__lo0bits+0x52>
 800caf4:	0798      	lsls	r0, r3, #30
 800caf6:	bf49      	itett	mi
 800caf8:	085b      	lsrmi	r3, r3, #1
 800cafa:	089b      	lsrpl	r3, r3, #2
 800cafc:	2001      	movmi	r0, #1
 800cafe:	6013      	strmi	r3, [r2, #0]
 800cb00:	bf5c      	itt	pl
 800cb02:	6013      	strpl	r3, [r2, #0]
 800cb04:	2002      	movpl	r0, #2
 800cb06:	4770      	bx	lr
 800cb08:	b299      	uxth	r1, r3
 800cb0a:	b909      	cbnz	r1, 800cb10 <__lo0bits+0x2a>
 800cb0c:	0c1b      	lsrs	r3, r3, #16
 800cb0e:	2010      	movs	r0, #16
 800cb10:	b2d9      	uxtb	r1, r3
 800cb12:	b909      	cbnz	r1, 800cb18 <__lo0bits+0x32>
 800cb14:	3008      	adds	r0, #8
 800cb16:	0a1b      	lsrs	r3, r3, #8
 800cb18:	0719      	lsls	r1, r3, #28
 800cb1a:	bf04      	itt	eq
 800cb1c:	091b      	lsreq	r3, r3, #4
 800cb1e:	3004      	addeq	r0, #4
 800cb20:	0799      	lsls	r1, r3, #30
 800cb22:	bf04      	itt	eq
 800cb24:	089b      	lsreq	r3, r3, #2
 800cb26:	3002      	addeq	r0, #2
 800cb28:	07d9      	lsls	r1, r3, #31
 800cb2a:	d403      	bmi.n	800cb34 <__lo0bits+0x4e>
 800cb2c:	085b      	lsrs	r3, r3, #1
 800cb2e:	f100 0001 	add.w	r0, r0, #1
 800cb32:	d003      	beq.n	800cb3c <__lo0bits+0x56>
 800cb34:	6013      	str	r3, [r2, #0]
 800cb36:	4770      	bx	lr
 800cb38:	2000      	movs	r0, #0
 800cb3a:	4770      	bx	lr
 800cb3c:	2020      	movs	r0, #32
 800cb3e:	4770      	bx	lr

0800cb40 <__i2b>:
 800cb40:	b510      	push	{r4, lr}
 800cb42:	460c      	mov	r4, r1
 800cb44:	2101      	movs	r1, #1
 800cb46:	f7ff ff07 	bl	800c958 <_Balloc>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	b928      	cbnz	r0, 800cb5a <__i2b+0x1a>
 800cb4e:	4b05      	ldr	r3, [pc, #20]	@ (800cb64 <__i2b+0x24>)
 800cb50:	4805      	ldr	r0, [pc, #20]	@ (800cb68 <__i2b+0x28>)
 800cb52:	f240 1145 	movw	r1, #325	@ 0x145
 800cb56:	f000 fcaf 	bl	800d4b8 <__assert_func>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	6144      	str	r4, [r0, #20]
 800cb5e:	6103      	str	r3, [r0, #16]
 800cb60:	bd10      	pop	{r4, pc}
 800cb62:	bf00      	nop
 800cb64:	0800dd2c 	.word	0x0800dd2c
 800cb68:	0800dd3d 	.word	0x0800dd3d

0800cb6c <__multiply>:
 800cb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb70:	4614      	mov	r4, r2
 800cb72:	690a      	ldr	r2, [r1, #16]
 800cb74:	6923      	ldr	r3, [r4, #16]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	bfa8      	it	ge
 800cb7a:	4623      	movge	r3, r4
 800cb7c:	460f      	mov	r7, r1
 800cb7e:	bfa4      	itt	ge
 800cb80:	460c      	movge	r4, r1
 800cb82:	461f      	movge	r7, r3
 800cb84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cb88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cb8c:	68a3      	ldr	r3, [r4, #8]
 800cb8e:	6861      	ldr	r1, [r4, #4]
 800cb90:	eb0a 0609 	add.w	r6, sl, r9
 800cb94:	42b3      	cmp	r3, r6
 800cb96:	b085      	sub	sp, #20
 800cb98:	bfb8      	it	lt
 800cb9a:	3101      	addlt	r1, #1
 800cb9c:	f7ff fedc 	bl	800c958 <_Balloc>
 800cba0:	b930      	cbnz	r0, 800cbb0 <__multiply+0x44>
 800cba2:	4602      	mov	r2, r0
 800cba4:	4b44      	ldr	r3, [pc, #272]	@ (800ccb8 <__multiply+0x14c>)
 800cba6:	4845      	ldr	r0, [pc, #276]	@ (800ccbc <__multiply+0x150>)
 800cba8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cbac:	f000 fc84 	bl	800d4b8 <__assert_func>
 800cbb0:	f100 0514 	add.w	r5, r0, #20
 800cbb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cbb8:	462b      	mov	r3, r5
 800cbba:	2200      	movs	r2, #0
 800cbbc:	4543      	cmp	r3, r8
 800cbbe:	d321      	bcc.n	800cc04 <__multiply+0x98>
 800cbc0:	f107 0114 	add.w	r1, r7, #20
 800cbc4:	f104 0214 	add.w	r2, r4, #20
 800cbc8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cbcc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cbd0:	9302      	str	r3, [sp, #8]
 800cbd2:	1b13      	subs	r3, r2, r4
 800cbd4:	3b15      	subs	r3, #21
 800cbd6:	f023 0303 	bic.w	r3, r3, #3
 800cbda:	3304      	adds	r3, #4
 800cbdc:	f104 0715 	add.w	r7, r4, #21
 800cbe0:	42ba      	cmp	r2, r7
 800cbe2:	bf38      	it	cc
 800cbe4:	2304      	movcc	r3, #4
 800cbe6:	9301      	str	r3, [sp, #4]
 800cbe8:	9b02      	ldr	r3, [sp, #8]
 800cbea:	9103      	str	r1, [sp, #12]
 800cbec:	428b      	cmp	r3, r1
 800cbee:	d80c      	bhi.n	800cc0a <__multiply+0x9e>
 800cbf0:	2e00      	cmp	r6, #0
 800cbf2:	dd03      	ble.n	800cbfc <__multiply+0x90>
 800cbf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d05b      	beq.n	800ccb4 <__multiply+0x148>
 800cbfc:	6106      	str	r6, [r0, #16]
 800cbfe:	b005      	add	sp, #20
 800cc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc04:	f843 2b04 	str.w	r2, [r3], #4
 800cc08:	e7d8      	b.n	800cbbc <__multiply+0x50>
 800cc0a:	f8b1 a000 	ldrh.w	sl, [r1]
 800cc0e:	f1ba 0f00 	cmp.w	sl, #0
 800cc12:	d024      	beq.n	800cc5e <__multiply+0xf2>
 800cc14:	f104 0e14 	add.w	lr, r4, #20
 800cc18:	46a9      	mov	r9, r5
 800cc1a:	f04f 0c00 	mov.w	ip, #0
 800cc1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cc22:	f8d9 3000 	ldr.w	r3, [r9]
 800cc26:	fa1f fb87 	uxth.w	fp, r7
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	fb0a 330b 	mla	r3, sl, fp, r3
 800cc30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cc34:	f8d9 7000 	ldr.w	r7, [r9]
 800cc38:	4463      	add	r3, ip
 800cc3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cc3e:	fb0a c70b 	mla	r7, sl, fp, ip
 800cc42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cc4c:	4572      	cmp	r2, lr
 800cc4e:	f849 3b04 	str.w	r3, [r9], #4
 800cc52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cc56:	d8e2      	bhi.n	800cc1e <__multiply+0xb2>
 800cc58:	9b01      	ldr	r3, [sp, #4]
 800cc5a:	f845 c003 	str.w	ip, [r5, r3]
 800cc5e:	9b03      	ldr	r3, [sp, #12]
 800cc60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cc64:	3104      	adds	r1, #4
 800cc66:	f1b9 0f00 	cmp.w	r9, #0
 800cc6a:	d021      	beq.n	800ccb0 <__multiply+0x144>
 800cc6c:	682b      	ldr	r3, [r5, #0]
 800cc6e:	f104 0c14 	add.w	ip, r4, #20
 800cc72:	46ae      	mov	lr, r5
 800cc74:	f04f 0a00 	mov.w	sl, #0
 800cc78:	f8bc b000 	ldrh.w	fp, [ip]
 800cc7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cc80:	fb09 770b 	mla	r7, r9, fp, r7
 800cc84:	4457      	add	r7, sl
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cc8c:	f84e 3b04 	str.w	r3, [lr], #4
 800cc90:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cc94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc98:	f8be 3000 	ldrh.w	r3, [lr]
 800cc9c:	fb09 330a 	mla	r3, r9, sl, r3
 800cca0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cca4:	4562      	cmp	r2, ip
 800cca6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccaa:	d8e5      	bhi.n	800cc78 <__multiply+0x10c>
 800ccac:	9f01      	ldr	r7, [sp, #4]
 800ccae:	51eb      	str	r3, [r5, r7]
 800ccb0:	3504      	adds	r5, #4
 800ccb2:	e799      	b.n	800cbe8 <__multiply+0x7c>
 800ccb4:	3e01      	subs	r6, #1
 800ccb6:	e79b      	b.n	800cbf0 <__multiply+0x84>
 800ccb8:	0800dd2c 	.word	0x0800dd2c
 800ccbc:	0800dd3d 	.word	0x0800dd3d

0800ccc0 <__pow5mult>:
 800ccc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccc4:	4615      	mov	r5, r2
 800ccc6:	f012 0203 	ands.w	r2, r2, #3
 800ccca:	4607      	mov	r7, r0
 800cccc:	460e      	mov	r6, r1
 800ccce:	d007      	beq.n	800cce0 <__pow5mult+0x20>
 800ccd0:	4c25      	ldr	r4, [pc, #148]	@ (800cd68 <__pow5mult+0xa8>)
 800ccd2:	3a01      	subs	r2, #1
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ccda:	f7ff fe9f 	bl	800ca1c <__multadd>
 800ccde:	4606      	mov	r6, r0
 800cce0:	10ad      	asrs	r5, r5, #2
 800cce2:	d03d      	beq.n	800cd60 <__pow5mult+0xa0>
 800cce4:	69fc      	ldr	r4, [r7, #28]
 800cce6:	b97c      	cbnz	r4, 800cd08 <__pow5mult+0x48>
 800cce8:	2010      	movs	r0, #16
 800ccea:	f7ff fd7f 	bl	800c7ec <malloc>
 800ccee:	4602      	mov	r2, r0
 800ccf0:	61f8      	str	r0, [r7, #28]
 800ccf2:	b928      	cbnz	r0, 800cd00 <__pow5mult+0x40>
 800ccf4:	4b1d      	ldr	r3, [pc, #116]	@ (800cd6c <__pow5mult+0xac>)
 800ccf6:	481e      	ldr	r0, [pc, #120]	@ (800cd70 <__pow5mult+0xb0>)
 800ccf8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ccfc:	f000 fbdc 	bl	800d4b8 <__assert_func>
 800cd00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd04:	6004      	str	r4, [r0, #0]
 800cd06:	60c4      	str	r4, [r0, #12]
 800cd08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cd0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd10:	b94c      	cbnz	r4, 800cd26 <__pow5mult+0x66>
 800cd12:	f240 2171 	movw	r1, #625	@ 0x271
 800cd16:	4638      	mov	r0, r7
 800cd18:	f7ff ff12 	bl	800cb40 <__i2b>
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd22:	4604      	mov	r4, r0
 800cd24:	6003      	str	r3, [r0, #0]
 800cd26:	f04f 0900 	mov.w	r9, #0
 800cd2a:	07eb      	lsls	r3, r5, #31
 800cd2c:	d50a      	bpl.n	800cd44 <__pow5mult+0x84>
 800cd2e:	4631      	mov	r1, r6
 800cd30:	4622      	mov	r2, r4
 800cd32:	4638      	mov	r0, r7
 800cd34:	f7ff ff1a 	bl	800cb6c <__multiply>
 800cd38:	4631      	mov	r1, r6
 800cd3a:	4680      	mov	r8, r0
 800cd3c:	4638      	mov	r0, r7
 800cd3e:	f7ff fe4b 	bl	800c9d8 <_Bfree>
 800cd42:	4646      	mov	r6, r8
 800cd44:	106d      	asrs	r5, r5, #1
 800cd46:	d00b      	beq.n	800cd60 <__pow5mult+0xa0>
 800cd48:	6820      	ldr	r0, [r4, #0]
 800cd4a:	b938      	cbnz	r0, 800cd5c <__pow5mult+0x9c>
 800cd4c:	4622      	mov	r2, r4
 800cd4e:	4621      	mov	r1, r4
 800cd50:	4638      	mov	r0, r7
 800cd52:	f7ff ff0b 	bl	800cb6c <__multiply>
 800cd56:	6020      	str	r0, [r4, #0]
 800cd58:	f8c0 9000 	str.w	r9, [r0]
 800cd5c:	4604      	mov	r4, r0
 800cd5e:	e7e4      	b.n	800cd2a <__pow5mult+0x6a>
 800cd60:	4630      	mov	r0, r6
 800cd62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd66:	bf00      	nop
 800cd68:	0800dd98 	.word	0x0800dd98
 800cd6c:	0800dcbd 	.word	0x0800dcbd
 800cd70:	0800dd3d 	.word	0x0800dd3d

0800cd74 <__lshift>:
 800cd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd78:	460c      	mov	r4, r1
 800cd7a:	6849      	ldr	r1, [r1, #4]
 800cd7c:	6923      	ldr	r3, [r4, #16]
 800cd7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cd82:	68a3      	ldr	r3, [r4, #8]
 800cd84:	4607      	mov	r7, r0
 800cd86:	4691      	mov	r9, r2
 800cd88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd8c:	f108 0601 	add.w	r6, r8, #1
 800cd90:	42b3      	cmp	r3, r6
 800cd92:	db0b      	blt.n	800cdac <__lshift+0x38>
 800cd94:	4638      	mov	r0, r7
 800cd96:	f7ff fddf 	bl	800c958 <_Balloc>
 800cd9a:	4605      	mov	r5, r0
 800cd9c:	b948      	cbnz	r0, 800cdb2 <__lshift+0x3e>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	4b28      	ldr	r3, [pc, #160]	@ (800ce44 <__lshift+0xd0>)
 800cda2:	4829      	ldr	r0, [pc, #164]	@ (800ce48 <__lshift+0xd4>)
 800cda4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cda8:	f000 fb86 	bl	800d4b8 <__assert_func>
 800cdac:	3101      	adds	r1, #1
 800cdae:	005b      	lsls	r3, r3, #1
 800cdb0:	e7ee      	b.n	800cd90 <__lshift+0x1c>
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	f100 0114 	add.w	r1, r0, #20
 800cdb8:	f100 0210 	add.w	r2, r0, #16
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	4553      	cmp	r3, sl
 800cdc0:	db33      	blt.n	800ce2a <__lshift+0xb6>
 800cdc2:	6920      	ldr	r0, [r4, #16]
 800cdc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cdc8:	f104 0314 	add.w	r3, r4, #20
 800cdcc:	f019 091f 	ands.w	r9, r9, #31
 800cdd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cdd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cdd8:	d02b      	beq.n	800ce32 <__lshift+0xbe>
 800cdda:	f1c9 0e20 	rsb	lr, r9, #32
 800cdde:	468a      	mov	sl, r1
 800cde0:	2200      	movs	r2, #0
 800cde2:	6818      	ldr	r0, [r3, #0]
 800cde4:	fa00 f009 	lsl.w	r0, r0, r9
 800cde8:	4310      	orrs	r0, r2
 800cdea:	f84a 0b04 	str.w	r0, [sl], #4
 800cdee:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdf2:	459c      	cmp	ip, r3
 800cdf4:	fa22 f20e 	lsr.w	r2, r2, lr
 800cdf8:	d8f3      	bhi.n	800cde2 <__lshift+0x6e>
 800cdfa:	ebac 0304 	sub.w	r3, ip, r4
 800cdfe:	3b15      	subs	r3, #21
 800ce00:	f023 0303 	bic.w	r3, r3, #3
 800ce04:	3304      	adds	r3, #4
 800ce06:	f104 0015 	add.w	r0, r4, #21
 800ce0a:	4584      	cmp	ip, r0
 800ce0c:	bf38      	it	cc
 800ce0e:	2304      	movcc	r3, #4
 800ce10:	50ca      	str	r2, [r1, r3]
 800ce12:	b10a      	cbz	r2, 800ce18 <__lshift+0xa4>
 800ce14:	f108 0602 	add.w	r6, r8, #2
 800ce18:	3e01      	subs	r6, #1
 800ce1a:	4638      	mov	r0, r7
 800ce1c:	612e      	str	r6, [r5, #16]
 800ce1e:	4621      	mov	r1, r4
 800ce20:	f7ff fdda 	bl	800c9d8 <_Bfree>
 800ce24:	4628      	mov	r0, r5
 800ce26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce2e:	3301      	adds	r3, #1
 800ce30:	e7c5      	b.n	800cdbe <__lshift+0x4a>
 800ce32:	3904      	subs	r1, #4
 800ce34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce38:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce3c:	459c      	cmp	ip, r3
 800ce3e:	d8f9      	bhi.n	800ce34 <__lshift+0xc0>
 800ce40:	e7ea      	b.n	800ce18 <__lshift+0xa4>
 800ce42:	bf00      	nop
 800ce44:	0800dd2c 	.word	0x0800dd2c
 800ce48:	0800dd3d 	.word	0x0800dd3d

0800ce4c <__mcmp>:
 800ce4c:	690a      	ldr	r2, [r1, #16]
 800ce4e:	4603      	mov	r3, r0
 800ce50:	6900      	ldr	r0, [r0, #16]
 800ce52:	1a80      	subs	r0, r0, r2
 800ce54:	b530      	push	{r4, r5, lr}
 800ce56:	d10e      	bne.n	800ce76 <__mcmp+0x2a>
 800ce58:	3314      	adds	r3, #20
 800ce5a:	3114      	adds	r1, #20
 800ce5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ce60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ce64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ce68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ce6c:	4295      	cmp	r5, r2
 800ce6e:	d003      	beq.n	800ce78 <__mcmp+0x2c>
 800ce70:	d205      	bcs.n	800ce7e <__mcmp+0x32>
 800ce72:	f04f 30ff 	mov.w	r0, #4294967295
 800ce76:	bd30      	pop	{r4, r5, pc}
 800ce78:	42a3      	cmp	r3, r4
 800ce7a:	d3f3      	bcc.n	800ce64 <__mcmp+0x18>
 800ce7c:	e7fb      	b.n	800ce76 <__mcmp+0x2a>
 800ce7e:	2001      	movs	r0, #1
 800ce80:	e7f9      	b.n	800ce76 <__mcmp+0x2a>
	...

0800ce84 <__mdiff>:
 800ce84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce88:	4689      	mov	r9, r1
 800ce8a:	4606      	mov	r6, r0
 800ce8c:	4611      	mov	r1, r2
 800ce8e:	4648      	mov	r0, r9
 800ce90:	4614      	mov	r4, r2
 800ce92:	f7ff ffdb 	bl	800ce4c <__mcmp>
 800ce96:	1e05      	subs	r5, r0, #0
 800ce98:	d112      	bne.n	800cec0 <__mdiff+0x3c>
 800ce9a:	4629      	mov	r1, r5
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	f7ff fd5b 	bl	800c958 <_Balloc>
 800cea2:	4602      	mov	r2, r0
 800cea4:	b928      	cbnz	r0, 800ceb2 <__mdiff+0x2e>
 800cea6:	4b3f      	ldr	r3, [pc, #252]	@ (800cfa4 <__mdiff+0x120>)
 800cea8:	f240 2137 	movw	r1, #567	@ 0x237
 800ceac:	483e      	ldr	r0, [pc, #248]	@ (800cfa8 <__mdiff+0x124>)
 800ceae:	f000 fb03 	bl	800d4b8 <__assert_func>
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ceb8:	4610      	mov	r0, r2
 800ceba:	b003      	add	sp, #12
 800cebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec0:	bfbc      	itt	lt
 800cec2:	464b      	movlt	r3, r9
 800cec4:	46a1      	movlt	r9, r4
 800cec6:	4630      	mov	r0, r6
 800cec8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cecc:	bfba      	itte	lt
 800cece:	461c      	movlt	r4, r3
 800ced0:	2501      	movlt	r5, #1
 800ced2:	2500      	movge	r5, #0
 800ced4:	f7ff fd40 	bl	800c958 <_Balloc>
 800ced8:	4602      	mov	r2, r0
 800ceda:	b918      	cbnz	r0, 800cee4 <__mdiff+0x60>
 800cedc:	4b31      	ldr	r3, [pc, #196]	@ (800cfa4 <__mdiff+0x120>)
 800cede:	f240 2145 	movw	r1, #581	@ 0x245
 800cee2:	e7e3      	b.n	800ceac <__mdiff+0x28>
 800cee4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cee8:	6926      	ldr	r6, [r4, #16]
 800ceea:	60c5      	str	r5, [r0, #12]
 800ceec:	f109 0310 	add.w	r3, r9, #16
 800cef0:	f109 0514 	add.w	r5, r9, #20
 800cef4:	f104 0e14 	add.w	lr, r4, #20
 800cef8:	f100 0b14 	add.w	fp, r0, #20
 800cefc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cf00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cf04:	9301      	str	r3, [sp, #4]
 800cf06:	46d9      	mov	r9, fp
 800cf08:	f04f 0c00 	mov.w	ip, #0
 800cf0c:	9b01      	ldr	r3, [sp, #4]
 800cf0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cf12:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cf16:	9301      	str	r3, [sp, #4]
 800cf18:	fa1f f38a 	uxth.w	r3, sl
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	b283      	uxth	r3, r0
 800cf20:	1acb      	subs	r3, r1, r3
 800cf22:	0c00      	lsrs	r0, r0, #16
 800cf24:	4463      	add	r3, ip
 800cf26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cf2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cf34:	4576      	cmp	r6, lr
 800cf36:	f849 3b04 	str.w	r3, [r9], #4
 800cf3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf3e:	d8e5      	bhi.n	800cf0c <__mdiff+0x88>
 800cf40:	1b33      	subs	r3, r6, r4
 800cf42:	3b15      	subs	r3, #21
 800cf44:	f023 0303 	bic.w	r3, r3, #3
 800cf48:	3415      	adds	r4, #21
 800cf4a:	3304      	adds	r3, #4
 800cf4c:	42a6      	cmp	r6, r4
 800cf4e:	bf38      	it	cc
 800cf50:	2304      	movcc	r3, #4
 800cf52:	441d      	add	r5, r3
 800cf54:	445b      	add	r3, fp
 800cf56:	461e      	mov	r6, r3
 800cf58:	462c      	mov	r4, r5
 800cf5a:	4544      	cmp	r4, r8
 800cf5c:	d30e      	bcc.n	800cf7c <__mdiff+0xf8>
 800cf5e:	f108 0103 	add.w	r1, r8, #3
 800cf62:	1b49      	subs	r1, r1, r5
 800cf64:	f021 0103 	bic.w	r1, r1, #3
 800cf68:	3d03      	subs	r5, #3
 800cf6a:	45a8      	cmp	r8, r5
 800cf6c:	bf38      	it	cc
 800cf6e:	2100      	movcc	r1, #0
 800cf70:	440b      	add	r3, r1
 800cf72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf76:	b191      	cbz	r1, 800cf9e <__mdiff+0x11a>
 800cf78:	6117      	str	r7, [r2, #16]
 800cf7a:	e79d      	b.n	800ceb8 <__mdiff+0x34>
 800cf7c:	f854 1b04 	ldr.w	r1, [r4], #4
 800cf80:	46e6      	mov	lr, ip
 800cf82:	0c08      	lsrs	r0, r1, #16
 800cf84:	fa1c fc81 	uxtah	ip, ip, r1
 800cf88:	4471      	add	r1, lr
 800cf8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cf8e:	b289      	uxth	r1, r1
 800cf90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cf94:	f846 1b04 	str.w	r1, [r6], #4
 800cf98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf9c:	e7dd      	b.n	800cf5a <__mdiff+0xd6>
 800cf9e:	3f01      	subs	r7, #1
 800cfa0:	e7e7      	b.n	800cf72 <__mdiff+0xee>
 800cfa2:	bf00      	nop
 800cfa4:	0800dd2c 	.word	0x0800dd2c
 800cfa8:	0800dd3d 	.word	0x0800dd3d

0800cfac <__d2b>:
 800cfac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cfb0:	460f      	mov	r7, r1
 800cfb2:	2101      	movs	r1, #1
 800cfb4:	ec59 8b10 	vmov	r8, r9, d0
 800cfb8:	4616      	mov	r6, r2
 800cfba:	f7ff fccd 	bl	800c958 <_Balloc>
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	b930      	cbnz	r0, 800cfd0 <__d2b+0x24>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	4b23      	ldr	r3, [pc, #140]	@ (800d054 <__d2b+0xa8>)
 800cfc6:	4824      	ldr	r0, [pc, #144]	@ (800d058 <__d2b+0xac>)
 800cfc8:	f240 310f 	movw	r1, #783	@ 0x30f
 800cfcc:	f000 fa74 	bl	800d4b8 <__assert_func>
 800cfd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cfd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cfd8:	b10d      	cbz	r5, 800cfde <__d2b+0x32>
 800cfda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cfde:	9301      	str	r3, [sp, #4]
 800cfe0:	f1b8 0300 	subs.w	r3, r8, #0
 800cfe4:	d023      	beq.n	800d02e <__d2b+0x82>
 800cfe6:	4668      	mov	r0, sp
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	f7ff fd7c 	bl	800cae6 <__lo0bits>
 800cfee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cff2:	b1d0      	cbz	r0, 800d02a <__d2b+0x7e>
 800cff4:	f1c0 0320 	rsb	r3, r0, #32
 800cff8:	fa02 f303 	lsl.w	r3, r2, r3
 800cffc:	430b      	orrs	r3, r1
 800cffe:	40c2      	lsrs	r2, r0
 800d000:	6163      	str	r3, [r4, #20]
 800d002:	9201      	str	r2, [sp, #4]
 800d004:	9b01      	ldr	r3, [sp, #4]
 800d006:	61a3      	str	r3, [r4, #24]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	bf0c      	ite	eq
 800d00c:	2201      	moveq	r2, #1
 800d00e:	2202      	movne	r2, #2
 800d010:	6122      	str	r2, [r4, #16]
 800d012:	b1a5      	cbz	r5, 800d03e <__d2b+0x92>
 800d014:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d018:	4405      	add	r5, r0
 800d01a:	603d      	str	r5, [r7, #0]
 800d01c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d020:	6030      	str	r0, [r6, #0]
 800d022:	4620      	mov	r0, r4
 800d024:	b003      	add	sp, #12
 800d026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d02a:	6161      	str	r1, [r4, #20]
 800d02c:	e7ea      	b.n	800d004 <__d2b+0x58>
 800d02e:	a801      	add	r0, sp, #4
 800d030:	f7ff fd59 	bl	800cae6 <__lo0bits>
 800d034:	9b01      	ldr	r3, [sp, #4]
 800d036:	6163      	str	r3, [r4, #20]
 800d038:	3020      	adds	r0, #32
 800d03a:	2201      	movs	r2, #1
 800d03c:	e7e8      	b.n	800d010 <__d2b+0x64>
 800d03e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d042:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d046:	6038      	str	r0, [r7, #0]
 800d048:	6918      	ldr	r0, [r3, #16]
 800d04a:	f7ff fd2d 	bl	800caa8 <__hi0bits>
 800d04e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d052:	e7e5      	b.n	800d020 <__d2b+0x74>
 800d054:	0800dd2c 	.word	0x0800dd2c
 800d058:	0800dd3d 	.word	0x0800dd3d

0800d05c <__ssputs_r>:
 800d05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d060:	688e      	ldr	r6, [r1, #8]
 800d062:	461f      	mov	r7, r3
 800d064:	42be      	cmp	r6, r7
 800d066:	680b      	ldr	r3, [r1, #0]
 800d068:	4682      	mov	sl, r0
 800d06a:	460c      	mov	r4, r1
 800d06c:	4690      	mov	r8, r2
 800d06e:	d82d      	bhi.n	800d0cc <__ssputs_r+0x70>
 800d070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d074:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d078:	d026      	beq.n	800d0c8 <__ssputs_r+0x6c>
 800d07a:	6965      	ldr	r5, [r4, #20]
 800d07c:	6909      	ldr	r1, [r1, #16]
 800d07e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d082:	eba3 0901 	sub.w	r9, r3, r1
 800d086:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d08a:	1c7b      	adds	r3, r7, #1
 800d08c:	444b      	add	r3, r9
 800d08e:	106d      	asrs	r5, r5, #1
 800d090:	429d      	cmp	r5, r3
 800d092:	bf38      	it	cc
 800d094:	461d      	movcc	r5, r3
 800d096:	0553      	lsls	r3, r2, #21
 800d098:	d527      	bpl.n	800d0ea <__ssputs_r+0x8e>
 800d09a:	4629      	mov	r1, r5
 800d09c:	f7ff fbd0 	bl	800c840 <_malloc_r>
 800d0a0:	4606      	mov	r6, r0
 800d0a2:	b360      	cbz	r0, 800d0fe <__ssputs_r+0xa2>
 800d0a4:	6921      	ldr	r1, [r4, #16]
 800d0a6:	464a      	mov	r2, r9
 800d0a8:	f7fe fcfb 	bl	800baa2 <memcpy>
 800d0ac:	89a3      	ldrh	r3, [r4, #12]
 800d0ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d0b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0b6:	81a3      	strh	r3, [r4, #12]
 800d0b8:	6126      	str	r6, [r4, #16]
 800d0ba:	6165      	str	r5, [r4, #20]
 800d0bc:	444e      	add	r6, r9
 800d0be:	eba5 0509 	sub.w	r5, r5, r9
 800d0c2:	6026      	str	r6, [r4, #0]
 800d0c4:	60a5      	str	r5, [r4, #8]
 800d0c6:	463e      	mov	r6, r7
 800d0c8:	42be      	cmp	r6, r7
 800d0ca:	d900      	bls.n	800d0ce <__ssputs_r+0x72>
 800d0cc:	463e      	mov	r6, r7
 800d0ce:	6820      	ldr	r0, [r4, #0]
 800d0d0:	4632      	mov	r2, r6
 800d0d2:	4641      	mov	r1, r8
 800d0d4:	f000 f9c6 	bl	800d464 <memmove>
 800d0d8:	68a3      	ldr	r3, [r4, #8]
 800d0da:	1b9b      	subs	r3, r3, r6
 800d0dc:	60a3      	str	r3, [r4, #8]
 800d0de:	6823      	ldr	r3, [r4, #0]
 800d0e0:	4433      	add	r3, r6
 800d0e2:	6023      	str	r3, [r4, #0]
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ea:	462a      	mov	r2, r5
 800d0ec:	f000 fa28 	bl	800d540 <_realloc_r>
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	d1e0      	bne.n	800d0b8 <__ssputs_r+0x5c>
 800d0f6:	6921      	ldr	r1, [r4, #16]
 800d0f8:	4650      	mov	r0, sl
 800d0fa:	f7ff fb2d 	bl	800c758 <_free_r>
 800d0fe:	230c      	movs	r3, #12
 800d100:	f8ca 3000 	str.w	r3, [sl]
 800d104:	89a3      	ldrh	r3, [r4, #12]
 800d106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d10a:	81a3      	strh	r3, [r4, #12]
 800d10c:	f04f 30ff 	mov.w	r0, #4294967295
 800d110:	e7e9      	b.n	800d0e6 <__ssputs_r+0x8a>
	...

0800d114 <_svfiprintf_r>:
 800d114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d118:	4698      	mov	r8, r3
 800d11a:	898b      	ldrh	r3, [r1, #12]
 800d11c:	061b      	lsls	r3, r3, #24
 800d11e:	b09d      	sub	sp, #116	@ 0x74
 800d120:	4607      	mov	r7, r0
 800d122:	460d      	mov	r5, r1
 800d124:	4614      	mov	r4, r2
 800d126:	d510      	bpl.n	800d14a <_svfiprintf_r+0x36>
 800d128:	690b      	ldr	r3, [r1, #16]
 800d12a:	b973      	cbnz	r3, 800d14a <_svfiprintf_r+0x36>
 800d12c:	2140      	movs	r1, #64	@ 0x40
 800d12e:	f7ff fb87 	bl	800c840 <_malloc_r>
 800d132:	6028      	str	r0, [r5, #0]
 800d134:	6128      	str	r0, [r5, #16]
 800d136:	b930      	cbnz	r0, 800d146 <_svfiprintf_r+0x32>
 800d138:	230c      	movs	r3, #12
 800d13a:	603b      	str	r3, [r7, #0]
 800d13c:	f04f 30ff 	mov.w	r0, #4294967295
 800d140:	b01d      	add	sp, #116	@ 0x74
 800d142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d146:	2340      	movs	r3, #64	@ 0x40
 800d148:	616b      	str	r3, [r5, #20]
 800d14a:	2300      	movs	r3, #0
 800d14c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d14e:	2320      	movs	r3, #32
 800d150:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d154:	f8cd 800c 	str.w	r8, [sp, #12]
 800d158:	2330      	movs	r3, #48	@ 0x30
 800d15a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d2f8 <_svfiprintf_r+0x1e4>
 800d15e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d162:	f04f 0901 	mov.w	r9, #1
 800d166:	4623      	mov	r3, r4
 800d168:	469a      	mov	sl, r3
 800d16a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d16e:	b10a      	cbz	r2, 800d174 <_svfiprintf_r+0x60>
 800d170:	2a25      	cmp	r2, #37	@ 0x25
 800d172:	d1f9      	bne.n	800d168 <_svfiprintf_r+0x54>
 800d174:	ebba 0b04 	subs.w	fp, sl, r4
 800d178:	d00b      	beq.n	800d192 <_svfiprintf_r+0x7e>
 800d17a:	465b      	mov	r3, fp
 800d17c:	4622      	mov	r2, r4
 800d17e:	4629      	mov	r1, r5
 800d180:	4638      	mov	r0, r7
 800d182:	f7ff ff6b 	bl	800d05c <__ssputs_r>
 800d186:	3001      	adds	r0, #1
 800d188:	f000 80a7 	beq.w	800d2da <_svfiprintf_r+0x1c6>
 800d18c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d18e:	445a      	add	r2, fp
 800d190:	9209      	str	r2, [sp, #36]	@ 0x24
 800d192:	f89a 3000 	ldrb.w	r3, [sl]
 800d196:	2b00      	cmp	r3, #0
 800d198:	f000 809f 	beq.w	800d2da <_svfiprintf_r+0x1c6>
 800d19c:	2300      	movs	r3, #0
 800d19e:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1a6:	f10a 0a01 	add.w	sl, sl, #1
 800d1aa:	9304      	str	r3, [sp, #16]
 800d1ac:	9307      	str	r3, [sp, #28]
 800d1ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1b4:	4654      	mov	r4, sl
 800d1b6:	2205      	movs	r2, #5
 800d1b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1bc:	484e      	ldr	r0, [pc, #312]	@ (800d2f8 <_svfiprintf_r+0x1e4>)
 800d1be:	f7f3 f807 	bl	80001d0 <memchr>
 800d1c2:	9a04      	ldr	r2, [sp, #16]
 800d1c4:	b9d8      	cbnz	r0, 800d1fe <_svfiprintf_r+0xea>
 800d1c6:	06d0      	lsls	r0, r2, #27
 800d1c8:	bf44      	itt	mi
 800d1ca:	2320      	movmi	r3, #32
 800d1cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1d0:	0711      	lsls	r1, r2, #28
 800d1d2:	bf44      	itt	mi
 800d1d4:	232b      	movmi	r3, #43	@ 0x2b
 800d1d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1da:	f89a 3000 	ldrb.w	r3, [sl]
 800d1de:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1e0:	d015      	beq.n	800d20e <_svfiprintf_r+0xfa>
 800d1e2:	9a07      	ldr	r2, [sp, #28]
 800d1e4:	4654      	mov	r4, sl
 800d1e6:	2000      	movs	r0, #0
 800d1e8:	f04f 0c0a 	mov.w	ip, #10
 800d1ec:	4621      	mov	r1, r4
 800d1ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1f2:	3b30      	subs	r3, #48	@ 0x30
 800d1f4:	2b09      	cmp	r3, #9
 800d1f6:	d94b      	bls.n	800d290 <_svfiprintf_r+0x17c>
 800d1f8:	b1b0      	cbz	r0, 800d228 <_svfiprintf_r+0x114>
 800d1fa:	9207      	str	r2, [sp, #28]
 800d1fc:	e014      	b.n	800d228 <_svfiprintf_r+0x114>
 800d1fe:	eba0 0308 	sub.w	r3, r0, r8
 800d202:	fa09 f303 	lsl.w	r3, r9, r3
 800d206:	4313      	orrs	r3, r2
 800d208:	9304      	str	r3, [sp, #16]
 800d20a:	46a2      	mov	sl, r4
 800d20c:	e7d2      	b.n	800d1b4 <_svfiprintf_r+0xa0>
 800d20e:	9b03      	ldr	r3, [sp, #12]
 800d210:	1d19      	adds	r1, r3, #4
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	9103      	str	r1, [sp, #12]
 800d216:	2b00      	cmp	r3, #0
 800d218:	bfbb      	ittet	lt
 800d21a:	425b      	neglt	r3, r3
 800d21c:	f042 0202 	orrlt.w	r2, r2, #2
 800d220:	9307      	strge	r3, [sp, #28]
 800d222:	9307      	strlt	r3, [sp, #28]
 800d224:	bfb8      	it	lt
 800d226:	9204      	strlt	r2, [sp, #16]
 800d228:	7823      	ldrb	r3, [r4, #0]
 800d22a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d22c:	d10a      	bne.n	800d244 <_svfiprintf_r+0x130>
 800d22e:	7863      	ldrb	r3, [r4, #1]
 800d230:	2b2a      	cmp	r3, #42	@ 0x2a
 800d232:	d132      	bne.n	800d29a <_svfiprintf_r+0x186>
 800d234:	9b03      	ldr	r3, [sp, #12]
 800d236:	1d1a      	adds	r2, r3, #4
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	9203      	str	r2, [sp, #12]
 800d23c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d240:	3402      	adds	r4, #2
 800d242:	9305      	str	r3, [sp, #20]
 800d244:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d308 <_svfiprintf_r+0x1f4>
 800d248:	7821      	ldrb	r1, [r4, #0]
 800d24a:	2203      	movs	r2, #3
 800d24c:	4650      	mov	r0, sl
 800d24e:	f7f2 ffbf 	bl	80001d0 <memchr>
 800d252:	b138      	cbz	r0, 800d264 <_svfiprintf_r+0x150>
 800d254:	9b04      	ldr	r3, [sp, #16]
 800d256:	eba0 000a 	sub.w	r0, r0, sl
 800d25a:	2240      	movs	r2, #64	@ 0x40
 800d25c:	4082      	lsls	r2, r0
 800d25e:	4313      	orrs	r3, r2
 800d260:	3401      	adds	r4, #1
 800d262:	9304      	str	r3, [sp, #16]
 800d264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d268:	4824      	ldr	r0, [pc, #144]	@ (800d2fc <_svfiprintf_r+0x1e8>)
 800d26a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d26e:	2206      	movs	r2, #6
 800d270:	f7f2 ffae 	bl	80001d0 <memchr>
 800d274:	2800      	cmp	r0, #0
 800d276:	d036      	beq.n	800d2e6 <_svfiprintf_r+0x1d2>
 800d278:	4b21      	ldr	r3, [pc, #132]	@ (800d300 <_svfiprintf_r+0x1ec>)
 800d27a:	bb1b      	cbnz	r3, 800d2c4 <_svfiprintf_r+0x1b0>
 800d27c:	9b03      	ldr	r3, [sp, #12]
 800d27e:	3307      	adds	r3, #7
 800d280:	f023 0307 	bic.w	r3, r3, #7
 800d284:	3308      	adds	r3, #8
 800d286:	9303      	str	r3, [sp, #12]
 800d288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d28a:	4433      	add	r3, r6
 800d28c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d28e:	e76a      	b.n	800d166 <_svfiprintf_r+0x52>
 800d290:	fb0c 3202 	mla	r2, ip, r2, r3
 800d294:	460c      	mov	r4, r1
 800d296:	2001      	movs	r0, #1
 800d298:	e7a8      	b.n	800d1ec <_svfiprintf_r+0xd8>
 800d29a:	2300      	movs	r3, #0
 800d29c:	3401      	adds	r4, #1
 800d29e:	9305      	str	r3, [sp, #20]
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	f04f 0c0a 	mov.w	ip, #10
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2ac:	3a30      	subs	r2, #48	@ 0x30
 800d2ae:	2a09      	cmp	r2, #9
 800d2b0:	d903      	bls.n	800d2ba <_svfiprintf_r+0x1a6>
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d0c6      	beq.n	800d244 <_svfiprintf_r+0x130>
 800d2b6:	9105      	str	r1, [sp, #20]
 800d2b8:	e7c4      	b.n	800d244 <_svfiprintf_r+0x130>
 800d2ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2be:	4604      	mov	r4, r0
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	e7f0      	b.n	800d2a6 <_svfiprintf_r+0x192>
 800d2c4:	ab03      	add	r3, sp, #12
 800d2c6:	9300      	str	r3, [sp, #0]
 800d2c8:	462a      	mov	r2, r5
 800d2ca:	4b0e      	ldr	r3, [pc, #56]	@ (800d304 <_svfiprintf_r+0x1f0>)
 800d2cc:	a904      	add	r1, sp, #16
 800d2ce:	4638      	mov	r0, r7
 800d2d0:	f7fd fe72 	bl	800afb8 <_printf_float>
 800d2d4:	1c42      	adds	r2, r0, #1
 800d2d6:	4606      	mov	r6, r0
 800d2d8:	d1d6      	bne.n	800d288 <_svfiprintf_r+0x174>
 800d2da:	89ab      	ldrh	r3, [r5, #12]
 800d2dc:	065b      	lsls	r3, r3, #25
 800d2de:	f53f af2d 	bmi.w	800d13c <_svfiprintf_r+0x28>
 800d2e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2e4:	e72c      	b.n	800d140 <_svfiprintf_r+0x2c>
 800d2e6:	ab03      	add	r3, sp, #12
 800d2e8:	9300      	str	r3, [sp, #0]
 800d2ea:	462a      	mov	r2, r5
 800d2ec:	4b05      	ldr	r3, [pc, #20]	@ (800d304 <_svfiprintf_r+0x1f0>)
 800d2ee:	a904      	add	r1, sp, #16
 800d2f0:	4638      	mov	r0, r7
 800d2f2:	f7fe f8f9 	bl	800b4e8 <_printf_i>
 800d2f6:	e7ed      	b.n	800d2d4 <_svfiprintf_r+0x1c0>
 800d2f8:	0800de98 	.word	0x0800de98
 800d2fc:	0800dea2 	.word	0x0800dea2
 800d300:	0800afb9 	.word	0x0800afb9
 800d304:	0800d05d 	.word	0x0800d05d
 800d308:	0800de9e 	.word	0x0800de9e

0800d30c <__sflush_r>:
 800d30c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d314:	0716      	lsls	r6, r2, #28
 800d316:	4605      	mov	r5, r0
 800d318:	460c      	mov	r4, r1
 800d31a:	d454      	bmi.n	800d3c6 <__sflush_r+0xba>
 800d31c:	684b      	ldr	r3, [r1, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	dc02      	bgt.n	800d328 <__sflush_r+0x1c>
 800d322:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d324:	2b00      	cmp	r3, #0
 800d326:	dd48      	ble.n	800d3ba <__sflush_r+0xae>
 800d328:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d32a:	2e00      	cmp	r6, #0
 800d32c:	d045      	beq.n	800d3ba <__sflush_r+0xae>
 800d32e:	2300      	movs	r3, #0
 800d330:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d334:	682f      	ldr	r7, [r5, #0]
 800d336:	6a21      	ldr	r1, [r4, #32]
 800d338:	602b      	str	r3, [r5, #0]
 800d33a:	d030      	beq.n	800d39e <__sflush_r+0x92>
 800d33c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d33e:	89a3      	ldrh	r3, [r4, #12]
 800d340:	0759      	lsls	r1, r3, #29
 800d342:	d505      	bpl.n	800d350 <__sflush_r+0x44>
 800d344:	6863      	ldr	r3, [r4, #4]
 800d346:	1ad2      	subs	r2, r2, r3
 800d348:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d34a:	b10b      	cbz	r3, 800d350 <__sflush_r+0x44>
 800d34c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d34e:	1ad2      	subs	r2, r2, r3
 800d350:	2300      	movs	r3, #0
 800d352:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d354:	6a21      	ldr	r1, [r4, #32]
 800d356:	4628      	mov	r0, r5
 800d358:	47b0      	blx	r6
 800d35a:	1c43      	adds	r3, r0, #1
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	d106      	bne.n	800d36e <__sflush_r+0x62>
 800d360:	6829      	ldr	r1, [r5, #0]
 800d362:	291d      	cmp	r1, #29
 800d364:	d82b      	bhi.n	800d3be <__sflush_r+0xb2>
 800d366:	4a2a      	ldr	r2, [pc, #168]	@ (800d410 <__sflush_r+0x104>)
 800d368:	410a      	asrs	r2, r1
 800d36a:	07d6      	lsls	r6, r2, #31
 800d36c:	d427      	bmi.n	800d3be <__sflush_r+0xb2>
 800d36e:	2200      	movs	r2, #0
 800d370:	6062      	str	r2, [r4, #4]
 800d372:	04d9      	lsls	r1, r3, #19
 800d374:	6922      	ldr	r2, [r4, #16]
 800d376:	6022      	str	r2, [r4, #0]
 800d378:	d504      	bpl.n	800d384 <__sflush_r+0x78>
 800d37a:	1c42      	adds	r2, r0, #1
 800d37c:	d101      	bne.n	800d382 <__sflush_r+0x76>
 800d37e:	682b      	ldr	r3, [r5, #0]
 800d380:	b903      	cbnz	r3, 800d384 <__sflush_r+0x78>
 800d382:	6560      	str	r0, [r4, #84]	@ 0x54
 800d384:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d386:	602f      	str	r7, [r5, #0]
 800d388:	b1b9      	cbz	r1, 800d3ba <__sflush_r+0xae>
 800d38a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d38e:	4299      	cmp	r1, r3
 800d390:	d002      	beq.n	800d398 <__sflush_r+0x8c>
 800d392:	4628      	mov	r0, r5
 800d394:	f7ff f9e0 	bl	800c758 <_free_r>
 800d398:	2300      	movs	r3, #0
 800d39a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d39c:	e00d      	b.n	800d3ba <__sflush_r+0xae>
 800d39e:	2301      	movs	r3, #1
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	47b0      	blx	r6
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	1c50      	adds	r0, r2, #1
 800d3a8:	d1c9      	bne.n	800d33e <__sflush_r+0x32>
 800d3aa:	682b      	ldr	r3, [r5, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d0c6      	beq.n	800d33e <__sflush_r+0x32>
 800d3b0:	2b1d      	cmp	r3, #29
 800d3b2:	d001      	beq.n	800d3b8 <__sflush_r+0xac>
 800d3b4:	2b16      	cmp	r3, #22
 800d3b6:	d11e      	bne.n	800d3f6 <__sflush_r+0xea>
 800d3b8:	602f      	str	r7, [r5, #0]
 800d3ba:	2000      	movs	r0, #0
 800d3bc:	e022      	b.n	800d404 <__sflush_r+0xf8>
 800d3be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3c2:	b21b      	sxth	r3, r3
 800d3c4:	e01b      	b.n	800d3fe <__sflush_r+0xf2>
 800d3c6:	690f      	ldr	r7, [r1, #16]
 800d3c8:	2f00      	cmp	r7, #0
 800d3ca:	d0f6      	beq.n	800d3ba <__sflush_r+0xae>
 800d3cc:	0793      	lsls	r3, r2, #30
 800d3ce:	680e      	ldr	r6, [r1, #0]
 800d3d0:	bf08      	it	eq
 800d3d2:	694b      	ldreq	r3, [r1, #20]
 800d3d4:	600f      	str	r7, [r1, #0]
 800d3d6:	bf18      	it	ne
 800d3d8:	2300      	movne	r3, #0
 800d3da:	eba6 0807 	sub.w	r8, r6, r7
 800d3de:	608b      	str	r3, [r1, #8]
 800d3e0:	f1b8 0f00 	cmp.w	r8, #0
 800d3e4:	dde9      	ble.n	800d3ba <__sflush_r+0xae>
 800d3e6:	6a21      	ldr	r1, [r4, #32]
 800d3e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d3ea:	4643      	mov	r3, r8
 800d3ec:	463a      	mov	r2, r7
 800d3ee:	4628      	mov	r0, r5
 800d3f0:	47b0      	blx	r6
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	dc08      	bgt.n	800d408 <__sflush_r+0xfc>
 800d3f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3fe:	81a3      	strh	r3, [r4, #12]
 800d400:	f04f 30ff 	mov.w	r0, #4294967295
 800d404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d408:	4407      	add	r7, r0
 800d40a:	eba8 0800 	sub.w	r8, r8, r0
 800d40e:	e7e7      	b.n	800d3e0 <__sflush_r+0xd4>
 800d410:	dfbffffe 	.word	0xdfbffffe

0800d414 <_fflush_r>:
 800d414:	b538      	push	{r3, r4, r5, lr}
 800d416:	690b      	ldr	r3, [r1, #16]
 800d418:	4605      	mov	r5, r0
 800d41a:	460c      	mov	r4, r1
 800d41c:	b913      	cbnz	r3, 800d424 <_fflush_r+0x10>
 800d41e:	2500      	movs	r5, #0
 800d420:	4628      	mov	r0, r5
 800d422:	bd38      	pop	{r3, r4, r5, pc}
 800d424:	b118      	cbz	r0, 800d42e <_fflush_r+0x1a>
 800d426:	6a03      	ldr	r3, [r0, #32]
 800d428:	b90b      	cbnz	r3, 800d42e <_fflush_r+0x1a>
 800d42a:	f7fe fa09 	bl	800b840 <__sinit>
 800d42e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d0f3      	beq.n	800d41e <_fflush_r+0xa>
 800d436:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d438:	07d0      	lsls	r0, r2, #31
 800d43a:	d404      	bmi.n	800d446 <_fflush_r+0x32>
 800d43c:	0599      	lsls	r1, r3, #22
 800d43e:	d402      	bmi.n	800d446 <_fflush_r+0x32>
 800d440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d442:	f7fe fb2c 	bl	800ba9e <__retarget_lock_acquire_recursive>
 800d446:	4628      	mov	r0, r5
 800d448:	4621      	mov	r1, r4
 800d44a:	f7ff ff5f 	bl	800d30c <__sflush_r>
 800d44e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d450:	07da      	lsls	r2, r3, #31
 800d452:	4605      	mov	r5, r0
 800d454:	d4e4      	bmi.n	800d420 <_fflush_r+0xc>
 800d456:	89a3      	ldrh	r3, [r4, #12]
 800d458:	059b      	lsls	r3, r3, #22
 800d45a:	d4e1      	bmi.n	800d420 <_fflush_r+0xc>
 800d45c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d45e:	f7fe fb1f 	bl	800baa0 <__retarget_lock_release_recursive>
 800d462:	e7dd      	b.n	800d420 <_fflush_r+0xc>

0800d464 <memmove>:
 800d464:	4288      	cmp	r0, r1
 800d466:	b510      	push	{r4, lr}
 800d468:	eb01 0402 	add.w	r4, r1, r2
 800d46c:	d902      	bls.n	800d474 <memmove+0x10>
 800d46e:	4284      	cmp	r4, r0
 800d470:	4623      	mov	r3, r4
 800d472:	d807      	bhi.n	800d484 <memmove+0x20>
 800d474:	1e43      	subs	r3, r0, #1
 800d476:	42a1      	cmp	r1, r4
 800d478:	d008      	beq.n	800d48c <memmove+0x28>
 800d47a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d47e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d482:	e7f8      	b.n	800d476 <memmove+0x12>
 800d484:	4402      	add	r2, r0
 800d486:	4601      	mov	r1, r0
 800d488:	428a      	cmp	r2, r1
 800d48a:	d100      	bne.n	800d48e <memmove+0x2a>
 800d48c:	bd10      	pop	{r4, pc}
 800d48e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d496:	e7f7      	b.n	800d488 <memmove+0x24>

0800d498 <_sbrk_r>:
 800d498:	b538      	push	{r3, r4, r5, lr}
 800d49a:	4d06      	ldr	r5, [pc, #24]	@ (800d4b4 <_sbrk_r+0x1c>)
 800d49c:	2300      	movs	r3, #0
 800d49e:	4604      	mov	r4, r0
 800d4a0:	4608      	mov	r0, r1
 800d4a2:	602b      	str	r3, [r5, #0]
 800d4a4:	f7f4 feea 	bl	800227c <_sbrk>
 800d4a8:	1c43      	adds	r3, r0, #1
 800d4aa:	d102      	bne.n	800d4b2 <_sbrk_r+0x1a>
 800d4ac:	682b      	ldr	r3, [r5, #0]
 800d4ae:	b103      	cbz	r3, 800d4b2 <_sbrk_r+0x1a>
 800d4b0:	6023      	str	r3, [r4, #0]
 800d4b2:	bd38      	pop	{r3, r4, r5, pc}
 800d4b4:	200024f4 	.word	0x200024f4

0800d4b8 <__assert_func>:
 800d4b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4ba:	4614      	mov	r4, r2
 800d4bc:	461a      	mov	r2, r3
 800d4be:	4b09      	ldr	r3, [pc, #36]	@ (800d4e4 <__assert_func+0x2c>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	4605      	mov	r5, r0
 800d4c4:	68d8      	ldr	r0, [r3, #12]
 800d4c6:	b954      	cbnz	r4, 800d4de <__assert_func+0x26>
 800d4c8:	4b07      	ldr	r3, [pc, #28]	@ (800d4e8 <__assert_func+0x30>)
 800d4ca:	461c      	mov	r4, r3
 800d4cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d4d0:	9100      	str	r1, [sp, #0]
 800d4d2:	462b      	mov	r3, r5
 800d4d4:	4905      	ldr	r1, [pc, #20]	@ (800d4ec <__assert_func+0x34>)
 800d4d6:	f000 f86f 	bl	800d5b8 <fiprintf>
 800d4da:	f000 f87f 	bl	800d5dc <abort>
 800d4de:	4b04      	ldr	r3, [pc, #16]	@ (800d4f0 <__assert_func+0x38>)
 800d4e0:	e7f4      	b.n	800d4cc <__assert_func+0x14>
 800d4e2:	bf00      	nop
 800d4e4:	2000001c 	.word	0x2000001c
 800d4e8:	0800deee 	.word	0x0800deee
 800d4ec:	0800dec0 	.word	0x0800dec0
 800d4f0:	0800deb3 	.word	0x0800deb3

0800d4f4 <_calloc_r>:
 800d4f4:	b570      	push	{r4, r5, r6, lr}
 800d4f6:	fba1 5402 	umull	r5, r4, r1, r2
 800d4fa:	b93c      	cbnz	r4, 800d50c <_calloc_r+0x18>
 800d4fc:	4629      	mov	r1, r5
 800d4fe:	f7ff f99f 	bl	800c840 <_malloc_r>
 800d502:	4606      	mov	r6, r0
 800d504:	b928      	cbnz	r0, 800d512 <_calloc_r+0x1e>
 800d506:	2600      	movs	r6, #0
 800d508:	4630      	mov	r0, r6
 800d50a:	bd70      	pop	{r4, r5, r6, pc}
 800d50c:	220c      	movs	r2, #12
 800d50e:	6002      	str	r2, [r0, #0]
 800d510:	e7f9      	b.n	800d506 <_calloc_r+0x12>
 800d512:	462a      	mov	r2, r5
 800d514:	4621      	mov	r1, r4
 800d516:	f7fe fa45 	bl	800b9a4 <memset>
 800d51a:	e7f5      	b.n	800d508 <_calloc_r+0x14>

0800d51c <__ascii_mbtowc>:
 800d51c:	b082      	sub	sp, #8
 800d51e:	b901      	cbnz	r1, 800d522 <__ascii_mbtowc+0x6>
 800d520:	a901      	add	r1, sp, #4
 800d522:	b142      	cbz	r2, 800d536 <__ascii_mbtowc+0x1a>
 800d524:	b14b      	cbz	r3, 800d53a <__ascii_mbtowc+0x1e>
 800d526:	7813      	ldrb	r3, [r2, #0]
 800d528:	600b      	str	r3, [r1, #0]
 800d52a:	7812      	ldrb	r2, [r2, #0]
 800d52c:	1e10      	subs	r0, r2, #0
 800d52e:	bf18      	it	ne
 800d530:	2001      	movne	r0, #1
 800d532:	b002      	add	sp, #8
 800d534:	4770      	bx	lr
 800d536:	4610      	mov	r0, r2
 800d538:	e7fb      	b.n	800d532 <__ascii_mbtowc+0x16>
 800d53a:	f06f 0001 	mvn.w	r0, #1
 800d53e:	e7f8      	b.n	800d532 <__ascii_mbtowc+0x16>

0800d540 <_realloc_r>:
 800d540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d544:	4680      	mov	r8, r0
 800d546:	4615      	mov	r5, r2
 800d548:	460c      	mov	r4, r1
 800d54a:	b921      	cbnz	r1, 800d556 <_realloc_r+0x16>
 800d54c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d550:	4611      	mov	r1, r2
 800d552:	f7ff b975 	b.w	800c840 <_malloc_r>
 800d556:	b92a      	cbnz	r2, 800d564 <_realloc_r+0x24>
 800d558:	f7ff f8fe 	bl	800c758 <_free_r>
 800d55c:	2400      	movs	r4, #0
 800d55e:	4620      	mov	r0, r4
 800d560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d564:	f000 f841 	bl	800d5ea <_malloc_usable_size_r>
 800d568:	4285      	cmp	r5, r0
 800d56a:	4606      	mov	r6, r0
 800d56c:	d802      	bhi.n	800d574 <_realloc_r+0x34>
 800d56e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d572:	d8f4      	bhi.n	800d55e <_realloc_r+0x1e>
 800d574:	4629      	mov	r1, r5
 800d576:	4640      	mov	r0, r8
 800d578:	f7ff f962 	bl	800c840 <_malloc_r>
 800d57c:	4607      	mov	r7, r0
 800d57e:	2800      	cmp	r0, #0
 800d580:	d0ec      	beq.n	800d55c <_realloc_r+0x1c>
 800d582:	42b5      	cmp	r5, r6
 800d584:	462a      	mov	r2, r5
 800d586:	4621      	mov	r1, r4
 800d588:	bf28      	it	cs
 800d58a:	4632      	movcs	r2, r6
 800d58c:	f7fe fa89 	bl	800baa2 <memcpy>
 800d590:	4621      	mov	r1, r4
 800d592:	4640      	mov	r0, r8
 800d594:	f7ff f8e0 	bl	800c758 <_free_r>
 800d598:	463c      	mov	r4, r7
 800d59a:	e7e0      	b.n	800d55e <_realloc_r+0x1e>

0800d59c <__ascii_wctomb>:
 800d59c:	4603      	mov	r3, r0
 800d59e:	4608      	mov	r0, r1
 800d5a0:	b141      	cbz	r1, 800d5b4 <__ascii_wctomb+0x18>
 800d5a2:	2aff      	cmp	r2, #255	@ 0xff
 800d5a4:	d904      	bls.n	800d5b0 <__ascii_wctomb+0x14>
 800d5a6:	228a      	movs	r2, #138	@ 0x8a
 800d5a8:	601a      	str	r2, [r3, #0]
 800d5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ae:	4770      	bx	lr
 800d5b0:	700a      	strb	r2, [r1, #0]
 800d5b2:	2001      	movs	r0, #1
 800d5b4:	4770      	bx	lr
	...

0800d5b8 <fiprintf>:
 800d5b8:	b40e      	push	{r1, r2, r3}
 800d5ba:	b503      	push	{r0, r1, lr}
 800d5bc:	4601      	mov	r1, r0
 800d5be:	ab03      	add	r3, sp, #12
 800d5c0:	4805      	ldr	r0, [pc, #20]	@ (800d5d8 <fiprintf+0x20>)
 800d5c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5c6:	6800      	ldr	r0, [r0, #0]
 800d5c8:	9301      	str	r3, [sp, #4]
 800d5ca:	f000 f83f 	bl	800d64c <_vfiprintf_r>
 800d5ce:	b002      	add	sp, #8
 800d5d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5d4:	b003      	add	sp, #12
 800d5d6:	4770      	bx	lr
 800d5d8:	2000001c 	.word	0x2000001c

0800d5dc <abort>:
 800d5dc:	b508      	push	{r3, lr}
 800d5de:	2006      	movs	r0, #6
 800d5e0:	f000 fa08 	bl	800d9f4 <raise>
 800d5e4:	2001      	movs	r0, #1
 800d5e6:	f7f4 fdd1 	bl	800218c <_exit>

0800d5ea <_malloc_usable_size_r>:
 800d5ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5ee:	1f18      	subs	r0, r3, #4
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	bfbc      	itt	lt
 800d5f4:	580b      	ldrlt	r3, [r1, r0]
 800d5f6:	18c0      	addlt	r0, r0, r3
 800d5f8:	4770      	bx	lr

0800d5fa <__sfputc_r>:
 800d5fa:	6893      	ldr	r3, [r2, #8]
 800d5fc:	3b01      	subs	r3, #1
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	b410      	push	{r4}
 800d602:	6093      	str	r3, [r2, #8]
 800d604:	da08      	bge.n	800d618 <__sfputc_r+0x1e>
 800d606:	6994      	ldr	r4, [r2, #24]
 800d608:	42a3      	cmp	r3, r4
 800d60a:	db01      	blt.n	800d610 <__sfputc_r+0x16>
 800d60c:	290a      	cmp	r1, #10
 800d60e:	d103      	bne.n	800d618 <__sfputc_r+0x1e>
 800d610:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d614:	f000 b932 	b.w	800d87c <__swbuf_r>
 800d618:	6813      	ldr	r3, [r2, #0]
 800d61a:	1c58      	adds	r0, r3, #1
 800d61c:	6010      	str	r0, [r2, #0]
 800d61e:	7019      	strb	r1, [r3, #0]
 800d620:	4608      	mov	r0, r1
 800d622:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d626:	4770      	bx	lr

0800d628 <__sfputs_r>:
 800d628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d62a:	4606      	mov	r6, r0
 800d62c:	460f      	mov	r7, r1
 800d62e:	4614      	mov	r4, r2
 800d630:	18d5      	adds	r5, r2, r3
 800d632:	42ac      	cmp	r4, r5
 800d634:	d101      	bne.n	800d63a <__sfputs_r+0x12>
 800d636:	2000      	movs	r0, #0
 800d638:	e007      	b.n	800d64a <__sfputs_r+0x22>
 800d63a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d63e:	463a      	mov	r2, r7
 800d640:	4630      	mov	r0, r6
 800d642:	f7ff ffda 	bl	800d5fa <__sfputc_r>
 800d646:	1c43      	adds	r3, r0, #1
 800d648:	d1f3      	bne.n	800d632 <__sfputs_r+0xa>
 800d64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d64c <_vfiprintf_r>:
 800d64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d650:	460d      	mov	r5, r1
 800d652:	b09d      	sub	sp, #116	@ 0x74
 800d654:	4614      	mov	r4, r2
 800d656:	4698      	mov	r8, r3
 800d658:	4606      	mov	r6, r0
 800d65a:	b118      	cbz	r0, 800d664 <_vfiprintf_r+0x18>
 800d65c:	6a03      	ldr	r3, [r0, #32]
 800d65e:	b90b      	cbnz	r3, 800d664 <_vfiprintf_r+0x18>
 800d660:	f7fe f8ee 	bl	800b840 <__sinit>
 800d664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d666:	07d9      	lsls	r1, r3, #31
 800d668:	d405      	bmi.n	800d676 <_vfiprintf_r+0x2a>
 800d66a:	89ab      	ldrh	r3, [r5, #12]
 800d66c:	059a      	lsls	r2, r3, #22
 800d66e:	d402      	bmi.n	800d676 <_vfiprintf_r+0x2a>
 800d670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d672:	f7fe fa14 	bl	800ba9e <__retarget_lock_acquire_recursive>
 800d676:	89ab      	ldrh	r3, [r5, #12]
 800d678:	071b      	lsls	r3, r3, #28
 800d67a:	d501      	bpl.n	800d680 <_vfiprintf_r+0x34>
 800d67c:	692b      	ldr	r3, [r5, #16]
 800d67e:	b99b      	cbnz	r3, 800d6a8 <_vfiprintf_r+0x5c>
 800d680:	4629      	mov	r1, r5
 800d682:	4630      	mov	r0, r6
 800d684:	f000 f938 	bl	800d8f8 <__swsetup_r>
 800d688:	b170      	cbz	r0, 800d6a8 <_vfiprintf_r+0x5c>
 800d68a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d68c:	07dc      	lsls	r4, r3, #31
 800d68e:	d504      	bpl.n	800d69a <_vfiprintf_r+0x4e>
 800d690:	f04f 30ff 	mov.w	r0, #4294967295
 800d694:	b01d      	add	sp, #116	@ 0x74
 800d696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d69a:	89ab      	ldrh	r3, [r5, #12]
 800d69c:	0598      	lsls	r0, r3, #22
 800d69e:	d4f7      	bmi.n	800d690 <_vfiprintf_r+0x44>
 800d6a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6a2:	f7fe f9fd 	bl	800baa0 <__retarget_lock_release_recursive>
 800d6a6:	e7f3      	b.n	800d690 <_vfiprintf_r+0x44>
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6ac:	2320      	movs	r3, #32
 800d6ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6b6:	2330      	movs	r3, #48	@ 0x30
 800d6b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d868 <_vfiprintf_r+0x21c>
 800d6bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6c0:	f04f 0901 	mov.w	r9, #1
 800d6c4:	4623      	mov	r3, r4
 800d6c6:	469a      	mov	sl, r3
 800d6c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6cc:	b10a      	cbz	r2, 800d6d2 <_vfiprintf_r+0x86>
 800d6ce:	2a25      	cmp	r2, #37	@ 0x25
 800d6d0:	d1f9      	bne.n	800d6c6 <_vfiprintf_r+0x7a>
 800d6d2:	ebba 0b04 	subs.w	fp, sl, r4
 800d6d6:	d00b      	beq.n	800d6f0 <_vfiprintf_r+0xa4>
 800d6d8:	465b      	mov	r3, fp
 800d6da:	4622      	mov	r2, r4
 800d6dc:	4629      	mov	r1, r5
 800d6de:	4630      	mov	r0, r6
 800d6e0:	f7ff ffa2 	bl	800d628 <__sfputs_r>
 800d6e4:	3001      	adds	r0, #1
 800d6e6:	f000 80a7 	beq.w	800d838 <_vfiprintf_r+0x1ec>
 800d6ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6ec:	445a      	add	r2, fp
 800d6ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6f0:	f89a 3000 	ldrb.w	r3, [sl]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	f000 809f 	beq.w	800d838 <_vfiprintf_r+0x1ec>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d704:	f10a 0a01 	add.w	sl, sl, #1
 800d708:	9304      	str	r3, [sp, #16]
 800d70a:	9307      	str	r3, [sp, #28]
 800d70c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d710:	931a      	str	r3, [sp, #104]	@ 0x68
 800d712:	4654      	mov	r4, sl
 800d714:	2205      	movs	r2, #5
 800d716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d71a:	4853      	ldr	r0, [pc, #332]	@ (800d868 <_vfiprintf_r+0x21c>)
 800d71c:	f7f2 fd58 	bl	80001d0 <memchr>
 800d720:	9a04      	ldr	r2, [sp, #16]
 800d722:	b9d8      	cbnz	r0, 800d75c <_vfiprintf_r+0x110>
 800d724:	06d1      	lsls	r1, r2, #27
 800d726:	bf44      	itt	mi
 800d728:	2320      	movmi	r3, #32
 800d72a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d72e:	0713      	lsls	r3, r2, #28
 800d730:	bf44      	itt	mi
 800d732:	232b      	movmi	r3, #43	@ 0x2b
 800d734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d738:	f89a 3000 	ldrb.w	r3, [sl]
 800d73c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d73e:	d015      	beq.n	800d76c <_vfiprintf_r+0x120>
 800d740:	9a07      	ldr	r2, [sp, #28]
 800d742:	4654      	mov	r4, sl
 800d744:	2000      	movs	r0, #0
 800d746:	f04f 0c0a 	mov.w	ip, #10
 800d74a:	4621      	mov	r1, r4
 800d74c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d750:	3b30      	subs	r3, #48	@ 0x30
 800d752:	2b09      	cmp	r3, #9
 800d754:	d94b      	bls.n	800d7ee <_vfiprintf_r+0x1a2>
 800d756:	b1b0      	cbz	r0, 800d786 <_vfiprintf_r+0x13a>
 800d758:	9207      	str	r2, [sp, #28]
 800d75a:	e014      	b.n	800d786 <_vfiprintf_r+0x13a>
 800d75c:	eba0 0308 	sub.w	r3, r0, r8
 800d760:	fa09 f303 	lsl.w	r3, r9, r3
 800d764:	4313      	orrs	r3, r2
 800d766:	9304      	str	r3, [sp, #16]
 800d768:	46a2      	mov	sl, r4
 800d76a:	e7d2      	b.n	800d712 <_vfiprintf_r+0xc6>
 800d76c:	9b03      	ldr	r3, [sp, #12]
 800d76e:	1d19      	adds	r1, r3, #4
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	9103      	str	r1, [sp, #12]
 800d774:	2b00      	cmp	r3, #0
 800d776:	bfbb      	ittet	lt
 800d778:	425b      	neglt	r3, r3
 800d77a:	f042 0202 	orrlt.w	r2, r2, #2
 800d77e:	9307      	strge	r3, [sp, #28]
 800d780:	9307      	strlt	r3, [sp, #28]
 800d782:	bfb8      	it	lt
 800d784:	9204      	strlt	r2, [sp, #16]
 800d786:	7823      	ldrb	r3, [r4, #0]
 800d788:	2b2e      	cmp	r3, #46	@ 0x2e
 800d78a:	d10a      	bne.n	800d7a2 <_vfiprintf_r+0x156>
 800d78c:	7863      	ldrb	r3, [r4, #1]
 800d78e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d790:	d132      	bne.n	800d7f8 <_vfiprintf_r+0x1ac>
 800d792:	9b03      	ldr	r3, [sp, #12]
 800d794:	1d1a      	adds	r2, r3, #4
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	9203      	str	r2, [sp, #12]
 800d79a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d79e:	3402      	adds	r4, #2
 800d7a0:	9305      	str	r3, [sp, #20]
 800d7a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d878 <_vfiprintf_r+0x22c>
 800d7a6:	7821      	ldrb	r1, [r4, #0]
 800d7a8:	2203      	movs	r2, #3
 800d7aa:	4650      	mov	r0, sl
 800d7ac:	f7f2 fd10 	bl	80001d0 <memchr>
 800d7b0:	b138      	cbz	r0, 800d7c2 <_vfiprintf_r+0x176>
 800d7b2:	9b04      	ldr	r3, [sp, #16]
 800d7b4:	eba0 000a 	sub.w	r0, r0, sl
 800d7b8:	2240      	movs	r2, #64	@ 0x40
 800d7ba:	4082      	lsls	r2, r0
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	3401      	adds	r4, #1
 800d7c0:	9304      	str	r3, [sp, #16]
 800d7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7c6:	4829      	ldr	r0, [pc, #164]	@ (800d86c <_vfiprintf_r+0x220>)
 800d7c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7cc:	2206      	movs	r2, #6
 800d7ce:	f7f2 fcff 	bl	80001d0 <memchr>
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	d03f      	beq.n	800d856 <_vfiprintf_r+0x20a>
 800d7d6:	4b26      	ldr	r3, [pc, #152]	@ (800d870 <_vfiprintf_r+0x224>)
 800d7d8:	bb1b      	cbnz	r3, 800d822 <_vfiprintf_r+0x1d6>
 800d7da:	9b03      	ldr	r3, [sp, #12]
 800d7dc:	3307      	adds	r3, #7
 800d7de:	f023 0307 	bic.w	r3, r3, #7
 800d7e2:	3308      	adds	r3, #8
 800d7e4:	9303      	str	r3, [sp, #12]
 800d7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7e8:	443b      	add	r3, r7
 800d7ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7ec:	e76a      	b.n	800d6c4 <_vfiprintf_r+0x78>
 800d7ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7f2:	460c      	mov	r4, r1
 800d7f4:	2001      	movs	r0, #1
 800d7f6:	e7a8      	b.n	800d74a <_vfiprintf_r+0xfe>
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	3401      	adds	r4, #1
 800d7fc:	9305      	str	r3, [sp, #20]
 800d7fe:	4619      	mov	r1, r3
 800d800:	f04f 0c0a 	mov.w	ip, #10
 800d804:	4620      	mov	r0, r4
 800d806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d80a:	3a30      	subs	r2, #48	@ 0x30
 800d80c:	2a09      	cmp	r2, #9
 800d80e:	d903      	bls.n	800d818 <_vfiprintf_r+0x1cc>
 800d810:	2b00      	cmp	r3, #0
 800d812:	d0c6      	beq.n	800d7a2 <_vfiprintf_r+0x156>
 800d814:	9105      	str	r1, [sp, #20]
 800d816:	e7c4      	b.n	800d7a2 <_vfiprintf_r+0x156>
 800d818:	fb0c 2101 	mla	r1, ip, r1, r2
 800d81c:	4604      	mov	r4, r0
 800d81e:	2301      	movs	r3, #1
 800d820:	e7f0      	b.n	800d804 <_vfiprintf_r+0x1b8>
 800d822:	ab03      	add	r3, sp, #12
 800d824:	9300      	str	r3, [sp, #0]
 800d826:	462a      	mov	r2, r5
 800d828:	4b12      	ldr	r3, [pc, #72]	@ (800d874 <_vfiprintf_r+0x228>)
 800d82a:	a904      	add	r1, sp, #16
 800d82c:	4630      	mov	r0, r6
 800d82e:	f7fd fbc3 	bl	800afb8 <_printf_float>
 800d832:	4607      	mov	r7, r0
 800d834:	1c78      	adds	r0, r7, #1
 800d836:	d1d6      	bne.n	800d7e6 <_vfiprintf_r+0x19a>
 800d838:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d83a:	07d9      	lsls	r1, r3, #31
 800d83c:	d405      	bmi.n	800d84a <_vfiprintf_r+0x1fe>
 800d83e:	89ab      	ldrh	r3, [r5, #12]
 800d840:	059a      	lsls	r2, r3, #22
 800d842:	d402      	bmi.n	800d84a <_vfiprintf_r+0x1fe>
 800d844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d846:	f7fe f92b 	bl	800baa0 <__retarget_lock_release_recursive>
 800d84a:	89ab      	ldrh	r3, [r5, #12]
 800d84c:	065b      	lsls	r3, r3, #25
 800d84e:	f53f af1f 	bmi.w	800d690 <_vfiprintf_r+0x44>
 800d852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d854:	e71e      	b.n	800d694 <_vfiprintf_r+0x48>
 800d856:	ab03      	add	r3, sp, #12
 800d858:	9300      	str	r3, [sp, #0]
 800d85a:	462a      	mov	r2, r5
 800d85c:	4b05      	ldr	r3, [pc, #20]	@ (800d874 <_vfiprintf_r+0x228>)
 800d85e:	a904      	add	r1, sp, #16
 800d860:	4630      	mov	r0, r6
 800d862:	f7fd fe41 	bl	800b4e8 <_printf_i>
 800d866:	e7e4      	b.n	800d832 <_vfiprintf_r+0x1e6>
 800d868:	0800de98 	.word	0x0800de98
 800d86c:	0800dea2 	.word	0x0800dea2
 800d870:	0800afb9 	.word	0x0800afb9
 800d874:	0800d629 	.word	0x0800d629
 800d878:	0800de9e 	.word	0x0800de9e

0800d87c <__swbuf_r>:
 800d87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d87e:	460e      	mov	r6, r1
 800d880:	4614      	mov	r4, r2
 800d882:	4605      	mov	r5, r0
 800d884:	b118      	cbz	r0, 800d88e <__swbuf_r+0x12>
 800d886:	6a03      	ldr	r3, [r0, #32]
 800d888:	b90b      	cbnz	r3, 800d88e <__swbuf_r+0x12>
 800d88a:	f7fd ffd9 	bl	800b840 <__sinit>
 800d88e:	69a3      	ldr	r3, [r4, #24]
 800d890:	60a3      	str	r3, [r4, #8]
 800d892:	89a3      	ldrh	r3, [r4, #12]
 800d894:	071a      	lsls	r2, r3, #28
 800d896:	d501      	bpl.n	800d89c <__swbuf_r+0x20>
 800d898:	6923      	ldr	r3, [r4, #16]
 800d89a:	b943      	cbnz	r3, 800d8ae <__swbuf_r+0x32>
 800d89c:	4621      	mov	r1, r4
 800d89e:	4628      	mov	r0, r5
 800d8a0:	f000 f82a 	bl	800d8f8 <__swsetup_r>
 800d8a4:	b118      	cbz	r0, 800d8ae <__swbuf_r+0x32>
 800d8a6:	f04f 37ff 	mov.w	r7, #4294967295
 800d8aa:	4638      	mov	r0, r7
 800d8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8ae:	6823      	ldr	r3, [r4, #0]
 800d8b0:	6922      	ldr	r2, [r4, #16]
 800d8b2:	1a98      	subs	r0, r3, r2
 800d8b4:	6963      	ldr	r3, [r4, #20]
 800d8b6:	b2f6      	uxtb	r6, r6
 800d8b8:	4283      	cmp	r3, r0
 800d8ba:	4637      	mov	r7, r6
 800d8bc:	dc05      	bgt.n	800d8ca <__swbuf_r+0x4e>
 800d8be:	4621      	mov	r1, r4
 800d8c0:	4628      	mov	r0, r5
 800d8c2:	f7ff fda7 	bl	800d414 <_fflush_r>
 800d8c6:	2800      	cmp	r0, #0
 800d8c8:	d1ed      	bne.n	800d8a6 <__swbuf_r+0x2a>
 800d8ca:	68a3      	ldr	r3, [r4, #8]
 800d8cc:	3b01      	subs	r3, #1
 800d8ce:	60a3      	str	r3, [r4, #8]
 800d8d0:	6823      	ldr	r3, [r4, #0]
 800d8d2:	1c5a      	adds	r2, r3, #1
 800d8d4:	6022      	str	r2, [r4, #0]
 800d8d6:	701e      	strb	r6, [r3, #0]
 800d8d8:	6962      	ldr	r2, [r4, #20]
 800d8da:	1c43      	adds	r3, r0, #1
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d004      	beq.n	800d8ea <__swbuf_r+0x6e>
 800d8e0:	89a3      	ldrh	r3, [r4, #12]
 800d8e2:	07db      	lsls	r3, r3, #31
 800d8e4:	d5e1      	bpl.n	800d8aa <__swbuf_r+0x2e>
 800d8e6:	2e0a      	cmp	r6, #10
 800d8e8:	d1df      	bne.n	800d8aa <__swbuf_r+0x2e>
 800d8ea:	4621      	mov	r1, r4
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	f7ff fd91 	bl	800d414 <_fflush_r>
 800d8f2:	2800      	cmp	r0, #0
 800d8f4:	d0d9      	beq.n	800d8aa <__swbuf_r+0x2e>
 800d8f6:	e7d6      	b.n	800d8a6 <__swbuf_r+0x2a>

0800d8f8 <__swsetup_r>:
 800d8f8:	b538      	push	{r3, r4, r5, lr}
 800d8fa:	4b29      	ldr	r3, [pc, #164]	@ (800d9a0 <__swsetup_r+0xa8>)
 800d8fc:	4605      	mov	r5, r0
 800d8fe:	6818      	ldr	r0, [r3, #0]
 800d900:	460c      	mov	r4, r1
 800d902:	b118      	cbz	r0, 800d90c <__swsetup_r+0x14>
 800d904:	6a03      	ldr	r3, [r0, #32]
 800d906:	b90b      	cbnz	r3, 800d90c <__swsetup_r+0x14>
 800d908:	f7fd ff9a 	bl	800b840 <__sinit>
 800d90c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d910:	0719      	lsls	r1, r3, #28
 800d912:	d422      	bmi.n	800d95a <__swsetup_r+0x62>
 800d914:	06da      	lsls	r2, r3, #27
 800d916:	d407      	bmi.n	800d928 <__swsetup_r+0x30>
 800d918:	2209      	movs	r2, #9
 800d91a:	602a      	str	r2, [r5, #0]
 800d91c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d920:	81a3      	strh	r3, [r4, #12]
 800d922:	f04f 30ff 	mov.w	r0, #4294967295
 800d926:	e033      	b.n	800d990 <__swsetup_r+0x98>
 800d928:	0758      	lsls	r0, r3, #29
 800d92a:	d512      	bpl.n	800d952 <__swsetup_r+0x5a>
 800d92c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d92e:	b141      	cbz	r1, 800d942 <__swsetup_r+0x4a>
 800d930:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d934:	4299      	cmp	r1, r3
 800d936:	d002      	beq.n	800d93e <__swsetup_r+0x46>
 800d938:	4628      	mov	r0, r5
 800d93a:	f7fe ff0d 	bl	800c758 <_free_r>
 800d93e:	2300      	movs	r3, #0
 800d940:	6363      	str	r3, [r4, #52]	@ 0x34
 800d942:	89a3      	ldrh	r3, [r4, #12]
 800d944:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d948:	81a3      	strh	r3, [r4, #12]
 800d94a:	2300      	movs	r3, #0
 800d94c:	6063      	str	r3, [r4, #4]
 800d94e:	6923      	ldr	r3, [r4, #16]
 800d950:	6023      	str	r3, [r4, #0]
 800d952:	89a3      	ldrh	r3, [r4, #12]
 800d954:	f043 0308 	orr.w	r3, r3, #8
 800d958:	81a3      	strh	r3, [r4, #12]
 800d95a:	6923      	ldr	r3, [r4, #16]
 800d95c:	b94b      	cbnz	r3, 800d972 <__swsetup_r+0x7a>
 800d95e:	89a3      	ldrh	r3, [r4, #12]
 800d960:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d968:	d003      	beq.n	800d972 <__swsetup_r+0x7a>
 800d96a:	4621      	mov	r1, r4
 800d96c:	4628      	mov	r0, r5
 800d96e:	f000 f883 	bl	800da78 <__smakebuf_r>
 800d972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d976:	f013 0201 	ands.w	r2, r3, #1
 800d97a:	d00a      	beq.n	800d992 <__swsetup_r+0x9a>
 800d97c:	2200      	movs	r2, #0
 800d97e:	60a2      	str	r2, [r4, #8]
 800d980:	6962      	ldr	r2, [r4, #20]
 800d982:	4252      	negs	r2, r2
 800d984:	61a2      	str	r2, [r4, #24]
 800d986:	6922      	ldr	r2, [r4, #16]
 800d988:	b942      	cbnz	r2, 800d99c <__swsetup_r+0xa4>
 800d98a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d98e:	d1c5      	bne.n	800d91c <__swsetup_r+0x24>
 800d990:	bd38      	pop	{r3, r4, r5, pc}
 800d992:	0799      	lsls	r1, r3, #30
 800d994:	bf58      	it	pl
 800d996:	6962      	ldrpl	r2, [r4, #20]
 800d998:	60a2      	str	r2, [r4, #8]
 800d99a:	e7f4      	b.n	800d986 <__swsetup_r+0x8e>
 800d99c:	2000      	movs	r0, #0
 800d99e:	e7f7      	b.n	800d990 <__swsetup_r+0x98>
 800d9a0:	2000001c 	.word	0x2000001c

0800d9a4 <_raise_r>:
 800d9a4:	291f      	cmp	r1, #31
 800d9a6:	b538      	push	{r3, r4, r5, lr}
 800d9a8:	4605      	mov	r5, r0
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	d904      	bls.n	800d9b8 <_raise_r+0x14>
 800d9ae:	2316      	movs	r3, #22
 800d9b0:	6003      	str	r3, [r0, #0]
 800d9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9b6:	bd38      	pop	{r3, r4, r5, pc}
 800d9b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d9ba:	b112      	cbz	r2, 800d9c2 <_raise_r+0x1e>
 800d9bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9c0:	b94b      	cbnz	r3, 800d9d6 <_raise_r+0x32>
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	f000 f830 	bl	800da28 <_getpid_r>
 800d9c8:	4622      	mov	r2, r4
 800d9ca:	4601      	mov	r1, r0
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9d2:	f000 b817 	b.w	800da04 <_kill_r>
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d00a      	beq.n	800d9f0 <_raise_r+0x4c>
 800d9da:	1c59      	adds	r1, r3, #1
 800d9dc:	d103      	bne.n	800d9e6 <_raise_r+0x42>
 800d9de:	2316      	movs	r3, #22
 800d9e0:	6003      	str	r3, [r0, #0]
 800d9e2:	2001      	movs	r0, #1
 800d9e4:	e7e7      	b.n	800d9b6 <_raise_r+0x12>
 800d9e6:	2100      	movs	r1, #0
 800d9e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	4798      	blx	r3
 800d9f0:	2000      	movs	r0, #0
 800d9f2:	e7e0      	b.n	800d9b6 <_raise_r+0x12>

0800d9f4 <raise>:
 800d9f4:	4b02      	ldr	r3, [pc, #8]	@ (800da00 <raise+0xc>)
 800d9f6:	4601      	mov	r1, r0
 800d9f8:	6818      	ldr	r0, [r3, #0]
 800d9fa:	f7ff bfd3 	b.w	800d9a4 <_raise_r>
 800d9fe:	bf00      	nop
 800da00:	2000001c 	.word	0x2000001c

0800da04 <_kill_r>:
 800da04:	b538      	push	{r3, r4, r5, lr}
 800da06:	4d07      	ldr	r5, [pc, #28]	@ (800da24 <_kill_r+0x20>)
 800da08:	2300      	movs	r3, #0
 800da0a:	4604      	mov	r4, r0
 800da0c:	4608      	mov	r0, r1
 800da0e:	4611      	mov	r1, r2
 800da10:	602b      	str	r3, [r5, #0]
 800da12:	f7f4 fbab 	bl	800216c <_kill>
 800da16:	1c43      	adds	r3, r0, #1
 800da18:	d102      	bne.n	800da20 <_kill_r+0x1c>
 800da1a:	682b      	ldr	r3, [r5, #0]
 800da1c:	b103      	cbz	r3, 800da20 <_kill_r+0x1c>
 800da1e:	6023      	str	r3, [r4, #0]
 800da20:	bd38      	pop	{r3, r4, r5, pc}
 800da22:	bf00      	nop
 800da24:	200024f4 	.word	0x200024f4

0800da28 <_getpid_r>:
 800da28:	f7f4 bb98 	b.w	800215c <_getpid>

0800da2c <__swhatbuf_r>:
 800da2c:	b570      	push	{r4, r5, r6, lr}
 800da2e:	460c      	mov	r4, r1
 800da30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da34:	2900      	cmp	r1, #0
 800da36:	b096      	sub	sp, #88	@ 0x58
 800da38:	4615      	mov	r5, r2
 800da3a:	461e      	mov	r6, r3
 800da3c:	da0d      	bge.n	800da5a <__swhatbuf_r+0x2e>
 800da3e:	89a3      	ldrh	r3, [r4, #12]
 800da40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da44:	f04f 0100 	mov.w	r1, #0
 800da48:	bf14      	ite	ne
 800da4a:	2340      	movne	r3, #64	@ 0x40
 800da4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800da50:	2000      	movs	r0, #0
 800da52:	6031      	str	r1, [r6, #0]
 800da54:	602b      	str	r3, [r5, #0]
 800da56:	b016      	add	sp, #88	@ 0x58
 800da58:	bd70      	pop	{r4, r5, r6, pc}
 800da5a:	466a      	mov	r2, sp
 800da5c:	f000 f848 	bl	800daf0 <_fstat_r>
 800da60:	2800      	cmp	r0, #0
 800da62:	dbec      	blt.n	800da3e <__swhatbuf_r+0x12>
 800da64:	9901      	ldr	r1, [sp, #4]
 800da66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da6e:	4259      	negs	r1, r3
 800da70:	4159      	adcs	r1, r3
 800da72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da76:	e7eb      	b.n	800da50 <__swhatbuf_r+0x24>

0800da78 <__smakebuf_r>:
 800da78:	898b      	ldrh	r3, [r1, #12]
 800da7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da7c:	079d      	lsls	r5, r3, #30
 800da7e:	4606      	mov	r6, r0
 800da80:	460c      	mov	r4, r1
 800da82:	d507      	bpl.n	800da94 <__smakebuf_r+0x1c>
 800da84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da88:	6023      	str	r3, [r4, #0]
 800da8a:	6123      	str	r3, [r4, #16]
 800da8c:	2301      	movs	r3, #1
 800da8e:	6163      	str	r3, [r4, #20]
 800da90:	b003      	add	sp, #12
 800da92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da94:	ab01      	add	r3, sp, #4
 800da96:	466a      	mov	r2, sp
 800da98:	f7ff ffc8 	bl	800da2c <__swhatbuf_r>
 800da9c:	9f00      	ldr	r7, [sp, #0]
 800da9e:	4605      	mov	r5, r0
 800daa0:	4639      	mov	r1, r7
 800daa2:	4630      	mov	r0, r6
 800daa4:	f7fe fecc 	bl	800c840 <_malloc_r>
 800daa8:	b948      	cbnz	r0, 800dabe <__smakebuf_r+0x46>
 800daaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daae:	059a      	lsls	r2, r3, #22
 800dab0:	d4ee      	bmi.n	800da90 <__smakebuf_r+0x18>
 800dab2:	f023 0303 	bic.w	r3, r3, #3
 800dab6:	f043 0302 	orr.w	r3, r3, #2
 800daba:	81a3      	strh	r3, [r4, #12]
 800dabc:	e7e2      	b.n	800da84 <__smakebuf_r+0xc>
 800dabe:	89a3      	ldrh	r3, [r4, #12]
 800dac0:	6020      	str	r0, [r4, #0]
 800dac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dac6:	81a3      	strh	r3, [r4, #12]
 800dac8:	9b01      	ldr	r3, [sp, #4]
 800daca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dace:	b15b      	cbz	r3, 800dae8 <__smakebuf_r+0x70>
 800dad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dad4:	4630      	mov	r0, r6
 800dad6:	f000 f81d 	bl	800db14 <_isatty_r>
 800dada:	b128      	cbz	r0, 800dae8 <__smakebuf_r+0x70>
 800dadc:	89a3      	ldrh	r3, [r4, #12]
 800dade:	f023 0303 	bic.w	r3, r3, #3
 800dae2:	f043 0301 	orr.w	r3, r3, #1
 800dae6:	81a3      	strh	r3, [r4, #12]
 800dae8:	89a3      	ldrh	r3, [r4, #12]
 800daea:	431d      	orrs	r5, r3
 800daec:	81a5      	strh	r5, [r4, #12]
 800daee:	e7cf      	b.n	800da90 <__smakebuf_r+0x18>

0800daf0 <_fstat_r>:
 800daf0:	b538      	push	{r3, r4, r5, lr}
 800daf2:	4d07      	ldr	r5, [pc, #28]	@ (800db10 <_fstat_r+0x20>)
 800daf4:	2300      	movs	r3, #0
 800daf6:	4604      	mov	r4, r0
 800daf8:	4608      	mov	r0, r1
 800dafa:	4611      	mov	r1, r2
 800dafc:	602b      	str	r3, [r5, #0]
 800dafe:	f7f4 fb95 	bl	800222c <_fstat>
 800db02:	1c43      	adds	r3, r0, #1
 800db04:	d102      	bne.n	800db0c <_fstat_r+0x1c>
 800db06:	682b      	ldr	r3, [r5, #0]
 800db08:	b103      	cbz	r3, 800db0c <_fstat_r+0x1c>
 800db0a:	6023      	str	r3, [r4, #0]
 800db0c:	bd38      	pop	{r3, r4, r5, pc}
 800db0e:	bf00      	nop
 800db10:	200024f4 	.word	0x200024f4

0800db14 <_isatty_r>:
 800db14:	b538      	push	{r3, r4, r5, lr}
 800db16:	4d06      	ldr	r5, [pc, #24]	@ (800db30 <_isatty_r+0x1c>)
 800db18:	2300      	movs	r3, #0
 800db1a:	4604      	mov	r4, r0
 800db1c:	4608      	mov	r0, r1
 800db1e:	602b      	str	r3, [r5, #0]
 800db20:	f7f4 fb94 	bl	800224c <_isatty>
 800db24:	1c43      	adds	r3, r0, #1
 800db26:	d102      	bne.n	800db2e <_isatty_r+0x1a>
 800db28:	682b      	ldr	r3, [r5, #0]
 800db2a:	b103      	cbz	r3, 800db2e <_isatty_r+0x1a>
 800db2c:	6023      	str	r3, [r4, #0]
 800db2e:	bd38      	pop	{r3, r4, r5, pc}
 800db30:	200024f4 	.word	0x200024f4

0800db34 <_init>:
 800db34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db36:	bf00      	nop
 800db38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db3a:	bc08      	pop	{r3}
 800db3c:	469e      	mov	lr, r3
 800db3e:	4770      	bx	lr

0800db40 <_fini>:
 800db40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db42:	bf00      	nop
 800db44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db46:	bc08      	pop	{r3}
 800db48:	469e      	mov	lr, r3
 800db4a:	4770      	bx	lr
