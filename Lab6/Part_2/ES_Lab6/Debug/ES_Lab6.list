
ES_Lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e30c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800e4a0  0800e4a0  0000f4a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e908  0800e908  000101d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e908  0800e908  0000f908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e910  0800e910  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e910  0800e910  0000f910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e914  0800e914  0000f914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800e918  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002518  200001d8  0800eaf0  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200026f0  0800eaf0  000106f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cef5  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000578c  00000000  00000000  0003d0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028a0  00000000  00000000  00042890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fa9  00000000  00000000  00045130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000756c  00000000  00000000  000470d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002eca9  00000000  00000000  0004e645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011df15  00000000  00000000  0007d2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019b203  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c174  00000000  00000000  0019b248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a73bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e484 	.word	0x0800e484

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800e484 	.word	0x0800e484

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f001 fab9 	bl	8002412 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f854 	bl	8000f4c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ea4:	f000 f8b4 	bl	8001010 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea8:	f000 fb2c 	bl	8001504 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eac:	f000 fb0c 	bl	80014c8 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000eb0:	f000 f954 	bl	800115c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000eb4:	f000 f98a 	bl	80011cc <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000eb8:	f000 f9c6 	bl	8001248 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000ebc:	f000 f9ea 	bl	8001294 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000ec0:	f000 fa74 	bl	80013ac <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000ec4:	f000 faa2 	bl	800140c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ec8:	f000 fad0 	bl	800146c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000ecc:	f000 f8ce 	bl	800106c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000ed0:	f000 fa1e 	bl	8001310 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)sample_buffer, SAMPLE_BUFFER_SIZE);
 8000ed4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ed8:	4912      	ldr	r1, [pc, #72]	@ (8000f24 <main+0x8c>)
 8000eda:	4813      	ldr	r0, [pc, #76]	@ (8000f28 <main+0x90>)
 8000edc:	f001 fe3c 	bl	8002b58 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2); /* This timer starts ADC conversion */
 8000ee0:	4812      	ldr	r0, [pc, #72]	@ (8000f2c <main+0x94>)
 8000ee2:	f005 fc9f 	bl	8006824 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ee6:	f007 f9ef 	bl	80082c8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 8000eea:	4a11      	ldr	r2, [pc, #68]	@ (8000f30 <main+0x98>)
 8000eec:	2100      	movs	r1, #0
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f007 fac6 	bl	8008480 <osSemaphoreNew>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f34 <main+0x9c>)
 8000ef8:	6013      	str	r3, [r2, #0]

  /* creation of myBinarySem02 */
  myBinarySem02Handle = osSemaphoreNew(1, 0, &myBinarySem02_attributes);
 8000efa:	4a0f      	ldr	r2, [pc, #60]	@ (8000f38 <main+0xa0>)
 8000efc:	2100      	movs	r1, #0
 8000efe:	2001      	movs	r0, #1
 8000f00:	f007 fabe 	bl	8008480 <osSemaphoreNew>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a0d      	ldr	r2, [pc, #52]	@ (8000f3c <main+0xa4>)
 8000f08:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f40 <main+0xa8>)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	480d      	ldr	r0, [pc, #52]	@ (8000f44 <main+0xac>)
 8000f10:	f007 fa24 	bl	800835c <osThreadNew>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a0c      	ldr	r2, [pc, #48]	@ (8000f48 <main+0xb0>)
 8000f18:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f1a:	f007 f9f9 	bl	8008310 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f1e:	bf00      	nop
 8000f20:	e7fd      	b.n	8000f1e <main+0x86>
 8000f22:	bf00      	nop
 8000f24:	20000a20 	.word	0x20000a20
 8000f28:	200001f4 	.word	0x200001f4
 8000f2c:	200003d4 	.word	0x200003d4
 8000f30:	0800e52c 	.word	0x0800e52c
 8000f34:	20000a18 	.word	0x20000a18
 8000f38:	0800e53c 	.word	0x0800e53c
 8000f3c:	20000a1c 	.word	0x20000a1c
 8000f40:	0800e508 	.word	0x0800e508
 8000f44:	0800180d 	.word	0x0800180d
 8000f48:	20000a14 	.word	0x20000a14

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b096      	sub	sp, #88	@ 0x58
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	2244      	movs	r2, #68	@ 0x44
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f00b f9ca 	bl	800c2f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	463b      	mov	r3, r7
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f6e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f72:	f003 ff3d 	bl	8004df0 <HAL_PWREx_ControlVoltageScaling>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f7c:	f000 fca8 	bl	80018d0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f80:	f003 ff18 	bl	8004db4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f84:	4b21      	ldr	r3, [pc, #132]	@ (800100c <SystemClock_Config+0xc0>)
 8000f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f8a:	4a20      	ldr	r2, [pc, #128]	@ (800100c <SystemClock_Config+0xc0>)
 8000f8c:	f023 0318 	bic.w	r3, r3, #24
 8000f90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f94:	2314      	movs	r3, #20
 8000f96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fa4:	2360      	movs	r3, #96	@ 0x60
 8000fa6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fac:	2301      	movs	r3, #1
 8000fae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000fb4:	2328      	movs	r3, #40	@ 0x28
 8000fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f004 f833 	bl	8005034 <HAL_RCC_OscConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000fd4:	f000 fc7c 	bl	80018d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd8:	230f      	movs	r3, #15
 8000fda:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	2104      	movs	r1, #4
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f004 fbfb 	bl	80057ec <HAL_RCC_ClockConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ffc:	f000 fc68 	bl	80018d0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001000:	f005 f934 	bl	800626c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001004:	bf00      	nop
 8001006:	3758      	adds	r7, #88	@ 0x58
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000

08001010 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b0a2      	sub	sp, #136	@ 0x88
 8001014:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2288      	movs	r2, #136	@ 0x88
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f00b f969 	bl	800c2f4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001022:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001026:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001028:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800102c:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800102e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001032:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001034:	2301      	movs	r3, #1
 8001036:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001038:	2301      	movs	r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800103c:	2318      	movs	r3, #24
 800103e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001040:	2307      	movs	r3, #7
 8001042:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001044:	2302      	movs	r3, #2
 8001046:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800104c:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8001050:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001052:	463b      	mov	r3, r7
 8001054:	4618      	mov	r0, r3
 8001056:	f004 fe1f 	bl	8005c98 <HAL_RCCEx_PeriphCLKConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001060:	f000 fc36 	bl	80018d0 <Error_Handler>
  }
}
 8001064:	bf00      	nop
 8001066:	3788      	adds	r7, #136	@ 0x88
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	@ 0x28
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800108e:	4b30      	ldr	r3, [pc, #192]	@ (8001150 <MX_ADC1_Init+0xe4>)
 8001090:	4a30      	ldr	r2, [pc, #192]	@ (8001154 <MX_ADC1_Init+0xe8>)
 8001092:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001094:	4b2e      	ldr	r3, [pc, #184]	@ (8001150 <MX_ADC1_Init+0xe4>)
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109a:	4b2d      	ldr	r3, [pc, #180]	@ (8001150 <MX_ADC1_Init+0xe4>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001150 <MX_ADC1_Init+0xe4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001150 <MX_ADC1_Init+0xe4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ac:	4b28      	ldr	r3, [pc, #160]	@ (8001150 <MX_ADC1_Init+0xe4>)
 80010ae:	2204      	movs	r2, #4
 80010b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010b2:	4b27      	ldr	r3, [pc, #156]	@ (8001150 <MX_ADC1_Init+0xe4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010b8:	4b25      	ldr	r3, [pc, #148]	@ (8001150 <MX_ADC1_Init+0xe4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010be:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <MX_ADC1_Init+0xe4>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c4:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <MX_ADC1_Init+0xe4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80010cc:	4b20      	ldr	r3, [pc, #128]	@ (8001150 <MX_ADC1_Init+0xe4>)
 80010ce:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 80010d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <MX_ADC1_Init+0xe4>)
 80010d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <MX_ADC1_Init+0xe4>)
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <MX_ADC1_Init+0xe4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010ea:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <MX_ADC1_Init+0xe4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f2:	4817      	ldr	r0, [pc, #92]	@ (8001150 <MX_ADC1_Init+0xe4>)
 80010f4:	f001 fbe0 	bl	80028b8 <HAL_ADC_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80010fe:	f000 fbe7 	bl	80018d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	4810      	ldr	r0, [pc, #64]	@ (8001150 <MX_ADC1_Init+0xe4>)
 800110e:	f002 fd71 	bl	8003bf4 <HAL_ADCEx_MultiModeConfigChannel>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001118:	f000 fbda 	bl	80018d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800111c:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <MX_ADC1_Init+0xec>)
 800111e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001120:	2306      	movs	r3, #6
 8001122:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001124:	2307      	movs	r3, #7
 8001126:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001128:	237f      	movs	r3, #127	@ 0x7f
 800112a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800112c:	2304      	movs	r3, #4
 800112e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	@ (8001150 <MX_ADC1_Init+0xe4>)
 800113a:	f001 fff7 	bl	800312c <HAL_ADC_ConfigChannel>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001144:	f000 fbc4 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	@ 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200001f4 	.word	0x200001f4
 8001154:	50040000 	.word	0x50040000
 8001158:	c7520000 	.word	0xc7520000

0800115c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <MX_DFSDM1_Init+0x68>)
 8001162:	4a19      	ldr	r2, [pc, #100]	@ (80011c8 <MX_DFSDM1_Init+0x6c>)
 8001164:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001166:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <MX_DFSDM1_Init+0x68>)
 8001168:	2201      	movs	r2, #1
 800116a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800116c:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <MX_DFSDM1_Init+0x68>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_DFSDM1_Init+0x68>)
 8001174:	2202      	movs	r2, #2
 8001176:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_DFSDM1_Init+0x68>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_DFSDM1_Init+0x68>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_DFSDM1_Init+0x68>)
 8001186:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800118a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800118c:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <MX_DFSDM1_Init+0x68>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001192:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <MX_DFSDM1_Init+0x68>)
 8001194:	2204      	movs	r2, #4
 8001196:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <MX_DFSDM1_Init+0x68>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <MX_DFSDM1_Init+0x68>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80011a4:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <MX_DFSDM1_Init+0x68>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_DFSDM1_Init+0x68>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <MX_DFSDM1_Init+0x68>)
 80011b2:	f002 feb1 	bl	8003f18 <HAL_DFSDM_ChannelInit>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80011bc:	f000 fb88 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200002a0 	.word	0x200002a0
 80011c8:	40016020 	.word	0x40016020

080011cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001240 <MX_I2C2_Init+0x74>)
 80011d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001244 <MX_I2C2_Init+0x78>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <MX_I2C2_Init+0x74>)
 80011d8:	f640 6214 	movw	r2, #3604	@ 0xe14
 80011dc:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011de:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <MX_I2C2_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e4:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <MX_I2C2_Init+0x74>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <MX_I2C2_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011f0:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <MX_I2C2_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f6:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <MX_I2C2_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fc:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <MX_I2C2_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001202:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <MX_I2C2_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001208:	480d      	ldr	r0, [pc, #52]	@ (8001240 <MX_I2C2_Init+0x74>)
 800120a:	f003 fb6e 	bl	80048ea <HAL_I2C_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001214:	f000 fb5c 	bl	80018d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001218:	2100      	movs	r1, #0
 800121a:	4809      	ldr	r0, [pc, #36]	@ (8001240 <MX_I2C2_Init+0x74>)
 800121c:	f003 fc00 	bl	8004a20 <HAL_I2CEx_ConfigAnalogFilter>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001226:	f000 fb53 	bl	80018d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800122a:	2100      	movs	r1, #0
 800122c:	4804      	ldr	r0, [pc, #16]	@ (8001240 <MX_I2C2_Init+0x74>)
 800122e:	f003 fc42 	bl	8004ab6 <HAL_I2CEx_ConfigDigitalFilter>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001238:	f000 fb4a 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200002d8 	.word	0x200002d8
 8001244:	40005800 	.word	0x40005800

08001248 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800124c:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <MX_QUADSPI_Init+0x44>)
 800124e:	4a10      	ldr	r2, [pc, #64]	@ (8001290 <MX_QUADSPI_Init+0x48>)
 8001250:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <MX_QUADSPI_Init+0x44>)
 8001254:	2202      	movs	r2, #2
 8001256:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <MX_QUADSPI_Init+0x44>)
 800125a:	2204      	movs	r2, #4
 800125c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <MX_QUADSPI_Init+0x44>)
 8001260:	2210      	movs	r2, #16
 8001262:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_QUADSPI_Init+0x44>)
 8001266:	2217      	movs	r2, #23
 8001268:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <MX_QUADSPI_Init+0x44>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_QUADSPI_Init+0x44>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_QUADSPI_Init+0x44>)
 8001278:	f003 fe20 	bl	8004ebc <HAL_QSPI_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001282:	f000 fb25 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2000032c 	.word	0x2000032c
 8001290:	a0001000 	.word	0xa0001000

08001294 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001298:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <MX_SPI3_Init+0x74>)
 800129a:	4a1c      	ldr	r2, [pc, #112]	@ (800130c <MX_SPI3_Init+0x78>)
 800129c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800129e:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <MX_SPI3_Init+0x74>)
 80012a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012a6:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <MX_SPI3_Init+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80012ac:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <MX_SPI3_Init+0x74>)
 80012ae:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80012b2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <MX_SPI3_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ba:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <MX_SPI3_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012c0:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <MX_SPI3_Init+0x74>)
 80012c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012c6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <MX_SPI3_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <MX_SPI3_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <MX_SPI3_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012da:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <MX_SPI3_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80012e0:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <MX_SPI3_Init+0x74>)
 80012e2:	2207      	movs	r2, #7
 80012e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <MX_SPI3_Init+0x74>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <MX_SPI3_Init+0x74>)
 80012ee:	2208      	movs	r2, #8
 80012f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	@ (8001308 <MX_SPI3_Init+0x74>)
 80012f4:	f005 f99c 	bl	8006630 <HAL_SPI_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012fe:	f000 fae7 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000370 	.word	0x20000370
 800130c:	40003c00 	.word	0x40003c00

08001310 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800132e:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <MX_TIM2_Init+0x98>)
 8001330:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001334:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001336:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <MX_TIM2_Init+0x98>)
 8001338:	224f      	movs	r2, #79	@ 0x4f
 800133a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133c:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <MX_TIM2_Init+0x98>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001342:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <MX_TIM2_Init+0x98>)
 8001344:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001348:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134a:	4b17      	ldr	r3, [pc, #92]	@ (80013a8 <MX_TIM2_Init+0x98>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001350:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <MX_TIM2_Init+0x98>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001356:	4814      	ldr	r0, [pc, #80]	@ (80013a8 <MX_TIM2_Init+0x98>)
 8001358:	f005 fa0d 	bl	8006776 <HAL_TIM_Base_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001362:	f000 fab5 	bl	80018d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001366:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800136a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	4619      	mov	r1, r3
 8001372:	480d      	ldr	r0, [pc, #52]	@ (80013a8 <MX_TIM2_Init+0x98>)
 8001374:	f005 fc35 	bl	8006be2 <HAL_TIM_ConfigClockSource>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800137e:	f000 faa7 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001382:	2320      	movs	r3, #32
 8001384:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <MX_TIM2_Init+0x98>)
 8001390:	f005 fe58 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800139a:	f000 fa99 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	3720      	adds	r7, #32
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200003d4 	.word	0x200003d4

080013ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013b0:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <MX_USART1_UART_Init+0x58>)
 80013b2:	4a15      	ldr	r2, [pc, #84]	@ (8001408 <MX_USART1_UART_Init+0x5c>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013b6:	4b13      	ldr	r3, [pc, #76]	@ (8001404 <MX_USART1_UART_Init+0x58>)
 80013b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <MX_USART1_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <MX_USART1_UART_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <MX_USART1_UART_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <MX_USART1_UART_Init+0x58>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <MX_USART1_UART_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <MX_USART1_UART_Init+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <MX_USART1_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <MX_USART1_UART_Init+0x58>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	@ (8001404 <MX_USART1_UART_Init+0x58>)
 80013f0:	f005 fece 	bl	8007190 <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013fa:	f000 fa69 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000420 	.word	0x20000420
 8001408:	40013800 	.word	0x40013800

0800140c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <MX_USART3_UART_Init+0x58>)
 8001412:	4a15      	ldr	r2, [pc, #84]	@ (8001468 <MX_USART3_UART_Init+0x5c>)
 8001414:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001416:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <MX_USART3_UART_Init+0x58>)
 8001418:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800141c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_USART3_UART_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_USART3_UART_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_USART3_UART_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_USART3_UART_Init+0x58>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <MX_USART3_UART_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_USART3_UART_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <MX_USART3_UART_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_USART3_UART_Init+0x58>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_USART3_UART_Init+0x58>)
 8001450:	f005 fe9e 	bl	8007190 <HAL_UART_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800145a:	f000 fa39 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200004a8 	.word	0x200004a8
 8001468:	40004800 	.word	0x40004800

0800146c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001470:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001472:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001476:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800147a:	2206      	movs	r2, #6
 800147c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001480:	2202      	movs	r2, #2
 8001482:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001486:	2202      	movs	r2, #2
 8001488:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001492:	2200      	movs	r2, #0
 8001494:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014b0:	f003 fb4d 	bl	8004b4e <HAL_PCD_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80014ba:	f000 fa09 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000530 	.word	0x20000530

080014c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <MX_DMA_Init+0x38>)
 80014d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001500 <MX_DMA_Init+0x38>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <MX_DMA_Init+0x38>)
 80014dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2105      	movs	r1, #5
 80014ea:	200b      	movs	r0, #11
 80014ec:	f002 fcea 	bl	8003ec4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014f0:	200b      	movs	r0, #11
 80014f2:	f002 fd03 	bl	8003efc <HAL_NVIC_EnableIRQ>

}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	@ 0x30
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800151a:	4bb7      	ldr	r3, [pc, #732]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	4ab6      	ldr	r2, [pc, #728]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001526:	4bb4      	ldr	r3, [pc, #720]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	4bb1      	ldr	r3, [pc, #708]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4ab0      	ldr	r2, [pc, #704]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153e:	4bae      	ldr	r3, [pc, #696]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154a:	4bab      	ldr	r3, [pc, #684]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	4aaa      	ldr	r2, [pc, #680]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 8001550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001556:	4ba8      	ldr	r3, [pc, #672]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4ba5      	ldr	r3, [pc, #660]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	4aa4      	ldr	r2, [pc, #656]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156e:	4ba2      	ldr	r3, [pc, #648]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	4b9f      	ldr	r3, [pc, #636]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	4a9e      	ldr	r2, [pc, #632]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001586:	4b9c      	ldr	r3, [pc, #624]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001592:	4b99      	ldr	r3, [pc, #612]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001596:	4a98      	ldr	r2, [pc, #608]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 8001598:	f043 0308 	orr.w	r3, r3, #8
 800159c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159e:	4b96      	ldr	r3, [pc, #600]	@ (80017f8 <MX_GPIO_Init+0x2f4>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80015b0:	4892      	ldr	r0, [pc, #584]	@ (80017fc <MX_GPIO_Init+0x2f8>)
 80015b2:	f003 f95f 	bl	8004874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f248 1104 	movw	r1, #33028	@ 0x8104
 80015bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c0:	f003 f958 	bl	8004874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80015c4:	2200      	movs	r2, #0
 80015c6:	f24f 0114 	movw	r1, #61460	@ 0xf014
 80015ca:	488d      	ldr	r0, [pc, #564]	@ (8001800 <MX_GPIO_Init+0x2fc>)
 80015cc:	f003 f952 	bl	8004874 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	f241 0181 	movw	r1, #4225	@ 0x1081
 80015d6:	488b      	ldr	r0, [pc, #556]	@ (8001804 <MX_GPIO_Init+0x300>)
 80015d8:	f003 f94c 	bl	8004874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015e2:	4888      	ldr	r0, [pc, #544]	@ (8001804 <MX_GPIO_Init+0x300>)
 80015e4:	f003 f946 	bl	8004874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80015ee:	4886      	ldr	r0, [pc, #536]	@ (8001808 <MX_GPIO_Init+0x304>)
 80015f0:	f003 f940 	bl	8004874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015f4:	2201      	movs	r2, #1
 80015f6:	2120      	movs	r1, #32
 80015f8:	4881      	ldr	r0, [pc, #516]	@ (8001800 <MX_GPIO_Init+0x2fc>)
 80015fa:	f003 f93b 	bl	8004874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	2101      	movs	r1, #1
 8001602:	487e      	ldr	r0, [pc, #504]	@ (80017fc <MX_GPIO_Init+0x2f8>)
 8001604:	f003 f936 	bl	8004874 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001608:	f240 1315 	movw	r3, #277	@ 0x115
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4619      	mov	r1, r3
 8001620:	4876      	ldr	r0, [pc, #472]	@ (80017fc <MX_GPIO_Init+0x2f8>)
 8001622:	f002 ff7d 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001626:	236a      	movs	r3, #106	@ 0x6a
 8001628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800162a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800162e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	4619      	mov	r1, r3
 800163a:	4870      	ldr	r0, [pc, #448]	@ (80017fc <MX_GPIO_Init+0x2f8>)
 800163c:	f002 ff70 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001640:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001646:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800164a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4619      	mov	r1, r3
 8001656:	486c      	ldr	r0, [pc, #432]	@ (8001808 <MX_GPIO_Init+0x304>)
 8001658:	f002 ff62 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800165c:	2303      	movs	r3, #3
 800165e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800166c:	2308      	movs	r3, #8
 800166e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	4619      	mov	r1, r3
 8001676:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800167a:	f002 ff51 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800167e:	f248 1304 	movw	r3, #33028	@ 0x8104
 8001682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4619      	mov	r1, r3
 8001696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800169a:	f002 ff41 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800169e:	23e0      	movs	r3, #224	@ 0xe0
 80016a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ae:	2305      	movs	r3, #5
 80016b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016bc:	f002 ff30 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80016c0:	2301      	movs	r3, #1
 80016c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	484a      	ldr	r0, [pc, #296]	@ (8001800 <MX_GPIO_Init+0x2fc>)
 80016d6:	f002 ff23 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80016da:	f24f 0334 	movw	r3, #61492	@ 0xf034
 80016de:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	4619      	mov	r1, r3
 80016f2:	4843      	ldr	r0, [pc, #268]	@ (8001800 <MX_GPIO_Init+0x2fc>)
 80016f4:	f002 ff14 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80016f8:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 80016fc:	61fb      	str	r3, [r7, #28]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	483d      	ldr	r0, [pc, #244]	@ (8001804 <MX_GPIO_Init+0x300>)
 8001710:	f002 ff06 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001714:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001726:	f107 031c 	add.w	r3, r7, #28
 800172a:	4619      	mov	r1, r3
 800172c:	4835      	ldr	r0, [pc, #212]	@ (8001804 <MX_GPIO_Init+0x300>)
 800172e:	f002 fef7 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001732:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	482f      	ldr	r0, [pc, #188]	@ (8001808 <MX_GPIO_Init+0x304>)
 800174c:	f002 fee8 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001750:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001756:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800175a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	4619      	mov	r1, r3
 8001766:	4828      	ldr	r0, [pc, #160]	@ (8001808 <MX_GPIO_Init+0x304>)
 8001768:	f002 feda 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800176c:	2302      	movs	r3, #2
 800176e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800177c:	2305      	movs	r3, #5
 800177e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	4619      	mov	r1, r3
 8001786:	481f      	ldr	r0, [pc, #124]	@ (8001804 <MX_GPIO_Init+0x300>)
 8001788:	f002 feca 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800178c:	2378      	movs	r3, #120	@ 0x78
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800179c:	2307      	movs	r3, #7
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	4619      	mov	r1, r3
 80017a6:	4817      	ldr	r0, [pc, #92]	@ (8001804 <MX_GPIO_Init+0x300>)
 80017a8:	f002 feba 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80017ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b2:	2312      	movs	r3, #18
 80017b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017be:	2304      	movs	r3, #4
 80017c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	4619      	mov	r1, r3
 80017c8:	480d      	ldr	r0, [pc, #52]	@ (8001800 <MX_GPIO_Init+0x2fc>)
 80017ca:	f002 fea9 	bl	8004520 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2105      	movs	r1, #5
 80017d2:	2017      	movs	r0, #23
 80017d4:	f002 fb76 	bl	8003ec4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017d8:	2017      	movs	r0, #23
 80017da:	f002 fb8f 	bl	8003efc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2105      	movs	r1, #5
 80017e2:	2028      	movs	r0, #40	@ 0x28
 80017e4:	f002 fb6e 	bl	8003ec4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017e8:	2028      	movs	r0, #40	@ 0x28
 80017ea:	f002 fb87 	bl	8003efc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ee:	bf00      	nop
 80017f0:	3730      	adds	r7, #48	@ 0x30
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000
 80017fc:	48001000 	.word	0x48001000
 8001800:	48000400 	.word	0x48000400
 8001804:	48000c00 	.word	0x48000c00
 8001808:	48000800 	.word	0x48000800

0800180c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 8001814:	4b1e      	ldr	r3, [pc, #120]	@ (8001890 <StartDefaultTask+0x84>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	4618      	mov	r0, r3
 800181e:	f006 feb9 	bl	8008594 <osSemaphoreAcquire>
	 /* Temperature Sensor ADC-value, Reference Voltage ADC-value (if use) */
	 //UART_Printf("Reference: Adc.Raw[0] = %u\r\n", Adc.Raw[0]);
	 UART_Printf("top half:\r\n");
 8001822:	481c      	ldr	r0, [pc, #112]	@ (8001894 <StartDefaultTask+0x88>)
 8001824:	f000 fd9c 	bl	8002360 <UART_Printf>
	 for(int i = 0; i < SAMPLE_BUFFER_SIZE / 2; i++)
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	e00a      	b.n	8001844 <StartDefaultTask+0x38>
	 {
		 UART_Printf("%u,", sample_buffer[i]);
 800182e:	4a1a      	ldr	r2, [pc, #104]	@ (8001898 <StartDefaultTask+0x8c>)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001836:	4619      	mov	r1, r3
 8001838:	4818      	ldr	r0, [pc, #96]	@ (800189c <StartDefaultTask+0x90>)
 800183a:	f000 fd91 	bl	8002360 <UART_Printf>
	 for(int i = 0; i < SAMPLE_BUFFER_SIZE / 2; i++)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3301      	adds	r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b7f      	cmp	r3, #127	@ 0x7f
 8001848:	ddf1      	ble.n	800182e <StartDefaultTask+0x22>
	 }
	 UART_Printf("\r\n");
 800184a:	4815      	ldr	r0, [pc, #84]	@ (80018a0 <StartDefaultTask+0x94>)
 800184c:	f000 fd88 	bl	8002360 <UART_Printf>
	 osSemaphoreAcquire(myBinarySem02Handle, osWaitForever);
 8001850:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <StartDefaultTask+0x98>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	4618      	mov	r0, r3
 800185a:	f006 fe9b 	bl	8008594 <osSemaphoreAcquire>
	 UART_Printf("bottom half:\r\n");
 800185e:	4812      	ldr	r0, [pc, #72]	@ (80018a8 <StartDefaultTask+0x9c>)
 8001860:	f000 fd7e 	bl	8002360 <UART_Printf>
	 for(int i = SAMPLE_BUFFER_SIZE / 2; i < SAMPLE_BUFFER_SIZE; i++)
 8001864:	2380      	movs	r3, #128	@ 0x80
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	e00a      	b.n	8001880 <StartDefaultTask+0x74>
	 {
		 UART_Printf("%u,", sample_buffer[i]);
 800186a:	4a0b      	ldr	r2, [pc, #44]	@ (8001898 <StartDefaultTask+0x8c>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001872:	4619      	mov	r1, r3
 8001874:	4809      	ldr	r0, [pc, #36]	@ (800189c <StartDefaultTask+0x90>)
 8001876:	f000 fd73 	bl	8002360 <UART_Printf>
	 for(int i = SAMPLE_BUFFER_SIZE / 2; i < SAMPLE_BUFFER_SIZE; i++)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3301      	adds	r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2bff      	cmp	r3, #255	@ 0xff
 8001884:	ddf1      	ble.n	800186a <StartDefaultTask+0x5e>
	 }
	 UART_Printf("\r\n");
 8001886:	4806      	ldr	r0, [pc, #24]	@ (80018a0 <StartDefaultTask+0x94>)
 8001888:	f000 fd6a 	bl	8002360 <UART_Printf>
	 osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 800188c:	e7c2      	b.n	8001814 <StartDefaultTask+0x8>
 800188e:	bf00      	nop
 8001890:	20000a18 	.word	0x20000a18
 8001894:	0800e4cc 	.word	0x0800e4cc
 8001898:	20000a20 	.word	0x20000a20
 800189c:	0800e4d8 	.word	0x0800e4d8
 80018a0:	0800e4dc 	.word	0x0800e4dc
 80018a4:	20000a1c 	.word	0x20000a1c
 80018a8:	0800e4e0 	.word	0x0800e4e0

080018ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d101      	bne.n	80018c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018be:	f000 fdc1 	bl	8002444 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40012c00 	.word	0x40012c00

080018d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d4:	b672      	cpsid	i
}
 80018d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <Error_Handler+0x8>

080018dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <HAL_MspInit+0x4c>)
 80018e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e6:	4a10      	ldr	r2, [pc, #64]	@ (8001928 <HAL_MspInit+0x4c>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <HAL_MspInit+0x4c>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_MspInit+0x4c>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <HAL_MspInit+0x4c>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001904:	6593      	str	r3, [r2, #88]	@ 0x58
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <HAL_MspInit+0x4c>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	210f      	movs	r1, #15
 8001916:	f06f 0001 	mvn.w	r0, #1
 800191a:	f002 fad3 	bl	8003ec4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08c      	sub	sp, #48	@ 0x30
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a47      	ldr	r2, [pc, #284]	@ (8001a68 <HAL_ADC_MspInit+0x13c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	f040 8088 	bne.w	8001a60 <HAL_ADC_MspInit+0x134>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001950:	4b46      	ldr	r3, [pc, #280]	@ (8001a6c <HAL_ADC_MspInit+0x140>)
 8001952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001954:	4a45      	ldr	r2, [pc, #276]	@ (8001a6c <HAL_ADC_MspInit+0x140>)
 8001956:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800195a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800195c:	4b43      	ldr	r3, [pc, #268]	@ (8001a6c <HAL_ADC_MspInit+0x140>)
 800195e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001960:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001968:	4b40      	ldr	r3, [pc, #256]	@ (8001a6c <HAL_ADC_MspInit+0x140>)
 800196a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196c:	4a3f      	ldr	r2, [pc, #252]	@ (8001a6c <HAL_ADC_MspInit+0x140>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001974:	4b3d      	ldr	r3, [pc, #244]	@ (8001a6c <HAL_ADC_MspInit+0x140>)
 8001976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001980:	4b3a      	ldr	r3, [pc, #232]	@ (8001a6c <HAL_ADC_MspInit+0x140>)
 8001982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001984:	4a39      	ldr	r2, [pc, #228]	@ (8001a6c <HAL_ADC_MspInit+0x140>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800198c:	4b37      	ldr	r3, [pc, #220]	@ (8001a6c <HAL_ADC_MspInit+0x140>)
 800198e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001998:	4b34      	ldr	r3, [pc, #208]	@ (8001a6c <HAL_ADC_MspInit+0x140>)
 800199a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199c:	4a33      	ldr	r2, [pc, #204]	@ (8001a6c <HAL_ADC_MspInit+0x140>)
 800199e:	f043 0302 	orr.w	r3, r3, #2
 80019a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a4:	4b31      	ldr	r3, [pc, #196]	@ (8001a6c <HAL_ADC_MspInit+0x140>)
 80019a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80019b0:	233f      	movs	r3, #63	@ 0x3f
 80019b2:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019b4:	230b      	movs	r3, #11
 80019b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	4619      	mov	r1, r3
 80019c2:	482b      	ldr	r0, [pc, #172]	@ (8001a70 <HAL_ADC_MspInit+0x144>)
 80019c4:	f002 fdac 	bl	8004520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 80019c8:	2310      	movs	r3, #16
 80019ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019cc:	230b      	movs	r3, #11
 80019ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4619      	mov	r1, r3
 80019da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019de:	f002 fd9f 	bl	8004520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019e6:	230b      	movs	r3, #11
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	481f      	ldr	r0, [pc, #124]	@ (8001a74 <HAL_ADC_MspInit+0x148>)
 80019f6:	f002 fd93 	bl	8004520 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80019fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <HAL_ADC_MspInit+0x14c>)
 80019fc:	4a1f      	ldr	r2, [pc, #124]	@ (8001a7c <HAL_ADC_MspInit+0x150>)
 80019fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	@ (8001a78 <HAL_ADC_MspInit+0x14c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <HAL_ADC_MspInit+0x14c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <HAL_ADC_MspInit+0x14c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a12:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <HAL_ADC_MspInit+0x14c>)
 8001a14:	2280      	movs	r2, #128	@ 0x80
 8001a16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a18:	4b17      	ldr	r3, [pc, #92]	@ (8001a78 <HAL_ADC_MspInit+0x14c>)
 8001a1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a20:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <HAL_ADC_MspInit+0x14c>)
 8001a22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a26:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a28:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <HAL_ADC_MspInit+0x14c>)
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a2e:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_ADC_MspInit+0x14c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a34:	4810      	ldr	r0, [pc, #64]	@ (8001a78 <HAL_ADC_MspInit+0x14c>)
 8001a36:	f002 fb7b 	bl	8004130 <HAL_DMA_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_ADC_MspInit+0x118>
    {
      Error_Handler();
 8001a40:	f7ff ff46 	bl	80018d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a0c      	ldr	r2, [pc, #48]	@ (8001a78 <HAL_ADC_MspInit+0x14c>)
 8001a48:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a78 <HAL_ADC_MspInit+0x14c>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2105      	movs	r1, #5
 8001a54:	2012      	movs	r0, #18
 8001a56:	f002 fa35 	bl	8003ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a5a:	2012      	movs	r0, #18
 8001a5c:	f002 fa4e 	bl	8003efc <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a60:	bf00      	nop
 8001a62:	3730      	adds	r7, #48	@ 0x30
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	50040000 	.word	0x50040000
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	48000800 	.word	0x48000800
 8001a74:	48000400 	.word	0x48000400
 8001a78:	20000258 	.word	0x20000258
 8001a7c:	40020008 	.word	0x40020008

08001a80 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b0ac      	sub	sp, #176	@ 0xb0
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2288      	movs	r2, #136	@ 0x88
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f00a fc27 	bl	800c2f4 <memset>
  if(DFSDM1_Init == 0)
 8001aa6:	4b25      	ldr	r3, [pc, #148]	@ (8001b3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d142      	bne.n	8001b34 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001aae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ab2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f004 f8ea 	bl	8005c98 <HAL_RCCEx_PeriphCLKConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001aca:	f7ff ff01 	bl	80018d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001ace:	4b1c      	ldr	r3, [pc, #112]	@ (8001b40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ad4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ad8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ada:	4b19      	ldr	r3, [pc, #100]	@ (8001b40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ade:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ae6:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aea:	4a15      	ldr	r2, [pc, #84]	@ (8001b40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001aec:	f043 0310 	orr.w	r3, r3, #16
 8001af0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af2:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001afe:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001b02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b18:	2306      	movs	r3, #6
 8001b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b1e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b22:	4619      	mov	r1, r3
 8001b24:	4807      	ldr	r0, [pc, #28]	@ (8001b44 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001b26:	f002 fcfb 	bl	8004520 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001b2a:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4a02      	ldr	r2, [pc, #8]	@ (8001b3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b32:	6013      	str	r3, [r2, #0]
  }

}
 8001b34:	bf00      	nop
 8001b36:	37b0      	adds	r7, #176	@ 0xb0
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000c20 	.word	0x20000c20
 8001b40:	40021000 	.word	0x40021000
 8001b44:	48001000 	.word	0x48001000

08001b48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b0ac      	sub	sp, #176	@ 0xb0
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2288      	movs	r2, #136	@ 0x88
 8001b66:	2100      	movs	r1, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f00a fbc3 	bl	800c2f4 <memset>
  if(hi2c->Instance==I2C2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a21      	ldr	r2, [pc, #132]	@ (8001bf8 <HAL_I2C_MspInit+0xb0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d13b      	bne.n	8001bf0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b78:	2380      	movs	r3, #128	@ 0x80
 8001b7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4618      	mov	r0, r3
 8001b86:	f004 f887 	bl	8005c98 <HAL_RCCEx_PeriphCLKConfig>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b90:	f7ff fe9e 	bl	80018d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b94:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b98:	4a18      	ldr	r2, [pc, #96]	@ (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001b9a:	f043 0302 	orr.w	r3, r3, #2
 8001b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba0:	4b16      	ldr	r3, [pc, #88]	@ (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001bac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001bb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb4:	2312      	movs	r3, #18
 8001bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480b      	ldr	r0, [pc, #44]	@ (8001c00 <HAL_I2C_MspInit+0xb8>)
 8001bd4:	f002 fca4 	bl	8004520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bdc:	4a07      	ldr	r2, [pc, #28]	@ (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001bde:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001bf0:	bf00      	nop
 8001bf2:	37b0      	adds	r7, #176	@ 0xb0
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40005800 	.word	0x40005800
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	48000400 	.word	0x48000400

08001c04 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	@ 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a17      	ldr	r2, [pc, #92]	@ (8001c80 <HAL_QSPI_MspInit+0x7c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d128      	bne.n	8001c78 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001c26:	4b17      	ldr	r3, [pc, #92]	@ (8001c84 <HAL_QSPI_MspInit+0x80>)
 8001c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c2a:	4a16      	ldr	r2, [pc, #88]	@ (8001c84 <HAL_QSPI_MspInit+0x80>)
 8001c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c30:	6513      	str	r3, [r2, #80]	@ 0x50
 8001c32:	4b14      	ldr	r3, [pc, #80]	@ (8001c84 <HAL_QSPI_MspInit+0x80>)
 8001c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c3e:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <HAL_QSPI_MspInit+0x80>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c42:	4a10      	ldr	r2, [pc, #64]	@ (8001c84 <HAL_QSPI_MspInit+0x80>)
 8001c44:	f043 0310 	orr.w	r3, r3, #16
 8001c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <HAL_QSPI_MspInit+0x80>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001c56:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001c5a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c68:	230a      	movs	r3, #10
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4619      	mov	r1, r3
 8001c72:	4805      	ldr	r0, [pc, #20]	@ (8001c88 <HAL_QSPI_MspInit+0x84>)
 8001c74:	f002 fc54 	bl	8004520 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001c78:	bf00      	nop
 8001c7a:	3728      	adds	r7, #40	@ 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	a0001000 	.word	0xa0001000
 8001c84:	40021000 	.word	0x40021000
 8001c88:	48001000 	.word	0x48001000

08001c8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	@ 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a17      	ldr	r2, [pc, #92]	@ (8001d08 <HAL_SPI_MspInit+0x7c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d128      	bne.n	8001d00 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cae:	4b17      	ldr	r3, [pc, #92]	@ (8001d0c <HAL_SPI_MspInit+0x80>)
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb2:	4a16      	ldr	r2, [pc, #88]	@ (8001d0c <HAL_SPI_MspInit+0x80>)
 8001cb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cba:	4b14      	ldr	r3, [pc, #80]	@ (8001d0c <HAL_SPI_MspInit+0x80>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc6:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <HAL_SPI_MspInit+0x80>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cca:	4a10      	ldr	r2, [pc, #64]	@ (8001d0c <HAL_SPI_MspInit+0x80>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <HAL_SPI_MspInit+0x80>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001cde:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cf0:	2306      	movs	r3, #6
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <HAL_SPI_MspInit+0x84>)
 8001cfc:	f002 fc10 	bl	8004520 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001d00:	bf00      	nop
 8001d02:	3728      	adds	r7, #40	@ 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40003c00 	.word	0x40003c00
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	48000800 	.word	0x48000800

08001d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	@ 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d34:	d128      	bne.n	8001d88 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d36:	4b16      	ldr	r3, [pc, #88]	@ (8001d90 <HAL_TIM_Base_MspInit+0x7c>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3a:	4a15      	ldr	r2, [pc, #84]	@ (8001d90 <HAL_TIM_Base_MspInit+0x7c>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d42:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <HAL_TIM_Base_MspInit+0x7c>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <HAL_TIM_Base_MspInit+0x7c>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d52:	4a0f      	ldr	r2, [pc, #60]	@ (8001d90 <HAL_TIM_Base_MspInit+0x7c>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <HAL_TIM_Base_MspInit+0x7c>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001d66:	2308      	movs	r3, #8
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d76:	2301      	movs	r3, #1
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d84:	f002 fbcc 	bl	8004520 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001d88:	bf00      	nop
 8001d8a:	3728      	adds	r7, #40	@ 0x28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000

08001d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b0ae      	sub	sp, #184	@ 0xb8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	2288      	movs	r2, #136	@ 0x88
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f00a fa9d 	bl	800c2f4 <memset>
  if(huart->Instance==USART1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a42      	ldr	r2, [pc, #264]	@ (8001ec8 <HAL_UART_MspInit+0x134>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d13b      	bne.n	8001e3c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 ff61 	bl	8005c98 <HAL_RCCEx_PeriphCLKConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ddc:	f7ff fd78 	bl	80018d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001de0:	4b3a      	ldr	r3, [pc, #232]	@ (8001ecc <HAL_UART_MspInit+0x138>)
 8001de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de4:	4a39      	ldr	r2, [pc, #228]	@ (8001ecc <HAL_UART_MspInit+0x138>)
 8001de6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dea:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dec:	4b37      	ldr	r3, [pc, #220]	@ (8001ecc <HAL_UART_MspInit+0x138>)
 8001dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df8:	4b34      	ldr	r3, [pc, #208]	@ (8001ecc <HAL_UART_MspInit+0x138>)
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfc:	4a33      	ldr	r2, [pc, #204]	@ (8001ecc <HAL_UART_MspInit+0x138>)
 8001dfe:	f043 0302 	orr.w	r3, r3, #2
 8001e02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e04:	4b31      	ldr	r3, [pc, #196]	@ (8001ecc <HAL_UART_MspInit+0x138>)
 8001e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001e10:	23c0      	movs	r3, #192	@ 0xc0
 8001e12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e28:	2307      	movs	r3, #7
 8001e2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e32:	4619      	mov	r1, r3
 8001e34:	4826      	ldr	r0, [pc, #152]	@ (8001ed0 <HAL_UART_MspInit+0x13c>)
 8001e36:	f002 fb73 	bl	8004520 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e3a:	e040      	b.n	8001ebe <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a24      	ldr	r2, [pc, #144]	@ (8001ed4 <HAL_UART_MspInit+0x140>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d13b      	bne.n	8001ebe <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e46:	2304      	movs	r3, #4
 8001e48:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	4618      	mov	r0, r3
 8001e54:	f003 ff20 	bl	8005c98 <HAL_RCCEx_PeriphCLKConfig>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001e5e:	f7ff fd37 	bl	80018d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ecc <HAL_UART_MspInit+0x138>)
 8001e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e66:	4a19      	ldr	r2, [pc, #100]	@ (8001ecc <HAL_UART_MspInit+0x138>)
 8001e68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ecc <HAL_UART_MspInit+0x138>)
 8001e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <HAL_UART_MspInit+0x138>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7e:	4a13      	ldr	r2, [pc, #76]	@ (8001ecc <HAL_UART_MspInit+0x138>)
 8001e80:	f043 0308 	orr.w	r3, r3, #8
 8001e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e86:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <HAL_UART_MspInit+0x138>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001e92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001eac:	2307      	movs	r3, #7
 8001eae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4807      	ldr	r0, [pc, #28]	@ (8001ed8 <HAL_UART_MspInit+0x144>)
 8001eba:	f002 fb31 	bl	8004520 <HAL_GPIO_Init>
}
 8001ebe:	bf00      	nop
 8001ec0:	37b8      	adds	r7, #184	@ 0xb8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40013800 	.word	0x40013800
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	48000400 	.word	0x48000400
 8001ed4:	40004800 	.word	0x40004800
 8001ed8:	48000c00 	.word	0x48000c00

08001edc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	@ 0x28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001efc:	d154      	bne.n	8001fa8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb0 <HAL_PCD_MspInit+0xd4>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f02:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb0 <HAL_PCD_MspInit+0xd4>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f0a:	4b29      	ldr	r3, [pc, #164]	@ (8001fb0 <HAL_PCD_MspInit+0xd4>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001f16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f2e:	f002 faf7 	bl	8004520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001f32:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f44:	230a      	movs	r3, #10
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f52:	f002 fae5 	bl	8004520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f56:	4b16      	ldr	r3, [pc, #88]	@ (8001fb0 <HAL_PCD_MspInit+0xd4>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5a:	4a15      	ldr	r2, [pc, #84]	@ (8001fb0 <HAL_PCD_MspInit+0xd4>)
 8001f5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f62:	4b13      	ldr	r3, [pc, #76]	@ (8001fb0 <HAL_PCD_MspInit+0xd4>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6e:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <HAL_PCD_MspInit+0xd4>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d114      	bne.n	8001fa4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb0 <HAL_PCD_MspInit+0xd4>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb0 <HAL_PCD_MspInit+0xd4>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f84:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f86:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb0 <HAL_PCD_MspInit+0xd4>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001f92:	f002 ff83 	bl	8004e9c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_PCD_MspInit+0xd4>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9a:	4a05      	ldr	r2, [pc, #20]	@ (8001fb0 <HAL_PCD_MspInit+0xd4>)
 8001f9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fa0:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001fa2:	e001      	b.n	8001fa8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001fa4:	f002 ff7a 	bl	8004e9c <HAL_PWREx_EnableVddUSB>
}
 8001fa8:	bf00      	nop
 8001faa:	3728      	adds	r7, #40	@ 0x28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	@ 0x30
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fc2:	4b2e      	ldr	r3, [pc, #184]	@ (800207c <HAL_InitTick+0xc8>)
 8001fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800207c <HAL_InitTick+0xc8>)
 8001fc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fce:	4b2b      	ldr	r3, [pc, #172]	@ (800207c <HAL_InitTick+0xc8>)
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fda:	f107 020c 	add.w	r2, r7, #12
 8001fde:	f107 0310 	add.w	r3, r7, #16
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f003 fdc5 	bl	8005b74 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001fea:	f003 fdad 	bl	8005b48 <HAL_RCC_GetPCLK2Freq>
 8001fee:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff2:	4a23      	ldr	r2, [pc, #140]	@ (8002080 <HAL_InitTick+0xcc>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	0c9b      	lsrs	r3, r3, #18
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ffe:	4b21      	ldr	r3, [pc, #132]	@ (8002084 <HAL_InitTick+0xd0>)
 8002000:	4a21      	ldr	r2, [pc, #132]	@ (8002088 <HAL_InitTick+0xd4>)
 8002002:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002004:	4b1f      	ldr	r3, [pc, #124]	@ (8002084 <HAL_InitTick+0xd0>)
 8002006:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800200a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800200c:	4a1d      	ldr	r2, [pc, #116]	@ (8002084 <HAL_InitTick+0xd0>)
 800200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002010:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002012:	4b1c      	ldr	r3, [pc, #112]	@ (8002084 <HAL_InitTick+0xd0>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002018:	4b1a      	ldr	r3, [pc, #104]	@ (8002084 <HAL_InitTick+0xd0>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201e:	4b19      	ldr	r3, [pc, #100]	@ (8002084 <HAL_InitTick+0xd0>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002024:	4817      	ldr	r0, [pc, #92]	@ (8002084 <HAL_InitTick+0xd0>)
 8002026:	f004 fba6 	bl	8006776 <HAL_TIM_Base_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002030:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002034:	2b00      	cmp	r3, #0
 8002036:	d11b      	bne.n	8002070 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002038:	4812      	ldr	r0, [pc, #72]	@ (8002084 <HAL_InitTick+0xd0>)
 800203a:	f004 fc5b 	bl	80068f4 <HAL_TIM_Base_Start_IT>
 800203e:	4603      	mov	r3, r0
 8002040:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002044:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002048:	2b00      	cmp	r3, #0
 800204a:	d111      	bne.n	8002070 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800204c:	2019      	movs	r0, #25
 800204e:	f001 ff55 	bl	8003efc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b0f      	cmp	r3, #15
 8002056:	d808      	bhi.n	800206a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002058:	2200      	movs	r2, #0
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	2019      	movs	r0, #25
 800205e:	f001 ff31 	bl	8003ec4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002062:	4a0a      	ldr	r2, [pc, #40]	@ (800208c <HAL_InitTick+0xd8>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	e002      	b.n	8002070 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002070:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002074:	4618      	mov	r0, r3
 8002076:	3730      	adds	r7, #48	@ 0x30
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40021000 	.word	0x40021000
 8002080:	431bde83 	.word	0x431bde83
 8002084:	20000c24 	.word	0x20000c24
 8002088:	40012c00 	.word	0x40012c00
 800208c:	20000004 	.word	0x20000004

08002090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <NMI_Handler+0x4>

08002098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <HardFault_Handler+0x4>

080020a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <MemManage_Handler+0x4>

080020a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <BusFault_Handler+0x4>

080020b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <UsageFault_Handler+0x4>

080020b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020cc:	4802      	ldr	r0, [pc, #8]	@ (80020d8 <DMA1_Channel1_IRQHandler+0x10>)
 80020ce:	f002 f947 	bl	8004360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000258 	.word	0x20000258

080020dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020e0:	4802      	ldr	r0, [pc, #8]	@ (80020ec <ADC1_2_IRQHandler+0x10>)
 80020e2:	f000 fdf5 	bl	8002cd0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200001f4 	.word	0x200001f4

080020f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80020f4:	2020      	movs	r0, #32
 80020f6:	f002 fbd5 	bl	80048a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80020fa:	2040      	movs	r0, #64	@ 0x40
 80020fc:	f002 fbd2 	bl	80048a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002100:	2080      	movs	r0, #128	@ 0x80
 8002102:	f002 fbcf 	bl	80048a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002106:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800210a:	f002 fbcb 	bl	80048a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002118:	4802      	ldr	r0, [pc, #8]	@ (8002124 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800211a:	f004 fc5b 	bl	80069d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000c24 	.word	0x20000c24

08002128 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800212c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002130:	f002 fbb8 	bl	80048a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002134:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002138:	f002 fbb4 	bl	80048a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800213c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002140:	f002 fbb0 	bl	80048a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002144:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002148:	f002 fbac 	bl	80048a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800214c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002150:	f002 fba8 	bl	80048a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) /* Check if the interrupt comes from ACD1 */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a05      	ldr	r2, [pc, #20]	@ (800217c <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d104      	bne.n	8002174 <HAL_ADC_ConvHalfCpltCallback+0x1c>
    {
    	osSemaphoreRelease(myBinarySem01Handle);
 800216a:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f006 fa62 	bl	8008638 <osSemaphoreRelease>
    }
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	50040000 	.word	0x50040000
 8002180:	20000a18 	.word	0x20000a18

08002184 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) /* Check if the interrupt comes from ACD1 */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a05      	ldr	r2, [pc, #20]	@ (80021a8 <HAL_ADC_ConvCpltCallback+0x24>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d104      	bne.n	80021a0 <HAL_ADC_ConvCpltCallback+0x1c>
    {
    	osSemaphoreRelease(myBinarySem02Handle);
 8002196:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <HAL_ADC_ConvCpltCallback+0x28>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f006 fa4c 	bl	8008638 <osSemaphoreRelease>
    }
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	50040000 	.word	0x50040000
 80021ac:	20000a1c 	.word	0x20000a1c

080021b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return 1;
 80021b4:	2301      	movs	r3, #1
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_kill>:

int _kill(int pid, int sig)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021ca:	f00a f8e5 	bl	800c398 <__errno>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2216      	movs	r2, #22
 80021d2:	601a      	str	r2, [r3, #0]
  return -1;
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_exit>:

void _exit (int status)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ffe7 	bl	80021c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021f2:	bf00      	nop
 80021f4:	e7fd      	b.n	80021f2 <_exit+0x12>

080021f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	e00a      	b.n	800221e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002208:	f3af 8000 	nop.w
 800220c:	4601      	mov	r1, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	60ba      	str	r2, [r7, #8]
 8002214:	b2ca      	uxtb	r2, r1
 8002216:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3301      	adds	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	429a      	cmp	r2, r3
 8002224:	dbf0      	blt.n	8002208 <_read+0x12>
  }

  return len;
 8002226:	687b      	ldr	r3, [r7, #4]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	e009      	b.n	8002256 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	60ba      	str	r2, [r7, #8]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	3301      	adds	r3, #1
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	429a      	cmp	r2, r3
 800225c:	dbf1      	blt.n	8002242 <_write+0x12>
  }
  return len;
 800225e:	687b      	ldr	r3, [r7, #4]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <_close>:

int _close(int file)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002290:	605a      	str	r2, [r3, #4]
  return 0;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <_isatty>:

int _isatty(int file)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022a8:	2301      	movs	r3, #1
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b085      	sub	sp, #20
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d8:	4a14      	ldr	r2, [pc, #80]	@ (800232c <_sbrk+0x5c>)
 80022da:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <_sbrk+0x60>)
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e4:	4b13      	ldr	r3, [pc, #76]	@ (8002334 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d102      	bne.n	80022f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <_sbrk+0x64>)
 80022ee:	4a12      	ldr	r2, [pc, #72]	@ (8002338 <_sbrk+0x68>)
 80022f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f2:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <_sbrk+0x64>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d207      	bcs.n	8002310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002300:	f00a f84a 	bl	800c398 <__errno>
 8002304:	4603      	mov	r3, r0
 8002306:	220c      	movs	r2, #12
 8002308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
 800230e:	e009      	b.n	8002324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002310:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002316:	4b07      	ldr	r3, [pc, #28]	@ (8002334 <_sbrk+0x64>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	4a05      	ldr	r2, [pc, #20]	@ (8002334 <_sbrk+0x64>)
 8002320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002322:	68fb      	ldr	r3, [r7, #12]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20018000 	.word	0x20018000
 8002330:	00000400 	.word	0x00000400
 8002334:	20000c70 	.word	0x20000c70
 8002338:	200026f0 	.word	0x200026f0

0800233c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002340:	4b06      	ldr	r3, [pc, #24]	@ (800235c <SystemInit+0x20>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002346:	4a05      	ldr	r2, [pc, #20]	@ (800235c <SystemInit+0x20>)
 8002348:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800234c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <UART_Printf>:

#define DEBUG_UART 1
/* Define END */


void UART_Printf(const char* fmt, ...) {
 8002360:	b40f      	push	{r0, r1, r2, r3}
 8002362:	b580      	push	{r7, lr}
 8002364:	b0c2      	sub	sp, #264	@ 0x108
 8002366:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 8002368:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800236c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002370:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002374:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8002376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800237a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800237e:	f107 0008 	add.w	r0, r7, #8
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002388:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800238c:	f009 ffa4 	bl	800c2d8 <vsniprintf>
    HAL_UART_Transmit(&UART_COM, (uint8_t*)buff, strlen(buff), UART_MAXDELAY);
 8002390:	f107 0308 	add.w	r3, r7, #8
 8002394:	4618      	mov	r0, r3
 8002396:	f7fd ff6b 	bl	8000270 <strlen>
 800239a:	4603      	mov	r3, r0
 800239c:	b29a      	uxth	r2, r3
 800239e:	f107 0108 	add.w	r1, r7, #8
 80023a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023a6:	4805      	ldr	r0, [pc, #20]	@ (80023bc <UART_Printf+0x5c>)
 80023a8:	f004 ff40 	bl	800722c <HAL_UART_Transmit>
    va_end(args);
}
 80023ac:	bf00      	nop
 80023ae:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80023b2:	46bd      	mov	sp, r7
 80023b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023b8:	b004      	add	sp, #16
 80023ba:	4770      	bx	lr
 80023bc:	20000420 	.word	0x20000420

080023c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023c4:	f7ff ffba 	bl	800233c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c8:	480c      	ldr	r0, [pc, #48]	@ (80023fc <LoopForever+0x6>)
  ldr r1, =_edata
 80023ca:	490d      	ldr	r1, [pc, #52]	@ (8002400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002404 <LoopForever+0xe>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d0:	e002      	b.n	80023d8 <LoopCopyDataInit>

080023d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d6:	3304      	adds	r3, #4

080023d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023dc:	d3f9      	bcc.n	80023d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023de:	4a0a      	ldr	r2, [pc, #40]	@ (8002408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023e0:	4c0a      	ldr	r4, [pc, #40]	@ (800240c <LoopForever+0x16>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e4:	e001      	b.n	80023ea <LoopFillZerobss>

080023e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e8:	3204      	adds	r2, #4

080023ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ec:	d3fb      	bcc.n	80023e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ee:	f009 ffd9 	bl	800c3a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023f2:	f7fe fd51 	bl	8000e98 <main>

080023f6 <LoopForever>:

LoopForever:
    b LoopForever
 80023f6:	e7fe      	b.n	80023f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80023fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002400:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002404:	0800e918 	.word	0x0800e918
  ldr r2, =_sbss
 8002408:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800240c:	200026f0 	.word	0x200026f0

08002410 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002410:	e7fe      	b.n	8002410 <ADC3_IRQHandler>

08002412 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800241c:	2003      	movs	r0, #3
 800241e:	f001 fd46 	bl	8003eae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002422:	200f      	movs	r0, #15
 8002424:	f7ff fdc6 	bl	8001fb4 <HAL_InitTick>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	71fb      	strb	r3, [r7, #7]
 8002432:	e001      	b.n	8002438 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002434:	f7ff fa52 	bl	80018dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002438:	79fb      	ldrb	r3, [r7, #7]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002448:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <HAL_IncTick+0x20>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <HAL_IncTick+0x24>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4413      	add	r3, r2
 8002454:	4a04      	ldr	r2, [pc, #16]	@ (8002468 <HAL_IncTick+0x24>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000008 	.word	0x20000008
 8002468:	20000c74 	.word	0x20000c74

0800246c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return uwTick;
 8002470:	4b03      	ldr	r3, [pc, #12]	@ (8002480 <HAL_GetTick+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000c74 	.word	0x20000c74

08002484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7ff ffee 	bl	800246c <HAL_GetTick>
 8002490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d005      	beq.n	80024aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800249e:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <HAL_Delay+0x44>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024aa:	bf00      	nop
 80024ac:	f7ff ffde 	bl	800246c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d8f7      	bhi.n	80024ac <HAL_Delay+0x28>
  {
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000008 	.word	0x20000008

080024cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	609a      	str	r2, [r3, #8]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	609a      	str	r2, [r3, #8]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3360      	adds	r3, #96	@ 0x60
 8002546:	461a      	mov	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b08      	ldr	r3, [pc, #32]	@ (8002578 <LL_ADC_SetOffset+0x44>)
 8002556:	4013      	ands	r3, r2
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	4313      	orrs	r3, r2
 8002564:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800256c:	bf00      	nop
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	03fff000 	.word	0x03fff000

0800257c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3360      	adds	r3, #96	@ 0x60
 800258a:	461a      	mov	r2, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3360      	adds	r3, #96	@ 0x60
 80025b8:	461a      	mov	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025d2:	bf00      	nop
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3330      	adds	r3, #48	@ 0x30
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	4413      	add	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	211f      	movs	r1, #31
 8002630:	fa01 f303 	lsl.w	r3, r1, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	401a      	ands	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	0e9b      	lsrs	r3, r3, #26
 800263c:	f003 011f 	and.w	r1, r3, #31
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	431a      	orrs	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002650:	bf00      	nop
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002668:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002682:	b480      	push	{r7}
 8002684:	b087      	sub	sp, #28
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3314      	adds	r3, #20
 8002692:	461a      	mov	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	0e5b      	lsrs	r3, r3, #25
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	4413      	add	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	0d1b      	lsrs	r3, r3, #20
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	2107      	movs	r1, #7
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	401a      	ands	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	0d1b      	lsrs	r3, r3, #20
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	431a      	orrs	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026cc:	bf00      	nop
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f0:	43db      	mvns	r3, r3
 80026f2:	401a      	ands	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0318 	and.w	r3, r3, #24
 80026fa:	4908      	ldr	r1, [pc, #32]	@ (800271c <LL_ADC_SetChannelSingleDiff+0x44>)
 80026fc:	40d9      	lsrs	r1, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	400b      	ands	r3, r1
 8002702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002706:	431a      	orrs	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	0007ffff 	.word	0x0007ffff

08002720 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 031f 	and.w	r3, r3, #31
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002768:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6093      	str	r3, [r2, #8]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800278c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002790:	d101      	bne.n	8002796 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80027b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027e0:	d101      	bne.n	80027e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002804:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <LL_ADC_IsEnabled+0x18>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <LL_ADC_IsEnabled+0x1a>
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002852:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002856:	f043 0204 	orr.w	r2, r3, #4
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b04      	cmp	r3, #4
 800287c:	d101      	bne.n	8002882 <LL_ADC_REG_IsConversionOngoing+0x18>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d101      	bne.n	80028a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b089      	sub	sp, #36	@ 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e130      	b.n	8002b34 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff f823 	bl	800192c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff3f 	bl	800277c <LL_ADC_IsDeepPowerDownEnabled>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d004      	beq.n	800290e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff25 	bl	8002758 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff ff5a 	bl	80027cc <LL_ADC_IsInternalRegulatorEnabled>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d115      	bne.n	800294a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff3e 	bl	80027a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002928:	4b84      	ldr	r3, [pc, #528]	@ (8002b3c <HAL_ADC_Init+0x284>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	099b      	lsrs	r3, r3, #6
 800292e:	4a84      	ldr	r2, [pc, #528]	@ (8002b40 <HAL_ADC_Init+0x288>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	3301      	adds	r3, #1
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800293c:	e002      	b.n	8002944 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3b01      	subs	r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f9      	bne.n	800293e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff ff3c 	bl	80027cc <LL_ADC_IsInternalRegulatorEnabled>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10d      	bne.n	8002976 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295e:	f043 0210 	orr.w	r2, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296a:	f043 0201 	orr.w	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff75 	bl	800286a <LL_ADC_REG_IsConversionOngoing>
 8002980:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b00      	cmp	r3, #0
 800298c:	f040 80c9 	bne.w	8002b22 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	f040 80c5 	bne.w	8002b22 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80029a0:	f043 0202 	orr.w	r2, r3, #2
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff35 	bl	800281c <LL_ADC_IsEnabled>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d115      	bne.n	80029e4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029b8:	4862      	ldr	r0, [pc, #392]	@ (8002b44 <HAL_ADC_Init+0x28c>)
 80029ba:	f7ff ff2f 	bl	800281c <LL_ADC_IsEnabled>
 80029be:	4604      	mov	r4, r0
 80029c0:	4861      	ldr	r0, [pc, #388]	@ (8002b48 <HAL_ADC_Init+0x290>)
 80029c2:	f7ff ff2b 	bl	800281c <LL_ADC_IsEnabled>
 80029c6:	4603      	mov	r3, r0
 80029c8:	431c      	orrs	r4, r3
 80029ca:	4860      	ldr	r0, [pc, #384]	@ (8002b4c <HAL_ADC_Init+0x294>)
 80029cc:	f7ff ff26 	bl	800281c <LL_ADC_IsEnabled>
 80029d0:	4603      	mov	r3, r0
 80029d2:	4323      	orrs	r3, r4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d105      	bne.n	80029e4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4619      	mov	r1, r3
 80029de:	485c      	ldr	r0, [pc, #368]	@ (8002b50 <HAL_ADC_Init+0x298>)
 80029e0:	f7ff fd74 	bl	80024cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	7e5b      	ldrb	r3, [r3, #25]
 80029e8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029ee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80029f4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80029fa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a02:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d106      	bne.n	8002a20 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a16:	3b01      	subs	r3, #1
 8002a18:	045b      	lsls	r3, r3, #17
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d009      	beq.n	8002a3c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a34:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	4b44      	ldr	r3, [pc, #272]	@ (8002b54 <HAL_ADC_Init+0x29c>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6812      	ldr	r2, [r2, #0]
 8002a4a:	69b9      	ldr	r1, [r7, #24]
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff1b 	bl	8002890 <LL_ADC_INJ_IsConversionOngoing>
 8002a5a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d13d      	bne.n	8002ade <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d13a      	bne.n	8002ade <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a6c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a74:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a84:	f023 0302 	bic.w	r3, r3, #2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	69b9      	ldr	r1, [r7, #24]
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d118      	bne.n	8002ace <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002aa6:	f023 0304 	bic.w	r3, r3, #4
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ab2:	4311      	orrs	r1, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002ab8:	4311      	orrs	r1, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	611a      	str	r2, [r3, #16]
 8002acc:	e007      	b.n	8002ade <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d10c      	bne.n	8002b00 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aec:	f023 010f 	bic.w	r1, r3, #15
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	1e5a      	subs	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002afe:	e007      	b.n	8002b10 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 020f 	bic.w	r2, r2, #15
 8002b0e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b14:	f023 0303 	bic.w	r3, r3, #3
 8002b18:	f043 0201 	orr.w	r2, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b20:	e007      	b.n	8002b32 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b26:	f043 0210 	orr.w	r2, r3, #16
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b32:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3724      	adds	r7, #36	@ 0x24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd90      	pop	{r4, r7, pc}
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	053e2d63 	.word	0x053e2d63
 8002b44:	50040000 	.word	0x50040000
 8002b48:	50040100 	.word	0x50040100
 8002b4c:	50040200 	.word	0x50040200
 8002b50:	50040300 	.word	0x50040300
 8002b54:	fff0c007 	.word	0xfff0c007

08002b58 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b64:	4853      	ldr	r0, [pc, #332]	@ (8002cb4 <HAL_ADC_Start_DMA+0x15c>)
 8002b66:	f7ff fddb 	bl	8002720 <LL_ADC_GetMultimode>
 8002b6a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fe7a 	bl	800286a <LL_ADC_REG_IsConversionOngoing>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f040 8093 	bne.w	8002ca4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_Start_DMA+0x34>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e08e      	b.n	8002caa <HAL_ADC_Start_DMA+0x152>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a47      	ldr	r2, [pc, #284]	@ (8002cb8 <HAL_ADC_Start_DMA+0x160>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d008      	beq.n	8002bb0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d002      	beq.n	8002bb0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	2b09      	cmp	r3, #9
 8002bae:	d172      	bne.n	8002c96 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 fead 	bl	8003910 <ADC_Enable>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002bba:	7dfb      	ldrb	r3, [r7, #23]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d165      	bne.n	8002c8c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a38      	ldr	r2, [pc, #224]	@ (8002cbc <HAL_ADC_Start_DMA+0x164>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d002      	beq.n	8002be4 <HAL_ADC_Start_DMA+0x8c>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	e000      	b.n	8002be6 <HAL_ADC_Start_DMA+0x8e>
 8002be4:	4b36      	ldr	r3, [pc, #216]	@ (8002cc0 <HAL_ADC_Start_DMA+0x168>)
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d002      	beq.n	8002bf4 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d105      	bne.n	8002c00 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c10:	f023 0206 	bic.w	r2, r3, #6
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c18:	e002      	b.n	8002c20 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c24:	4a27      	ldr	r2, [pc, #156]	@ (8002cc4 <HAL_ADC_Start_DMA+0x16c>)
 8002c26:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2c:	4a26      	ldr	r2, [pc, #152]	@ (8002cc8 <HAL_ADC_Start_DMA+0x170>)
 8002c2e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c34:	4a25      	ldr	r2, [pc, #148]	@ (8002ccc <HAL_ADC_Start_DMA+0x174>)
 8002c36:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	221c      	movs	r2, #28
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0210 	orr.w	r2, r2, #16
 8002c56:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3340      	adds	r3, #64	@ 0x40
 8002c72:	4619      	mov	r1, r3
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f001 fb12 	bl	80042a0 <HAL_DMA_Start_IT>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fddc 	bl	8002842 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002c8a:	e00d      	b.n	8002ca8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002c94:	e008      	b.n	8002ca8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002ca2:	e001      	b.n	8002ca8 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	50040300 	.word	0x50040300
 8002cb8:	50040200 	.word	0x50040200
 8002cbc:	50040100 	.word	0x50040100
 8002cc0:	50040000 	.word	0x50040000
 8002cc4:	08003a1d 	.word	0x08003a1d
 8002cc8:	08003af5 	.word	0x08003af5
 8002ccc:	08003b11 	.word	0x08003b11

08002cd0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	@ 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002cd8:	2300      	movs	r3, #0
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cec:	4882      	ldr	r0, [pc, #520]	@ (8002ef8 <HAL_ADC_IRQHandler+0x228>)
 8002cee:	f7ff fd17 	bl	8002720 <LL_ADC_GetMultimode>
 8002cf2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d017      	beq.n	8002d2e <HAL_ADC_IRQHandler+0x5e>
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d012      	beq.n	8002d2e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d18:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 ff5d 	bl	8003be0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d004      	beq.n	8002d42 <HAL_ADC_IRQHandler+0x72>
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 8083 	beq.w	8002e54 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d07d      	beq.n	8002e54 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d68:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fc32 	bl	80025de <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d062      	beq.n	8002e46 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a5d      	ldr	r2, [pc, #372]	@ (8002efc <HAL_ADC_IRQHandler+0x22c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d002      	beq.n	8002d90 <HAL_ADC_IRQHandler+0xc0>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	e000      	b.n	8002d92 <HAL_ADC_IRQHandler+0xc2>
 8002d90:	4b5b      	ldr	r3, [pc, #364]	@ (8002f00 <HAL_ADC_IRQHandler+0x230>)
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d008      	beq.n	8002dac <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2b05      	cmp	r3, #5
 8002da4:	d002      	beq.n	8002dac <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2b09      	cmp	r3, #9
 8002daa:	d104      	bne.n	8002db6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	623b      	str	r3, [r7, #32]
 8002db4:	e00c      	b.n	8002dd0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a50      	ldr	r2, [pc, #320]	@ (8002efc <HAL_ADC_IRQHandler+0x22c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d002      	beq.n	8002dc6 <HAL_ADC_IRQHandler+0xf6>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	e000      	b.n	8002dc8 <HAL_ADC_IRQHandler+0xf8>
 8002dc6:	4b4e      	ldr	r3, [pc, #312]	@ (8002f00 <HAL_ADC_IRQHandler+0x230>)
 8002dc8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d135      	bne.n	8002e46 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d12e      	bne.n	8002e46 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fd3c 	bl	800286a <LL_ADC_REG_IsConversionOngoing>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d11a      	bne.n	8002e2e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 020c 	bic.w	r2, r2, #12
 8002e06:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d112      	bne.n	8002e46 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e24:	f043 0201 	orr.w	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e2c:	e00b      	b.n	8002e46 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e32:	f043 0210 	orr.w	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3e:	f043 0201 	orr.w	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff f99c 	bl	8002184 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	220c      	movs	r2, #12
 8002e52:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <HAL_ADC_IRQHandler+0x198>
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10b      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 809f 	beq.w	8002fb2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8099 	beq.w	8002fb2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d105      	bne.n	8002e98 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e90:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fbdd 	bl	800265c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002ea2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fb98 	bl	80025de <LL_ADC_REG_IsTriggerSourceSWStart>
 8002eae:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a11      	ldr	r2, [pc, #68]	@ (8002efc <HAL_ADC_IRQHandler+0x22c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d002      	beq.n	8002ec0 <HAL_ADC_IRQHandler+0x1f0>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	e000      	b.n	8002ec2 <HAL_ADC_IRQHandler+0x1f2>
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <HAL_ADC_IRQHandler+0x230>)
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d008      	beq.n	8002edc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2b06      	cmp	r3, #6
 8002ed4:	d002      	beq.n	8002edc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b07      	cmp	r3, #7
 8002eda:	d104      	bne.n	8002ee6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	623b      	str	r3, [r7, #32]
 8002ee4:	e013      	b.n	8002f0e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a04      	ldr	r2, [pc, #16]	@ (8002efc <HAL_ADC_IRQHandler+0x22c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_ADC_IRQHandler+0x234>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	e007      	b.n	8002f06 <HAL_ADC_IRQHandler+0x236>
 8002ef6:	bf00      	nop
 8002ef8:	50040300 	.word	0x50040300
 8002efc:	50040100 	.word	0x50040100
 8002f00:	50040000 	.word	0x50040000
 8002f04:	4b7d      	ldr	r3, [pc, #500]	@ (80030fc <HAL_ADC_IRQHandler+0x42c>)
 8002f06:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d047      	beq.n	8002fa4 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d007      	beq.n	8002f2e <HAL_ADC_IRQHandler+0x25e>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d03f      	beq.n	8002fa4 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d13a      	bne.n	8002fa4 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f38:	2b40      	cmp	r3, #64	@ 0x40
 8002f3a:	d133      	bne.n	8002fa4 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d12e      	bne.n	8002fa4 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fca0 	bl	8002890 <LL_ADC_INJ_IsConversionOngoing>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d11a      	bne.n	8002f8c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f64:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d112      	bne.n	8002fa4 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f82:	f043 0201 	orr.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f8a:	e00b      	b.n	8002fa4 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f90:	f043 0210 	orr.w	r2, r3, #16
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9c:	f043 0201 	orr.w	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fdf3 	bl	8003b90 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2260      	movs	r2, #96	@ 0x60
 8002fb0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d011      	beq.n	8002fe0 <HAL_ADC_IRQHandler+0x310>
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00c      	beq.n	8002fe0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f896 	bl	8003104 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2280      	movs	r2, #128	@ 0x80
 8002fde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d012      	beq.n	8003010 <HAL_ADC_IRQHandler+0x340>
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00d      	beq.n	8003010 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fdd9 	bl	8003bb8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800300e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003016:	2b00      	cmp	r3, #0
 8003018:	d012      	beq.n	8003040 <HAL_ADC_IRQHandler+0x370>
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00d      	beq.n	8003040 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003028:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fdcb 	bl	8003bcc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800303e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	2b00      	cmp	r3, #0
 8003048:	d036      	beq.n	80030b8 <HAL_ADC_IRQHandler+0x3e8>
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	d031      	beq.n	80030b8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003058:	2b00      	cmp	r3, #0
 800305a:	d102      	bne.n	8003062 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800305c:	2301      	movs	r3, #1
 800305e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003060:	e014      	b.n	800308c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003068:	4825      	ldr	r0, [pc, #148]	@ (8003100 <HAL_ADC_IRQHandler+0x430>)
 800306a:	f7ff fb67 	bl	800273c <LL_ADC_GetMultiDMATransfer>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00b      	beq.n	800308c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003074:	2301      	movs	r3, #1
 8003076:	627b      	str	r3, [r7, #36]	@ 0x24
 8003078:	e008      	b.n	800308c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003088:	2301      	movs	r3, #1
 800308a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800308c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308e:	2b01      	cmp	r3, #1
 8003090:	d10e      	bne.n	80030b0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003096:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a2:	f043 0202 	orr.w	r2, r3, #2
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f834 	bl	8003118 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2210      	movs	r2, #16
 80030b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d018      	beq.n	80030f4 <HAL_ADC_IRQHandler+0x424>
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d013      	beq.n	80030f4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030dc:	f043 0208 	orr.w	r2, r3, #8
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030ec:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fd58 	bl	8003ba4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80030f4:	bf00      	nop
 80030f6:	3728      	adds	r7, #40	@ 0x28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	50040000 	.word	0x50040000
 8003100:	50040300 	.word	0x50040300

08003104 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b0b6      	sub	sp, #216	@ 0xd8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800313c:	2300      	movs	r3, #0
 800313e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_ADC_ConfigChannel+0x22>
 800314a:	2302      	movs	r3, #2
 800314c:	e3c9      	b.n	80038e2 <HAL_ADC_ConfigChannel+0x7b6>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fb85 	bl	800286a <LL_ADC_REG_IsConversionOngoing>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	f040 83aa 	bne.w	80038bc <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b05      	cmp	r3, #5
 8003176:	d824      	bhi.n	80031c2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	3b02      	subs	r3, #2
 800317e:	2b03      	cmp	r3, #3
 8003180:	d81b      	bhi.n	80031ba <HAL_ADC_ConfigChannel+0x8e>
 8003182:	a201      	add	r2, pc, #4	@ (adr r2, 8003188 <HAL_ADC_ConfigChannel+0x5c>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	08003199 	.word	0x08003199
 800318c:	080031a1 	.word	0x080031a1
 8003190:	080031a9 	.word	0x080031a9
 8003194:	080031b1 	.word	0x080031b1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003198:	230c      	movs	r3, #12
 800319a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800319e:	e010      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80031a0:	2312      	movs	r3, #18
 80031a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80031a6:	e00c      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80031a8:	2318      	movs	r3, #24
 80031aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80031ae:	e008      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80031b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80031b8:	e003      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80031ba:	2306      	movs	r3, #6
 80031bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80031c0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80031d0:	f7ff fa18 	bl	8002604 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fb46 	bl	800286a <LL_ADC_REG_IsConversionOngoing>
 80031de:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fb52 	bl	8002890 <LL_ADC_INJ_IsConversionOngoing>
 80031ec:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f040 81a4 	bne.w	8003542 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 819f 	bne.w	8003542 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	6819      	ldr	r1, [r3, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	461a      	mov	r2, r3
 8003212:	f7ff fa36 	bl	8002682 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	08db      	lsrs	r3, r3, #3
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	2b04      	cmp	r3, #4
 8003236:	d00a      	beq.n	800324e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	6919      	ldr	r1, [r3, #16]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003248:	f7ff f974 	bl	8002534 <LL_ADC_SetOffset>
 800324c:	e179      	b.n	8003542 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff f991 	bl	800257c <LL_ADC_GetOffsetChannel>
 800325a:	4603      	mov	r3, r0
 800325c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <HAL_ADC_ConfigChannel+0x14e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2100      	movs	r1, #0
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff f986 	bl	800257c <LL_ADC_GetOffsetChannel>
 8003270:	4603      	mov	r3, r0
 8003272:	0e9b      	lsrs	r3, r3, #26
 8003274:	f003 021f 	and.w	r2, r3, #31
 8003278:	e01e      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x18c>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff f97b 	bl	800257c <LL_ADC_GetOffsetChannel>
 8003286:	4603      	mov	r3, r0
 8003288:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003298:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800329c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80032a8:	2320      	movs	r3, #32
 80032aa:	e004      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80032ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d105      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x1a4>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	0e9b      	lsrs	r3, r3, #26
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	e018      	b.n	8003302 <HAL_ADC_ConfigChannel+0x1d6>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80032e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80032ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80032f4:	2320      	movs	r3, #32
 80032f6:	e004      	b.n	8003302 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80032f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80032fc:	fab3 f383 	clz	r3, r3
 8003300:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003302:	429a      	cmp	r2, r3
 8003304:	d106      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2200      	movs	r2, #0
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff f94a 	bl	80025a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2101      	movs	r1, #1
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff f92e 	bl	800257c <LL_ADC_GetOffsetChannel>
 8003320:	4603      	mov	r3, r0
 8003322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x214>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2101      	movs	r1, #1
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff f923 	bl	800257c <LL_ADC_GetOffsetChannel>
 8003336:	4603      	mov	r3, r0
 8003338:	0e9b      	lsrs	r3, r3, #26
 800333a:	f003 021f 	and.w	r2, r3, #31
 800333e:	e01e      	b.n	800337e <HAL_ADC_ConfigChannel+0x252>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2101      	movs	r1, #1
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff f918 	bl	800257c <LL_ADC_GetOffsetChannel>
 800334c:	4603      	mov	r3, r0
 800334e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800335e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003362:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800336e:	2320      	movs	r3, #32
 8003370:	e004      	b.n	800337c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003372:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003386:	2b00      	cmp	r3, #0
 8003388:	d105      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x26a>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	0e9b      	lsrs	r3, r3, #26
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	e018      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x29c>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80033aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80033b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80033ba:	2320      	movs	r3, #32
 80033bc:	e004      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80033be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d106      	bne.n	80033da <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2200      	movs	r2, #0
 80033d2:	2101      	movs	r1, #1
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff f8e7 	bl	80025a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2102      	movs	r1, #2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff f8cb 	bl	800257c <LL_ADC_GetOffsetChannel>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x2da>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2102      	movs	r1, #2
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff f8c0 	bl	800257c <LL_ADC_GetOffsetChannel>
 80033fc:	4603      	mov	r3, r0
 80033fe:	0e9b      	lsrs	r3, r3, #26
 8003400:	f003 021f 	and.w	r2, r3, #31
 8003404:	e01e      	b.n	8003444 <HAL_ADC_ConfigChannel+0x318>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2102      	movs	r1, #2
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff f8b5 	bl	800257c <LL_ADC_GetOffsetChannel>
 8003412:	4603      	mov	r3, r0
 8003414:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800341c:	fa93 f3a3 	rbit	r3, r3
 8003420:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003424:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003428:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800342c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003434:	2320      	movs	r3, #32
 8003436:	e004      	b.n	8003442 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003438:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800343c:	fab3 f383 	clz	r3, r3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344c:	2b00      	cmp	r3, #0
 800344e:	d105      	bne.n	800345c <HAL_ADC_ConfigChannel+0x330>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	0e9b      	lsrs	r3, r3, #26
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	e014      	b.n	8003486 <HAL_ADC_ConfigChannel+0x35a>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800346a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800346c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003470:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003478:	2320      	movs	r3, #32
 800347a:	e004      	b.n	8003486 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800347c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003480:	fab3 f383 	clz	r3, r3
 8003484:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003486:	429a      	cmp	r2, r3
 8003488:	d106      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2200      	movs	r2, #0
 8003490:	2102      	movs	r1, #2
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff f888 	bl	80025a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2103      	movs	r1, #3
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff f86c 	bl	800257c <LL_ADC_GetOffsetChannel>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10a      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x398>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2103      	movs	r1, #3
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff f861 	bl	800257c <LL_ADC_GetOffsetChannel>
 80034ba:	4603      	mov	r3, r0
 80034bc:	0e9b      	lsrs	r3, r3, #26
 80034be:	f003 021f 	and.w	r2, r3, #31
 80034c2:	e017      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x3c8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2103      	movs	r1, #3
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff f856 	bl	800257c <LL_ADC_GetOffsetChannel>
 80034d0:	4603      	mov	r3, r0
 80034d2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034d6:	fa93 f3a3 	rbit	r3, r3
 80034da:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80034dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034de:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80034e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80034e6:	2320      	movs	r3, #32
 80034e8:	e003      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80034ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ec:	fab3 f383 	clz	r3, r3
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d105      	bne.n	800350c <HAL_ADC_ConfigChannel+0x3e0>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	0e9b      	lsrs	r3, r3, #26
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	e011      	b.n	8003530 <HAL_ADC_ConfigChannel+0x404>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800351a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800351c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800351e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003524:	2320      	movs	r3, #32
 8003526:	e003      	b.n	8003530 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003528:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003530:	429a      	cmp	r2, r3
 8003532:	d106      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2200      	movs	r2, #0
 800353a:	2103      	movs	r1, #3
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff f833 	bl	80025a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff f968 	bl	800281c <LL_ADC_IsEnabled>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	f040 8140 	bne.w	80037d4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6819      	ldr	r1, [r3, #0]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	461a      	mov	r2, r3
 8003562:	f7ff f8b9 	bl	80026d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	4a8f      	ldr	r2, [pc, #572]	@ (80037a8 <HAL_ADC_ConfigChannel+0x67c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	f040 8131 	bne.w	80037d4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10b      	bne.n	800359a <HAL_ADC_ConfigChannel+0x46e>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	0e9b      	lsrs	r3, r3, #26
 8003588:	3301      	adds	r3, #1
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	2b09      	cmp	r3, #9
 8003590:	bf94      	ite	ls
 8003592:	2301      	movls	r3, #1
 8003594:	2300      	movhi	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	e019      	b.n	80035ce <HAL_ADC_ConfigChannel+0x4a2>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80035a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80035ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80035b2:	2320      	movs	r3, #32
 80035b4:	e003      	b.n	80035be <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80035b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	2b09      	cmp	r3, #9
 80035c6:	bf94      	ite	ls
 80035c8:	2301      	movls	r3, #1
 80035ca:	2300      	movhi	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d079      	beq.n	80036c6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d107      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x4c2>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	0e9b      	lsrs	r3, r3, #26
 80035e4:	3301      	adds	r3, #1
 80035e6:	069b      	lsls	r3, r3, #26
 80035e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035ec:	e015      	b.n	800361a <HAL_ADC_ConfigChannel+0x4ee>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035f6:	fa93 f3a3 	rbit	r3, r3
 80035fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80035fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035fe:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003606:	2320      	movs	r3, #32
 8003608:	e003      	b.n	8003612 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800360a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800360c:	fab3 f383 	clz	r3, r3
 8003610:	b2db      	uxtb	r3, r3
 8003612:	3301      	adds	r3, #1
 8003614:	069b      	lsls	r3, r3, #26
 8003616:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <HAL_ADC_ConfigChannel+0x50e>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	0e9b      	lsrs	r3, r3, #26
 800362c:	3301      	adds	r3, #1
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	2101      	movs	r1, #1
 8003634:	fa01 f303 	lsl.w	r3, r1, r3
 8003638:	e017      	b.n	800366a <HAL_ADC_ConfigChannel+0x53e>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800364a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800364c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003652:	2320      	movs	r3, #32
 8003654:	e003      	b.n	800365e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003658:	fab3 f383 	clz	r3, r3
 800365c:	b2db      	uxtb	r3, r3
 800365e:	3301      	adds	r3, #1
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	2101      	movs	r1, #1
 8003666:	fa01 f303 	lsl.w	r3, r1, r3
 800366a:	ea42 0103 	orr.w	r1, r2, r3
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x564>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	0e9b      	lsrs	r3, r3, #26
 8003680:	3301      	adds	r3, #1
 8003682:	f003 021f 	and.w	r2, r3, #31
 8003686:	4613      	mov	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	4413      	add	r3, r2
 800368c:	051b      	lsls	r3, r3, #20
 800368e:	e018      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x596>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003698:	fa93 f3a3 	rbit	r3, r3
 800369c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800369e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80036a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80036a8:	2320      	movs	r3, #32
 80036aa:	e003      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80036ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	3301      	adds	r3, #1
 80036b6:	f003 021f 	and.w	r2, r3, #31
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036c2:	430b      	orrs	r3, r1
 80036c4:	e081      	b.n	80037ca <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d107      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x5b6>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	0e9b      	lsrs	r3, r3, #26
 80036d8:	3301      	adds	r3, #1
 80036da:	069b      	lsls	r3, r3, #26
 80036dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036e0:	e015      	b.n	800370e <HAL_ADC_ConfigChannel+0x5e2>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80036f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80036fa:	2320      	movs	r3, #32
 80036fc:	e003      	b.n	8003706 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80036fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003700:	fab3 f383 	clz	r3, r3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	3301      	adds	r3, #1
 8003708:	069b      	lsls	r3, r3, #26
 800370a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <HAL_ADC_ConfigChannel+0x602>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	0e9b      	lsrs	r3, r3, #26
 8003720:	3301      	adds	r3, #1
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	2101      	movs	r1, #1
 8003728:	fa01 f303 	lsl.w	r3, r1, r3
 800372c:	e017      	b.n	800375e <HAL_ADC_ConfigChannel+0x632>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	61bb      	str	r3, [r7, #24]
  return result;
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003746:	2320      	movs	r3, #32
 8003748:	e003      	b.n	8003752 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	fab3 f383 	clz	r3, r3
 8003750:	b2db      	uxtb	r3, r3
 8003752:	3301      	adds	r3, #1
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	2101      	movs	r1, #1
 800375a:	fa01 f303 	lsl.w	r3, r1, r3
 800375e:	ea42 0103 	orr.w	r1, r2, r3
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10d      	bne.n	800378a <HAL_ADC_ConfigChannel+0x65e>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	0e9b      	lsrs	r3, r3, #26
 8003774:	3301      	adds	r3, #1
 8003776:	f003 021f 	and.w	r2, r3, #31
 800377a:	4613      	mov	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4413      	add	r3, r2
 8003780:	3b1e      	subs	r3, #30
 8003782:	051b      	lsls	r3, r3, #20
 8003784:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003788:	e01e      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x69c>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	fa93 f3a3 	rbit	r3, r3
 8003796:	60fb      	str	r3, [r7, #12]
  return result;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d104      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80037a2:	2320      	movs	r3, #32
 80037a4:	e006      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x688>
 80037a6:	bf00      	nop
 80037a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	3301      	adds	r3, #1
 80037b6:	f003 021f 	and.w	r2, r3, #31
 80037ba:	4613      	mov	r3, r2
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4413      	add	r3, r2
 80037c0:	3b1e      	subs	r3, #30
 80037c2:	051b      	lsls	r3, r3, #20
 80037c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ce:	4619      	mov	r1, r3
 80037d0:	f7fe ff57 	bl	8002682 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b44      	ldr	r3, [pc, #272]	@ (80038ec <HAL_ADC_ConfigChannel+0x7c0>)
 80037da:	4013      	ands	r3, r2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d07a      	beq.n	80038d6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037e0:	4843      	ldr	r0, [pc, #268]	@ (80038f0 <HAL_ADC_ConfigChannel+0x7c4>)
 80037e2:	f7fe fe99 	bl	8002518 <LL_ADC_GetCommonPathInternalCh>
 80037e6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a41      	ldr	r2, [pc, #260]	@ (80038f4 <HAL_ADC_ConfigChannel+0x7c8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d12c      	bne.n	800384e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d126      	bne.n	800384e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a3c      	ldr	r2, [pc, #240]	@ (80038f8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_ADC_ConfigChannel+0x6e8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a3b      	ldr	r2, [pc, #236]	@ (80038fc <HAL_ADC_ConfigChannel+0x7d0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d15d      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003814:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003818:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800381c:	4619      	mov	r1, r3
 800381e:	4834      	ldr	r0, [pc, #208]	@ (80038f0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003820:	f7fe fe67 	bl	80024f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003824:	4b36      	ldr	r3, [pc, #216]	@ (8003900 <HAL_ADC_ConfigChannel+0x7d4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	099b      	lsrs	r3, r3, #6
 800382a:	4a36      	ldr	r2, [pc, #216]	@ (8003904 <HAL_ADC_ConfigChannel+0x7d8>)
 800382c:	fba2 2303 	umull	r2, r3, r2, r3
 8003830:	099b      	lsrs	r3, r3, #6
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	4613      	mov	r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800383e:	e002      	b.n	8003846 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	3b01      	subs	r3, #1
 8003844:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f9      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800384c:	e040      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a2d      	ldr	r2, [pc, #180]	@ (8003908 <HAL_ADC_ConfigChannel+0x7dc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d118      	bne.n	800388a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003858:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800385c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d112      	bne.n	800388a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a23      	ldr	r2, [pc, #140]	@ (80038f8 <HAL_ADC_ConfigChannel+0x7cc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d004      	beq.n	8003878 <HAL_ADC_ConfigChannel+0x74c>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a22      	ldr	r2, [pc, #136]	@ (80038fc <HAL_ADC_ConfigChannel+0x7d0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d12d      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003878:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800387c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003880:	4619      	mov	r1, r3
 8003882:	481b      	ldr	r0, [pc, #108]	@ (80038f0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003884:	f7fe fe35 	bl	80024f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003888:	e024      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1f      	ldr	r2, [pc, #124]	@ (800390c <HAL_ADC_ConfigChannel+0x7e0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d120      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003894:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003898:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d11a      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a14      	ldr	r2, [pc, #80]	@ (80038f8 <HAL_ADC_ConfigChannel+0x7cc>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d115      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038b2:	4619      	mov	r1, r3
 80038b4:	480e      	ldr	r0, [pc, #56]	@ (80038f0 <HAL_ADC_ConfigChannel+0x7c4>)
 80038b6:	f7fe fe1c 	bl	80024f2 <LL_ADC_SetCommonPathInternalCh>
 80038ba:	e00c      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c0:	f043 0220 	orr.w	r2, r3, #32
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80038ce:	e002      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038d0:	bf00      	nop
 80038d2:	e000      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80038de:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	37d8      	adds	r7, #216	@ 0xd8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	80080000 	.word	0x80080000
 80038f0:	50040300 	.word	0x50040300
 80038f4:	c7520000 	.word	0xc7520000
 80038f8:	50040000 	.word	0x50040000
 80038fc:	50040200 	.word	0x50040200
 8003900:	20000000 	.word	0x20000000
 8003904:	053e2d63 	.word	0x053e2d63
 8003908:	cb840000 	.word	0xcb840000
 800390c:	80000001 	.word	0x80000001

08003910 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003918:	2300      	movs	r3, #0
 800391a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe ff7b 	bl	800281c <LL_ADC_IsEnabled>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d169      	bne.n	8003a00 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	4b36      	ldr	r3, [pc, #216]	@ (8003a0c <ADC_Enable+0xfc>)
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393e:	f043 0210 	orr.w	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800394a:	f043 0201 	orr.w	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e055      	b.n	8003a02 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe ff4a 	bl	80027f4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003960:	482b      	ldr	r0, [pc, #172]	@ (8003a10 <ADC_Enable+0x100>)
 8003962:	f7fe fdd9 	bl	8002518 <LL_ADC_GetCommonPathInternalCh>
 8003966:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003968:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800396c:	2b00      	cmp	r3, #0
 800396e:	d013      	beq.n	8003998 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003970:	4b28      	ldr	r3, [pc, #160]	@ (8003a14 <ADC_Enable+0x104>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	099b      	lsrs	r3, r3, #6
 8003976:	4a28      	ldr	r2, [pc, #160]	@ (8003a18 <ADC_Enable+0x108>)
 8003978:	fba2 2303 	umull	r2, r3, r2, r3
 800397c:	099b      	lsrs	r3, r3, #6
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800398a:	e002      	b.n	8003992 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	3b01      	subs	r3, #1
 8003990:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f9      	bne.n	800398c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003998:	f7fe fd68 	bl	800246c <HAL_GetTick>
 800399c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800399e:	e028      	b.n	80039f2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe ff39 	bl	800281c <LL_ADC_IsEnabled>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d104      	bne.n	80039ba <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fe ff1d 	bl	80027f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039ba:	f7fe fd57 	bl	800246c <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d914      	bls.n	80039f2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d00d      	beq.n	80039f2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039da:	f043 0210 	orr.w	r2, r3, #16
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e6:	f043 0201 	orr.w	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e007      	b.n	8003a02 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d1cf      	bne.n	80039a0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	8000003f 	.word	0x8000003f
 8003a10:	50040300 	.word	0x50040300
 8003a14:	20000000 	.word	0x20000000
 8003a18:	053e2d63 	.word	0x053e2d63

08003a1c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d14b      	bne.n	8003ace <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a3a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d021      	beq.n	8003a94 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fe fdc2 	bl	80025de <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d032      	beq.n	8003ac6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d12b      	bne.n	8003ac6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a72:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d11f      	bne.n	8003ac6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8a:	f043 0201 	orr.w	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	655a      	str	r2, [r3, #84]	@ 0x54
 8003a92:	e018      	b.n	8003ac6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d111      	bne.n	8003ac6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d105      	bne.n	8003ac6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abe:	f043 0201 	orr.w	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f7fe fb5c 	bl	8002184 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003acc:	e00e      	b.n	8003aec <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f7ff fb1c 	bl	8003118 <HAL_ADC_ErrorCallback>
}
 8003ae0:	e004      	b.n	8003aec <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	4798      	blx	r3
}
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f7fe fb28 	bl	8002158 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2e:	f043 0204 	orr.w	r2, r3, #4
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f7ff faee 	bl	8003118 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <LL_ADC_IsEnabled>:
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <LL_ADC_IsEnabled+0x18>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <LL_ADC_IsEnabled+0x1a>
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <LL_ADC_REG_IsConversionOngoing>:
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d101      	bne.n	8003b82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003bf4:	b590      	push	{r4, r7, lr}
 8003bf6:	b09f      	sub	sp, #124	@ 0x7c
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e093      	b.n	8003d3a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003c1e:	2300      	movs	r3, #0
 8003c20:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a47      	ldr	r2, [pc, #284]	@ (8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d102      	bne.n	8003c32 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c2c:	4b46      	ldr	r3, [pc, #280]	@ (8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	e001      	b.n	8003c36 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003c32:	2300      	movs	r3, #0
 8003c34:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10b      	bne.n	8003c54 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c40:	f043 0220 	orr.w	r2, r3, #32
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e072      	b.n	8003d3a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff ff87 	bl	8003b6a <LL_ADC_REG_IsConversionOngoing>
 8003c5c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff ff81 	bl	8003b6a <LL_ADC_REG_IsConversionOngoing>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d154      	bne.n	8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003c6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d151      	bne.n	8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c74:	4b35      	ldr	r3, [pc, #212]	@ (8003d4c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003c76:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d02c      	beq.n	8003cda <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003c92:	035b      	lsls	r3, r3, #13
 8003c94:	430b      	orrs	r3, r1
 8003c96:	431a      	orrs	r2, r3
 8003c98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c9a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c9c:	4829      	ldr	r0, [pc, #164]	@ (8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c9e:	f7ff ff51 	bl	8003b44 <LL_ADC_IsEnabled>
 8003ca2:	4604      	mov	r4, r0
 8003ca4:	4828      	ldr	r0, [pc, #160]	@ (8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003ca6:	f7ff ff4d 	bl	8003b44 <LL_ADC_IsEnabled>
 8003caa:	4603      	mov	r3, r0
 8003cac:	431c      	orrs	r4, r3
 8003cae:	4828      	ldr	r0, [pc, #160]	@ (8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003cb0:	f7ff ff48 	bl	8003b44 <LL_ADC_IsEnabled>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	4323      	orrs	r3, r4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d137      	bne.n	8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003cc4:	f023 030f 	bic.w	r3, r3, #15
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	6811      	ldr	r1, [r2, #0]
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	6892      	ldr	r2, [r2, #8]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cd6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cd8:	e028      	b.n	8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003cda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ce4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ce6:	4817      	ldr	r0, [pc, #92]	@ (8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003ce8:	f7ff ff2c 	bl	8003b44 <LL_ADC_IsEnabled>
 8003cec:	4604      	mov	r4, r0
 8003cee:	4816      	ldr	r0, [pc, #88]	@ (8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003cf0:	f7ff ff28 	bl	8003b44 <LL_ADC_IsEnabled>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	431c      	orrs	r4, r3
 8003cf8:	4815      	ldr	r0, [pc, #84]	@ (8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003cfa:	f7ff ff23 	bl	8003b44 <LL_ADC_IsEnabled>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4323      	orrs	r3, r4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d112      	bne.n	8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d0e:	f023 030f 	bic.w	r3, r3, #15
 8003d12:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d14:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d16:	e009      	b.n	8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1c:	f043 0220 	orr.w	r2, r3, #32
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003d2a:	e000      	b.n	8003d2e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d36:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	377c      	adds	r7, #124	@ 0x7c
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd90      	pop	{r4, r7, pc}
 8003d42:	bf00      	nop
 8003d44:	50040000 	.word	0x50040000
 8003d48:	50040100 	.word	0x50040100
 8003d4c:	50040300 	.word	0x50040300
 8003d50:	50040200 	.word	0x50040200

08003d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d64:	4b0c      	ldr	r3, [pc, #48]	@ (8003d98 <__NVIC_SetPriorityGrouping+0x44>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d70:	4013      	ands	r3, r2
 8003d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d86:	4a04      	ldr	r2, [pc, #16]	@ (8003d98 <__NVIC_SetPriorityGrouping+0x44>)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	60d3      	str	r3, [r2, #12]
}
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	e000ed00 	.word	0xe000ed00

08003d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003da0:	4b04      	ldr	r3, [pc, #16]	@ (8003db4 <__NVIC_GetPriorityGrouping+0x18>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	0a1b      	lsrs	r3, r3, #8
 8003da6:	f003 0307 	and.w	r3, r3, #7
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	db0b      	blt.n	8003de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	f003 021f 	and.w	r2, r3, #31
 8003dd0:	4907      	ldr	r1, [pc, #28]	@ (8003df0 <__NVIC_EnableIRQ+0x38>)
 8003dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	2001      	movs	r0, #1
 8003dda:	fa00 f202 	lsl.w	r2, r0, r2
 8003dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	e000e100 	.word	0xe000e100

08003df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	6039      	str	r1, [r7, #0]
 8003dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	db0a      	blt.n	8003e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	490c      	ldr	r1, [pc, #48]	@ (8003e40 <__NVIC_SetPriority+0x4c>)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	0112      	lsls	r2, r2, #4
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	440b      	add	r3, r1
 8003e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e1c:	e00a      	b.n	8003e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	4908      	ldr	r1, [pc, #32]	@ (8003e44 <__NVIC_SetPriority+0x50>)
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	3b04      	subs	r3, #4
 8003e2c:	0112      	lsls	r2, r2, #4
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	440b      	add	r3, r1
 8003e32:	761a      	strb	r2, [r3, #24]
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	e000e100 	.word	0xe000e100
 8003e44:	e000ed00 	.word	0xe000ed00

08003e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b089      	sub	sp, #36	@ 0x24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f1c3 0307 	rsb	r3, r3, #7
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	bf28      	it	cs
 8003e66:	2304      	movcs	r3, #4
 8003e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	2b06      	cmp	r3, #6
 8003e70:	d902      	bls.n	8003e78 <NVIC_EncodePriority+0x30>
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	3b03      	subs	r3, #3
 8003e76:	e000      	b.n	8003e7a <NVIC_EncodePriority+0x32>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43da      	mvns	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e90:	f04f 31ff 	mov.w	r1, #4294967295
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9a:	43d9      	mvns	r1, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea0:	4313      	orrs	r3, r2
         );
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3724      	adds	r7, #36	@ 0x24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff ff4c 	bl	8003d54 <__NVIC_SetPriorityGrouping>
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ed6:	f7ff ff61 	bl	8003d9c <__NVIC_GetPriorityGrouping>
 8003eda:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	6978      	ldr	r0, [r7, #20]
 8003ee2:	f7ff ffb1 	bl	8003e48 <NVIC_EncodePriority>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eec:	4611      	mov	r1, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff ff80 	bl	8003df4 <__NVIC_SetPriority>
}
 8003ef4:	bf00      	nop
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff ff54 	bl	8003db8 <__NVIC_EnableIRQ>
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e0ac      	b.n	8004084 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 f8b2 	bl	8004098 <DFSDM_GetChannelFromInstance>
 8003f34:	4603      	mov	r3, r0
 8003f36:	4a55      	ldr	r2, [pc, #340]	@ (800408c <HAL_DFSDM_ChannelInit+0x174>)
 8003f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e09f      	b.n	8004084 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7fd fd9b 	bl	8001a80 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003f4a:	4b51      	ldr	r3, [pc, #324]	@ (8004090 <HAL_DFSDM_ChannelInit+0x178>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	4a4f      	ldr	r2, [pc, #316]	@ (8004090 <HAL_DFSDM_ChannelInit+0x178>)
 8003f52:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003f54:	4b4e      	ldr	r3, [pc, #312]	@ (8004090 <HAL_DFSDM_ChannelInit+0x178>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d125      	bne.n	8003fa8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003f5c:	4b4d      	ldr	r3, [pc, #308]	@ (8004094 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a4c      	ldr	r2, [pc, #304]	@ (8004094 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f62:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f66:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003f68:	4b4a      	ldr	r3, [pc, #296]	@ (8004094 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4948      	ldr	r1, [pc, #288]	@ (8004094 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003f76:	4b47      	ldr	r3, [pc, #284]	@ (8004094 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a46      	ldr	r2, [pc, #280]	@ (8004094 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f7c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003f80:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	791b      	ldrb	r3, [r3, #4]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d108      	bne.n	8003f9c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003f8a:	4b42      	ldr	r3, [pc, #264]	@ (8004094 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	493f      	ldr	r1, [pc, #252]	@ (8004094 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003f9c:	4b3d      	ldr	r3, [pc, #244]	@ (8004094 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a3c      	ldr	r2, [pc, #240]	@ (8004094 <HAL_DFSDM_ChannelInit+0x17c>)
 8003fa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fa6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003fb6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6819      	ldr	r1, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003fc6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003fcc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 020f 	bic.w	r2, r2, #15
 8003fe4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6819      	ldr	r1, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800400c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6899      	ldr	r1, [r3, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	3b01      	subs	r3, #1
 800401e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f002 0207 	and.w	r2, r2, #7
 8004038:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6859      	ldr	r1, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004044:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004064:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 f810 	bl	8004098 <DFSDM_GetChannelFromInstance>
 8004078:	4602      	mov	r2, r0
 800407a:	4904      	ldr	r1, [pc, #16]	@ (800408c <HAL_DFSDM_ChannelInit+0x174>)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20000c7c 	.word	0x20000c7c
 8004090:	20000c78 	.word	0x20000c78
 8004094:	40016000 	.word	0x40016000

08004098 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004114 <DFSDM_GetChannelFromInstance+0x7c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d102      	bne.n	80040ae <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	e02b      	b.n	8004106 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a19      	ldr	r2, [pc, #100]	@ (8004118 <DFSDM_GetChannelFromInstance+0x80>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d102      	bne.n	80040bc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80040b6:	2301      	movs	r3, #1
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	e024      	b.n	8004106 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a17      	ldr	r2, [pc, #92]	@ (800411c <DFSDM_GetChannelFromInstance+0x84>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d102      	bne.n	80040ca <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80040c4:	2302      	movs	r3, #2
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	e01d      	b.n	8004106 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a14      	ldr	r2, [pc, #80]	@ (8004120 <DFSDM_GetChannelFromInstance+0x88>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d102      	bne.n	80040d8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80040d2:	2304      	movs	r3, #4
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	e016      	b.n	8004106 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a12      	ldr	r2, [pc, #72]	@ (8004124 <DFSDM_GetChannelFromInstance+0x8c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d102      	bne.n	80040e6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80040e0:	2305      	movs	r3, #5
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e00f      	b.n	8004106 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a0f      	ldr	r2, [pc, #60]	@ (8004128 <DFSDM_GetChannelFromInstance+0x90>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d102      	bne.n	80040f4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80040ee:	2306      	movs	r3, #6
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	e008      	b.n	8004106 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a0d      	ldr	r2, [pc, #52]	@ (800412c <DFSDM_GetChannelFromInstance+0x94>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d102      	bne.n	8004102 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80040fc:	2307      	movs	r3, #7
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	e001      	b.n	8004106 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004102:	2303      	movs	r3, #3
 8004104:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004106:	68fb      	ldr	r3, [r7, #12]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	40016000 	.word	0x40016000
 8004118:	40016020 	.word	0x40016020
 800411c:	40016040 	.word	0x40016040
 8004120:	40016080 	.word	0x40016080
 8004124:	400160a0 	.word	0x400160a0
 8004128:	400160c0 	.word	0x400160c0
 800412c:	400160e0 	.word	0x400160e0

08004130 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e098      	b.n	8004274 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	4b4d      	ldr	r3, [pc, #308]	@ (8004280 <HAL_DMA_Init+0x150>)
 800414a:	429a      	cmp	r2, r3
 800414c:	d80f      	bhi.n	800416e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	4b4b      	ldr	r3, [pc, #300]	@ (8004284 <HAL_DMA_Init+0x154>)
 8004156:	4413      	add	r3, r2
 8004158:	4a4b      	ldr	r2, [pc, #300]	@ (8004288 <HAL_DMA_Init+0x158>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	091b      	lsrs	r3, r3, #4
 8004160:	009a      	lsls	r2, r3, #2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a48      	ldr	r2, [pc, #288]	@ (800428c <HAL_DMA_Init+0x15c>)
 800416a:	641a      	str	r2, [r3, #64]	@ 0x40
 800416c:	e00e      	b.n	800418c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	4b46      	ldr	r3, [pc, #280]	@ (8004290 <HAL_DMA_Init+0x160>)
 8004176:	4413      	add	r3, r2
 8004178:	4a43      	ldr	r2, [pc, #268]	@ (8004288 <HAL_DMA_Init+0x158>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	009a      	lsls	r2, r3, #2
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a42      	ldr	r2, [pc, #264]	@ (8004294 <HAL_DMA_Init+0x164>)
 800418a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80041a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80041b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041e6:	d039      	beq.n	800425c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ec:	4a27      	ldr	r2, [pc, #156]	@ (800428c <HAL_DMA_Init+0x15c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d11a      	bne.n	8004228 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80041f2:	4b29      	ldr	r3, [pc, #164]	@ (8004298 <HAL_DMA_Init+0x168>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fa:	f003 031c 	and.w	r3, r3, #28
 80041fe:	210f      	movs	r1, #15
 8004200:	fa01 f303 	lsl.w	r3, r1, r3
 8004204:	43db      	mvns	r3, r3
 8004206:	4924      	ldr	r1, [pc, #144]	@ (8004298 <HAL_DMA_Init+0x168>)
 8004208:	4013      	ands	r3, r2
 800420a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800420c:	4b22      	ldr	r3, [pc, #136]	@ (8004298 <HAL_DMA_Init+0x168>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6859      	ldr	r1, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004218:	f003 031c 	and.w	r3, r3, #28
 800421c:	fa01 f303 	lsl.w	r3, r1, r3
 8004220:	491d      	ldr	r1, [pc, #116]	@ (8004298 <HAL_DMA_Init+0x168>)
 8004222:	4313      	orrs	r3, r2
 8004224:	600b      	str	r3, [r1, #0]
 8004226:	e019      	b.n	800425c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004228:	4b1c      	ldr	r3, [pc, #112]	@ (800429c <HAL_DMA_Init+0x16c>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004230:	f003 031c 	and.w	r3, r3, #28
 8004234:	210f      	movs	r1, #15
 8004236:	fa01 f303 	lsl.w	r3, r1, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	4917      	ldr	r1, [pc, #92]	@ (800429c <HAL_DMA_Init+0x16c>)
 800423e:	4013      	ands	r3, r2
 8004240:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004242:	4b16      	ldr	r3, [pc, #88]	@ (800429c <HAL_DMA_Init+0x16c>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6859      	ldr	r1, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424e:	f003 031c 	and.w	r3, r3, #28
 8004252:	fa01 f303 	lsl.w	r3, r1, r3
 8004256:	4911      	ldr	r1, [pc, #68]	@ (800429c <HAL_DMA_Init+0x16c>)
 8004258:	4313      	orrs	r3, r2
 800425a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	40020407 	.word	0x40020407
 8004284:	bffdfff8 	.word	0xbffdfff8
 8004288:	cccccccd 	.word	0xcccccccd
 800428c:	40020000 	.word	0x40020000
 8004290:	bffdfbf8 	.word	0xbffdfbf8
 8004294:	40020400 	.word	0x40020400
 8004298:	400200a8 	.word	0x400200a8
 800429c:	400204a8 	.word	0x400204a8

080042a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_DMA_Start_IT+0x20>
 80042bc:	2302      	movs	r3, #2
 80042be:	e04b      	b.n	8004358 <HAL_DMA_Start_IT+0xb8>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d13a      	bne.n	800434a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f8e0 	bl	80044be <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 020e 	orr.w	r2, r2, #14
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	e00f      	b.n	8004338 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0204 	bic.w	r2, r2, #4
 8004326:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 020a 	orr.w	r2, r2, #10
 8004336:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	e005      	b.n	8004356 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004352:	2302      	movs	r3, #2
 8004354:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004356:	7dfb      	ldrb	r3, [r7, #23]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437c:	f003 031c 	and.w	r3, r3, #28
 8004380:	2204      	movs	r2, #4
 8004382:	409a      	lsls	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4013      	ands	r3, r2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d026      	beq.n	80043da <HAL_DMA_IRQHandler+0x7a>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f003 0304 	and.w	r3, r3, #4
 8004392:	2b00      	cmp	r3, #0
 8004394:	d021      	beq.n	80043da <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d107      	bne.n	80043b4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0204 	bic.w	r2, r2, #4
 80043b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b8:	f003 021c 	and.w	r2, r3, #28
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c0:	2104      	movs	r1, #4
 80043c2:	fa01 f202 	lsl.w	r2, r1, r2
 80043c6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d071      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80043d8:	e06c      	b.n	80044b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043de:	f003 031c 	and.w	r3, r3, #28
 80043e2:	2202      	movs	r2, #2
 80043e4:	409a      	lsls	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4013      	ands	r3, r2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d02e      	beq.n	800444c <HAL_DMA_IRQHandler+0xec>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d029      	beq.n	800444c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0320 	and.w	r3, r3, #32
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10b      	bne.n	800441e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 020a 	bic.w	r2, r2, #10
 8004414:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004422:	f003 021c 	and.w	r2, r3, #28
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	2102      	movs	r1, #2
 800442c:	fa01 f202 	lsl.w	r2, r1, r2
 8004430:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443e:	2b00      	cmp	r3, #0
 8004440:	d038      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800444a:	e033      	b.n	80044b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004450:	f003 031c 	and.w	r3, r3, #28
 8004454:	2208      	movs	r2, #8
 8004456:	409a      	lsls	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d02a      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x156>
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d025      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 020e 	bic.w	r2, r2, #14
 8004478:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800447e:	f003 021c 	and.w	r2, r3, #28
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	2101      	movs	r1, #1
 8004488:	fa01 f202 	lsl.w	r2, r1, r2
 800448c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d004      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop
}
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044be:	b480      	push	{r7}
 80044c0:	b085      	sub	sp, #20
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
 80044ca:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d0:	f003 021c 	and.w	r2, r3, #28
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	2101      	movs	r1, #1
 80044da:	fa01 f202 	lsl.w	r2, r1, r2
 80044de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d108      	bne.n	8004502 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004500:	e007      	b.n	8004512 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	60da      	str	r2, [r3, #12]
}
 8004512:	bf00      	nop
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
	...

08004520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800452e:	e17f      	b.n	8004830 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	2101      	movs	r1, #1
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	fa01 f303 	lsl.w	r3, r1, r3
 800453c:	4013      	ands	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 8171 	beq.w	800482a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b01      	cmp	r3, #1
 8004552:	d005      	beq.n	8004560 <HAL_GPIO_Init+0x40>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d130      	bne.n	80045c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	2203      	movs	r2, #3
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	43db      	mvns	r3, r3
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004596:	2201      	movs	r2, #1
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	f003 0201 	and.w	r2, r3, #1
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d118      	bne.n	8004600 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80045d4:	2201      	movs	r2, #1
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	43db      	mvns	r3, r3
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4013      	ands	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	08db      	lsrs	r3, r3, #3
 80045ea:	f003 0201 	and.w	r2, r3, #1
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	2b03      	cmp	r3, #3
 800460a:	d017      	beq.n	800463c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	2203      	movs	r2, #3
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4013      	ands	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d123      	bne.n	8004690 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	08da      	lsrs	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3208      	adds	r2, #8
 8004650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004654:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	220f      	movs	r2, #15
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4013      	ands	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	08da      	lsrs	r2, r3, #3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3208      	adds	r2, #8
 800468a:	6939      	ldr	r1, [r7, #16]
 800468c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	2203      	movs	r2, #3
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4013      	ands	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 0203 	and.w	r2, r3, #3
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80ac 	beq.w	800482a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004850 <HAL_GPIO_Init+0x330>)
 80046d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004850 <HAL_GPIO_Init+0x330>)
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80046de:	4b5c      	ldr	r3, [pc, #368]	@ (8004850 <HAL_GPIO_Init+0x330>)
 80046e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	60bb      	str	r3, [r7, #8]
 80046e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046ea:	4a5a      	ldr	r2, [pc, #360]	@ (8004854 <HAL_GPIO_Init+0x334>)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	089b      	lsrs	r3, r3, #2
 80046f0:	3302      	adds	r3, #2
 80046f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	220f      	movs	r2, #15
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43db      	mvns	r3, r3
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4013      	ands	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004714:	d025      	beq.n	8004762 <HAL_GPIO_Init+0x242>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a4f      	ldr	r2, [pc, #316]	@ (8004858 <HAL_GPIO_Init+0x338>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d01f      	beq.n	800475e <HAL_GPIO_Init+0x23e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a4e      	ldr	r2, [pc, #312]	@ (800485c <HAL_GPIO_Init+0x33c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d019      	beq.n	800475a <HAL_GPIO_Init+0x23a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a4d      	ldr	r2, [pc, #308]	@ (8004860 <HAL_GPIO_Init+0x340>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d013      	beq.n	8004756 <HAL_GPIO_Init+0x236>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a4c      	ldr	r2, [pc, #304]	@ (8004864 <HAL_GPIO_Init+0x344>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00d      	beq.n	8004752 <HAL_GPIO_Init+0x232>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a4b      	ldr	r2, [pc, #300]	@ (8004868 <HAL_GPIO_Init+0x348>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d007      	beq.n	800474e <HAL_GPIO_Init+0x22e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a4a      	ldr	r2, [pc, #296]	@ (800486c <HAL_GPIO_Init+0x34c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d101      	bne.n	800474a <HAL_GPIO_Init+0x22a>
 8004746:	2306      	movs	r3, #6
 8004748:	e00c      	b.n	8004764 <HAL_GPIO_Init+0x244>
 800474a:	2307      	movs	r3, #7
 800474c:	e00a      	b.n	8004764 <HAL_GPIO_Init+0x244>
 800474e:	2305      	movs	r3, #5
 8004750:	e008      	b.n	8004764 <HAL_GPIO_Init+0x244>
 8004752:	2304      	movs	r3, #4
 8004754:	e006      	b.n	8004764 <HAL_GPIO_Init+0x244>
 8004756:	2303      	movs	r3, #3
 8004758:	e004      	b.n	8004764 <HAL_GPIO_Init+0x244>
 800475a:	2302      	movs	r3, #2
 800475c:	e002      	b.n	8004764 <HAL_GPIO_Init+0x244>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <HAL_GPIO_Init+0x244>
 8004762:	2300      	movs	r3, #0
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	f002 0203 	and.w	r2, r2, #3
 800476a:	0092      	lsls	r2, r2, #2
 800476c:	4093      	lsls	r3, r2
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004774:	4937      	ldr	r1, [pc, #220]	@ (8004854 <HAL_GPIO_Init+0x334>)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	089b      	lsrs	r3, r3, #2
 800477a:	3302      	adds	r3, #2
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004782:	4b3b      	ldr	r3, [pc, #236]	@ (8004870 <HAL_GPIO_Init+0x350>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	43db      	mvns	r3, r3
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4013      	ands	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047a6:	4a32      	ldr	r2, [pc, #200]	@ (8004870 <HAL_GPIO_Init+0x350>)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047ac:	4b30      	ldr	r3, [pc, #192]	@ (8004870 <HAL_GPIO_Init+0x350>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	43db      	mvns	r3, r3
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4013      	ands	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047d0:	4a27      	ldr	r2, [pc, #156]	@ (8004870 <HAL_GPIO_Init+0x350>)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80047d6:	4b26      	ldr	r3, [pc, #152]	@ (8004870 <HAL_GPIO_Init+0x350>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	43db      	mvns	r3, r3
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4013      	ands	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004870 <HAL_GPIO_Init+0x350>)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004800:	4b1b      	ldr	r3, [pc, #108]	@ (8004870 <HAL_GPIO_Init+0x350>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	43db      	mvns	r3, r3
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4013      	ands	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004824:	4a12      	ldr	r2, [pc, #72]	@ (8004870 <HAL_GPIO_Init+0x350>)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	3301      	adds	r3, #1
 800482e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	fa22 f303 	lsr.w	r3, r2, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	f47f ae78 	bne.w	8004530 <HAL_GPIO_Init+0x10>
  }
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40021000 	.word	0x40021000
 8004854:	40010000 	.word	0x40010000
 8004858:	48000400 	.word	0x48000400
 800485c:	48000800 	.word	0x48000800
 8004860:	48000c00 	.word	0x48000c00
 8004864:	48001000 	.word	0x48001000
 8004868:	48001400 	.word	0x48001400
 800486c:	48001800 	.word	0x48001800
 8004870:	40010400 	.word	0x40010400

08004874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	807b      	strh	r3, [r7, #2]
 8004880:	4613      	mov	r3, r2
 8004882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004884:	787b      	ldrb	r3, [r7, #1]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800488a:	887a      	ldrh	r2, [r7, #2]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004890:	e002      	b.n	8004898 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004892:	887a      	ldrh	r2, [r7, #2]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048ae:	4b08      	ldr	r3, [pc, #32]	@ (80048d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	88fb      	ldrh	r3, [r7, #6]
 80048b4:	4013      	ands	r3, r2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d006      	beq.n	80048c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048ba:	4a05      	ldr	r2, [pc, #20]	@ (80048d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048c0:	88fb      	ldrh	r3, [r7, #6]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f806 	bl	80048d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80048c8:	bf00      	nop
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40010400 	.word	0x40010400

080048d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	4603      	mov	r3, r0
 80048dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e08d      	b.n	8004a18 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7fd f919 	bl	8001b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2224      	movs	r2, #36	@ 0x24
 800491a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0201 	bic.w	r2, r2, #1
 800492c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800493a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800494a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d107      	bne.n	8004964 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004960:	609a      	str	r2, [r3, #8]
 8004962:	e006      	b.n	8004972 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004970:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d108      	bne.n	800498c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004988:	605a      	str	r2, [r3, #4]
 800498a:	e007      	b.n	800499c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800499a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ae:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049be:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69d9      	ldr	r1, [r3, #28]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1a      	ldr	r2, [r3, #32]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0201 	orr.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d138      	bne.n	8004aa8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e032      	b.n	8004aaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2224      	movs	r2, #36	@ 0x24
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6819      	ldr	r1, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0201 	orr.w	r2, r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	e000      	b.n	8004aaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004aa8:	2302      	movs	r3, #2
  }
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b085      	sub	sp, #20
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	d139      	bne.n	8004b40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e033      	b.n	8004b42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2224      	movs	r2, #36	@ 0x24
 8004ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e000      	b.n	8004b42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b40:	2302      	movs	r3, #2
  }
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b086      	sub	sp, #24
 8004b52:	af02      	add	r7, sp, #8
 8004b54:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e101      	b.n	8004d64 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7fd f9b1 	bl	8001edc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f003 f8d7 	bl	8007d40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	7c1a      	ldrb	r2, [r3, #16]
 8004b9a:	f88d 2000 	strb.w	r2, [sp]
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ba2:	f003 f8a0 	bl	8007ce6 <USB_CoreInit>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0d5      	b.n	8004d64 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f003 f8cf 	bl	8007d62 <USB_SetCurrentMode>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e0c6      	b.n	8004d64 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	73fb      	strb	r3, [r7, #15]
 8004bda:	e04a      	b.n	8004c72 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004bdc:	7bfa      	ldrb	r2, [r7, #15]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	3315      	adds	r3, #21
 8004bec:	2201      	movs	r2, #1
 8004bee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bf0:	7bfa      	ldrb	r2, [r7, #15]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	3314      	adds	r3, #20
 8004c00:	7bfa      	ldrb	r2, [r7, #15]
 8004c02:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c04:	7bfa      	ldrb	r2, [r7, #15]
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
 8004c08:	b298      	uxth	r0, r3
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	332e      	adds	r3, #46	@ 0x2e
 8004c18:	4602      	mov	r2, r0
 8004c1a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c1c:	7bfa      	ldrb	r2, [r7, #15]
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	4613      	mov	r3, r2
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	3318      	adds	r3, #24
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c30:	7bfa      	ldrb	r2, [r7, #15]
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	331c      	adds	r3, #28
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c44:	7bfa      	ldrb	r2, [r7, #15]
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	3320      	adds	r3, #32
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c58:	7bfa      	ldrb	r2, [r7, #15]
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	3324      	adds	r3, #36	@ 0x24
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	73fb      	strb	r3, [r7, #15]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	791b      	ldrb	r3, [r3, #4]
 8004c76:	7bfa      	ldrb	r2, [r7, #15]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d3af      	bcc.n	8004bdc <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	73fb      	strb	r3, [r7, #15]
 8004c80:	e044      	b.n	8004d0c <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c82:	7bfa      	ldrb	r2, [r7, #15]
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004c94:	2200      	movs	r2, #0
 8004c96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c98:	7bfa      	ldrb	r2, [r7, #15]
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004caa:	7bfa      	ldrb	r2, [r7, #15]
 8004cac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cae:	7bfa      	ldrb	r2, [r7, #15]
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	440b      	add	r3, r1
 8004cbc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cc4:	7bfa      	ldrb	r2, [r7, #15]
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004cda:	7bfa      	ldrb	r2, [r7, #15]
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cf0:	7bfa      	ldrb	r2, [r7, #15]
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	440b      	add	r3, r1
 8004cfe:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	73fb      	strb	r3, [r7, #15]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	791b      	ldrb	r3, [r3, #4]
 8004d10:	7bfa      	ldrb	r2, [r7, #15]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d3b5      	bcc.n	8004c82 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	7c1a      	ldrb	r2, [r3, #16]
 8004d1e:	f88d 2000 	strb.w	r2, [sp]
 8004d22:	3304      	adds	r3, #4
 8004d24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d26:	f003 f869 	bl	8007dfc <USB_DevInit>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e013      	b.n	8004d64 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	7b1b      	ldrb	r3, [r3, #12]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d102      	bne.n	8004d58 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f80a 	bl	8004d6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f003 fa0e 	bl	800817e <USB_DevDisconnect>

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	f043 0303 	orr.w	r3, r3, #3
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004db8:	4b05      	ldr	r3, [pc, #20]	@ (8004dd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a04      	ldr	r2, [pc, #16]	@ (8004dd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dc2:	6013      	str	r3, [r2, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40007000 	.word	0x40007000

08004dd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004dd8:	4b04      	ldr	r3, [pc, #16]	@ (8004dec <HAL_PWREx_GetVoltageRange+0x18>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40007000 	.word	0x40007000

08004df0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dfe:	d130      	bne.n	8004e62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e00:	4b23      	ldr	r3, [pc, #140]	@ (8004e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e0c:	d038      	beq.n	8004e80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e0e:	4b20      	ldr	r3, [pc, #128]	@ (8004e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e16:	4a1e      	ldr	r2, [pc, #120]	@ (8004e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004e94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2232      	movs	r2, #50	@ 0x32
 8004e24:	fb02 f303 	mul.w	r3, r2, r3
 8004e28:	4a1b      	ldr	r2, [pc, #108]	@ (8004e98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2e:	0c9b      	lsrs	r3, r3, #18
 8004e30:	3301      	adds	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e34:	e002      	b.n	8004e3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e3c:	4b14      	ldr	r3, [pc, #80]	@ (8004e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e48:	d102      	bne.n	8004e50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1f2      	bne.n	8004e36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e50:	4b0f      	ldr	r3, [pc, #60]	@ (8004e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e5c:	d110      	bne.n	8004e80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e00f      	b.n	8004e82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e62:	4b0b      	ldr	r3, [pc, #44]	@ (8004e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e6e:	d007      	beq.n	8004e80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e70:	4b07      	ldr	r3, [pc, #28]	@ (8004e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e78:	4a05      	ldr	r2, [pc, #20]	@ (8004e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40007000 	.word	0x40007000
 8004e94:	20000000 	.word	0x20000000
 8004e98:	431bde83 	.word	0x431bde83

08004e9c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004ea0:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4a04      	ldr	r2, [pc, #16]	@ (8004eb8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ea6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004eaa:	6053      	str	r3, [r2, #4]
}
 8004eac:	bf00      	nop
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40007000 	.word	0x40007000

08004ebc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004ec4:	f7fd fad2 	bl	800246c <HAL_GetTick>
 8004ec8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e063      	b.n	8004f9c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10b      	bne.n	8004ef8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7fc fe8b 	bl	8001c04 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004eee:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f858 	bl	8004fa8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	021a      	lsls	r2, r3, #8
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2120      	movs	r1, #32
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f850 	bl	8004fc4 <QSPI_WaitFlagStateUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004f28:	7afb      	ldrb	r3, [r7, #11]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d131      	bne.n	8004f92 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004f38:	f023 0310 	bic.w	r3, r3, #16
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6852      	ldr	r2, [r2, #4]
 8004f40:	0611      	lsls	r1, r2, #24
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	68d2      	ldr	r2, [r2, #12]
 8004f46:	4311      	orrs	r1, r2
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	430b      	orrs	r3, r1
 8004f4e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	4b13      	ldr	r3, [pc, #76]	@ (8004fa4 <HAL_QSPI_Init+0xe8>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6912      	ldr	r2, [r2, #16]
 8004f5e:	0411      	lsls	r1, r2, #16
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6952      	ldr	r2, [r2, #20]
 8004f64:	4311      	orrs	r1, r2
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6992      	ldr	r2, [r2, #24]
 8004f6a:	4311      	orrs	r1, r2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	430b      	orrs	r3, r1
 8004f72:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0201 	orr.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8004f9a:	7afb      	ldrb	r3, [r7, #11]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	ffe0f8fe 	.word	0xffe0f8fe

08004fa8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004fd4:	e01a      	b.n	800500c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fdc:	d016      	beq.n	800500c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fde:	f7fd fa45 	bl	800246c <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d302      	bcc.n	8004ff4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10b      	bne.n	800500c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2204      	movs	r2, #4
 8004ff8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005000:	f043 0201 	orr.w	r2, r3, #1
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e00e      	b.n	800502a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	4013      	ands	r3, r2
 8005016:	2b00      	cmp	r3, #0
 8005018:	bf14      	ite	ne
 800501a:	2301      	movne	r3, #1
 800501c:	2300      	moveq	r3, #0
 800501e:	b2db      	uxtb	r3, r3
 8005020:	461a      	mov	r2, r3
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	429a      	cmp	r2, r3
 8005026:	d1d6      	bne.n	8004fd6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e3ca      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005046:	4b97      	ldr	r3, [pc, #604]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 030c 	and.w	r3, r3, #12
 800504e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005050:	4b94      	ldr	r3, [pc, #592]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0303 	and.w	r3, r3, #3
 8005058:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 80e4 	beq.w	8005230 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d007      	beq.n	800507e <HAL_RCC_OscConfig+0x4a>
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b0c      	cmp	r3, #12
 8005072:	f040 808b 	bne.w	800518c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2b01      	cmp	r3, #1
 800507a:	f040 8087 	bne.w	800518c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800507e:	4b89      	ldr	r3, [pc, #548]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d005      	beq.n	8005096 <HAL_RCC_OscConfig+0x62>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e3a2      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1a      	ldr	r2, [r3, #32]
 800509a:	4b82      	ldr	r3, [pc, #520]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d004      	beq.n	80050b0 <HAL_RCC_OscConfig+0x7c>
 80050a6:	4b7f      	ldr	r3, [pc, #508]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050ae:	e005      	b.n	80050bc <HAL_RCC_OscConfig+0x88>
 80050b0:	4b7c      	ldr	r3, [pc, #496]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 80050b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050b6:	091b      	lsrs	r3, r3, #4
 80050b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050bc:	4293      	cmp	r3, r2
 80050be:	d223      	bcs.n	8005108 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fd87 	bl	8005bd8 <RCC_SetFlashLatencyFromMSIRange>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e383      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050d4:	4b73      	ldr	r3, [pc, #460]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a72      	ldr	r2, [pc, #456]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 80050da:	f043 0308 	orr.w	r3, r3, #8
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	4b70      	ldr	r3, [pc, #448]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	496d      	ldr	r1, [pc, #436]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050f2:	4b6c      	ldr	r3, [pc, #432]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	4968      	ldr	r1, [pc, #416]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 8005102:	4313      	orrs	r3, r2
 8005104:	604b      	str	r3, [r1, #4]
 8005106:	e025      	b.n	8005154 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005108:	4b66      	ldr	r3, [pc, #408]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a65      	ldr	r2, [pc, #404]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 800510e:	f043 0308 	orr.w	r3, r3, #8
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	4b63      	ldr	r3, [pc, #396]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	4960      	ldr	r1, [pc, #384]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 8005122:	4313      	orrs	r3, r2
 8005124:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005126:	4b5f      	ldr	r3, [pc, #380]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	495b      	ldr	r1, [pc, #364]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 8005136:	4313      	orrs	r3, r2
 8005138:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d109      	bne.n	8005154 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fd47 	bl	8005bd8 <RCC_SetFlashLatencyFromMSIRange>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e343      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005154:	f000 fc4a 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 8005158:	4602      	mov	r2, r0
 800515a:	4b52      	ldr	r3, [pc, #328]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	091b      	lsrs	r3, r3, #4
 8005160:	f003 030f 	and.w	r3, r3, #15
 8005164:	4950      	ldr	r1, [pc, #320]	@ (80052a8 <HAL_RCC_OscConfig+0x274>)
 8005166:	5ccb      	ldrb	r3, [r1, r3]
 8005168:	f003 031f 	and.w	r3, r3, #31
 800516c:	fa22 f303 	lsr.w	r3, r2, r3
 8005170:	4a4e      	ldr	r2, [pc, #312]	@ (80052ac <HAL_RCC_OscConfig+0x278>)
 8005172:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005174:	4b4e      	ldr	r3, [pc, #312]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4618      	mov	r0, r3
 800517a:	f7fc ff1b 	bl	8001fb4 <HAL_InitTick>
 800517e:	4603      	mov	r3, r0
 8005180:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d052      	beq.n	800522e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005188:	7bfb      	ldrb	r3, [r7, #15]
 800518a:	e327      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d032      	beq.n	80051fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005194:	4b43      	ldr	r3, [pc, #268]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a42      	ldr	r2, [pc, #264]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051a0:	f7fd f964 	bl	800246c <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051a8:	f7fd f960 	bl	800246c <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e310      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051ba:	4b3a      	ldr	r3, [pc, #232]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0f0      	beq.n	80051a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051c6:	4b37      	ldr	r3, [pc, #220]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a36      	ldr	r2, [pc, #216]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 80051cc:	f043 0308 	orr.w	r3, r3, #8
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	4b34      	ldr	r3, [pc, #208]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	4931      	ldr	r1, [pc, #196]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051e4:	4b2f      	ldr	r3, [pc, #188]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	021b      	lsls	r3, r3, #8
 80051f2:	492c      	ldr	r1, [pc, #176]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	604b      	str	r3, [r1, #4]
 80051f8:	e01a      	b.n	8005230 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051fa:	4b2a      	ldr	r3, [pc, #168]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a29      	ldr	r2, [pc, #164]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 8005200:	f023 0301 	bic.w	r3, r3, #1
 8005204:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005206:	f7fd f931 	bl	800246c <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800520e:	f7fd f92d 	bl	800246c <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e2dd      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005220:	4b20      	ldr	r3, [pc, #128]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f0      	bne.n	800520e <HAL_RCC_OscConfig+0x1da>
 800522c:	e000      	b.n	8005230 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800522e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d074      	beq.n	8005326 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b08      	cmp	r3, #8
 8005240:	d005      	beq.n	800524e <HAL_RCC_OscConfig+0x21a>
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b0c      	cmp	r3, #12
 8005246:	d10e      	bne.n	8005266 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2b03      	cmp	r3, #3
 800524c:	d10b      	bne.n	8005266 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800524e:	4b15      	ldr	r3, [pc, #84]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d064      	beq.n	8005324 <HAL_RCC_OscConfig+0x2f0>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d160      	bne.n	8005324 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e2ba      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526e:	d106      	bne.n	800527e <HAL_RCC_OscConfig+0x24a>
 8005270:	4b0c      	ldr	r3, [pc, #48]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a0b      	ldr	r2, [pc, #44]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 8005276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	e026      	b.n	80052cc <HAL_RCC_OscConfig+0x298>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005286:	d115      	bne.n	80052b4 <HAL_RCC_OscConfig+0x280>
 8005288:	4b06      	ldr	r3, [pc, #24]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a05      	ldr	r2, [pc, #20]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 800528e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	4b03      	ldr	r3, [pc, #12]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a02      	ldr	r2, [pc, #8]	@ (80052a4 <HAL_RCC_OscConfig+0x270>)
 800529a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	e014      	b.n	80052cc <HAL_RCC_OscConfig+0x298>
 80052a2:	bf00      	nop
 80052a4:	40021000 	.word	0x40021000
 80052a8:	0800e54c 	.word	0x0800e54c
 80052ac:	20000000 	.word	0x20000000
 80052b0:	20000004 	.word	0x20000004
 80052b4:	4ba0      	ldr	r3, [pc, #640]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a9f      	ldr	r2, [pc, #636]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 80052ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	4b9d      	ldr	r3, [pc, #628]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a9c      	ldr	r2, [pc, #624]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 80052c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d013      	beq.n	80052fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d4:	f7fd f8ca 	bl	800246c <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052dc:	f7fd f8c6 	bl	800246c <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b64      	cmp	r3, #100	@ 0x64
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e276      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052ee:	4b92      	ldr	r3, [pc, #584]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0f0      	beq.n	80052dc <HAL_RCC_OscConfig+0x2a8>
 80052fa:	e014      	b.n	8005326 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fc:	f7fd f8b6 	bl	800246c <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005304:	f7fd f8b2 	bl	800246c <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b64      	cmp	r3, #100	@ 0x64
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e262      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005316:	4b88      	ldr	r3, [pc, #544]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f0      	bne.n	8005304 <HAL_RCC_OscConfig+0x2d0>
 8005322:	e000      	b.n	8005326 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d060      	beq.n	80053f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b04      	cmp	r3, #4
 8005336:	d005      	beq.n	8005344 <HAL_RCC_OscConfig+0x310>
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	2b0c      	cmp	r3, #12
 800533c:	d119      	bne.n	8005372 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d116      	bne.n	8005372 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005344:	4b7c      	ldr	r3, [pc, #496]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800534c:	2b00      	cmp	r3, #0
 800534e:	d005      	beq.n	800535c <HAL_RCC_OscConfig+0x328>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e23f      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535c:	4b76      	ldr	r3, [pc, #472]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	061b      	lsls	r3, r3, #24
 800536a:	4973      	ldr	r1, [pc, #460]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 800536c:	4313      	orrs	r3, r2
 800536e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005370:	e040      	b.n	80053f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d023      	beq.n	80053c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800537a:	4b6f      	ldr	r3, [pc, #444]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a6e      	ldr	r2, [pc, #440]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 8005380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005386:	f7fd f871 	bl	800246c <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800538c:	e008      	b.n	80053a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800538e:	f7fd f86d 	bl	800246c <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e21d      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053a0:	4b65      	ldr	r3, [pc, #404]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0f0      	beq.n	800538e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ac:	4b62      	ldr	r3, [pc, #392]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	061b      	lsls	r3, r3, #24
 80053ba:	495f      	ldr	r1, [pc, #380]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	604b      	str	r3, [r1, #4]
 80053c0:	e018      	b.n	80053f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053c2:	4b5d      	ldr	r3, [pc, #372]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a5c      	ldr	r2, [pc, #368]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 80053c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ce:	f7fd f84d 	bl	800246c <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d6:	f7fd f849 	bl	800246c <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e1f9      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053e8:	4b53      	ldr	r3, [pc, #332]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f0      	bne.n	80053d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d03c      	beq.n	800547a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01c      	beq.n	8005442 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005408:	4b4b      	ldr	r3, [pc, #300]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 800540a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800540e:	4a4a      	ldr	r2, [pc, #296]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 8005410:	f043 0301 	orr.w	r3, r3, #1
 8005414:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005418:	f7fd f828 	bl	800246c <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005420:	f7fd f824 	bl	800246c <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e1d4      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005432:	4b41      	ldr	r3, [pc, #260]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 8005434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0ef      	beq.n	8005420 <HAL_RCC_OscConfig+0x3ec>
 8005440:	e01b      	b.n	800547a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005442:	4b3d      	ldr	r3, [pc, #244]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 8005444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005448:	4a3b      	ldr	r2, [pc, #236]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 800544a:	f023 0301 	bic.w	r3, r3, #1
 800544e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005452:	f7fd f80b 	bl	800246c <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800545a:	f7fd f807 	bl	800246c <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e1b7      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800546c:	4b32      	ldr	r3, [pc, #200]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 800546e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1ef      	bne.n	800545a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 80a6 	beq.w	80055d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005488:	2300      	movs	r3, #0
 800548a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800548c:	4b2a      	ldr	r3, [pc, #168]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 800548e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10d      	bne.n	80054b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005498:	4b27      	ldr	r3, [pc, #156]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 800549a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549c:	4a26      	ldr	r2, [pc, #152]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 800549e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80054a4:	4b24      	ldr	r3, [pc, #144]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 80054a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054b0:	2301      	movs	r3, #1
 80054b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054b4:	4b21      	ldr	r3, [pc, #132]	@ (800553c <HAL_RCC_OscConfig+0x508>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d118      	bne.n	80054f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054c0:	4b1e      	ldr	r3, [pc, #120]	@ (800553c <HAL_RCC_OscConfig+0x508>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1d      	ldr	r2, [pc, #116]	@ (800553c <HAL_RCC_OscConfig+0x508>)
 80054c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054cc:	f7fc ffce 	bl	800246c <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054d4:	f7fc ffca 	bl	800246c <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e17a      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054e6:	4b15      	ldr	r3, [pc, #84]	@ (800553c <HAL_RCC_OscConfig+0x508>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0f0      	beq.n	80054d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d108      	bne.n	800550c <HAL_RCC_OscConfig+0x4d8>
 80054fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 80054fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005500:	4a0d      	ldr	r2, [pc, #52]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 8005502:	f043 0301 	orr.w	r3, r3, #1
 8005506:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800550a:	e029      	b.n	8005560 <HAL_RCC_OscConfig+0x52c>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b05      	cmp	r3, #5
 8005512:	d115      	bne.n	8005540 <HAL_RCC_OscConfig+0x50c>
 8005514:	4b08      	ldr	r3, [pc, #32]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800551a:	4a07      	ldr	r2, [pc, #28]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 800551c:	f043 0304 	orr.w	r3, r3, #4
 8005520:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005524:	4b04      	ldr	r3, [pc, #16]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 8005526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552a:	4a03      	ldr	r2, [pc, #12]	@ (8005538 <HAL_RCC_OscConfig+0x504>)
 800552c:	f043 0301 	orr.w	r3, r3, #1
 8005530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005534:	e014      	b.n	8005560 <HAL_RCC_OscConfig+0x52c>
 8005536:	bf00      	nop
 8005538:	40021000 	.word	0x40021000
 800553c:	40007000 	.word	0x40007000
 8005540:	4b9c      	ldr	r3, [pc, #624]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005546:	4a9b      	ldr	r2, [pc, #620]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 8005548:	f023 0301 	bic.w	r3, r3, #1
 800554c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005550:	4b98      	ldr	r3, [pc, #608]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005556:	4a97      	ldr	r2, [pc, #604]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 8005558:	f023 0304 	bic.w	r3, r3, #4
 800555c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d016      	beq.n	8005596 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005568:	f7fc ff80 	bl	800246c <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800556e:	e00a      	b.n	8005586 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005570:	f7fc ff7c 	bl	800246c <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800557e:	4293      	cmp	r3, r2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e12a      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005586:	4b8b      	ldr	r3, [pc, #556]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 8005588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0ed      	beq.n	8005570 <HAL_RCC_OscConfig+0x53c>
 8005594:	e015      	b.n	80055c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005596:	f7fc ff69 	bl	800246c <HAL_GetTick>
 800559a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800559c:	e00a      	b.n	80055b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800559e:	f7fc ff65 	bl	800246c <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e113      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055b4:	4b7f      	ldr	r3, [pc, #508]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 80055b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1ed      	bne.n	800559e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055c2:	7ffb      	ldrb	r3, [r7, #31]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d105      	bne.n	80055d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055c8:	4b7a      	ldr	r3, [pc, #488]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 80055ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055cc:	4a79      	ldr	r2, [pc, #484]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 80055ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055d2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 80fe 	beq.w	80057da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	f040 80d0 	bne.w	8005788 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80055e8:	4b72      	ldr	r3, [pc, #456]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f003 0203 	and.w	r2, r3, #3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d130      	bne.n	800565e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005606:	3b01      	subs	r3, #1
 8005608:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800560a:	429a      	cmp	r2, r3
 800560c:	d127      	bne.n	800565e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005618:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800561a:	429a      	cmp	r2, r3
 800561c:	d11f      	bne.n	800565e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005628:	2a07      	cmp	r2, #7
 800562a:	bf14      	ite	ne
 800562c:	2201      	movne	r2, #1
 800562e:	2200      	moveq	r2, #0
 8005630:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005632:	4293      	cmp	r3, r2
 8005634:	d113      	bne.n	800565e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005640:	085b      	lsrs	r3, r3, #1
 8005642:	3b01      	subs	r3, #1
 8005644:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005646:	429a      	cmp	r2, r3
 8005648:	d109      	bne.n	800565e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005654:	085b      	lsrs	r3, r3, #1
 8005656:	3b01      	subs	r3, #1
 8005658:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800565a:	429a      	cmp	r2, r3
 800565c:	d06e      	beq.n	800573c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	2b0c      	cmp	r3, #12
 8005662:	d069      	beq.n	8005738 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005664:	4b53      	ldr	r3, [pc, #332]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d105      	bne.n	800567c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005670:	4b50      	ldr	r3, [pc, #320]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e0ad      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005680:	4b4c      	ldr	r3, [pc, #304]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a4b      	ldr	r2, [pc, #300]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 8005686:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800568a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800568c:	f7fc feee 	bl	800246c <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005694:	f7fc feea 	bl	800246c <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e09a      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056a6:	4b43      	ldr	r3, [pc, #268]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f0      	bne.n	8005694 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056b2:	4b40      	ldr	r3, [pc, #256]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	4b40      	ldr	r3, [pc, #256]	@ (80057b8 <HAL_RCC_OscConfig+0x784>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80056c2:	3a01      	subs	r2, #1
 80056c4:	0112      	lsls	r2, r2, #4
 80056c6:	4311      	orrs	r1, r2
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80056cc:	0212      	lsls	r2, r2, #8
 80056ce:	4311      	orrs	r1, r2
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056d4:	0852      	lsrs	r2, r2, #1
 80056d6:	3a01      	subs	r2, #1
 80056d8:	0552      	lsls	r2, r2, #21
 80056da:	4311      	orrs	r1, r2
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80056e0:	0852      	lsrs	r2, r2, #1
 80056e2:	3a01      	subs	r2, #1
 80056e4:	0652      	lsls	r2, r2, #25
 80056e6:	4311      	orrs	r1, r2
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80056ec:	0912      	lsrs	r2, r2, #4
 80056ee:	0452      	lsls	r2, r2, #17
 80056f0:	430a      	orrs	r2, r1
 80056f2:	4930      	ldr	r1, [pc, #192]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80056f8:	4b2e      	ldr	r3, [pc, #184]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a2d      	ldr	r2, [pc, #180]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 80056fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005702:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005704:	4b2b      	ldr	r3, [pc, #172]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	4a2a      	ldr	r2, [pc, #168]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 800570a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800570e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005710:	f7fc feac 	bl	800246c <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005718:	f7fc fea8 	bl	800246c <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e058      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800572a:	4b22      	ldr	r3, [pc, #136]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f0      	beq.n	8005718 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005736:	e050      	b.n	80057da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e04f      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800573c:	4b1d      	ldr	r3, [pc, #116]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d148      	bne.n	80057da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005748:	4b1a      	ldr	r3, [pc, #104]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a19      	ldr	r2, [pc, #100]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 800574e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005752:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005754:	4b17      	ldr	r3, [pc, #92]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	4a16      	ldr	r2, [pc, #88]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 800575a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800575e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005760:	f7fc fe84 	bl	800246c <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005768:	f7fc fe80 	bl	800246c <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e030      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800577a:	4b0e      	ldr	r3, [pc, #56]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0f0      	beq.n	8005768 <HAL_RCC_OscConfig+0x734>
 8005786:	e028      	b.n	80057da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b0c      	cmp	r3, #12
 800578c:	d023      	beq.n	80057d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800578e:	4b09      	ldr	r3, [pc, #36]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a08      	ldr	r2, [pc, #32]	@ (80057b4 <HAL_RCC_OscConfig+0x780>)
 8005794:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579a:	f7fc fe67 	bl	800246c <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057a0:	e00c      	b.n	80057bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a2:	f7fc fe63 	bl	800246c <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d905      	bls.n	80057bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e013      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
 80057b4:	40021000 	.word	0x40021000
 80057b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057bc:	4b09      	ldr	r3, [pc, #36]	@ (80057e4 <HAL_RCC_OscConfig+0x7b0>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1ec      	bne.n	80057a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80057c8:	4b06      	ldr	r3, [pc, #24]	@ (80057e4 <HAL_RCC_OscConfig+0x7b0>)
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	4905      	ldr	r1, [pc, #20]	@ (80057e4 <HAL_RCC_OscConfig+0x7b0>)
 80057ce:	4b06      	ldr	r3, [pc, #24]	@ (80057e8 <HAL_RCC_OscConfig+0x7b4>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	60cb      	str	r3, [r1, #12]
 80057d4:	e001      	b.n	80057da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3720      	adds	r7, #32
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40021000 	.word	0x40021000
 80057e8:	feeefffc 	.word	0xfeeefffc

080057ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0e7      	b.n	80059d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005800:	4b75      	ldr	r3, [pc, #468]	@ (80059d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d910      	bls.n	8005830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800580e:	4b72      	ldr	r3, [pc, #456]	@ (80059d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f023 0207 	bic.w	r2, r3, #7
 8005816:	4970      	ldr	r1, [pc, #448]	@ (80059d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	4313      	orrs	r3, r2
 800581c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800581e:	4b6e      	ldr	r3, [pc, #440]	@ (80059d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d001      	beq.n	8005830 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e0cf      	b.n	80059d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d010      	beq.n	800585e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	4b66      	ldr	r3, [pc, #408]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005848:	429a      	cmp	r2, r3
 800584a:	d908      	bls.n	800585e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800584c:	4b63      	ldr	r3, [pc, #396]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	4960      	ldr	r1, [pc, #384]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 800585a:	4313      	orrs	r3, r2
 800585c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d04c      	beq.n	8005904 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b03      	cmp	r3, #3
 8005870:	d107      	bne.n	8005882 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005872:	4b5a      	ldr	r3, [pc, #360]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d121      	bne.n	80058c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e0a6      	b.n	80059d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2b02      	cmp	r3, #2
 8005888:	d107      	bne.n	800589a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800588a:	4b54      	ldr	r3, [pc, #336]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d115      	bne.n	80058c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e09a      	b.n	80059d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d107      	bne.n	80058b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058a2:	4b4e      	ldr	r3, [pc, #312]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d109      	bne.n	80058c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e08e      	b.n	80059d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058b2:	4b4a      	ldr	r3, [pc, #296]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e086      	b.n	80059d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058c2:	4b46      	ldr	r3, [pc, #280]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f023 0203 	bic.w	r2, r3, #3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	4943      	ldr	r1, [pc, #268]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d4:	f7fc fdca 	bl	800246c <HAL_GetTick>
 80058d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058da:	e00a      	b.n	80058f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058dc:	f7fc fdc6 	bl	800246c <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e06e      	b.n	80059d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058f2:	4b3a      	ldr	r3, [pc, #232]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 020c 	and.w	r2, r3, #12
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	429a      	cmp	r2, r3
 8005902:	d1eb      	bne.n	80058dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d010      	beq.n	8005932 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	4b31      	ldr	r3, [pc, #196]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800591c:	429a      	cmp	r2, r3
 800591e:	d208      	bcs.n	8005932 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005920:	4b2e      	ldr	r3, [pc, #184]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	492b      	ldr	r1, [pc, #172]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 800592e:	4313      	orrs	r3, r2
 8005930:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005932:	4b29      	ldr	r3, [pc, #164]	@ (80059d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d210      	bcs.n	8005962 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005940:	4b25      	ldr	r3, [pc, #148]	@ (80059d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f023 0207 	bic.w	r2, r3, #7
 8005948:	4923      	ldr	r1, [pc, #140]	@ (80059d8 <HAL_RCC_ClockConfig+0x1ec>)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	4313      	orrs	r3, r2
 800594e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005950:	4b21      	ldr	r3, [pc, #132]	@ (80059d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d001      	beq.n	8005962 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e036      	b.n	80059d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0304 	and.w	r3, r3, #4
 800596a:	2b00      	cmp	r3, #0
 800596c:	d008      	beq.n	8005980 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800596e:	4b1b      	ldr	r3, [pc, #108]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	4918      	ldr	r1, [pc, #96]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 800597c:	4313      	orrs	r3, r2
 800597e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b00      	cmp	r3, #0
 800598a:	d009      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800598c:	4b13      	ldr	r3, [pc, #76]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	4910      	ldr	r1, [pc, #64]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 800599c:	4313      	orrs	r3, r2
 800599e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059a0:	f000 f824 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 80059a4:	4602      	mov	r2, r0
 80059a6:	4b0d      	ldr	r3, [pc, #52]	@ (80059dc <HAL_RCC_ClockConfig+0x1f0>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	091b      	lsrs	r3, r3, #4
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	490b      	ldr	r1, [pc, #44]	@ (80059e0 <HAL_RCC_ClockConfig+0x1f4>)
 80059b2:	5ccb      	ldrb	r3, [r1, r3]
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
 80059bc:	4a09      	ldr	r2, [pc, #36]	@ (80059e4 <HAL_RCC_ClockConfig+0x1f8>)
 80059be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059c0:	4b09      	ldr	r3, [pc, #36]	@ (80059e8 <HAL_RCC_ClockConfig+0x1fc>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fc faf5 	bl	8001fb4 <HAL_InitTick>
 80059ca:	4603      	mov	r3, r0
 80059cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80059ce:	7afb      	ldrb	r3, [r7, #11]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40022000 	.word	0x40022000
 80059dc:	40021000 	.word	0x40021000
 80059e0:	0800e54c 	.word	0x0800e54c
 80059e4:	20000000 	.word	0x20000000
 80059e8:	20000004 	.word	0x20000004

080059ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b089      	sub	sp, #36	@ 0x24
 80059f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	61fb      	str	r3, [r7, #28]
 80059f6:	2300      	movs	r3, #0
 80059f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059fa:	4b3e      	ldr	r3, [pc, #248]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x108>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 030c 	and.w	r3, r3, #12
 8005a02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a04:	4b3b      	ldr	r3, [pc, #236]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f003 0303 	and.w	r3, r3, #3
 8005a0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <HAL_RCC_GetSysClockFreq+0x34>
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2b0c      	cmp	r3, #12
 8005a18:	d121      	bne.n	8005a5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d11e      	bne.n	8005a5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a20:	4b34      	ldr	r3, [pc, #208]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d107      	bne.n	8005a3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a2c:	4b31      	ldr	r3, [pc, #196]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a32:	0a1b      	lsrs	r3, r3, #8
 8005a34:	f003 030f 	and.w	r3, r3, #15
 8005a38:	61fb      	str	r3, [r7, #28]
 8005a3a:	e005      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a48:	4a2b      	ldr	r2, [pc, #172]	@ (8005af8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10d      	bne.n	8005a74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a5c:	e00a      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d102      	bne.n	8005a6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a64:	4b25      	ldr	r3, [pc, #148]	@ (8005afc <HAL_RCC_GetSysClockFreq+0x110>)
 8005a66:	61bb      	str	r3, [r7, #24]
 8005a68:	e004      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d101      	bne.n	8005a74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a70:	4b23      	ldr	r3, [pc, #140]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	2b0c      	cmp	r3, #12
 8005a78:	d134      	bne.n	8005ae4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d003      	beq.n	8005a92 <HAL_RCC_GetSysClockFreq+0xa6>
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d003      	beq.n	8005a98 <HAL_RCC_GetSysClockFreq+0xac>
 8005a90:	e005      	b.n	8005a9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005a92:	4b1a      	ldr	r3, [pc, #104]	@ (8005afc <HAL_RCC_GetSysClockFreq+0x110>)
 8005a94:	617b      	str	r3, [r7, #20]
      break;
 8005a96:	e005      	b.n	8005aa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a98:	4b19      	ldr	r3, [pc, #100]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a9a:	617b      	str	r3, [r7, #20]
      break;
 8005a9c:	e002      	b.n	8005aa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	617b      	str	r3, [r7, #20]
      break;
 8005aa2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005aa4:	4b13      	ldr	r3, [pc, #76]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	091b      	lsrs	r3, r3, #4
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	3301      	adds	r3, #1
 8005ab0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ab2:	4b10      	ldr	r3, [pc, #64]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	0a1b      	lsrs	r3, r3, #8
 8005ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	fb03 f202 	mul.w	r2, r3, r2
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005aca:	4b0a      	ldr	r3, [pc, #40]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	0e5b      	lsrs	r3, r3, #25
 8005ad0:	f003 0303 	and.w	r3, r3, #3
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ae4:	69bb      	ldr	r3, [r7, #24]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3724      	adds	r7, #36	@ 0x24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40021000 	.word	0x40021000
 8005af8:	0800e564 	.word	0x0800e564
 8005afc:	00f42400 	.word	0x00f42400
 8005b00:	007a1200 	.word	0x007a1200

08005b04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b08:	4b03      	ldr	r3, [pc, #12]	@ (8005b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	20000000 	.word	0x20000000

08005b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b20:	f7ff fff0 	bl	8005b04 <HAL_RCC_GetHCLKFreq>
 8005b24:	4602      	mov	r2, r0
 8005b26:	4b06      	ldr	r3, [pc, #24]	@ (8005b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	0a1b      	lsrs	r3, r3, #8
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	4904      	ldr	r1, [pc, #16]	@ (8005b44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b32:	5ccb      	ldrb	r3, [r1, r3]
 8005b34:	f003 031f 	and.w	r3, r3, #31
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40021000 	.word	0x40021000
 8005b44:	0800e55c 	.word	0x0800e55c

08005b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b4c:	f7ff ffda 	bl	8005b04 <HAL_RCC_GetHCLKFreq>
 8005b50:	4602      	mov	r2, r0
 8005b52:	4b06      	ldr	r3, [pc, #24]	@ (8005b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	0adb      	lsrs	r3, r3, #11
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	4904      	ldr	r1, [pc, #16]	@ (8005b70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b5e:	5ccb      	ldrb	r3, [r1, r3]
 8005b60:	f003 031f 	and.w	r3, r3, #31
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	0800e55c 	.word	0x0800e55c

08005b74 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	220f      	movs	r2, #15
 8005b82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005b84:	4b12      	ldr	r3, [pc, #72]	@ (8005bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0203 	and.w	r2, r3, #3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005b90:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005ba8:	4b09      	ldr	r3, [pc, #36]	@ (8005bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	08db      	lsrs	r3, r3, #3
 8005bae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005bb6:	4b07      	ldr	r3, [pc, #28]	@ (8005bd4 <HAL_RCC_GetClockConfig+0x60>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0207 	and.w	r2, r3, #7
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	601a      	str	r2, [r3, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	40022000 	.word	0x40022000

08005bd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005be0:	2300      	movs	r3, #0
 8005be2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005be4:	4b2a      	ldr	r3, [pc, #168]	@ (8005c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bf0:	f7ff f8f0 	bl	8004dd4 <HAL_PWREx_GetVoltageRange>
 8005bf4:	6178      	str	r0, [r7, #20]
 8005bf6:	e014      	b.n	8005c22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bf8:	4b25      	ldr	r3, [pc, #148]	@ (8005c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bfc:	4a24      	ldr	r2, [pc, #144]	@ (8005c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c02:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c04:	4b22      	ldr	r3, [pc, #136]	@ (8005c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c10:	f7ff f8e0 	bl	8004dd4 <HAL_PWREx_GetVoltageRange>
 8005c14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c16:	4b1e      	ldr	r3, [pc, #120]	@ (8005c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c28:	d10b      	bne.n	8005c42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b80      	cmp	r3, #128	@ 0x80
 8005c2e:	d919      	bls.n	8005c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2ba0      	cmp	r3, #160	@ 0xa0
 8005c34:	d902      	bls.n	8005c3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c36:	2302      	movs	r3, #2
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	e013      	b.n	8005c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	e010      	b.n	8005c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b80      	cmp	r3, #128	@ 0x80
 8005c46:	d902      	bls.n	8005c4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c48:	2303      	movs	r3, #3
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	e00a      	b.n	8005c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b80      	cmp	r3, #128	@ 0x80
 8005c52:	d102      	bne.n	8005c5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c54:	2302      	movs	r3, #2
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	e004      	b.n	8005c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b70      	cmp	r3, #112	@ 0x70
 8005c5e:	d101      	bne.n	8005c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c60:	2301      	movs	r3, #1
 8005c62:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c64:	4b0b      	ldr	r3, [pc, #44]	@ (8005c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f023 0207 	bic.w	r2, r3, #7
 8005c6c:	4909      	ldr	r1, [pc, #36]	@ (8005c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c74:	4b07      	ldr	r3, [pc, #28]	@ (8005c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d001      	beq.n	8005c86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40021000 	.word	0x40021000
 8005c94:	40022000 	.word	0x40022000

08005c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d041      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cb8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005cbc:	d02a      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005cbe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005cc2:	d824      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005cc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cc8:	d008      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005cca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cce:	d81e      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005cd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cd8:	d010      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cda:	e018      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005cdc:	4b86      	ldr	r3, [pc, #536]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	4a85      	ldr	r2, [pc, #532]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ce6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ce8:	e015      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3304      	adds	r3, #4
 8005cee:	2100      	movs	r1, #0
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 facb 	bl	800628c <RCCEx_PLLSAI1_Config>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cfa:	e00c      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3320      	adds	r3, #32
 8005d00:	2100      	movs	r1, #0
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fbb6 	bl	8006474 <RCCEx_PLLSAI2_Config>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d0c:	e003      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	74fb      	strb	r3, [r7, #19]
      break;
 8005d12:	e000      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005d14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d16:	7cfb      	ldrb	r3, [r7, #19]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10b      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d1c:	4b76      	ldr	r3, [pc, #472]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d2a:	4973      	ldr	r1, [pc, #460]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005d32:	e001      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d34:	7cfb      	ldrb	r3, [r7, #19]
 8005d36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d041      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d4c:	d02a      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005d4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d52:	d824      	bhi.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d58:	d008      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d5e:	d81e      	bhi.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00a      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005d64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d68:	d010      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d6a:	e018      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d6c:	4b62      	ldr	r3, [pc, #392]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	4a61      	ldr	r2, [pc, #388]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d78:	e015      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	2100      	movs	r1, #0
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fa83 	bl	800628c <RCCEx_PLLSAI1_Config>
 8005d86:	4603      	mov	r3, r0
 8005d88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d8a:	e00c      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3320      	adds	r3, #32
 8005d90:	2100      	movs	r1, #0
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fb6e 	bl	8006474 <RCCEx_PLLSAI2_Config>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d9c:	e003      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	74fb      	strb	r3, [r7, #19]
      break;
 8005da2:	e000      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005da6:	7cfb      	ldrb	r3, [r7, #19]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10b      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005dac:	4b52      	ldr	r3, [pc, #328]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dba:	494f      	ldr	r1, [pc, #316]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005dc2:	e001      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc4:	7cfb      	ldrb	r3, [r7, #19]
 8005dc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 80a0 	beq.w	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005dda:	4b47      	ldr	r3, [pc, #284]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005dea:	2300      	movs	r3, #0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00d      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005df0:	4b41      	ldr	r3, [pc, #260]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df4:	4a40      	ldr	r2, [pc, #256]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dfc:	4b3e      	ldr	r3, [pc, #248]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e04:	60bb      	str	r3, [r7, #8]
 8005e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a3a      	ldr	r2, [pc, #232]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e18:	f7fc fb28 	bl	800246c <HAL_GetTick>
 8005e1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e1e:	e009      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e20:	f7fc fb24 	bl	800246c <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d902      	bls.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	74fb      	strb	r3, [r7, #19]
        break;
 8005e32:	e005      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e34:	4b31      	ldr	r3, [pc, #196]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0ef      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005e40:	7cfb      	ldrb	r3, [r7, #19]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d15c      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e46:	4b2c      	ldr	r3, [pc, #176]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d01f      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d019      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e64:	4b24      	ldr	r3, [pc, #144]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e70:	4b21      	ldr	r3, [pc, #132]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e76:	4a20      	ldr	r2, [pc, #128]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e80:	4b1d      	ldr	r3, [pc, #116]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e86:	4a1c      	ldr	r2, [pc, #112]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e90:	4a19      	ldr	r2, [pc, #100]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d016      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea2:	f7fc fae3 	bl	800246c <HAL_GetTick>
 8005ea6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ea8:	e00b      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eaa:	f7fc fadf 	bl	800246c <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d902      	bls.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	74fb      	strb	r3, [r7, #19]
            break;
 8005ec0:	e006      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0ec      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005ed0:	7cfb      	ldrb	r3, [r7, #19]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10c      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ed6:	4b08      	ldr	r3, [pc, #32]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005edc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ee6:	4904      	ldr	r1, [pc, #16]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005eee:	e009      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ef0:	7cfb      	ldrb	r3, [r7, #19]
 8005ef2:	74bb      	strb	r3, [r7, #18]
 8005ef4:	e006      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005ef6:	bf00      	nop
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f00:	7cfb      	ldrb	r3, [r7, #19]
 8005f02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f04:	7c7b      	ldrb	r3, [r7, #17]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d105      	bne.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f0a:	4b9e      	ldr	r3, [pc, #632]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f0e:	4a9d      	ldr	r2, [pc, #628]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f14:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f22:	4b98      	ldr	r3, [pc, #608]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f28:	f023 0203 	bic.w	r2, r3, #3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f30:	4994      	ldr	r1, [pc, #592]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00a      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f44:	4b8f      	ldr	r3, [pc, #572]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4a:	f023 020c 	bic.w	r2, r3, #12
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f52:	498c      	ldr	r1, [pc, #560]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f66:	4b87      	ldr	r3, [pc, #540]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f74:	4983      	ldr	r1, [pc, #524]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00a      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f88:	4b7e      	ldr	r3, [pc, #504]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f96:	497b      	ldr	r1, [pc, #492]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005faa:	4b76      	ldr	r3, [pc, #472]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fb8:	4972      	ldr	r1, [pc, #456]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0320 	and.w	r3, r3, #32
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fcc:	4b6d      	ldr	r3, [pc, #436]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fda:	496a      	ldr	r1, [pc, #424]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fee:	4b65      	ldr	r3, [pc, #404]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ffc:	4961      	ldr	r1, [pc, #388]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006010:	4b5c      	ldr	r3, [pc, #368]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006016:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800601e:	4959      	ldr	r1, [pc, #356]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006032:	4b54      	ldr	r3, [pc, #336]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006038:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006040:	4950      	ldr	r1, [pc, #320]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00a      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006054:	4b4b      	ldr	r3, [pc, #300]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006062:	4948      	ldr	r1, [pc, #288]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006076:	4b43      	ldr	r3, [pc, #268]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006084:	493f      	ldr	r1, [pc, #252]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006086:	4313      	orrs	r3, r2
 8006088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d028      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006098:	4b3a      	ldr	r3, [pc, #232]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800609a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800609e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060a6:	4937      	ldr	r1, [pc, #220]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060b6:	d106      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060b8:	4b32      	ldr	r3, [pc, #200]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	4a31      	ldr	r2, [pc, #196]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060c2:	60d3      	str	r3, [r2, #12]
 80060c4:	e011      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060ce:	d10c      	bne.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3304      	adds	r3, #4
 80060d4:	2101      	movs	r1, #1
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 f8d8 	bl	800628c <RCCEx_PLLSAI1_Config>
 80060dc:	4603      	mov	r3, r0
 80060de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80060e0:	7cfb      	ldrb	r3, [r7, #19]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80060e6:	7cfb      	ldrb	r3, [r7, #19]
 80060e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d028      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060f6:	4b23      	ldr	r3, [pc, #140]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006104:	491f      	ldr	r1, [pc, #124]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006106:	4313      	orrs	r3, r2
 8006108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006110:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006114:	d106      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006116:	4b1b      	ldr	r3, [pc, #108]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	4a1a      	ldr	r2, [pc, #104]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800611c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006120:	60d3      	str	r3, [r2, #12]
 8006122:	e011      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006128:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800612c:	d10c      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3304      	adds	r3, #4
 8006132:	2101      	movs	r1, #1
 8006134:	4618      	mov	r0, r3
 8006136:	f000 f8a9 	bl	800628c <RCCEx_PLLSAI1_Config>
 800613a:	4603      	mov	r3, r0
 800613c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800613e:	7cfb      	ldrb	r3, [r7, #19]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006144:	7cfb      	ldrb	r3, [r7, #19]
 8006146:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d02b      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006154:	4b0b      	ldr	r3, [pc, #44]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800615a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006162:	4908      	ldr	r1, [pc, #32]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006164:	4313      	orrs	r3, r2
 8006166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800616e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006172:	d109      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006174:	4b03      	ldr	r3, [pc, #12]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	4a02      	ldr	r2, [pc, #8]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800617a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800617e:	60d3      	str	r3, [r2, #12]
 8006180:	e014      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006182:	bf00      	nop
 8006184:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800618c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006190:	d10c      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	3304      	adds	r3, #4
 8006196:	2101      	movs	r1, #1
 8006198:	4618      	mov	r0, r3
 800619a:	f000 f877 	bl	800628c <RCCEx_PLLSAI1_Config>
 800619e:	4603      	mov	r3, r0
 80061a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061a2:	7cfb      	ldrb	r3, [r7, #19]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80061a8:	7cfb      	ldrb	r3, [r7, #19]
 80061aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d02f      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061b8:	4b2b      	ldr	r3, [pc, #172]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061c6:	4928      	ldr	r1, [pc, #160]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061d6:	d10d      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3304      	adds	r3, #4
 80061dc:	2102      	movs	r1, #2
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 f854 	bl	800628c <RCCEx_PLLSAI1_Config>
 80061e4:	4603      	mov	r3, r0
 80061e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061e8:	7cfb      	ldrb	r3, [r7, #19]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d014      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80061ee:	7cfb      	ldrb	r3, [r7, #19]
 80061f0:	74bb      	strb	r3, [r7, #18]
 80061f2:	e011      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061fc:	d10c      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3320      	adds	r3, #32
 8006202:	2102      	movs	r1, #2
 8006204:	4618      	mov	r0, r3
 8006206:	f000 f935 	bl	8006474 <RCCEx_PLLSAI2_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800620e:	7cfb      	ldrb	r3, [r7, #19]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006214:	7cfb      	ldrb	r3, [r7, #19]
 8006216:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00a      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006224:	4b10      	ldr	r3, [pc, #64]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800622a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006232:	490d      	ldr	r1, [pc, #52]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006234:	4313      	orrs	r3, r2
 8006236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00b      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006246:	4b08      	ldr	r3, [pc, #32]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800624c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006256:	4904      	ldr	r1, [pc, #16]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006258:	4313      	orrs	r3, r2
 800625a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800625e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40021000 	.word	0x40021000

0800626c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006270:	4b05      	ldr	r3, [pc, #20]	@ (8006288 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a04      	ldr	r2, [pc, #16]	@ (8006288 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006276:	f043 0304 	orr.w	r3, r3, #4
 800627a:	6013      	str	r3, [r2, #0]
}
 800627c:	bf00      	nop
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	40021000 	.word	0x40021000

0800628c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800629a:	4b75      	ldr	r3, [pc, #468]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d018      	beq.n	80062d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80062a6:	4b72      	ldr	r3, [pc, #456]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f003 0203 	and.w	r2, r3, #3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d10d      	bne.n	80062d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
       ||
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d009      	beq.n	80062d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80062be:	4b6c      	ldr	r3, [pc, #432]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	091b      	lsrs	r3, r3, #4
 80062c4:	f003 0307 	and.w	r3, r3, #7
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
       ||
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d047      	beq.n	8006362 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	73fb      	strb	r3, [r7, #15]
 80062d6:	e044      	b.n	8006362 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d018      	beq.n	8006312 <RCCEx_PLLSAI1_Config+0x86>
 80062e0:	2b03      	cmp	r3, #3
 80062e2:	d825      	bhi.n	8006330 <RCCEx_PLLSAI1_Config+0xa4>
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d002      	beq.n	80062ee <RCCEx_PLLSAI1_Config+0x62>
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d009      	beq.n	8006300 <RCCEx_PLLSAI1_Config+0x74>
 80062ec:	e020      	b.n	8006330 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062ee:	4b60      	ldr	r3, [pc, #384]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d11d      	bne.n	8006336 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062fe:	e01a      	b.n	8006336 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006300:	4b5b      	ldr	r3, [pc, #364]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006308:	2b00      	cmp	r3, #0
 800630a:	d116      	bne.n	800633a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006310:	e013      	b.n	800633a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006312:	4b57      	ldr	r3, [pc, #348]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10f      	bne.n	800633e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800631e:	4b54      	ldr	r3, [pc, #336]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d109      	bne.n	800633e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800632e:	e006      	b.n	800633e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	73fb      	strb	r3, [r7, #15]
      break;
 8006334:	e004      	b.n	8006340 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006336:	bf00      	nop
 8006338:	e002      	b.n	8006340 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800633a:	bf00      	nop
 800633c:	e000      	b.n	8006340 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800633e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10d      	bne.n	8006362 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006346:	4b4a      	ldr	r3, [pc, #296]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6819      	ldr	r1, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	3b01      	subs	r3, #1
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	430b      	orrs	r3, r1
 800635c:	4944      	ldr	r1, [pc, #272]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 800635e:	4313      	orrs	r3, r2
 8006360:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d17d      	bne.n	8006464 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006368:	4b41      	ldr	r3, [pc, #260]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a40      	ldr	r2, [pc, #256]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 800636e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006374:	f7fc f87a 	bl	800246c <HAL_GetTick>
 8006378:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800637a:	e009      	b.n	8006390 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800637c:	f7fc f876 	bl	800246c <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d902      	bls.n	8006390 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	73fb      	strb	r3, [r7, #15]
        break;
 800638e:	e005      	b.n	800639c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006390:	4b37      	ldr	r3, [pc, #220]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1ef      	bne.n	800637c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d160      	bne.n	8006464 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d111      	bne.n	80063cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063a8:	4b31      	ldr	r3, [pc, #196]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80063b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6892      	ldr	r2, [r2, #8]
 80063b8:	0211      	lsls	r1, r2, #8
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	68d2      	ldr	r2, [r2, #12]
 80063be:	0912      	lsrs	r2, r2, #4
 80063c0:	0452      	lsls	r2, r2, #17
 80063c2:	430a      	orrs	r2, r1
 80063c4:	492a      	ldr	r1, [pc, #168]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	610b      	str	r3, [r1, #16]
 80063ca:	e027      	b.n	800641c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d112      	bne.n	80063f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063d2:	4b27      	ldr	r3, [pc, #156]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80063da:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	6892      	ldr	r2, [r2, #8]
 80063e2:	0211      	lsls	r1, r2, #8
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6912      	ldr	r2, [r2, #16]
 80063e8:	0852      	lsrs	r2, r2, #1
 80063ea:	3a01      	subs	r2, #1
 80063ec:	0552      	lsls	r2, r2, #21
 80063ee:	430a      	orrs	r2, r1
 80063f0:	491f      	ldr	r1, [pc, #124]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	610b      	str	r3, [r1, #16]
 80063f6:	e011      	b.n	800641c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006400:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6892      	ldr	r2, [r2, #8]
 8006408:	0211      	lsls	r1, r2, #8
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6952      	ldr	r2, [r2, #20]
 800640e:	0852      	lsrs	r2, r2, #1
 8006410:	3a01      	subs	r2, #1
 8006412:	0652      	lsls	r2, r2, #25
 8006414:	430a      	orrs	r2, r1
 8006416:	4916      	ldr	r1, [pc, #88]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006418:	4313      	orrs	r3, r2
 800641a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800641c:	4b14      	ldr	r3, [pc, #80]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a13      	ldr	r2, [pc, #76]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006422:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006426:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006428:	f7fc f820 	bl	800246c <HAL_GetTick>
 800642c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800642e:	e009      	b.n	8006444 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006430:	f7fc f81c 	bl	800246c <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d902      	bls.n	8006444 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	73fb      	strb	r3, [r7, #15]
          break;
 8006442:	e005      	b.n	8006450 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006444:	4b0a      	ldr	r3, [pc, #40]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0ef      	beq.n	8006430 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006456:	4b06      	ldr	r3, [pc, #24]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	4904      	ldr	r1, [pc, #16]	@ (8006470 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006460:	4313      	orrs	r3, r2
 8006462:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006464:	7bfb      	ldrb	r3, [r7, #15]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	40021000 	.word	0x40021000

08006474 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006482:	4b6a      	ldr	r3, [pc, #424]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d018      	beq.n	80064c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800648e:	4b67      	ldr	r3, [pc, #412]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f003 0203 	and.w	r2, r3, #3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	429a      	cmp	r2, r3
 800649c:	d10d      	bne.n	80064ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
       ||
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d009      	beq.n	80064ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80064a6:	4b61      	ldr	r3, [pc, #388]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	091b      	lsrs	r3, r3, #4
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
       ||
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d047      	beq.n	800654a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	73fb      	strb	r3, [r7, #15]
 80064be:	e044      	b.n	800654a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d018      	beq.n	80064fa <RCCEx_PLLSAI2_Config+0x86>
 80064c8:	2b03      	cmp	r3, #3
 80064ca:	d825      	bhi.n	8006518 <RCCEx_PLLSAI2_Config+0xa4>
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d002      	beq.n	80064d6 <RCCEx_PLLSAI2_Config+0x62>
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d009      	beq.n	80064e8 <RCCEx_PLLSAI2_Config+0x74>
 80064d4:	e020      	b.n	8006518 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064d6:	4b55      	ldr	r3, [pc, #340]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d11d      	bne.n	800651e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064e6:	e01a      	b.n	800651e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064e8:	4b50      	ldr	r3, [pc, #320]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d116      	bne.n	8006522 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064f8:	e013      	b.n	8006522 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064fa:	4b4c      	ldr	r3, [pc, #304]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10f      	bne.n	8006526 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006506:	4b49      	ldr	r3, [pc, #292]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d109      	bne.n	8006526 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006516:	e006      	b.n	8006526 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	73fb      	strb	r3, [r7, #15]
      break;
 800651c:	e004      	b.n	8006528 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800651e:	bf00      	nop
 8006520:	e002      	b.n	8006528 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006522:	bf00      	nop
 8006524:	e000      	b.n	8006528 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006526:	bf00      	nop
    }

    if(status == HAL_OK)
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10d      	bne.n	800654a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800652e:	4b3f      	ldr	r3, [pc, #252]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6819      	ldr	r1, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	3b01      	subs	r3, #1
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	430b      	orrs	r3, r1
 8006544:	4939      	ldr	r1, [pc, #228]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006546:	4313      	orrs	r3, r2
 8006548:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800654a:	7bfb      	ldrb	r3, [r7, #15]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d167      	bne.n	8006620 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006550:	4b36      	ldr	r3, [pc, #216]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a35      	ldr	r2, [pc, #212]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006556:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800655a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800655c:	f7fb ff86 	bl	800246c <HAL_GetTick>
 8006560:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006562:	e009      	b.n	8006578 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006564:	f7fb ff82 	bl	800246c <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	2b02      	cmp	r3, #2
 8006570:	d902      	bls.n	8006578 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	73fb      	strb	r3, [r7, #15]
        break;
 8006576:	e005      	b.n	8006584 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006578:	4b2c      	ldr	r3, [pc, #176]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1ef      	bne.n	8006564 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d14a      	bne.n	8006620 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d111      	bne.n	80065b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006590:	4b26      	ldr	r3, [pc, #152]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6892      	ldr	r2, [r2, #8]
 80065a0:	0211      	lsls	r1, r2, #8
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	68d2      	ldr	r2, [r2, #12]
 80065a6:	0912      	lsrs	r2, r2, #4
 80065a8:	0452      	lsls	r2, r2, #17
 80065aa:	430a      	orrs	r2, r1
 80065ac:	491f      	ldr	r1, [pc, #124]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	614b      	str	r3, [r1, #20]
 80065b2:	e011      	b.n	80065d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065b4:	4b1d      	ldr	r3, [pc, #116]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80065bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6892      	ldr	r2, [r2, #8]
 80065c4:	0211      	lsls	r1, r2, #8
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	6912      	ldr	r2, [r2, #16]
 80065ca:	0852      	lsrs	r2, r2, #1
 80065cc:	3a01      	subs	r2, #1
 80065ce:	0652      	lsls	r2, r2, #25
 80065d0:	430a      	orrs	r2, r1
 80065d2:	4916      	ldr	r1, [pc, #88]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80065d8:	4b14      	ldr	r3, [pc, #80]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a13      	ldr	r2, [pc, #76]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e4:	f7fb ff42 	bl	800246c <HAL_GetTick>
 80065e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065ea:	e009      	b.n	8006600 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065ec:	f7fb ff3e 	bl	800246c <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d902      	bls.n	8006600 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	73fb      	strb	r3, [r7, #15]
          break;
 80065fe:	e005      	b.n	800660c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006600:	4b0a      	ldr	r3, [pc, #40]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0ef      	beq.n	80065ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006612:	4b06      	ldr	r3, [pc, #24]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006614:	695a      	ldr	r2, [r3, #20]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	4904      	ldr	r1, [pc, #16]	@ (800662c <RCCEx_PLLSAI2_Config+0x1b8>)
 800661c:	4313      	orrs	r3, r2
 800661e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006620:	7bfb      	ldrb	r3, [r7, #15]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	40021000 	.word	0x40021000

08006630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e095      	b.n	800676e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006646:	2b00      	cmp	r3, #0
 8006648:	d108      	bne.n	800665c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006652:	d009      	beq.n	8006668 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	61da      	str	r2, [r3, #28]
 800665a:	e005      	b.n	8006668 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d106      	bne.n	8006688 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fb fb02 	bl	8001c8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800669e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80066a8:	d902      	bls.n	80066b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80066aa:	2300      	movs	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	e002      	b.n	80066b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80066b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80066b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80066be:	d007      	beq.n	80066d0 <HAL_SPI_Init+0xa0>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80066c8:	d002      	beq.n	80066d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	431a      	orrs	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006712:	ea42 0103 	orr.w	r1, r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	0c1b      	lsrs	r3, r3, #16
 800672c:	f003 0204 	and.w	r2, r3, #4
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006734:	f003 0310 	and.w	r3, r3, #16
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800673e:	f003 0308 	and.w	r3, r3, #8
 8006742:	431a      	orrs	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800674c:	ea42 0103 	orr.w	r1, r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b082      	sub	sp, #8
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e049      	b.n	800681c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d106      	bne.n	80067a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f7fb fab9 	bl	8001d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2202      	movs	r2, #2
 80067a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	3304      	adds	r3, #4
 80067b2:	4619      	mov	r1, r3
 80067b4:	4610      	mov	r0, r2
 80067b6:	f000 fb05 	bl	8006dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b01      	cmp	r3, #1
 8006836:	d001      	beq.n	800683c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e047      	b.n	80068cc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a23      	ldr	r2, [pc, #140]	@ (80068d8 <HAL_TIM_Base_Start+0xb4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d01d      	beq.n	800688a <HAL_TIM_Base_Start+0x66>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006856:	d018      	beq.n	800688a <HAL_TIM_Base_Start+0x66>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a1f      	ldr	r2, [pc, #124]	@ (80068dc <HAL_TIM_Base_Start+0xb8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d013      	beq.n	800688a <HAL_TIM_Base_Start+0x66>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a1e      	ldr	r2, [pc, #120]	@ (80068e0 <HAL_TIM_Base_Start+0xbc>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00e      	beq.n	800688a <HAL_TIM_Base_Start+0x66>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a1c      	ldr	r2, [pc, #112]	@ (80068e4 <HAL_TIM_Base_Start+0xc0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d009      	beq.n	800688a <HAL_TIM_Base_Start+0x66>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a1b      	ldr	r2, [pc, #108]	@ (80068e8 <HAL_TIM_Base_Start+0xc4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d004      	beq.n	800688a <HAL_TIM_Base_Start+0x66>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a19      	ldr	r2, [pc, #100]	@ (80068ec <HAL_TIM_Base_Start+0xc8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d115      	bne.n	80068b6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	4b17      	ldr	r3, [pc, #92]	@ (80068f0 <HAL_TIM_Base_Start+0xcc>)
 8006892:	4013      	ands	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b06      	cmp	r3, #6
 800689a:	d015      	beq.n	80068c8 <HAL_TIM_Base_Start+0xa4>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068a2:	d011      	beq.n	80068c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b4:	e008      	b.n	80068c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 0201 	orr.w	r2, r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	e000      	b.n	80068ca <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	40012c00 	.word	0x40012c00
 80068dc:	40000400 	.word	0x40000400
 80068e0:	40000800 	.word	0x40000800
 80068e4:	40000c00 	.word	0x40000c00
 80068e8:	40013400 	.word	0x40013400
 80068ec:	40014000 	.word	0x40014000
 80068f0:	00010007 	.word	0x00010007

080068f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b01      	cmp	r3, #1
 8006906:	d001      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e04f      	b.n	80069ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f042 0201 	orr.w	r2, r2, #1
 8006922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a23      	ldr	r2, [pc, #140]	@ (80069b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d01d      	beq.n	800696a <HAL_TIM_Base_Start_IT+0x76>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006936:	d018      	beq.n	800696a <HAL_TIM_Base_Start_IT+0x76>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a1f      	ldr	r2, [pc, #124]	@ (80069bc <HAL_TIM_Base_Start_IT+0xc8>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d013      	beq.n	800696a <HAL_TIM_Base_Start_IT+0x76>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a1e      	ldr	r2, [pc, #120]	@ (80069c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d00e      	beq.n	800696a <HAL_TIM_Base_Start_IT+0x76>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1c      	ldr	r2, [pc, #112]	@ (80069c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d009      	beq.n	800696a <HAL_TIM_Base_Start_IT+0x76>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1b      	ldr	r2, [pc, #108]	@ (80069c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d004      	beq.n	800696a <HAL_TIM_Base_Start_IT+0x76>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a19      	ldr	r2, [pc, #100]	@ (80069cc <HAL_TIM_Base_Start_IT+0xd8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d115      	bne.n	8006996 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	4b17      	ldr	r3, [pc, #92]	@ (80069d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006972:	4013      	ands	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b06      	cmp	r3, #6
 800697a:	d015      	beq.n	80069a8 <HAL_TIM_Base_Start_IT+0xb4>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006982:	d011      	beq.n	80069a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0201 	orr.w	r2, r2, #1
 8006992:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006994:	e008      	b.n	80069a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0201 	orr.w	r2, r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	e000      	b.n	80069aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	40012c00 	.word	0x40012c00
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40000c00 	.word	0x40000c00
 80069c8:	40013400 	.word	0x40013400
 80069cc:	40014000 	.word	0x40014000
 80069d0:	00010007 	.word	0x00010007

080069d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d020      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01b      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f06f 0202 	mvn.w	r2, #2
 8006a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	f003 0303 	and.w	r3, r3, #3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f9b2 	bl	8006d88 <HAL_TIM_IC_CaptureCallback>
 8006a24:	e005      	b.n	8006a32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f9a4 	bl	8006d74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f9b5 	bl	8006d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f003 0304 	and.w	r3, r3, #4
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d020      	beq.n	8006a84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01b      	beq.n	8006a84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0204 	mvn.w	r2, #4
 8006a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2202      	movs	r2, #2
 8006a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f98c 	bl	8006d88 <HAL_TIM_IC_CaptureCallback>
 8006a70:	e005      	b.n	8006a7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f97e 	bl	8006d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f98f 	bl	8006d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f003 0308 	and.w	r3, r3, #8
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d020      	beq.n	8006ad0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f003 0308 	and.w	r3, r3, #8
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01b      	beq.n	8006ad0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0208 	mvn.w	r2, #8
 8006aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2204      	movs	r2, #4
 8006aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	f003 0303 	and.w	r3, r3, #3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f966 	bl	8006d88 <HAL_TIM_IC_CaptureCallback>
 8006abc:	e005      	b.n	8006aca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f958 	bl	8006d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f969 	bl	8006d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f003 0310 	and.w	r3, r3, #16
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d020      	beq.n	8006b1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f003 0310 	and.w	r3, r3, #16
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01b      	beq.n	8006b1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f06f 0210 	mvn.w	r2, #16
 8006aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2208      	movs	r2, #8
 8006af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f940 	bl	8006d88 <HAL_TIM_IC_CaptureCallback>
 8006b08:	e005      	b.n	8006b16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f932 	bl	8006d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f943 	bl	8006d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00c      	beq.n	8006b40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d007      	beq.n	8006b40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0201 	mvn.w	r2, #1
 8006b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7fa feb6 	bl	80018ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d104      	bne.n	8006b54 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00c      	beq.n	8006b6e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d007      	beq.n	8006b6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fafd 	bl	8007168 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00c      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d007      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 faf5 	bl	800717c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00c      	beq.n	8006bb6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d007      	beq.n	8006bb6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f8fd 	bl	8006db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f003 0320 	and.w	r3, r3, #32
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00c      	beq.n	8006bda <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d007      	beq.n	8006bda <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f06f 0220 	mvn.w	r2, #32
 8006bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fabd 	bl	8007154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bda:	bf00      	nop
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_TIM_ConfigClockSource+0x1c>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e0b6      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x18a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c1c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c28:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c3a:	d03e      	beq.n	8006cba <HAL_TIM_ConfigClockSource+0xd8>
 8006c3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c40:	f200 8087 	bhi.w	8006d52 <HAL_TIM_ConfigClockSource+0x170>
 8006c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c48:	f000 8086 	beq.w	8006d58 <HAL_TIM_ConfigClockSource+0x176>
 8006c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c50:	d87f      	bhi.n	8006d52 <HAL_TIM_ConfigClockSource+0x170>
 8006c52:	2b70      	cmp	r3, #112	@ 0x70
 8006c54:	d01a      	beq.n	8006c8c <HAL_TIM_ConfigClockSource+0xaa>
 8006c56:	2b70      	cmp	r3, #112	@ 0x70
 8006c58:	d87b      	bhi.n	8006d52 <HAL_TIM_ConfigClockSource+0x170>
 8006c5a:	2b60      	cmp	r3, #96	@ 0x60
 8006c5c:	d050      	beq.n	8006d00 <HAL_TIM_ConfigClockSource+0x11e>
 8006c5e:	2b60      	cmp	r3, #96	@ 0x60
 8006c60:	d877      	bhi.n	8006d52 <HAL_TIM_ConfigClockSource+0x170>
 8006c62:	2b50      	cmp	r3, #80	@ 0x50
 8006c64:	d03c      	beq.n	8006ce0 <HAL_TIM_ConfigClockSource+0xfe>
 8006c66:	2b50      	cmp	r3, #80	@ 0x50
 8006c68:	d873      	bhi.n	8006d52 <HAL_TIM_ConfigClockSource+0x170>
 8006c6a:	2b40      	cmp	r3, #64	@ 0x40
 8006c6c:	d058      	beq.n	8006d20 <HAL_TIM_ConfigClockSource+0x13e>
 8006c6e:	2b40      	cmp	r3, #64	@ 0x40
 8006c70:	d86f      	bhi.n	8006d52 <HAL_TIM_ConfigClockSource+0x170>
 8006c72:	2b30      	cmp	r3, #48	@ 0x30
 8006c74:	d064      	beq.n	8006d40 <HAL_TIM_ConfigClockSource+0x15e>
 8006c76:	2b30      	cmp	r3, #48	@ 0x30
 8006c78:	d86b      	bhi.n	8006d52 <HAL_TIM_ConfigClockSource+0x170>
 8006c7a:	2b20      	cmp	r3, #32
 8006c7c:	d060      	beq.n	8006d40 <HAL_TIM_ConfigClockSource+0x15e>
 8006c7e:	2b20      	cmp	r3, #32
 8006c80:	d867      	bhi.n	8006d52 <HAL_TIM_ConfigClockSource+0x170>
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d05c      	beq.n	8006d40 <HAL_TIM_ConfigClockSource+0x15e>
 8006c86:	2b10      	cmp	r3, #16
 8006c88:	d05a      	beq.n	8006d40 <HAL_TIM_ConfigClockSource+0x15e>
 8006c8a:	e062      	b.n	8006d52 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c9c:	f000 f9b2 	bl	8007004 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006cae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	609a      	str	r2, [r3, #8]
      break;
 8006cb8:	e04f      	b.n	8006d5a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cca:	f000 f99b 	bl	8007004 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cdc:	609a      	str	r2, [r3, #8]
      break;
 8006cde:	e03c      	b.n	8006d5a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cec:	461a      	mov	r2, r3
 8006cee:	f000 f90f 	bl	8006f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2150      	movs	r1, #80	@ 0x50
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 f968 	bl	8006fce <TIM_ITRx_SetConfig>
      break;
 8006cfe:	e02c      	b.n	8006d5a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	f000 f92e 	bl	8006f6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2160      	movs	r1, #96	@ 0x60
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 f958 	bl	8006fce <TIM_ITRx_SetConfig>
      break;
 8006d1e:	e01c      	b.n	8006d5a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	f000 f8ef 	bl	8006f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2140      	movs	r1, #64	@ 0x40
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 f948 	bl	8006fce <TIM_ITRx_SetConfig>
      break;
 8006d3e:	e00c      	b.n	8006d5a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	f000 f93f 	bl	8006fce <TIM_ITRx_SetConfig>
      break;
 8006d50:	e003      	b.n	8006d5a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	73fb      	strb	r3, [r7, #15]
      break;
 8006d56:	e000      	b.n	8006d5a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006d58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a46      	ldr	r2, [pc, #280]	@ (8006ef0 <TIM_Base_SetConfig+0x12c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d013      	beq.n	8006e04 <TIM_Base_SetConfig+0x40>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006de2:	d00f      	beq.n	8006e04 <TIM_Base_SetConfig+0x40>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a43      	ldr	r2, [pc, #268]	@ (8006ef4 <TIM_Base_SetConfig+0x130>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00b      	beq.n	8006e04 <TIM_Base_SetConfig+0x40>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a42      	ldr	r2, [pc, #264]	@ (8006ef8 <TIM_Base_SetConfig+0x134>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d007      	beq.n	8006e04 <TIM_Base_SetConfig+0x40>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a41      	ldr	r2, [pc, #260]	@ (8006efc <TIM_Base_SetConfig+0x138>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_Base_SetConfig+0x40>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a40      	ldr	r2, [pc, #256]	@ (8006f00 <TIM_Base_SetConfig+0x13c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d108      	bne.n	8006e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a35      	ldr	r2, [pc, #212]	@ (8006ef0 <TIM_Base_SetConfig+0x12c>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d01f      	beq.n	8006e5e <TIM_Base_SetConfig+0x9a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e24:	d01b      	beq.n	8006e5e <TIM_Base_SetConfig+0x9a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a32      	ldr	r2, [pc, #200]	@ (8006ef4 <TIM_Base_SetConfig+0x130>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d017      	beq.n	8006e5e <TIM_Base_SetConfig+0x9a>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a31      	ldr	r2, [pc, #196]	@ (8006ef8 <TIM_Base_SetConfig+0x134>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d013      	beq.n	8006e5e <TIM_Base_SetConfig+0x9a>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a30      	ldr	r2, [pc, #192]	@ (8006efc <TIM_Base_SetConfig+0x138>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d00f      	beq.n	8006e5e <TIM_Base_SetConfig+0x9a>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a2f      	ldr	r2, [pc, #188]	@ (8006f00 <TIM_Base_SetConfig+0x13c>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d00b      	beq.n	8006e5e <TIM_Base_SetConfig+0x9a>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a2e      	ldr	r2, [pc, #184]	@ (8006f04 <TIM_Base_SetConfig+0x140>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d007      	beq.n	8006e5e <TIM_Base_SetConfig+0x9a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a2d      	ldr	r2, [pc, #180]	@ (8006f08 <TIM_Base_SetConfig+0x144>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d003      	beq.n	8006e5e <TIM_Base_SetConfig+0x9a>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a2c      	ldr	r2, [pc, #176]	@ (8006f0c <TIM_Base_SetConfig+0x148>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d108      	bne.n	8006e70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	689a      	ldr	r2, [r3, #8]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a16      	ldr	r2, [pc, #88]	@ (8006ef0 <TIM_Base_SetConfig+0x12c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00f      	beq.n	8006ebc <TIM_Base_SetConfig+0xf8>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a18      	ldr	r2, [pc, #96]	@ (8006f00 <TIM_Base_SetConfig+0x13c>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d00b      	beq.n	8006ebc <TIM_Base_SetConfig+0xf8>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a17      	ldr	r2, [pc, #92]	@ (8006f04 <TIM_Base_SetConfig+0x140>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d007      	beq.n	8006ebc <TIM_Base_SetConfig+0xf8>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a16      	ldr	r2, [pc, #88]	@ (8006f08 <TIM_Base_SetConfig+0x144>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d003      	beq.n	8006ebc <TIM_Base_SetConfig+0xf8>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a15      	ldr	r2, [pc, #84]	@ (8006f0c <TIM_Base_SetConfig+0x148>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d103      	bne.n	8006ec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	691a      	ldr	r2, [r3, #16]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d105      	bne.n	8006ee2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	f023 0201 	bic.w	r2, r3, #1
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	611a      	str	r2, [r3, #16]
  }
}
 8006ee2:	bf00      	nop
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	40012c00 	.word	0x40012c00
 8006ef4:	40000400 	.word	0x40000400
 8006ef8:	40000800 	.word	0x40000800
 8006efc:	40000c00 	.word	0x40000c00
 8006f00:	40013400 	.word	0x40013400
 8006f04:	40014000 	.word	0x40014000
 8006f08:	40014400 	.word	0x40014400
 8006f0c:	40014800 	.word	0x40014800

08006f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	f023 0201 	bic.w	r2, r3, #1
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f023 030a 	bic.w	r3, r3, #10
 8006f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	621a      	str	r2, [r3, #32]
}
 8006f62:	bf00      	nop
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b087      	sub	sp, #28
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	60f8      	str	r0, [r7, #12]
 8006f76:	60b9      	str	r1, [r7, #8]
 8006f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	f023 0210 	bic.w	r2, r3, #16
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	031b      	lsls	r3, r3, #12
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006faa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	011b      	lsls	r3, r3, #4
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	621a      	str	r2, [r3, #32]
}
 8006fc2:	bf00      	nop
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fe4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	f043 0307 	orr.w	r3, r3, #7
 8006ff0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	609a      	str	r2, [r3, #8]
}
 8006ff8:	bf00      	nop
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
 8007010:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800701e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	021a      	lsls	r2, r3, #8
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	431a      	orrs	r2, r3
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	4313      	orrs	r3, r2
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	4313      	orrs	r3, r2
 8007030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	609a      	str	r2, [r3, #8]
}
 8007038:	bf00      	nop
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007058:	2302      	movs	r3, #2
 800705a:	e068      	b.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a2e      	ldr	r2, [pc, #184]	@ (800713c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d004      	beq.n	8007090 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a2d      	ldr	r2, [pc, #180]	@ (8007140 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d108      	bne.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007096:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a1e      	ldr	r2, [pc, #120]	@ (800713c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d01d      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ce:	d018      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007144 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d013      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a1a      	ldr	r2, [pc, #104]	@ (8007148 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00e      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a18      	ldr	r2, [pc, #96]	@ (800714c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d009      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a13      	ldr	r2, [pc, #76]	@ (8007140 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d004      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a14      	ldr	r2, [pc, #80]	@ (8007150 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d10c      	bne.n	800711c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	4313      	orrs	r3, r2
 8007112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	40012c00 	.word	0x40012c00
 8007140:	40013400 	.word	0x40013400
 8007144:	40000400 	.word	0x40000400
 8007148:	40000800 	.word	0x40000800
 800714c:	40000c00 	.word	0x40000c00
 8007150:	40014000 	.word	0x40014000

08007154 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e040      	b.n	8007224 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d106      	bne.n	80071b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7fa fdee 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2224      	movs	r2, #36	@ 0x24
 80071bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0201 	bic.w	r2, r2, #1
 80071cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fb6a 	bl	80078b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f8af 	bl	8007340 <UART_SetConfig>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e01b      	b.n	8007224 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689a      	ldr	r2, [r3, #8]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800720a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f042 0201 	orr.w	r2, r2, #1
 800721a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fbe9 	bl	80079f4 <UART_CheckIdleState>
 8007222:	4603      	mov	r3, r0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08a      	sub	sp, #40	@ 0x28
 8007230:	af02      	add	r7, sp, #8
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	603b      	str	r3, [r7, #0]
 8007238:	4613      	mov	r3, r2
 800723a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007240:	2b20      	cmp	r3, #32
 8007242:	d177      	bne.n	8007334 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <HAL_UART_Transmit+0x24>
 800724a:	88fb      	ldrh	r3, [r7, #6]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e070      	b.n	8007336 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2221      	movs	r2, #33	@ 0x21
 8007260:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007262:	f7fb f903 	bl	800246c <HAL_GetTick>
 8007266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	88fa      	ldrh	r2, [r7, #6]
 800726c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	88fa      	ldrh	r2, [r7, #6]
 8007274:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007280:	d108      	bne.n	8007294 <HAL_UART_Transmit+0x68>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d104      	bne.n	8007294 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800728a:	2300      	movs	r3, #0
 800728c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	61bb      	str	r3, [r7, #24]
 8007292:	e003      	b.n	800729c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007298:	2300      	movs	r3, #0
 800729a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800729c:	e02f      	b.n	80072fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2200      	movs	r2, #0
 80072a6:	2180      	movs	r1, #128	@ 0x80
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 fc4b 	bl	8007b44 <UART_WaitOnFlagUntilTimeout>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d004      	beq.n	80072be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2220      	movs	r2, #32
 80072b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e03b      	b.n	8007336 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10b      	bne.n	80072dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	881a      	ldrh	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072d0:	b292      	uxth	r2, r2
 80072d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	3302      	adds	r3, #2
 80072d8:	61bb      	str	r3, [r7, #24]
 80072da:	e007      	b.n	80072ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	781a      	ldrb	r2, [r3, #0]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	3301      	adds	r3, #1
 80072ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	3b01      	subs	r3, #1
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007304:	b29b      	uxth	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1c9      	bne.n	800729e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2200      	movs	r2, #0
 8007312:	2140      	movs	r1, #64	@ 0x40
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 fc15 	bl	8007b44 <UART_WaitOnFlagUntilTimeout>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d004      	beq.n	800732a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2220      	movs	r2, #32
 8007324:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e005      	b.n	8007336 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2220      	movs	r2, #32
 800732e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007330:	2300      	movs	r3, #0
 8007332:	e000      	b.n	8007336 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007334:	2302      	movs	r3, #2
  }
}
 8007336:	4618      	mov	r0, r3
 8007338:	3720      	adds	r7, #32
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
	...

08007340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007344:	b08a      	sub	sp, #40	@ 0x28
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	431a      	orrs	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	431a      	orrs	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	4313      	orrs	r3, r2
 8007366:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	4ba4      	ldr	r3, [pc, #656]	@ (8007600 <UART_SetConfig+0x2c0>)
 8007370:	4013      	ands	r3, r2
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	6812      	ldr	r2, [r2, #0]
 8007376:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007378:	430b      	orrs	r3, r1
 800737a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a99      	ldr	r2, [pc, #612]	@ (8007604 <UART_SetConfig+0x2c4>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d004      	beq.n	80073ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073a8:	4313      	orrs	r3, r2
 80073aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073bc:	430a      	orrs	r2, r1
 80073be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a90      	ldr	r2, [pc, #576]	@ (8007608 <UART_SetConfig+0x2c8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d126      	bne.n	8007418 <UART_SetConfig+0xd8>
 80073ca:	4b90      	ldr	r3, [pc, #576]	@ (800760c <UART_SetConfig+0x2cc>)
 80073cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d0:	f003 0303 	and.w	r3, r3, #3
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d81b      	bhi.n	8007410 <UART_SetConfig+0xd0>
 80073d8:	a201      	add	r2, pc, #4	@ (adr r2, 80073e0 <UART_SetConfig+0xa0>)
 80073da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073de:	bf00      	nop
 80073e0:	080073f1 	.word	0x080073f1
 80073e4:	08007401 	.word	0x08007401
 80073e8:	080073f9 	.word	0x080073f9
 80073ec:	08007409 	.word	0x08007409
 80073f0:	2301      	movs	r3, #1
 80073f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073f6:	e116      	b.n	8007626 <UART_SetConfig+0x2e6>
 80073f8:	2302      	movs	r3, #2
 80073fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073fe:	e112      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007400:	2304      	movs	r3, #4
 8007402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007406:	e10e      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007408:	2308      	movs	r3, #8
 800740a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800740e:	e10a      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007410:	2310      	movs	r3, #16
 8007412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007416:	e106      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a7c      	ldr	r2, [pc, #496]	@ (8007610 <UART_SetConfig+0x2d0>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d138      	bne.n	8007494 <UART_SetConfig+0x154>
 8007422:	4b7a      	ldr	r3, [pc, #488]	@ (800760c <UART_SetConfig+0x2cc>)
 8007424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007428:	f003 030c 	and.w	r3, r3, #12
 800742c:	2b0c      	cmp	r3, #12
 800742e:	d82d      	bhi.n	800748c <UART_SetConfig+0x14c>
 8007430:	a201      	add	r2, pc, #4	@ (adr r2, 8007438 <UART_SetConfig+0xf8>)
 8007432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007436:	bf00      	nop
 8007438:	0800746d 	.word	0x0800746d
 800743c:	0800748d 	.word	0x0800748d
 8007440:	0800748d 	.word	0x0800748d
 8007444:	0800748d 	.word	0x0800748d
 8007448:	0800747d 	.word	0x0800747d
 800744c:	0800748d 	.word	0x0800748d
 8007450:	0800748d 	.word	0x0800748d
 8007454:	0800748d 	.word	0x0800748d
 8007458:	08007475 	.word	0x08007475
 800745c:	0800748d 	.word	0x0800748d
 8007460:	0800748d 	.word	0x0800748d
 8007464:	0800748d 	.word	0x0800748d
 8007468:	08007485 	.word	0x08007485
 800746c:	2300      	movs	r3, #0
 800746e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007472:	e0d8      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007474:	2302      	movs	r3, #2
 8007476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800747a:	e0d4      	b.n	8007626 <UART_SetConfig+0x2e6>
 800747c:	2304      	movs	r3, #4
 800747e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007482:	e0d0      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007484:	2308      	movs	r3, #8
 8007486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800748a:	e0cc      	b.n	8007626 <UART_SetConfig+0x2e6>
 800748c:	2310      	movs	r3, #16
 800748e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007492:	e0c8      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a5e      	ldr	r2, [pc, #376]	@ (8007614 <UART_SetConfig+0x2d4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d125      	bne.n	80074ea <UART_SetConfig+0x1aa>
 800749e:	4b5b      	ldr	r3, [pc, #364]	@ (800760c <UART_SetConfig+0x2cc>)
 80074a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80074a8:	2b30      	cmp	r3, #48	@ 0x30
 80074aa:	d016      	beq.n	80074da <UART_SetConfig+0x19a>
 80074ac:	2b30      	cmp	r3, #48	@ 0x30
 80074ae:	d818      	bhi.n	80074e2 <UART_SetConfig+0x1a2>
 80074b0:	2b20      	cmp	r3, #32
 80074b2:	d00a      	beq.n	80074ca <UART_SetConfig+0x18a>
 80074b4:	2b20      	cmp	r3, #32
 80074b6:	d814      	bhi.n	80074e2 <UART_SetConfig+0x1a2>
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <UART_SetConfig+0x182>
 80074bc:	2b10      	cmp	r3, #16
 80074be:	d008      	beq.n	80074d2 <UART_SetConfig+0x192>
 80074c0:	e00f      	b.n	80074e2 <UART_SetConfig+0x1a2>
 80074c2:	2300      	movs	r3, #0
 80074c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074c8:	e0ad      	b.n	8007626 <UART_SetConfig+0x2e6>
 80074ca:	2302      	movs	r3, #2
 80074cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074d0:	e0a9      	b.n	8007626 <UART_SetConfig+0x2e6>
 80074d2:	2304      	movs	r3, #4
 80074d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074d8:	e0a5      	b.n	8007626 <UART_SetConfig+0x2e6>
 80074da:	2308      	movs	r3, #8
 80074dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074e0:	e0a1      	b.n	8007626 <UART_SetConfig+0x2e6>
 80074e2:	2310      	movs	r3, #16
 80074e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074e8:	e09d      	b.n	8007626 <UART_SetConfig+0x2e6>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a4a      	ldr	r2, [pc, #296]	@ (8007618 <UART_SetConfig+0x2d8>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d125      	bne.n	8007540 <UART_SetConfig+0x200>
 80074f4:	4b45      	ldr	r3, [pc, #276]	@ (800760c <UART_SetConfig+0x2cc>)
 80074f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80074fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007500:	d016      	beq.n	8007530 <UART_SetConfig+0x1f0>
 8007502:	2bc0      	cmp	r3, #192	@ 0xc0
 8007504:	d818      	bhi.n	8007538 <UART_SetConfig+0x1f8>
 8007506:	2b80      	cmp	r3, #128	@ 0x80
 8007508:	d00a      	beq.n	8007520 <UART_SetConfig+0x1e0>
 800750a:	2b80      	cmp	r3, #128	@ 0x80
 800750c:	d814      	bhi.n	8007538 <UART_SetConfig+0x1f8>
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <UART_SetConfig+0x1d8>
 8007512:	2b40      	cmp	r3, #64	@ 0x40
 8007514:	d008      	beq.n	8007528 <UART_SetConfig+0x1e8>
 8007516:	e00f      	b.n	8007538 <UART_SetConfig+0x1f8>
 8007518:	2300      	movs	r3, #0
 800751a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800751e:	e082      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007520:	2302      	movs	r3, #2
 8007522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007526:	e07e      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007528:	2304      	movs	r3, #4
 800752a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800752e:	e07a      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007530:	2308      	movs	r3, #8
 8007532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007536:	e076      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007538:	2310      	movs	r3, #16
 800753a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800753e:	e072      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a35      	ldr	r2, [pc, #212]	@ (800761c <UART_SetConfig+0x2dc>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d12a      	bne.n	80075a0 <UART_SetConfig+0x260>
 800754a:	4b30      	ldr	r3, [pc, #192]	@ (800760c <UART_SetConfig+0x2cc>)
 800754c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007550:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007554:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007558:	d01a      	beq.n	8007590 <UART_SetConfig+0x250>
 800755a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800755e:	d81b      	bhi.n	8007598 <UART_SetConfig+0x258>
 8007560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007564:	d00c      	beq.n	8007580 <UART_SetConfig+0x240>
 8007566:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800756a:	d815      	bhi.n	8007598 <UART_SetConfig+0x258>
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <UART_SetConfig+0x238>
 8007570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007574:	d008      	beq.n	8007588 <UART_SetConfig+0x248>
 8007576:	e00f      	b.n	8007598 <UART_SetConfig+0x258>
 8007578:	2300      	movs	r3, #0
 800757a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800757e:	e052      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007580:	2302      	movs	r3, #2
 8007582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007586:	e04e      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007588:	2304      	movs	r3, #4
 800758a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800758e:	e04a      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007590:	2308      	movs	r3, #8
 8007592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007596:	e046      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007598:	2310      	movs	r3, #16
 800759a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800759e:	e042      	b.n	8007626 <UART_SetConfig+0x2e6>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a17      	ldr	r2, [pc, #92]	@ (8007604 <UART_SetConfig+0x2c4>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d13a      	bne.n	8007620 <UART_SetConfig+0x2e0>
 80075aa:	4b18      	ldr	r3, [pc, #96]	@ (800760c <UART_SetConfig+0x2cc>)
 80075ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80075b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075b8:	d01a      	beq.n	80075f0 <UART_SetConfig+0x2b0>
 80075ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075be:	d81b      	bhi.n	80075f8 <UART_SetConfig+0x2b8>
 80075c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075c4:	d00c      	beq.n	80075e0 <UART_SetConfig+0x2a0>
 80075c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075ca:	d815      	bhi.n	80075f8 <UART_SetConfig+0x2b8>
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <UART_SetConfig+0x298>
 80075d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075d4:	d008      	beq.n	80075e8 <UART_SetConfig+0x2a8>
 80075d6:	e00f      	b.n	80075f8 <UART_SetConfig+0x2b8>
 80075d8:	2300      	movs	r3, #0
 80075da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075de:	e022      	b.n	8007626 <UART_SetConfig+0x2e6>
 80075e0:	2302      	movs	r3, #2
 80075e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075e6:	e01e      	b.n	8007626 <UART_SetConfig+0x2e6>
 80075e8:	2304      	movs	r3, #4
 80075ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ee:	e01a      	b.n	8007626 <UART_SetConfig+0x2e6>
 80075f0:	2308      	movs	r3, #8
 80075f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075f6:	e016      	b.n	8007626 <UART_SetConfig+0x2e6>
 80075f8:	2310      	movs	r3, #16
 80075fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075fe:	e012      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007600:	efff69f3 	.word	0xefff69f3
 8007604:	40008000 	.word	0x40008000
 8007608:	40013800 	.word	0x40013800
 800760c:	40021000 	.word	0x40021000
 8007610:	40004400 	.word	0x40004400
 8007614:	40004800 	.word	0x40004800
 8007618:	40004c00 	.word	0x40004c00
 800761c:	40005000 	.word	0x40005000
 8007620:	2310      	movs	r3, #16
 8007622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a9f      	ldr	r2, [pc, #636]	@ (80078a8 <UART_SetConfig+0x568>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d17a      	bne.n	8007726 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007630:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007634:	2b08      	cmp	r3, #8
 8007636:	d824      	bhi.n	8007682 <UART_SetConfig+0x342>
 8007638:	a201      	add	r2, pc, #4	@ (adr r2, 8007640 <UART_SetConfig+0x300>)
 800763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763e:	bf00      	nop
 8007640:	08007665 	.word	0x08007665
 8007644:	08007683 	.word	0x08007683
 8007648:	0800766d 	.word	0x0800766d
 800764c:	08007683 	.word	0x08007683
 8007650:	08007673 	.word	0x08007673
 8007654:	08007683 	.word	0x08007683
 8007658:	08007683 	.word	0x08007683
 800765c:	08007683 	.word	0x08007683
 8007660:	0800767b 	.word	0x0800767b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007664:	f7fe fa5a 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 8007668:	61f8      	str	r0, [r7, #28]
        break;
 800766a:	e010      	b.n	800768e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800766c:	4b8f      	ldr	r3, [pc, #572]	@ (80078ac <UART_SetConfig+0x56c>)
 800766e:	61fb      	str	r3, [r7, #28]
        break;
 8007670:	e00d      	b.n	800768e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007672:	f7fe f9bb 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 8007676:	61f8      	str	r0, [r7, #28]
        break;
 8007678:	e009      	b.n	800768e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800767a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800767e:	61fb      	str	r3, [r7, #28]
        break;
 8007680:	e005      	b.n	800768e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800768c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 80fb 	beq.w	800788c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	4613      	mov	r3, r2
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	4413      	add	r3, r2
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d305      	bcc.n	80076b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076ac:	69fa      	ldr	r2, [r7, #28]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d903      	bls.n	80076ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80076b8:	e0e8      	b.n	800788c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	2200      	movs	r2, #0
 80076be:	461c      	mov	r4, r3
 80076c0:	4615      	mov	r5, r2
 80076c2:	f04f 0200 	mov.w	r2, #0
 80076c6:	f04f 0300 	mov.w	r3, #0
 80076ca:	022b      	lsls	r3, r5, #8
 80076cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80076d0:	0222      	lsls	r2, r4, #8
 80076d2:	68f9      	ldr	r1, [r7, #12]
 80076d4:	6849      	ldr	r1, [r1, #4]
 80076d6:	0849      	lsrs	r1, r1, #1
 80076d8:	2000      	movs	r0, #0
 80076da:	4688      	mov	r8, r1
 80076dc:	4681      	mov	r9, r0
 80076de:	eb12 0a08 	adds.w	sl, r2, r8
 80076e2:	eb43 0b09 	adc.w	fp, r3, r9
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	603b      	str	r3, [r7, #0]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f4:	4650      	mov	r0, sl
 80076f6:	4659      	mov	r1, fp
 80076f8:	f7f9 fa56 	bl	8000ba8 <__aeabi_uldivmod>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4613      	mov	r3, r2
 8007702:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800770a:	d308      	bcc.n	800771e <UART_SetConfig+0x3de>
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007712:	d204      	bcs.n	800771e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	60da      	str	r2, [r3, #12]
 800771c:	e0b6      	b.n	800788c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007724:	e0b2      	b.n	800788c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800772e:	d15e      	bne.n	80077ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007730:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007734:	2b08      	cmp	r3, #8
 8007736:	d828      	bhi.n	800778a <UART_SetConfig+0x44a>
 8007738:	a201      	add	r2, pc, #4	@ (adr r2, 8007740 <UART_SetConfig+0x400>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007765 	.word	0x08007765
 8007744:	0800776d 	.word	0x0800776d
 8007748:	08007775 	.word	0x08007775
 800774c:	0800778b 	.word	0x0800778b
 8007750:	0800777b 	.word	0x0800777b
 8007754:	0800778b 	.word	0x0800778b
 8007758:	0800778b 	.word	0x0800778b
 800775c:	0800778b 	.word	0x0800778b
 8007760:	08007783 	.word	0x08007783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007764:	f7fe f9da 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 8007768:	61f8      	str	r0, [r7, #28]
        break;
 800776a:	e014      	b.n	8007796 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800776c:	f7fe f9ec 	bl	8005b48 <HAL_RCC_GetPCLK2Freq>
 8007770:	61f8      	str	r0, [r7, #28]
        break;
 8007772:	e010      	b.n	8007796 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007774:	4b4d      	ldr	r3, [pc, #308]	@ (80078ac <UART_SetConfig+0x56c>)
 8007776:	61fb      	str	r3, [r7, #28]
        break;
 8007778:	e00d      	b.n	8007796 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800777a:	f7fe f937 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 800777e:	61f8      	str	r0, [r7, #28]
        break;
 8007780:	e009      	b.n	8007796 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007786:	61fb      	str	r3, [r7, #28]
        break;
 8007788:	e005      	b.n	8007796 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007794:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d077      	beq.n	800788c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	005a      	lsls	r2, r3, #1
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	085b      	lsrs	r3, r3, #1
 80077a6:	441a      	add	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	2b0f      	cmp	r3, #15
 80077b6:	d916      	bls.n	80077e6 <UART_SetConfig+0x4a6>
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077be:	d212      	bcs.n	80077e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	f023 030f 	bic.w	r3, r3, #15
 80077c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	085b      	lsrs	r3, r3, #1
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	f003 0307 	and.w	r3, r3, #7
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	8afb      	ldrh	r3, [r7, #22]
 80077d8:	4313      	orrs	r3, r2
 80077da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	8afa      	ldrh	r2, [r7, #22]
 80077e2:	60da      	str	r2, [r3, #12]
 80077e4:	e052      	b.n	800788c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80077ec:	e04e      	b.n	800788c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80077f2:	2b08      	cmp	r3, #8
 80077f4:	d827      	bhi.n	8007846 <UART_SetConfig+0x506>
 80077f6:	a201      	add	r2, pc, #4	@ (adr r2, 80077fc <UART_SetConfig+0x4bc>)
 80077f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fc:	08007821 	.word	0x08007821
 8007800:	08007829 	.word	0x08007829
 8007804:	08007831 	.word	0x08007831
 8007808:	08007847 	.word	0x08007847
 800780c:	08007837 	.word	0x08007837
 8007810:	08007847 	.word	0x08007847
 8007814:	08007847 	.word	0x08007847
 8007818:	08007847 	.word	0x08007847
 800781c:	0800783f 	.word	0x0800783f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007820:	f7fe f97c 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 8007824:	61f8      	str	r0, [r7, #28]
        break;
 8007826:	e014      	b.n	8007852 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007828:	f7fe f98e 	bl	8005b48 <HAL_RCC_GetPCLK2Freq>
 800782c:	61f8      	str	r0, [r7, #28]
        break;
 800782e:	e010      	b.n	8007852 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007830:	4b1e      	ldr	r3, [pc, #120]	@ (80078ac <UART_SetConfig+0x56c>)
 8007832:	61fb      	str	r3, [r7, #28]
        break;
 8007834:	e00d      	b.n	8007852 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007836:	f7fe f8d9 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 800783a:	61f8      	str	r0, [r7, #28]
        break;
 800783c:	e009      	b.n	8007852 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800783e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007842:	61fb      	str	r3, [r7, #28]
        break;
 8007844:	e005      	b.n	8007852 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007850:	bf00      	nop
    }

    if (pclk != 0U)
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d019      	beq.n	800788c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	085a      	lsrs	r2, r3, #1
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	441a      	add	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	fbb2 f3f3 	udiv	r3, r2, r3
 800786a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	2b0f      	cmp	r3, #15
 8007870:	d909      	bls.n	8007886 <UART_SetConfig+0x546>
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007878:	d205      	bcs.n	8007886 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	b29a      	uxth	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	60da      	str	r2, [r3, #12]
 8007884:	e002      	b.n	800788c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007898:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800789c:	4618      	mov	r0, r3
 800789e:	3728      	adds	r7, #40	@ 0x28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078a6:	bf00      	nop
 80078a8:	40008000 	.word	0x40008000
 80078ac:	00f42400 	.word	0x00f42400

080078b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078bc:	f003 0308 	and.w	r3, r3, #8
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00a      	beq.n	80078da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00a      	beq.n	80078fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	430a      	orrs	r2, r1
 80078fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00a      	beq.n	800791e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007922:	f003 0304 	and.w	r3, r3, #4
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00a      	beq.n	8007940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	430a      	orrs	r2, r1
 800793e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007944:	f003 0310 	and.w	r3, r3, #16
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00a      	beq.n	8007962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007966:	f003 0320 	and.w	r3, r3, #32
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	430a      	orrs	r2, r1
 8007982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800798c:	2b00      	cmp	r3, #0
 800798e:	d01a      	beq.n	80079c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079ae:	d10a      	bne.n	80079c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	605a      	str	r2, [r3, #4]
  }
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b098      	sub	sp, #96	@ 0x60
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a04:	f7fa fd32 	bl	800246c <HAL_GetTick>
 8007a08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0308 	and.w	r3, r3, #8
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	d12e      	bne.n	8007a76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a20:	2200      	movs	r2, #0
 8007a22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f88c 	bl	8007b44 <UART_WaitOnFlagUntilTimeout>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d021      	beq.n	8007a76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3a:	e853 3f00 	ldrex	r3, [r3]
 8007a3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a46:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a50:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a52:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a58:	e841 2300 	strex	r3, r2, [r1]
 8007a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1e6      	bne.n	8007a32 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2220      	movs	r2, #32
 8007a68:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e062      	b.n	8007b3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	d149      	bne.n	8007b18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f856 	bl	8007b44 <UART_WaitOnFlagUntilTimeout>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d03c      	beq.n	8007b18 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa6:	e853 3f00 	ldrex	r3, [r3]
 8007aaa:	623b      	str	r3, [r7, #32]
   return(result);
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007abe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ac4:	e841 2300 	strex	r3, r2, [r1]
 8007ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1e6      	bne.n	8007a9e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f023 0301 	bic.w	r3, r3, #1
 8007ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3308      	adds	r3, #8
 8007aee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007af0:	61fa      	str	r2, [r7, #28]
 8007af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	69b9      	ldr	r1, [r7, #24]
 8007af6:	69fa      	ldr	r2, [r7, #28]
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	617b      	str	r3, [r7, #20]
   return(result);
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e5      	bne.n	8007ad0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2220      	movs	r2, #32
 8007b08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e011      	b.n	8007b3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2220      	movs	r2, #32
 8007b22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3758      	adds	r7, #88	@ 0x58
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	603b      	str	r3, [r7, #0]
 8007b50:	4613      	mov	r3, r2
 8007b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b54:	e04f      	b.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5c:	d04b      	beq.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5e:	f7fa fc85 	bl	800246c <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d302      	bcc.n	8007b74 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e04e      	b.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0304 	and.w	r3, r3, #4
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d037      	beq.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2b80      	cmp	r3, #128	@ 0x80
 8007b8a:	d034      	beq.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b40      	cmp	r3, #64	@ 0x40
 8007b90:	d031      	beq.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	69db      	ldr	r3, [r3, #28]
 8007b98:	f003 0308 	and.w	r3, r3, #8
 8007b9c:	2b08      	cmp	r3, #8
 8007b9e:	d110      	bne.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2208      	movs	r2, #8
 8007ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 f838 	bl	8007c1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2208      	movs	r2, #8
 8007bb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e029      	b.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bd0:	d111      	bne.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 f81e 	bl	8007c1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2220      	movs	r2, #32
 8007be6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e00f      	b.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69da      	ldr	r2, [r3, #28]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	bf0c      	ite	eq
 8007c06:	2301      	moveq	r3, #1
 8007c08:	2300      	movne	r3, #0
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d0a0      	beq.n	8007b56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b095      	sub	sp, #84	@ 0x54
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c2e:	e853 3f00 	ldrex	r3, [r3]
 8007c32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	461a      	mov	r2, r3
 8007c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c44:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c4c:	e841 2300 	strex	r3, r2, [r1]
 8007c50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e6      	bne.n	8007c26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	f023 0301 	bic.w	r3, r3, #1
 8007c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3308      	adds	r3, #8
 8007c76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e5      	bne.n	8007c58 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d118      	bne.n	8007cc6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f023 0310 	bic.w	r3, r3, #16
 8007ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cb2:	61bb      	str	r3, [r7, #24]
 8007cb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	6979      	ldr	r1, [r7, #20]
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e6      	bne.n	8007c94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007cda:	bf00      	nop
 8007cdc:	3754      	adds	r7, #84	@ 0x54
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	f107 001c 	add.w	r0, r7, #28
 8007cf4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fa69 	bl	80081dc <USB_CoreReset>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007d0e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d106      	bne.n	8007d24 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d1a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d22:	e005      	b.n	8007d30 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d3c:	b004      	add	sp, #16
 8007d3e:	4770      	bx	lr

08007d40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f023 0201 	bic.w	r2, r3, #1
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d7e:	78fb      	ldrb	r3, [r7, #3]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d115      	bne.n	8007db0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d90:	200a      	movs	r0, #10
 8007d92:	f7fa fb77 	bl	8002484 <HAL_Delay>
      ms += 10U;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	330a      	adds	r3, #10
 8007d9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fa0f 	bl	80081c0 <USB_GetMode>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d01e      	beq.n	8007de6 <USB_SetCurrentMode+0x84>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2bc7      	cmp	r3, #199	@ 0xc7
 8007dac:	d9f0      	bls.n	8007d90 <USB_SetCurrentMode+0x2e>
 8007dae:	e01a      	b.n	8007de6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007db0:	78fb      	ldrb	r3, [r7, #3]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d115      	bne.n	8007de2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007dc2:	200a      	movs	r0, #10
 8007dc4:	f7fa fb5e 	bl	8002484 <HAL_Delay>
      ms += 10U;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	330a      	adds	r3, #10
 8007dcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f9f6 	bl	80081c0 <USB_GetMode>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d005      	beq.n	8007de6 <USB_SetCurrentMode+0x84>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2bc7      	cmp	r3, #199	@ 0xc7
 8007dde:	d9f0      	bls.n	8007dc2 <USB_SetCurrentMode+0x60>
 8007de0:	e001      	b.n	8007de6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e005      	b.n	8007df2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2bc8      	cmp	r3, #200	@ 0xc8
 8007dea:	d101      	bne.n	8007df0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
	...

08007dfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b086      	sub	sp, #24
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007e0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e16:	2300      	movs	r3, #0
 8007e18:	613b      	str	r3, [r7, #16]
 8007e1a:	e009      	b.n	8007e30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	3340      	adds	r3, #64	@ 0x40
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	2200      	movs	r2, #0
 8007e28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	613b      	str	r3, [r7, #16]
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	2b0e      	cmp	r3, #14
 8007e34:	d9f2      	bls.n	8007e1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d11c      	bne.n	8007e78 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e4c:	f043 0302 	orr.w	r3, r3, #2
 8007e50:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e56:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	e005      	b.n	8007e84 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e7c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e90:	2103      	movs	r1, #3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f95a 	bl	800814c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e98:	2110      	movs	r1, #16
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f8f6 	bl	800808c <USB_FlushTxFifo>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f920 	bl	80080f0 <USB_FlushRxFifo>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ecc:	461a      	mov	r2, r3
 8007ece:	2300      	movs	r3, #0
 8007ed0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ed8:	461a      	mov	r2, r3
 8007eda:	2300      	movs	r3, #0
 8007edc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ede:	2300      	movs	r3, #0
 8007ee0:	613b      	str	r3, [r7, #16]
 8007ee2:	e043      	b.n	8007f6c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007efa:	d118      	bne.n	8007f2e <USB_DevInit+0x132>
    {
      if (i == 0U)
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10a      	bne.n	8007f18 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	015a      	lsls	r2, r3, #5
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	4413      	add	r3, r2
 8007f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007f14:	6013      	str	r3, [r2, #0]
 8007f16:	e013      	b.n	8007f40 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f24:	461a      	mov	r2, r3
 8007f26:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007f2a:	6013      	str	r3, [r2, #0]
 8007f2c:	e008      	b.n	8007f40 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	015a      	lsls	r2, r3, #5
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	4413      	add	r3, r2
 8007f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	2300      	movs	r3, #0
 8007f50:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	613b      	str	r3, [r7, #16]
 8007f6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007f70:	461a      	mov	r2, r3
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d3b5      	bcc.n	8007ee4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f78:	2300      	movs	r3, #0
 8007f7a:	613b      	str	r3, [r7, #16]
 8007f7c:	e043      	b.n	8008006 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f94:	d118      	bne.n	8007fc8 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10a      	bne.n	8007fb2 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fa8:	461a      	mov	r2, r3
 8007faa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007fae:	6013      	str	r3, [r2, #0]
 8007fb0:	e013      	b.n	8007fda <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007fc4:	6013      	str	r3, [r2, #0]
 8007fc6:	e008      	b.n	8007fda <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	015a      	lsls	r2, r3, #5
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	2300      	movs	r3, #0
 8007fea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ffe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	3301      	adds	r3, #1
 8008004:	613b      	str	r3, [r7, #16]
 8008006:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800800a:	461a      	mov	r2, r3
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	4293      	cmp	r3, r2
 8008010:	d3b5      	bcc.n	8007f7e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008024:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008032:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	f043 0210 	orr.w	r2, r3, #16
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	699a      	ldr	r2, [r3, #24]
 8008044:	4b10      	ldr	r3, [pc, #64]	@ (8008088 <USB_DevInit+0x28c>)
 8008046:	4313      	orrs	r3, r2
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800804c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008050:	2b00      	cmp	r3, #0
 8008052:	d005      	beq.n	8008060 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	f043 0208 	orr.w	r2, r3, #8
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008060:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008064:	2b01      	cmp	r3, #1
 8008066:	d107      	bne.n	8008078 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008070:	f043 0304 	orr.w	r3, r3, #4
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008078:	7dfb      	ldrb	r3, [r7, #23]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008084:	b004      	add	sp, #16
 8008086:	4770      	bx	lr
 8008088:	803c3800 	.word	0x803c3800

0800808c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3301      	adds	r3, #1
 800809e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080a6:	d901      	bls.n	80080ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e01b      	b.n	80080e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	daf2      	bge.n	800809a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	019b      	lsls	r3, r3, #6
 80080bc:	f043 0220 	orr.w	r2, r3, #32
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3301      	adds	r3, #1
 80080c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080d0:	d901      	bls.n	80080d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e006      	b.n	80080e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	f003 0320 	and.w	r3, r3, #32
 80080de:	2b20      	cmp	r3, #32
 80080e0:	d0f0      	beq.n	80080c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3301      	adds	r3, #1
 8008100:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008108:	d901      	bls.n	800810e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e018      	b.n	8008140 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	2b00      	cmp	r3, #0
 8008114:	daf2      	bge.n	80080fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2210      	movs	r2, #16
 800811e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3301      	adds	r3, #1
 8008124:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800812c:	d901      	bls.n	8008132 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e006      	b.n	8008140 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f003 0310 	and.w	r3, r3, #16
 800813a:	2b10      	cmp	r3, #16
 800813c:	d0f0      	beq.n	8008120 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	78fb      	ldrb	r3, [r7, #3]
 8008166:	68f9      	ldr	r1, [r7, #12]
 8008168:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800816c:	4313      	orrs	r3, r2
 800816e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800817e:	b480      	push	{r7}
 8008180:	b085      	sub	sp, #20
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008198:	f023 0303 	bic.w	r3, r3, #3
 800819c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081ac:	f043 0302 	orr.w	r3, r3, #2
 80081b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	f003 0301 	and.w	r3, r3, #1
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081e4:	2300      	movs	r3, #0
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3301      	adds	r3, #1
 80081ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081f4:	d901      	bls.n	80081fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e01b      	b.n	8008232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	daf2      	bge.n	80081e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008202:	2300      	movs	r3, #0
 8008204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	f043 0201 	orr.w	r2, r3, #1
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3301      	adds	r3, #1
 8008216:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800821e:	d901      	bls.n	8008224 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e006      	b.n	8008232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	2b01      	cmp	r3, #1
 800822e:	d0f0      	beq.n	8008212 <USB_CoreReset+0x36>

  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
	...

08008240 <__NVIC_SetPriority>:
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	6039      	str	r1, [r7, #0]
 800824a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800824c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008250:	2b00      	cmp	r3, #0
 8008252:	db0a      	blt.n	800826a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	b2da      	uxtb	r2, r3
 8008258:	490c      	ldr	r1, [pc, #48]	@ (800828c <__NVIC_SetPriority+0x4c>)
 800825a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800825e:	0112      	lsls	r2, r2, #4
 8008260:	b2d2      	uxtb	r2, r2
 8008262:	440b      	add	r3, r1
 8008264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008268:	e00a      	b.n	8008280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	b2da      	uxtb	r2, r3
 800826e:	4908      	ldr	r1, [pc, #32]	@ (8008290 <__NVIC_SetPriority+0x50>)
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	f003 030f 	and.w	r3, r3, #15
 8008276:	3b04      	subs	r3, #4
 8008278:	0112      	lsls	r2, r2, #4
 800827a:	b2d2      	uxtb	r2, r2
 800827c:	440b      	add	r3, r1
 800827e:	761a      	strb	r2, [r3, #24]
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	e000e100 	.word	0xe000e100
 8008290:	e000ed00 	.word	0xe000ed00

08008294 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008298:	4b05      	ldr	r3, [pc, #20]	@ (80082b0 <SysTick_Handler+0x1c>)
 800829a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800829c:	f002 f918 	bl	800a4d0 <xTaskGetSchedulerState>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d001      	beq.n	80082aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80082a6:	f003 f80f 	bl	800b2c8 <xPortSysTickHandler>
  }
}
 80082aa:	bf00      	nop
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	e000e010 	.word	0xe000e010

080082b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80082b8:	2100      	movs	r1, #0
 80082ba:	f06f 0004 	mvn.w	r0, #4
 80082be:	f7ff ffbf 	bl	8008240 <__NVIC_SetPriority>
#endif
}
 80082c2:	bf00      	nop
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082ce:	f3ef 8305 	mrs	r3, IPSR
 80082d2:	603b      	str	r3, [r7, #0]
  return(result);
 80082d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80082da:	f06f 0305 	mvn.w	r3, #5
 80082de:	607b      	str	r3, [r7, #4]
 80082e0:	e00c      	b.n	80082fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80082e2:	4b0a      	ldr	r3, [pc, #40]	@ (800830c <osKernelInitialize+0x44>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d105      	bne.n	80082f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80082ea:	4b08      	ldr	r3, [pc, #32]	@ (800830c <osKernelInitialize+0x44>)
 80082ec:	2201      	movs	r2, #1
 80082ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	607b      	str	r3, [r7, #4]
 80082f4:	e002      	b.n	80082fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80082f6:	f04f 33ff 	mov.w	r3, #4294967295
 80082fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082fc:	687b      	ldr	r3, [r7, #4]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	20000c9c 	.word	0x20000c9c

08008310 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008316:	f3ef 8305 	mrs	r3, IPSR
 800831a:	603b      	str	r3, [r7, #0]
  return(result);
 800831c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008322:	f06f 0305 	mvn.w	r3, #5
 8008326:	607b      	str	r3, [r7, #4]
 8008328:	e010      	b.n	800834c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800832a:	4b0b      	ldr	r3, [pc, #44]	@ (8008358 <osKernelStart+0x48>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d109      	bne.n	8008346 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008332:	f7ff ffbf 	bl	80082b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008336:	4b08      	ldr	r3, [pc, #32]	@ (8008358 <osKernelStart+0x48>)
 8008338:	2202      	movs	r2, #2
 800833a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800833c:	f001 fc7a 	bl	8009c34 <vTaskStartScheduler>
      stat = osOK;
 8008340:	2300      	movs	r3, #0
 8008342:	607b      	str	r3, [r7, #4]
 8008344:	e002      	b.n	800834c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008346:	f04f 33ff 	mov.w	r3, #4294967295
 800834a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800834c:	687b      	ldr	r3, [r7, #4]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20000c9c 	.word	0x20000c9c

0800835c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800835c:	b580      	push	{r7, lr}
 800835e:	b08e      	sub	sp, #56	@ 0x38
 8008360:	af04      	add	r7, sp, #16
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008368:	2300      	movs	r3, #0
 800836a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800836c:	f3ef 8305 	mrs	r3, IPSR
 8008370:	617b      	str	r3, [r7, #20]
  return(result);
 8008372:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008374:	2b00      	cmp	r3, #0
 8008376:	d17e      	bne.n	8008476 <osThreadNew+0x11a>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d07b      	beq.n	8008476 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800837e:	2380      	movs	r3, #128	@ 0x80
 8008380:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008382:	2318      	movs	r3, #24
 8008384:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008386:	2300      	movs	r3, #0
 8008388:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800838a:	f04f 33ff 	mov.w	r3, #4294967295
 800838e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d045      	beq.n	8008422 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <osThreadNew+0x48>
        name = attr->name;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d002      	beq.n	80083b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d008      	beq.n	80083ca <osThreadNew+0x6e>
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	2b38      	cmp	r3, #56	@ 0x38
 80083bc:	d805      	bhi.n	80083ca <osThreadNew+0x6e>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d001      	beq.n	80083ce <osThreadNew+0x72>
        return (NULL);
 80083ca:	2300      	movs	r3, #0
 80083cc:	e054      	b.n	8008478 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	089b      	lsrs	r3, r3, #2
 80083dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00e      	beq.n	8008404 <osThreadNew+0xa8>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	2b5b      	cmp	r3, #91	@ 0x5b
 80083ec:	d90a      	bls.n	8008404 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d006      	beq.n	8008404 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d002      	beq.n	8008404 <osThreadNew+0xa8>
        mem = 1;
 80083fe:	2301      	movs	r3, #1
 8008400:	61bb      	str	r3, [r7, #24]
 8008402:	e010      	b.n	8008426 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10c      	bne.n	8008426 <osThreadNew+0xca>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d108      	bne.n	8008426 <osThreadNew+0xca>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d104      	bne.n	8008426 <osThreadNew+0xca>
          mem = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	61bb      	str	r3, [r7, #24]
 8008420:	e001      	b.n	8008426 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d110      	bne.n	800844e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008434:	9202      	str	r2, [sp, #8]
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	6a3a      	ldr	r2, [r7, #32]
 8008440:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f001 fa50 	bl	80098e8 <xTaskCreateStatic>
 8008448:	4603      	mov	r3, r0
 800844a:	613b      	str	r3, [r7, #16]
 800844c:	e013      	b.n	8008476 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d110      	bne.n	8008476 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	b29a      	uxth	r2, r3
 8008458:	f107 0310 	add.w	r3, r7, #16
 800845c:	9301      	str	r3, [sp, #4]
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f001 fa9e 	bl	80099a8 <xTaskCreate>
 800846c:	4603      	mov	r3, r0
 800846e:	2b01      	cmp	r3, #1
 8008470:	d001      	beq.n	8008476 <osThreadNew+0x11a>
            hTask = NULL;
 8008472:	2300      	movs	r3, #0
 8008474:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008476:	693b      	ldr	r3, [r7, #16]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3728      	adds	r7, #40	@ 0x28
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008480:	b580      	push	{r7, lr}
 8008482:	b08a      	sub	sp, #40	@ 0x28
 8008484:	af02      	add	r7, sp, #8
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800848c:	2300      	movs	r3, #0
 800848e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008490:	f3ef 8305 	mrs	r3, IPSR
 8008494:	613b      	str	r3, [r7, #16]
  return(result);
 8008496:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008498:	2b00      	cmp	r3, #0
 800849a:	d175      	bne.n	8008588 <osSemaphoreNew+0x108>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d072      	beq.n	8008588 <osSemaphoreNew+0x108>
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d86e      	bhi.n	8008588 <osSemaphoreNew+0x108>
    mem = -1;
 80084aa:	f04f 33ff 	mov.w	r3, #4294967295
 80084ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d015      	beq.n	80084e2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d006      	beq.n	80084cc <osSemaphoreNew+0x4c>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	2b4f      	cmp	r3, #79	@ 0x4f
 80084c4:	d902      	bls.n	80084cc <osSemaphoreNew+0x4c>
        mem = 1;
 80084c6:	2301      	movs	r3, #1
 80084c8:	61bb      	str	r3, [r7, #24]
 80084ca:	e00c      	b.n	80084e6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d108      	bne.n	80084e6 <osSemaphoreNew+0x66>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d104      	bne.n	80084e6 <osSemaphoreNew+0x66>
          mem = 0;
 80084dc:	2300      	movs	r3, #0
 80084de:	61bb      	str	r3, [r7, #24]
 80084e0:	e001      	b.n	80084e6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ec:	d04c      	beq.n	8008588 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d128      	bne.n	8008546 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d10a      	bne.n	8008510 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	2203      	movs	r2, #3
 8008500:	9200      	str	r2, [sp, #0]
 8008502:	2200      	movs	r2, #0
 8008504:	2100      	movs	r1, #0
 8008506:	2001      	movs	r0, #1
 8008508:	f000 fa2c 	bl	8008964 <xQueueGenericCreateStatic>
 800850c:	61f8      	str	r0, [r7, #28]
 800850e:	e005      	b.n	800851c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008510:	2203      	movs	r2, #3
 8008512:	2100      	movs	r1, #0
 8008514:	2001      	movs	r0, #1
 8008516:	f000 faa2 	bl	8008a5e <xQueueGenericCreate>
 800851a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d022      	beq.n	8008568 <osSemaphoreNew+0xe8>
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01f      	beq.n	8008568 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008528:	2300      	movs	r3, #0
 800852a:	2200      	movs	r2, #0
 800852c:	2100      	movs	r1, #0
 800852e:	69f8      	ldr	r0, [r7, #28]
 8008530:	f000 fb62 	bl	8008bf8 <xQueueGenericSend>
 8008534:	4603      	mov	r3, r0
 8008536:	2b01      	cmp	r3, #1
 8008538:	d016      	beq.n	8008568 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800853a:	69f8      	ldr	r0, [r7, #28]
 800853c:	f001 f800 	bl	8009540 <vQueueDelete>
            hSemaphore = NULL;
 8008540:	2300      	movs	r3, #0
 8008542:	61fb      	str	r3, [r7, #28]
 8008544:	e010      	b.n	8008568 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d108      	bne.n	800855e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	461a      	mov	r2, r3
 8008552:	68b9      	ldr	r1, [r7, #8]
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 fae0 	bl	8008b1a <xQueueCreateCountingSemaphoreStatic>
 800855a:	61f8      	str	r0, [r7, #28]
 800855c:	e004      	b.n	8008568 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800855e:	68b9      	ldr	r1, [r7, #8]
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 fb13 	bl	8008b8c <xQueueCreateCountingSemaphore>
 8008566:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00c      	beq.n	8008588 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d003      	beq.n	800857c <osSemaphoreNew+0xfc>
          name = attr->name;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	617b      	str	r3, [r7, #20]
 800857a:	e001      	b.n	8008580 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008580:	6979      	ldr	r1, [r7, #20]
 8008582:	69f8      	ldr	r0, [r7, #28]
 8008584:	f001 f928 	bl	80097d8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008588:	69fb      	ldr	r3, [r7, #28]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3720      	adds	r7, #32
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d103      	bne.n	80085b4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80085ac:	f06f 0303 	mvn.w	r3, #3
 80085b0:	617b      	str	r3, [r7, #20]
 80085b2:	e039      	b.n	8008628 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085b4:	f3ef 8305 	mrs	r3, IPSR
 80085b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80085ba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d022      	beq.n	8008606 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80085c6:	f06f 0303 	mvn.w	r3, #3
 80085ca:	617b      	str	r3, [r7, #20]
 80085cc:	e02c      	b.n	8008628 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80085ce:	2300      	movs	r3, #0
 80085d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80085d2:	f107 0308 	add.w	r3, r7, #8
 80085d6:	461a      	mov	r2, r3
 80085d8:	2100      	movs	r1, #0
 80085da:	6938      	ldr	r0, [r7, #16]
 80085dc:	f000 ff2e 	bl	800943c <xQueueReceiveFromISR>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d003      	beq.n	80085ee <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80085e6:	f06f 0302 	mvn.w	r3, #2
 80085ea:	617b      	str	r3, [r7, #20]
 80085ec:	e01c      	b.n	8008628 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d019      	beq.n	8008628 <osSemaphoreAcquire+0x94>
 80085f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008634 <osSemaphoreAcquire+0xa0>)
 80085f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085fa:	601a      	str	r2, [r3, #0]
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	e010      	b.n	8008628 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6938      	ldr	r0, [r7, #16]
 800860a:	f000 fe07 	bl	800921c <xQueueSemaphoreTake>
 800860e:	4603      	mov	r3, r0
 8008610:	2b01      	cmp	r3, #1
 8008612:	d009      	beq.n	8008628 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d003      	beq.n	8008622 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800861a:	f06f 0301 	mvn.w	r3, #1
 800861e:	617b      	str	r3, [r7, #20]
 8008620:	e002      	b.n	8008628 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008622:	f06f 0302 	mvn.w	r3, #2
 8008626:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008628:	697b      	ldr	r3, [r7, #20]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3718      	adds	r7, #24
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	e000ed04 	.word	0xe000ed04

08008638 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008644:	2300      	movs	r3, #0
 8008646:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d103      	bne.n	8008656 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800864e:	f06f 0303 	mvn.w	r3, #3
 8008652:	617b      	str	r3, [r7, #20]
 8008654:	e02c      	b.n	80086b0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008656:	f3ef 8305 	mrs	r3, IPSR
 800865a:	60fb      	str	r3, [r7, #12]
  return(result);
 800865c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800865e:	2b00      	cmp	r3, #0
 8008660:	d01a      	beq.n	8008698 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008662:	2300      	movs	r3, #0
 8008664:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008666:	f107 0308 	add.w	r3, r7, #8
 800866a:	4619      	mov	r1, r3
 800866c:	6938      	ldr	r0, [r7, #16]
 800866e:	f000 fc63 	bl	8008f38 <xQueueGiveFromISR>
 8008672:	4603      	mov	r3, r0
 8008674:	2b01      	cmp	r3, #1
 8008676:	d003      	beq.n	8008680 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008678:	f06f 0302 	mvn.w	r3, #2
 800867c:	617b      	str	r3, [r7, #20]
 800867e:	e017      	b.n	80086b0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d014      	beq.n	80086b0 <osSemaphoreRelease+0x78>
 8008686:	4b0d      	ldr	r3, [pc, #52]	@ (80086bc <osSemaphoreRelease+0x84>)
 8008688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	e00b      	b.n	80086b0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008698:	2300      	movs	r3, #0
 800869a:	2200      	movs	r2, #0
 800869c:	2100      	movs	r1, #0
 800869e:	6938      	ldr	r0, [r7, #16]
 80086a0:	f000 faaa 	bl	8008bf8 <xQueueGenericSend>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d002      	beq.n	80086b0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80086aa:	f06f 0302 	mvn.w	r3, #2
 80086ae:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80086b0:	697b      	ldr	r3, [r7, #20]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3718      	adds	r7, #24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	e000ed04 	.word	0xe000ed04

080086c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	4a07      	ldr	r2, [pc, #28]	@ (80086ec <vApplicationGetIdleTaskMemory+0x2c>)
 80086d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	4a06      	ldr	r2, [pc, #24]	@ (80086f0 <vApplicationGetIdleTaskMemory+0x30>)
 80086d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2280      	movs	r2, #128	@ 0x80
 80086dc:	601a      	str	r2, [r3, #0]
}
 80086de:	bf00      	nop
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	20000ca0 	.word	0x20000ca0
 80086f0:	20000cfc 	.word	0x20000cfc

080086f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4a07      	ldr	r2, [pc, #28]	@ (8008720 <vApplicationGetTimerTaskMemory+0x2c>)
 8008704:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	4a06      	ldr	r2, [pc, #24]	@ (8008724 <vApplicationGetTimerTaskMemory+0x30>)
 800870a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008712:	601a      	str	r2, [r3, #0]
}
 8008714:	bf00      	nop
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	20000efc 	.word	0x20000efc
 8008724:	20000f58 	.word	0x20000f58

08008728 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f103 0208 	add.w	r2, r3, #8
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f04f 32ff 	mov.w	r2, #4294967295
 8008740:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f103 0208 	add.w	r2, r3, #8
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f103 0208 	add.w	r2, r3, #8
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008782:	b480      	push	{r7}
 8008784:	b085      	sub	sp, #20
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	601a      	str	r2, [r3, #0]
}
 80087be:	bf00      	nop
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087ca:	b480      	push	{r7}
 80087cc:	b085      	sub	sp, #20
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e0:	d103      	bne.n	80087ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	60fb      	str	r3, [r7, #12]
 80087e8:	e00c      	b.n	8008804 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	3308      	adds	r3, #8
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	e002      	b.n	80087f8 <vListInsert+0x2e>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	60fb      	str	r3, [r7, #12]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	429a      	cmp	r2, r3
 8008802:	d2f6      	bcs.n	80087f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	685a      	ldr	r2, [r3, #4]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	601a      	str	r2, [r3, #0]
}
 8008830:	bf00      	nop
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	6892      	ldr	r2, [r2, #8]
 8008852:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	6852      	ldr	r2, [r2, #4]
 800885c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	429a      	cmp	r2, r3
 8008866:	d103      	bne.n	8008870 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	1e5a      	subs	r2, r3, #1
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10b      	bne.n	80088bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80088b6:	bf00      	nop
 80088b8:	bf00      	nop
 80088ba:	e7fd      	b.n	80088b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80088bc:	f002 fc74 	bl	800b1a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088c8:	68f9      	ldr	r1, [r7, #12]
 80088ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80088cc:	fb01 f303 	mul.w	r3, r1, r3
 80088d0:	441a      	add	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ec:	3b01      	subs	r3, #1
 80088ee:	68f9      	ldr	r1, [r7, #12]
 80088f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80088f2:	fb01 f303 	mul.w	r3, r1, r3
 80088f6:	441a      	add	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	22ff      	movs	r2, #255	@ 0xff
 8008900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	22ff      	movs	r2, #255	@ 0xff
 8008908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d114      	bne.n	800893c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d01a      	beq.n	8008950 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3310      	adds	r3, #16
 800891e:	4618      	mov	r0, r3
 8008920:	f001 fc16 	bl	800a150 <xTaskRemoveFromEventList>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d012      	beq.n	8008950 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800892a:	4b0d      	ldr	r3, [pc, #52]	@ (8008960 <xQueueGenericReset+0xd0>)
 800892c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	e009      	b.n	8008950 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3310      	adds	r3, #16
 8008940:	4618      	mov	r0, r3
 8008942:	f7ff fef1 	bl	8008728 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3324      	adds	r3, #36	@ 0x24
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff feec 	bl	8008728 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008950:	f002 fc5c 	bl	800b20c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008954:	2301      	movs	r3, #1
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	e000ed04 	.word	0xe000ed04

08008964 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008964:	b580      	push	{r7, lr}
 8008966:	b08e      	sub	sp, #56	@ 0x38
 8008968:	af02      	add	r7, sp, #8
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
 8008970:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10b      	bne.n	8008990 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800898a:	bf00      	nop
 800898c:	bf00      	nop
 800898e:	e7fd      	b.n	800898c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10b      	bne.n	80089ae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800899a:	f383 8811 	msr	BASEPRI, r3
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089a8:	bf00      	nop
 80089aa:	bf00      	nop
 80089ac:	e7fd      	b.n	80089aa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <xQueueGenericCreateStatic+0x56>
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <xQueueGenericCreateStatic+0x5a>
 80089ba:	2301      	movs	r3, #1
 80089bc:	e000      	b.n	80089c0 <xQueueGenericCreateStatic+0x5c>
 80089be:	2300      	movs	r3, #0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10b      	bne.n	80089dc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80089c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	623b      	str	r3, [r7, #32]
}
 80089d6:	bf00      	nop
 80089d8:	bf00      	nop
 80089da:	e7fd      	b.n	80089d8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d102      	bne.n	80089e8 <xQueueGenericCreateStatic+0x84>
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d101      	bne.n	80089ec <xQueueGenericCreateStatic+0x88>
 80089e8:	2301      	movs	r3, #1
 80089ea:	e000      	b.n	80089ee <xQueueGenericCreateStatic+0x8a>
 80089ec:	2300      	movs	r3, #0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10b      	bne.n	8008a0a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80089f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f6:	f383 8811 	msr	BASEPRI, r3
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	61fb      	str	r3, [r7, #28]
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop
 8008a08:	e7fd      	b.n	8008a06 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a0a:	2350      	movs	r3, #80	@ 0x50
 8008a0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b50      	cmp	r3, #80	@ 0x50
 8008a12:	d00b      	beq.n	8008a2c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a18:	f383 8811 	msr	BASEPRI, r3
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	61bb      	str	r3, [r7, #24]
}
 8008a26:	bf00      	nop
 8008a28:	bf00      	nop
 8008a2a:	e7fd      	b.n	8008a28 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008a2c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00d      	beq.n	8008a54 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a40:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	68b9      	ldr	r1, [r7, #8]
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 f840 	bl	8008ad4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3730      	adds	r7, #48	@ 0x30
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b08a      	sub	sp, #40	@ 0x28
 8008a62:	af02      	add	r7, sp, #8
 8008a64:	60f8      	str	r0, [r7, #12]
 8008a66:	60b9      	str	r1, [r7, #8]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10b      	bne.n	8008a8a <xQueueGenericCreate+0x2c>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	613b      	str	r3, [r7, #16]
}
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop
 8008a88:	e7fd      	b.n	8008a86 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	fb02 f303 	mul.w	r3, r2, r3
 8008a92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	3350      	adds	r3, #80	@ 0x50
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f002 fca7 	bl	800b3ec <pvPortMalloc>
 8008a9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d011      	beq.n	8008aca <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	3350      	adds	r3, #80	@ 0x50
 8008aae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ab8:	79fa      	ldrb	r2, [r7, #7]
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	697a      	ldr	r2, [r7, #20]
 8008ac2:	68b9      	ldr	r1, [r7, #8]
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 f805 	bl	8008ad4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008aca:	69bb      	ldr	r3, [r7, #24]
	}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3720      	adds	r7, #32
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
 8008ae0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d103      	bne.n	8008af0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	e002      	b.n	8008af6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b02:	2101      	movs	r1, #1
 8008b04:	69b8      	ldr	r0, [r7, #24]
 8008b06:	f7ff fec3 	bl	8008890 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	78fa      	ldrb	r2, [r7, #3]
 8008b0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008b12:	bf00      	nop
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b08a      	sub	sp, #40	@ 0x28
 8008b1e:	af02      	add	r7, sp, #8
 8008b20:	60f8      	str	r0, [r7, #12]
 8008b22:	60b9      	str	r1, [r7, #8]
 8008b24:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10b      	bne.n	8008b44 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8008b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	61bb      	str	r3, [r7, #24]
}
 8008b3e:	bf00      	nop
 8008b40:	bf00      	nop
 8008b42:	e7fd      	b.n	8008b40 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d90b      	bls.n	8008b64 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8008b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	617b      	str	r3, [r7, #20]
}
 8008b5e:	bf00      	nop
 8008b60:	bf00      	nop
 8008b62:	e7fd      	b.n	8008b60 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008b64:	2302      	movs	r3, #2
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f7ff fef8 	bl	8008964 <xQueueGenericCreateStatic>
 8008b74:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008b82:	69fb      	ldr	r3, [r7, #28]
	}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3720      	adds	r7, #32
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10b      	bne.n	8008bb4 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8008b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba0:	f383 8811 	msr	BASEPRI, r3
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	613b      	str	r3, [r7, #16]
}
 8008bae:	bf00      	nop
 8008bb0:	bf00      	nop
 8008bb2:	e7fd      	b.n	8008bb0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d90b      	bls.n	8008bd4 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	60fb      	str	r3, [r7, #12]
}
 8008bce:	bf00      	nop
 8008bd0:	bf00      	nop
 8008bd2:	e7fd      	b.n	8008bd0 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7ff ff40 	bl	8008a5e <xQueueGenericCreate>
 8008bde:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d002      	beq.n	8008bec <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	683a      	ldr	r2, [r7, #0]
 8008bea:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008bec:	697b      	ldr	r3, [r7, #20]
	}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
	...

08008bf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08e      	sub	sp, #56	@ 0x38
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
 8008c04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c06:	2300      	movs	r3, #0
 8008c08:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10b      	bne.n	8008c2c <xQueueGenericSend+0x34>
	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008c26:	bf00      	nop
 8008c28:	bf00      	nop
 8008c2a:	e7fd      	b.n	8008c28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d103      	bne.n	8008c3a <xQueueGenericSend+0x42>
 8008c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <xQueueGenericSend+0x46>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e000      	b.n	8008c40 <xQueueGenericSend+0x48>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10b      	bne.n	8008c5c <xQueueGenericSend+0x64>
	__asm volatile
 8008c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c56:	bf00      	nop
 8008c58:	bf00      	nop
 8008c5a:	e7fd      	b.n	8008c58 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d103      	bne.n	8008c6a <xQueueGenericSend+0x72>
 8008c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d101      	bne.n	8008c6e <xQueueGenericSend+0x76>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e000      	b.n	8008c70 <xQueueGenericSend+0x78>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10b      	bne.n	8008c8c <xQueueGenericSend+0x94>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	623b      	str	r3, [r7, #32]
}
 8008c86:	bf00      	nop
 8008c88:	bf00      	nop
 8008c8a:	e7fd      	b.n	8008c88 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c8c:	f001 fc20 	bl	800a4d0 <xTaskGetSchedulerState>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d102      	bne.n	8008c9c <xQueueGenericSend+0xa4>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <xQueueGenericSend+0xa8>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e000      	b.n	8008ca2 <xQueueGenericSend+0xaa>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10b      	bne.n	8008cbe <xQueueGenericSend+0xc6>
	__asm volatile
 8008ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	61fb      	str	r3, [r7, #28]
}
 8008cb8:	bf00      	nop
 8008cba:	bf00      	nop
 8008cbc:	e7fd      	b.n	8008cba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cbe:	f002 fa73 	bl	800b1a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d302      	bcc.n	8008cd4 <xQueueGenericSend+0xdc>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d129      	bne.n	8008d28 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	68b9      	ldr	r1, [r7, #8]
 8008cd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cda:	f000 fc6d 	bl	80095b8 <prvCopyDataToQueue>
 8008cde:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d010      	beq.n	8008d0a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cea:	3324      	adds	r3, #36	@ 0x24
 8008cec:	4618      	mov	r0, r3
 8008cee:	f001 fa2f 	bl	800a150 <xTaskRemoveFromEventList>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d013      	beq.n	8008d20 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008cf8:	4b3f      	ldr	r3, [pc, #252]	@ (8008df8 <xQueueGenericSend+0x200>)
 8008cfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	e00a      	b.n	8008d20 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d007      	beq.n	8008d20 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008d10:	4b39      	ldr	r3, [pc, #228]	@ (8008df8 <xQueueGenericSend+0x200>)
 8008d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d20:	f002 fa74 	bl	800b20c <vPortExitCritical>
				return pdPASS;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e063      	b.n	8008df0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d103      	bne.n	8008d36 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d2e:	f002 fa6d 	bl	800b20c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d32:	2300      	movs	r3, #0
 8008d34:	e05c      	b.n	8008df0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d106      	bne.n	8008d4a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d3c:	f107 0314 	add.w	r3, r7, #20
 8008d40:	4618      	mov	r0, r3
 8008d42:	f001 fa69 	bl	800a218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d46:	2301      	movs	r3, #1
 8008d48:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d4a:	f002 fa5f 	bl	800b20c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d4e:	f000 ffd9 	bl	8009d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d52:	f002 fa29 	bl	800b1a8 <vPortEnterCritical>
 8008d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d5c:	b25b      	sxtb	r3, r3
 8008d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d62:	d103      	bne.n	8008d6c <xQueueGenericSend+0x174>
 8008d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d72:	b25b      	sxtb	r3, r3
 8008d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d78:	d103      	bne.n	8008d82 <xQueueGenericSend+0x18a>
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d82:	f002 fa43 	bl	800b20c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d86:	1d3a      	adds	r2, r7, #4
 8008d88:	f107 0314 	add.w	r3, r7, #20
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f001 fa58 	bl	800a244 <xTaskCheckForTimeOut>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d124      	bne.n	8008de4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d9c:	f000 fd04 	bl	80097a8 <prvIsQueueFull>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d018      	beq.n	8008dd8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da8:	3310      	adds	r3, #16
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	4611      	mov	r1, r2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f001 f97c 	bl	800a0ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008db4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008db6:	f000 fc8f 	bl	80096d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008dba:	f000 ffb1 	bl	8009d20 <xTaskResumeAll>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f47f af7c 	bne.w	8008cbe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8008df8 <xQueueGenericSend+0x200>)
 8008dc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	e772      	b.n	8008cbe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008dd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dda:	f000 fc7d 	bl	80096d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dde:	f000 ff9f 	bl	8009d20 <xTaskResumeAll>
 8008de2:	e76c      	b.n	8008cbe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008de4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008de6:	f000 fc77 	bl	80096d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dea:	f000 ff99 	bl	8009d20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008dee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3738      	adds	r7, #56	@ 0x38
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	e000ed04 	.word	0xe000ed04

08008dfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b090      	sub	sp, #64	@ 0x40
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
 8008e08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10b      	bne.n	8008e2c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008e26:	bf00      	nop
 8008e28:	bf00      	nop
 8008e2a:	e7fd      	b.n	8008e28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d103      	bne.n	8008e3a <xQueueGenericSendFromISR+0x3e>
 8008e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <xQueueGenericSendFromISR+0x42>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e000      	b.n	8008e40 <xQueueGenericSendFromISR+0x44>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10b      	bne.n	8008e5c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e56:	bf00      	nop
 8008e58:	bf00      	nop
 8008e5a:	e7fd      	b.n	8008e58 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d103      	bne.n	8008e6a <xQueueGenericSendFromISR+0x6e>
 8008e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d101      	bne.n	8008e6e <xQueueGenericSendFromISR+0x72>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e000      	b.n	8008e70 <xQueueGenericSendFromISR+0x74>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10b      	bne.n	8008e8c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	623b      	str	r3, [r7, #32]
}
 8008e86:	bf00      	nop
 8008e88:	bf00      	nop
 8008e8a:	e7fd      	b.n	8008e88 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e8c:	f002 fa6c 	bl	800b368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e90:	f3ef 8211 	mrs	r2, BASEPRI
 8008e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	61fa      	str	r2, [r7, #28]
 8008ea6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ea8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008eaa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d302      	bcc.n	8008ebe <xQueueGenericSendFromISR+0xc2>
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d12f      	bne.n	8008f1e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ec4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	68b9      	ldr	r1, [r7, #8]
 8008ed2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ed4:	f000 fb70 	bl	80095b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ed8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee0:	d112      	bne.n	8008f08 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d016      	beq.n	8008f18 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eec:	3324      	adds	r3, #36	@ 0x24
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f001 f92e 	bl	800a150 <xTaskRemoveFromEventList>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00e      	beq.n	8008f18 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00b      	beq.n	8008f18 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	e007      	b.n	8008f18 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	b25a      	sxtb	r2, r3
 8008f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008f1c:	e001      	b.n	8008f22 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f24:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008f2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3740      	adds	r7, #64	@ 0x40
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b08e      	sub	sp, #56	@ 0x38
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10b      	bne.n	8008f64 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	623b      	str	r3, [r7, #32]
}
 8008f5e:	bf00      	nop
 8008f60:	bf00      	nop
 8008f62:	e7fd      	b.n	8008f60 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00b      	beq.n	8008f84 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	61fb      	str	r3, [r7, #28]
}
 8008f7e:	bf00      	nop
 8008f80:	bf00      	nop
 8008f82:	e7fd      	b.n	8008f80 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d103      	bne.n	8008f94 <xQueueGiveFromISR+0x5c>
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <xQueueGiveFromISR+0x60>
 8008f94:	2301      	movs	r3, #1
 8008f96:	e000      	b.n	8008f9a <xQueueGiveFromISR+0x62>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d10b      	bne.n	8008fb6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	61bb      	str	r3, [r7, #24]
}
 8008fb0:	bf00      	nop
 8008fb2:	bf00      	nop
 8008fb4:	e7fd      	b.n	8008fb2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fb6:	f002 f9d7 	bl	800b368 <vPortValidateInterruptPriority>
	__asm volatile
 8008fba:	f3ef 8211 	mrs	r2, BASEPRI
 8008fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	617a      	str	r2, [r7, #20]
 8008fd0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008fd2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fda:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fe0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d22b      	bcs.n	800903e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff2:	1c5a      	adds	r2, r3, #1
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ff8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009000:	d112      	bne.n	8009028 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009006:	2b00      	cmp	r3, #0
 8009008:	d016      	beq.n	8009038 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800900a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900c:	3324      	adds	r3, #36	@ 0x24
 800900e:	4618      	mov	r0, r3
 8009010:	f001 f89e 	bl	800a150 <xTaskRemoveFromEventList>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00e      	beq.n	8009038 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00b      	beq.n	8009038 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	2201      	movs	r2, #1
 8009024:	601a      	str	r2, [r3, #0]
 8009026:	e007      	b.n	8009038 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800902c:	3301      	adds	r3, #1
 800902e:	b2db      	uxtb	r3, r3
 8009030:	b25a      	sxtb	r2, r3
 8009032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009038:	2301      	movs	r3, #1
 800903a:	637b      	str	r3, [r7, #52]	@ 0x34
 800903c:	e001      	b.n	8009042 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800903e:	2300      	movs	r3, #0
 8009040:	637b      	str	r3, [r7, #52]	@ 0x34
 8009042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009044:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f383 8811 	msr	BASEPRI, r3
}
 800904c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800904e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009050:	4618      	mov	r0, r3
 8009052:	3738      	adds	r7, #56	@ 0x38
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b08c      	sub	sp, #48	@ 0x30
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009064:	2300      	movs	r3, #0
 8009066:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800906c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10b      	bne.n	800908a <xQueueReceive+0x32>
	__asm volatile
 8009072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	623b      	str	r3, [r7, #32]
}
 8009084:	bf00      	nop
 8009086:	bf00      	nop
 8009088:	e7fd      	b.n	8009086 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d103      	bne.n	8009098 <xQueueReceive+0x40>
 8009090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009094:	2b00      	cmp	r3, #0
 8009096:	d101      	bne.n	800909c <xQueueReceive+0x44>
 8009098:	2301      	movs	r3, #1
 800909a:	e000      	b.n	800909e <xQueueReceive+0x46>
 800909c:	2300      	movs	r3, #0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10b      	bne.n	80090ba <xQueueReceive+0x62>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	61fb      	str	r3, [r7, #28]
}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop
 80090b8:	e7fd      	b.n	80090b6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090ba:	f001 fa09 	bl	800a4d0 <xTaskGetSchedulerState>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d102      	bne.n	80090ca <xQueueReceive+0x72>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <xQueueReceive+0x76>
 80090ca:	2301      	movs	r3, #1
 80090cc:	e000      	b.n	80090d0 <xQueueReceive+0x78>
 80090ce:	2300      	movs	r3, #0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10b      	bne.n	80090ec <xQueueReceive+0x94>
	__asm volatile
 80090d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	61bb      	str	r3, [r7, #24]
}
 80090e6:	bf00      	nop
 80090e8:	bf00      	nop
 80090ea:	e7fd      	b.n	80090e8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090ec:	f002 f85c 	bl	800b1a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d01f      	beq.n	800913c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80090fc:	68b9      	ldr	r1, [r7, #8]
 80090fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009100:	f000 fac4 	bl	800968c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009106:	1e5a      	subs	r2, r3, #1
 8009108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800910c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00f      	beq.n	8009134 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009116:	3310      	adds	r3, #16
 8009118:	4618      	mov	r0, r3
 800911a:	f001 f819 	bl	800a150 <xTaskRemoveFromEventList>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d007      	beq.n	8009134 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009124:	4b3c      	ldr	r3, [pc, #240]	@ (8009218 <xQueueReceive+0x1c0>)
 8009126:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800912a:	601a      	str	r2, [r3, #0]
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009134:	f002 f86a 	bl	800b20c <vPortExitCritical>
				return pdPASS;
 8009138:	2301      	movs	r3, #1
 800913a:	e069      	b.n	8009210 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d103      	bne.n	800914a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009142:	f002 f863 	bl	800b20c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009146:	2300      	movs	r3, #0
 8009148:	e062      	b.n	8009210 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800914a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800914c:	2b00      	cmp	r3, #0
 800914e:	d106      	bne.n	800915e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009150:	f107 0310 	add.w	r3, r7, #16
 8009154:	4618      	mov	r0, r3
 8009156:	f001 f85f 	bl	800a218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800915a:	2301      	movs	r3, #1
 800915c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800915e:	f002 f855 	bl	800b20c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009162:	f000 fdcf 	bl	8009d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009166:	f002 f81f 	bl	800b1a8 <vPortEnterCritical>
 800916a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800916c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009170:	b25b      	sxtb	r3, r3
 8009172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009176:	d103      	bne.n	8009180 <xQueueReceive+0x128>
 8009178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917a:	2200      	movs	r2, #0
 800917c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009182:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009186:	b25b      	sxtb	r3, r3
 8009188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918c:	d103      	bne.n	8009196 <xQueueReceive+0x13e>
 800918e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009196:	f002 f839 	bl	800b20c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800919a:	1d3a      	adds	r2, r7, #4
 800919c:	f107 0310 	add.w	r3, r7, #16
 80091a0:	4611      	mov	r1, r2
 80091a2:	4618      	mov	r0, r3
 80091a4:	f001 f84e 	bl	800a244 <xTaskCheckForTimeOut>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d123      	bne.n	80091f6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091b0:	f000 fae4 	bl	800977c <prvIsQueueEmpty>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d017      	beq.n	80091ea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091bc:	3324      	adds	r3, #36	@ 0x24
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	4611      	mov	r1, r2
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 ff72 	bl	800a0ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091ca:	f000 fa85 	bl	80096d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80091ce:	f000 fda7 	bl	8009d20 <xTaskResumeAll>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d189      	bne.n	80090ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80091d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009218 <xQueueReceive+0x1c0>)
 80091da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091de:	601a      	str	r2, [r3, #0]
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	e780      	b.n	80090ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80091ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091ec:	f000 fa74 	bl	80096d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091f0:	f000 fd96 	bl	8009d20 <xTaskResumeAll>
 80091f4:	e77a      	b.n	80090ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80091f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091f8:	f000 fa6e 	bl	80096d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091fc:	f000 fd90 	bl	8009d20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009200:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009202:	f000 fabb 	bl	800977c <prvIsQueueEmpty>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	f43f af6f 	beq.w	80090ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800920e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009210:	4618      	mov	r0, r3
 8009212:	3730      	adds	r7, #48	@ 0x30
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	e000ed04 	.word	0xe000ed04

0800921c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b08e      	sub	sp, #56	@ 0x38
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009226:	2300      	movs	r3, #0
 8009228:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800922e:	2300      	movs	r3, #0
 8009230:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10b      	bne.n	8009250 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800923c:	f383 8811 	msr	BASEPRI, r3
 8009240:	f3bf 8f6f 	isb	sy
 8009244:	f3bf 8f4f 	dsb	sy
 8009248:	623b      	str	r3, [r7, #32]
}
 800924a:	bf00      	nop
 800924c:	bf00      	nop
 800924e:	e7fd      	b.n	800924c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00b      	beq.n	8009270 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	61fb      	str	r3, [r7, #28]
}
 800926a:	bf00      	nop
 800926c:	bf00      	nop
 800926e:	e7fd      	b.n	800926c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009270:	f001 f92e 	bl	800a4d0 <xTaskGetSchedulerState>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d102      	bne.n	8009280 <xQueueSemaphoreTake+0x64>
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d101      	bne.n	8009284 <xQueueSemaphoreTake+0x68>
 8009280:	2301      	movs	r3, #1
 8009282:	e000      	b.n	8009286 <xQueueSemaphoreTake+0x6a>
 8009284:	2300      	movs	r3, #0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10b      	bne.n	80092a2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800928a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	61bb      	str	r3, [r7, #24]
}
 800929c:	bf00      	nop
 800929e:	bf00      	nop
 80092a0:	e7fd      	b.n	800929e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092a2:	f001 ff81 	bl	800b1a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80092a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092aa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80092ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d024      	beq.n	80092fc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80092b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b4:	1e5a      	subs	r2, r3, #1
 80092b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092b8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d104      	bne.n	80092cc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80092c2:	f001 fa7f 	bl	800a7c4 <pvTaskIncrementMutexHeldCount>
 80092c6:	4602      	mov	r2, r0
 80092c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00f      	beq.n	80092f4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d6:	3310      	adds	r3, #16
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 ff39 	bl	800a150 <xTaskRemoveFromEventList>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d007      	beq.n	80092f4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80092e4:	4b54      	ldr	r3, [pc, #336]	@ (8009438 <xQueueSemaphoreTake+0x21c>)
 80092e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092ea:	601a      	str	r2, [r3, #0]
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092f4:	f001 ff8a 	bl	800b20c <vPortExitCritical>
				return pdPASS;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e098      	b.n	800942e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d112      	bne.n	8009328 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00b      	beq.n	8009320 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	617b      	str	r3, [r7, #20]
}
 800931a:	bf00      	nop
 800931c:	bf00      	nop
 800931e:	e7fd      	b.n	800931c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009320:	f001 ff74 	bl	800b20c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009324:	2300      	movs	r3, #0
 8009326:	e082      	b.n	800942e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800932a:	2b00      	cmp	r3, #0
 800932c:	d106      	bne.n	800933c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800932e:	f107 030c 	add.w	r3, r7, #12
 8009332:	4618      	mov	r0, r3
 8009334:	f000 ff70 	bl	800a218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009338:	2301      	movs	r3, #1
 800933a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800933c:	f001 ff66 	bl	800b20c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009340:	f000 fce0 	bl	8009d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009344:	f001 ff30 	bl	800b1a8 <vPortEnterCritical>
 8009348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800934a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800934e:	b25b      	sxtb	r3, r3
 8009350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009354:	d103      	bne.n	800935e <xQueueSemaphoreTake+0x142>
 8009356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800935e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009360:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009364:	b25b      	sxtb	r3, r3
 8009366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936a:	d103      	bne.n	8009374 <xQueueSemaphoreTake+0x158>
 800936c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800936e:	2200      	movs	r2, #0
 8009370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009374:	f001 ff4a 	bl	800b20c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009378:	463a      	mov	r2, r7
 800937a:	f107 030c 	add.w	r3, r7, #12
 800937e:	4611      	mov	r1, r2
 8009380:	4618      	mov	r0, r3
 8009382:	f000 ff5f 	bl	800a244 <xTaskCheckForTimeOut>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d132      	bne.n	80093f2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800938c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800938e:	f000 f9f5 	bl	800977c <prvIsQueueEmpty>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d026      	beq.n	80093e6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d109      	bne.n	80093b4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80093a0:	f001 ff02 	bl	800b1a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f001 f8af 	bl	800a50c <xTaskPriorityInherit>
 80093ae:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80093b0:	f001 ff2c 	bl	800b20c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b6:	3324      	adds	r3, #36	@ 0x24
 80093b8:	683a      	ldr	r2, [r7, #0]
 80093ba:	4611      	mov	r1, r2
 80093bc:	4618      	mov	r0, r3
 80093be:	f000 fe75 	bl	800a0ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093c4:	f000 f988 	bl	80096d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093c8:	f000 fcaa 	bl	8009d20 <xTaskResumeAll>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f47f af67 	bne.w	80092a2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80093d4:	4b18      	ldr	r3, [pc, #96]	@ (8009438 <xQueueSemaphoreTake+0x21c>)
 80093d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	e75d      	b.n	80092a2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80093e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093e8:	f000 f976 	bl	80096d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093ec:	f000 fc98 	bl	8009d20 <xTaskResumeAll>
 80093f0:	e757      	b.n	80092a2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80093f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093f4:	f000 f970 	bl	80096d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093f8:	f000 fc92 	bl	8009d20 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093fe:	f000 f9bd 	bl	800977c <prvIsQueueEmpty>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	f43f af4c 	beq.w	80092a2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800940a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00d      	beq.n	800942c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009410:	f001 feca 	bl	800b1a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009414:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009416:	f000 f8b7 	bl	8009588 <prvGetDisinheritPriorityAfterTimeout>
 800941a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800941c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009422:	4618      	mov	r0, r3
 8009424:	f001 f94a 	bl	800a6bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009428:	f001 fef0 	bl	800b20c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800942c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800942e:	4618      	mov	r0, r3
 8009430:	3738      	adds	r7, #56	@ 0x38
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	e000ed04 	.word	0xe000ed04

0800943c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b08e      	sub	sp, #56	@ 0x38
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800944c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10b      	bne.n	800946a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009456:	f383 8811 	msr	BASEPRI, r3
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	623b      	str	r3, [r7, #32]
}
 8009464:	bf00      	nop
 8009466:	bf00      	nop
 8009468:	e7fd      	b.n	8009466 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d103      	bne.n	8009478 <xQueueReceiveFromISR+0x3c>
 8009470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <xQueueReceiveFromISR+0x40>
 8009478:	2301      	movs	r3, #1
 800947a:	e000      	b.n	800947e <xQueueReceiveFromISR+0x42>
 800947c:	2300      	movs	r3, #0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10b      	bne.n	800949a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	61fb      	str	r3, [r7, #28]
}
 8009494:	bf00      	nop
 8009496:	bf00      	nop
 8009498:	e7fd      	b.n	8009496 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800949a:	f001 ff65 	bl	800b368 <vPortValidateInterruptPriority>
	__asm volatile
 800949e:	f3ef 8211 	mrs	r2, BASEPRI
 80094a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	61ba      	str	r2, [r7, #24]
 80094b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80094b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094be:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d02f      	beq.n	8009526 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80094c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80094d0:	68b9      	ldr	r1, [r7, #8]
 80094d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094d4:	f000 f8da 	bl	800968c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80094d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094da:	1e5a      	subs	r2, r3, #1
 80094dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094de:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80094e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80094e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e8:	d112      	bne.n	8009510 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d016      	beq.n	8009520 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f4:	3310      	adds	r3, #16
 80094f6:	4618      	mov	r0, r3
 80094f8:	f000 fe2a 	bl	800a150 <xTaskRemoveFromEventList>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00e      	beq.n	8009520 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00b      	beq.n	8009520 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	601a      	str	r2, [r3, #0]
 800950e:	e007      	b.n	8009520 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009510:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009514:	3301      	adds	r3, #1
 8009516:	b2db      	uxtb	r3, r3
 8009518:	b25a      	sxtb	r2, r3
 800951a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009520:	2301      	movs	r3, #1
 8009522:	637b      	str	r3, [r7, #52]	@ 0x34
 8009524:	e001      	b.n	800952a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009526:	2300      	movs	r3, #0
 8009528:	637b      	str	r3, [r7, #52]	@ 0x34
 800952a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	f383 8811 	msr	BASEPRI, r3
}
 8009534:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009538:	4618      	mov	r0, r3
 800953a:	3738      	adds	r7, #56	@ 0x38
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10b      	bne.n	800956a <vQueueDelete+0x2a>
	__asm volatile
 8009552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009556:	f383 8811 	msr	BASEPRI, r3
 800955a:	f3bf 8f6f 	isb	sy
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	60bb      	str	r3, [r7, #8]
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop
 8009568:	e7fd      	b.n	8009566 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f000 f95e 	bl	800982c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009576:	2b00      	cmp	r3, #0
 8009578:	d102      	bne.n	8009580 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f002 f804 	bl	800b588 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009580:	bf00      	nop
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009594:	2b00      	cmp	r3, #0
 8009596:	d006      	beq.n	80095a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	e001      	b.n	80095aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80095a6:	2300      	movs	r3, #0
 80095a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80095aa:	68fb      	ldr	r3, [r7, #12]
	}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80095c4:	2300      	movs	r3, #0
 80095c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d10d      	bne.n	80095f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d14d      	bne.n	800967a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fffa 	bl	800a5dc <xTaskPriorityDisinherit>
 80095e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	609a      	str	r2, [r3, #8]
 80095f0:	e043      	b.n	800967a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d119      	bne.n	800962c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6858      	ldr	r0, [r3, #4]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009600:	461a      	mov	r2, r3
 8009602:	68b9      	ldr	r1, [r7, #8]
 8009604:	f002 fef5 	bl	800c3f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009610:	441a      	add	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	685a      	ldr	r2, [r3, #4]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	429a      	cmp	r2, r3
 8009620:	d32b      	bcc.n	800967a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	605a      	str	r2, [r3, #4]
 800962a:	e026      	b.n	800967a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	68d8      	ldr	r0, [r3, #12]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009634:	461a      	mov	r2, r3
 8009636:	68b9      	ldr	r1, [r7, #8]
 8009638:	f002 fedb 	bl	800c3f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	68da      	ldr	r2, [r3, #12]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009644:	425b      	negs	r3, r3
 8009646:	441a      	add	r2, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	68da      	ldr	r2, [r3, #12]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	429a      	cmp	r2, r3
 8009656:	d207      	bcs.n	8009668 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	689a      	ldr	r2, [r3, #8]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009660:	425b      	negs	r3, r3
 8009662:	441a      	add	r2, r3
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b02      	cmp	r3, #2
 800966c:	d105      	bne.n	800967a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d002      	beq.n	800967a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	3b01      	subs	r3, #1
 8009678:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	1c5a      	adds	r2, r3, #1
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009682:	697b      	ldr	r3, [r7, #20]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800969a:	2b00      	cmp	r3, #0
 800969c:	d018      	beq.n	80096d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	68da      	ldr	r2, [r3, #12]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a6:	441a      	add	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68da      	ldr	r2, [r3, #12]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d303      	bcc.n	80096c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	68d9      	ldr	r1, [r3, #12]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c8:	461a      	mov	r2, r3
 80096ca:	6838      	ldr	r0, [r7, #0]
 80096cc:	f002 fe91 	bl	800c3f2 <memcpy>
	}
}
 80096d0:	bf00      	nop
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80096e0:	f001 fd62 	bl	800b1a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096ec:	e011      	b.n	8009712 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d012      	beq.n	800971c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	3324      	adds	r3, #36	@ 0x24
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fd28 	bl	800a150 <xTaskRemoveFromEventList>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009706:	f000 fe01 	bl	800a30c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	3b01      	subs	r3, #1
 800970e:	b2db      	uxtb	r3, r3
 8009710:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009716:	2b00      	cmp	r3, #0
 8009718:	dce9      	bgt.n	80096ee <prvUnlockQueue+0x16>
 800971a:	e000      	b.n	800971e <prvUnlockQueue+0x46>
					break;
 800971c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	22ff      	movs	r2, #255	@ 0xff
 8009722:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009726:	f001 fd71 	bl	800b20c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800972a:	f001 fd3d 	bl	800b1a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009734:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009736:	e011      	b.n	800975c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d012      	beq.n	8009766 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3310      	adds	r3, #16
 8009744:	4618      	mov	r0, r3
 8009746:	f000 fd03 	bl	800a150 <xTaskRemoveFromEventList>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009750:	f000 fddc 	bl	800a30c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009754:	7bbb      	ldrb	r3, [r7, #14]
 8009756:	3b01      	subs	r3, #1
 8009758:	b2db      	uxtb	r3, r3
 800975a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800975c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009760:	2b00      	cmp	r3, #0
 8009762:	dce9      	bgt.n	8009738 <prvUnlockQueue+0x60>
 8009764:	e000      	b.n	8009768 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009766:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	22ff      	movs	r2, #255	@ 0xff
 800976c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009770:	f001 fd4c 	bl	800b20c <vPortExitCritical>
}
 8009774:	bf00      	nop
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009784:	f001 fd10 	bl	800b1a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800978c:	2b00      	cmp	r3, #0
 800978e:	d102      	bne.n	8009796 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009790:	2301      	movs	r3, #1
 8009792:	60fb      	str	r3, [r7, #12]
 8009794:	e001      	b.n	800979a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009796:	2300      	movs	r3, #0
 8009798:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800979a:	f001 fd37 	bl	800b20c <vPortExitCritical>

	return xReturn;
 800979e:	68fb      	ldr	r3, [r7, #12]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097b0:	f001 fcfa 	bl	800b1a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097bc:	429a      	cmp	r2, r3
 80097be:	d102      	bne.n	80097c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80097c0:	2301      	movs	r3, #1
 80097c2:	60fb      	str	r3, [r7, #12]
 80097c4:	e001      	b.n	80097ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097ca:	f001 fd1f 	bl	800b20c <vPortExitCritical>

	return xReturn;
 80097ce:	68fb      	ldr	r3, [r7, #12]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097e2:	2300      	movs	r3, #0
 80097e4:	60fb      	str	r3, [r7, #12]
 80097e6:	e014      	b.n	8009812 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80097e8:	4a0f      	ldr	r2, [pc, #60]	@ (8009828 <vQueueAddToRegistry+0x50>)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10b      	bne.n	800980c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80097f4:	490c      	ldr	r1, [pc, #48]	@ (8009828 <vQueueAddToRegistry+0x50>)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80097fe:	4a0a      	ldr	r2, [pc, #40]	@ (8009828 <vQueueAddToRegistry+0x50>)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	00db      	lsls	r3, r3, #3
 8009804:	4413      	add	r3, r2
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800980a:	e006      	b.n	800981a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	3301      	adds	r3, #1
 8009810:	60fb      	str	r3, [r7, #12]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2b07      	cmp	r3, #7
 8009816:	d9e7      	bls.n	80097e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009818:	bf00      	nop
 800981a:	bf00      	nop
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr
 8009826:	bf00      	nop
 8009828:	20001358 	.word	0x20001358

0800982c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009834:	2300      	movs	r3, #0
 8009836:	60fb      	str	r3, [r7, #12]
 8009838:	e016      	b.n	8009868 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800983a:	4a10      	ldr	r2, [pc, #64]	@ (800987c <vQueueUnregisterQueue+0x50>)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	00db      	lsls	r3, r3, #3
 8009840:	4413      	add	r3, r2
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	429a      	cmp	r2, r3
 8009848:	d10b      	bne.n	8009862 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800984a:	4a0c      	ldr	r2, [pc, #48]	@ (800987c <vQueueUnregisterQueue+0x50>)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2100      	movs	r1, #0
 8009850:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009854:	4a09      	ldr	r2, [pc, #36]	@ (800987c <vQueueUnregisterQueue+0x50>)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	00db      	lsls	r3, r3, #3
 800985a:	4413      	add	r3, r2
 800985c:	2200      	movs	r2, #0
 800985e:	605a      	str	r2, [r3, #4]
				break;
 8009860:	e006      	b.n	8009870 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3301      	adds	r3, #1
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b07      	cmp	r3, #7
 800986c:	d9e5      	bls.n	800983a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800986e:	bf00      	nop
 8009870:	bf00      	nop
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr
 800987c:	20001358 	.word	0x20001358

08009880 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009890:	f001 fc8a 	bl	800b1a8 <vPortEnterCritical>
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800989a:	b25b      	sxtb	r3, r3
 800989c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a0:	d103      	bne.n	80098aa <vQueueWaitForMessageRestricted+0x2a>
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80098b0:	b25b      	sxtb	r3, r3
 80098b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b6:	d103      	bne.n	80098c0 <vQueueWaitForMessageRestricted+0x40>
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098c0:	f001 fca4 	bl	800b20c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d106      	bne.n	80098da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	3324      	adds	r3, #36	@ 0x24
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	68b9      	ldr	r1, [r7, #8]
 80098d4:	4618      	mov	r0, r3
 80098d6:	f000 fc0f 	bl	800a0f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80098da:	6978      	ldr	r0, [r7, #20]
 80098dc:	f7ff fefc 	bl	80096d8 <prvUnlockQueue>
	}
 80098e0:	bf00      	nop
 80098e2:	3718      	adds	r7, #24
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b08e      	sub	sp, #56	@ 0x38
 80098ec:	af04      	add	r7, sp, #16
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
 80098f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80098f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10b      	bne.n	8009914 <xTaskCreateStatic+0x2c>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	623b      	str	r3, [r7, #32]
}
 800990e:	bf00      	nop
 8009910:	bf00      	nop
 8009912:	e7fd      	b.n	8009910 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10b      	bne.n	8009932 <xTaskCreateStatic+0x4a>
	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	61fb      	str	r3, [r7, #28]
}
 800992c:	bf00      	nop
 800992e:	bf00      	nop
 8009930:	e7fd      	b.n	800992e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009932:	235c      	movs	r3, #92	@ 0x5c
 8009934:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	2b5c      	cmp	r3, #92	@ 0x5c
 800993a:	d00b      	beq.n	8009954 <xTaskCreateStatic+0x6c>
	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	61bb      	str	r3, [r7, #24]
}
 800994e:	bf00      	nop
 8009950:	bf00      	nop
 8009952:	e7fd      	b.n	8009950 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009954:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009958:	2b00      	cmp	r3, #0
 800995a:	d01e      	beq.n	800999a <xTaskCreateStatic+0xb2>
 800995c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800995e:	2b00      	cmp	r3, #0
 8009960:	d01b      	beq.n	800999a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009964:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009968:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800996a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800996c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996e:	2202      	movs	r2, #2
 8009970:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009974:	2300      	movs	r3, #0
 8009976:	9303      	str	r3, [sp, #12]
 8009978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997a:	9302      	str	r3, [sp, #8]
 800997c:	f107 0314 	add.w	r3, r7, #20
 8009980:	9301      	str	r3, [sp, #4]
 8009982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	68b9      	ldr	r1, [r7, #8]
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f000 f850 	bl	8009a32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009992:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009994:	f000 f8de 	bl	8009b54 <prvAddNewTaskToReadyList>
 8009998:	e001      	b.n	800999e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800999a:	2300      	movs	r3, #0
 800999c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800999e:	697b      	ldr	r3, [r7, #20]
	}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3728      	adds	r7, #40	@ 0x28
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b08c      	sub	sp, #48	@ 0x30
 80099ac:	af04      	add	r7, sp, #16
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	4613      	mov	r3, r2
 80099b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80099b8:	88fb      	ldrh	r3, [r7, #6]
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4618      	mov	r0, r3
 80099be:	f001 fd15 	bl	800b3ec <pvPortMalloc>
 80099c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00e      	beq.n	80099e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80099ca:	205c      	movs	r0, #92	@ 0x5c
 80099cc:	f001 fd0e 	bl	800b3ec <pvPortMalloc>
 80099d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80099de:	e005      	b.n	80099ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80099e0:	6978      	ldr	r0, [r7, #20]
 80099e2:	f001 fdd1 	bl	800b588 <vPortFree>
 80099e6:	e001      	b.n	80099ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80099e8:	2300      	movs	r3, #0
 80099ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d017      	beq.n	8009a22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80099fa:	88fa      	ldrh	r2, [r7, #6]
 80099fc:	2300      	movs	r3, #0
 80099fe:	9303      	str	r3, [sp, #12]
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	9302      	str	r3, [sp, #8]
 8009a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a06:	9301      	str	r3, [sp, #4]
 8009a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	68b9      	ldr	r1, [r7, #8]
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f000 f80e 	bl	8009a32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a16:	69f8      	ldr	r0, [r7, #28]
 8009a18:	f000 f89c 	bl	8009b54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	61bb      	str	r3, [r7, #24]
 8009a20:	e002      	b.n	8009a28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a22:	f04f 33ff 	mov.w	r3, #4294967295
 8009a26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a28:	69bb      	ldr	r3, [r7, #24]
	}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3720      	adds	r7, #32
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b088      	sub	sp, #32
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	60f8      	str	r0, [r7, #12]
 8009a3a:	60b9      	str	r1, [r7, #8]
 8009a3c:	607a      	str	r2, [r7, #4]
 8009a3e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a42:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	461a      	mov	r2, r3
 8009a4a:	21a5      	movs	r1, #165	@ 0xa5
 8009a4c:	f002 fc52 	bl	800c2f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4413      	add	r3, r2
 8009a60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	f023 0307 	bic.w	r3, r3, #7
 8009a68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	f003 0307 	and.w	r3, r3, #7
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00b      	beq.n	8009a8c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	617b      	str	r3, [r7, #20]
}
 8009a86:	bf00      	nop
 8009a88:	bf00      	nop
 8009a8a:	e7fd      	b.n	8009a88 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d01f      	beq.n	8009ad2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a92:	2300      	movs	r3, #0
 8009a94:	61fb      	str	r3, [r7, #28]
 8009a96:	e012      	b.n	8009abe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	7819      	ldrb	r1, [r3, #0]
 8009aa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	3334      	adds	r3, #52	@ 0x34
 8009aa8:	460a      	mov	r2, r1
 8009aaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009aac:	68ba      	ldr	r2, [r7, #8]
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d006      	beq.n	8009ac6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	3301      	adds	r3, #1
 8009abc:	61fb      	str	r3, [r7, #28]
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	2b0f      	cmp	r3, #15
 8009ac2:	d9e9      	bls.n	8009a98 <prvInitialiseNewTask+0x66>
 8009ac4:	e000      	b.n	8009ac8 <prvInitialiseNewTask+0x96>
			{
				break;
 8009ac6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009ad0:	e003      	b.n	8009ada <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009adc:	2b37      	cmp	r3, #55	@ 0x37
 8009ade:	d901      	bls.n	8009ae4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ae0:	2337      	movs	r3, #55	@ 0x37
 8009ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009aee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af2:	2200      	movs	r2, #0
 8009af4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af8:	3304      	adds	r3, #4
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fe fe34 	bl	8008768 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b02:	3318      	adds	r3, #24
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7fe fe2f 	bl	8008768 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b12:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b1e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b22:	2200      	movs	r2, #0
 8009b24:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b2e:	683a      	ldr	r2, [r7, #0]
 8009b30:	68f9      	ldr	r1, [r7, #12]
 8009b32:	69b8      	ldr	r0, [r7, #24]
 8009b34:	f001 fa08 	bl	800af48 <pxPortInitialiseStack>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d002      	beq.n	8009b4a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b4a:	bf00      	nop
 8009b4c:	3720      	adds	r7, #32
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
	...

08009b54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009b5c:	f001 fb24 	bl	800b1a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009b60:	4b2d      	ldr	r3, [pc, #180]	@ (8009c18 <prvAddNewTaskToReadyList+0xc4>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3301      	adds	r3, #1
 8009b66:	4a2c      	ldr	r2, [pc, #176]	@ (8009c18 <prvAddNewTaskToReadyList+0xc4>)
 8009b68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8009c1c <prvAddNewTaskToReadyList+0xc8>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d109      	bne.n	8009b86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009b72:	4a2a      	ldr	r2, [pc, #168]	@ (8009c1c <prvAddNewTaskToReadyList+0xc8>)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009b78:	4b27      	ldr	r3, [pc, #156]	@ (8009c18 <prvAddNewTaskToReadyList+0xc4>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d110      	bne.n	8009ba2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009b80:	f000 fbe8 	bl	800a354 <prvInitialiseTaskLists>
 8009b84:	e00d      	b.n	8009ba2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009b86:	4b26      	ldr	r3, [pc, #152]	@ (8009c20 <prvAddNewTaskToReadyList+0xcc>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d109      	bne.n	8009ba2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b8e:	4b23      	ldr	r3, [pc, #140]	@ (8009c1c <prvAddNewTaskToReadyList+0xc8>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d802      	bhi.n	8009ba2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009b9c:	4a1f      	ldr	r2, [pc, #124]	@ (8009c1c <prvAddNewTaskToReadyList+0xc8>)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ba2:	4b20      	ldr	r3, [pc, #128]	@ (8009c24 <prvAddNewTaskToReadyList+0xd0>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8009c24 <prvAddNewTaskToReadyList+0xd0>)
 8009baa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009bac:	4b1d      	ldr	r3, [pc, #116]	@ (8009c24 <prvAddNewTaskToReadyList+0xd0>)
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8009c28 <prvAddNewTaskToReadyList+0xd4>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d903      	bls.n	8009bc8 <prvAddNewTaskToReadyList+0x74>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc4:	4a18      	ldr	r2, [pc, #96]	@ (8009c28 <prvAddNewTaskToReadyList+0xd4>)
 8009bc6:	6013      	str	r3, [r2, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bcc:	4613      	mov	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4413      	add	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4a15      	ldr	r2, [pc, #84]	@ (8009c2c <prvAddNewTaskToReadyList+0xd8>)
 8009bd6:	441a      	add	r2, r3
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	3304      	adds	r3, #4
 8009bdc:	4619      	mov	r1, r3
 8009bde:	4610      	mov	r0, r2
 8009be0:	f7fe fdcf 	bl	8008782 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009be4:	f001 fb12 	bl	800b20c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009be8:	4b0d      	ldr	r3, [pc, #52]	@ (8009c20 <prvAddNewTaskToReadyList+0xcc>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00e      	beq.n	8009c0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8009c1c <prvAddNewTaskToReadyList+0xc8>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d207      	bcs.n	8009c0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8009c30 <prvAddNewTaskToReadyList+0xdc>)
 8009c00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c0e:	bf00      	nop
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	2000186c 	.word	0x2000186c
 8009c1c:	20001398 	.word	0x20001398
 8009c20:	20001878 	.word	0x20001878
 8009c24:	20001888 	.word	0x20001888
 8009c28:	20001874 	.word	0x20001874
 8009c2c:	2000139c 	.word	0x2000139c
 8009c30:	e000ed04 	.word	0xe000ed04

08009c34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08a      	sub	sp, #40	@ 0x28
 8009c38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c42:	463a      	mov	r2, r7
 8009c44:	1d39      	adds	r1, r7, #4
 8009c46:	f107 0308 	add.w	r3, r7, #8
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fe fd38 	bl	80086c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	9202      	str	r2, [sp, #8]
 8009c58:	9301      	str	r3, [sp, #4]
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	2300      	movs	r3, #0
 8009c60:	460a      	mov	r2, r1
 8009c62:	4922      	ldr	r1, [pc, #136]	@ (8009cec <vTaskStartScheduler+0xb8>)
 8009c64:	4822      	ldr	r0, [pc, #136]	@ (8009cf0 <vTaskStartScheduler+0xbc>)
 8009c66:	f7ff fe3f 	bl	80098e8 <xTaskCreateStatic>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	4a21      	ldr	r2, [pc, #132]	@ (8009cf4 <vTaskStartScheduler+0xc0>)
 8009c6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c70:	4b20      	ldr	r3, [pc, #128]	@ (8009cf4 <vTaskStartScheduler+0xc0>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d002      	beq.n	8009c7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	617b      	str	r3, [r7, #20]
 8009c7c:	e001      	b.n	8009c82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d102      	bne.n	8009c8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009c88:	f000 fe04 	bl	800a894 <xTimerCreateTimerTask>
 8009c8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d116      	bne.n	8009cc2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	613b      	str	r3, [r7, #16]
}
 8009ca6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009ca8:	4b13      	ldr	r3, [pc, #76]	@ (8009cf8 <vTaskStartScheduler+0xc4>)
 8009caa:	f04f 32ff 	mov.w	r2, #4294967295
 8009cae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009cb0:	4b12      	ldr	r3, [pc, #72]	@ (8009cfc <vTaskStartScheduler+0xc8>)
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009cb6:	4b12      	ldr	r3, [pc, #72]	@ (8009d00 <vTaskStartScheduler+0xcc>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009cbc:	f001 f9d0 	bl	800b060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009cc0:	e00f      	b.n	8009ce2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc8:	d10b      	bne.n	8009ce2 <vTaskStartScheduler+0xae>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	60fb      	str	r3, [r7, #12]
}
 8009cdc:	bf00      	nop
 8009cde:	bf00      	nop
 8009ce0:	e7fd      	b.n	8009cde <vTaskStartScheduler+0xaa>
}
 8009ce2:	bf00      	nop
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	0800e4f0 	.word	0x0800e4f0
 8009cf0:	0800a325 	.word	0x0800a325
 8009cf4:	20001890 	.word	0x20001890
 8009cf8:	2000188c 	.word	0x2000188c
 8009cfc:	20001878 	.word	0x20001878
 8009d00:	20001870 	.word	0x20001870

08009d04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d04:	b480      	push	{r7}
 8009d06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009d08:	4b04      	ldr	r3, [pc, #16]	@ (8009d1c <vTaskSuspendAll+0x18>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	4a03      	ldr	r2, [pc, #12]	@ (8009d1c <vTaskSuspendAll+0x18>)
 8009d10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009d12:	bf00      	nop
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	20001894 	.word	0x20001894

08009d20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009d26:	2300      	movs	r3, #0
 8009d28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009d2e:	4b42      	ldr	r3, [pc, #264]	@ (8009e38 <xTaskResumeAll+0x118>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10b      	bne.n	8009d4e <xTaskResumeAll+0x2e>
	__asm volatile
 8009d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	603b      	str	r3, [r7, #0]
}
 8009d48:	bf00      	nop
 8009d4a:	bf00      	nop
 8009d4c:	e7fd      	b.n	8009d4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d4e:	f001 fa2b 	bl	800b1a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d52:	4b39      	ldr	r3, [pc, #228]	@ (8009e38 <xTaskResumeAll+0x118>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	3b01      	subs	r3, #1
 8009d58:	4a37      	ldr	r2, [pc, #220]	@ (8009e38 <xTaskResumeAll+0x118>)
 8009d5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d5c:	4b36      	ldr	r3, [pc, #216]	@ (8009e38 <xTaskResumeAll+0x118>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d162      	bne.n	8009e2a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d64:	4b35      	ldr	r3, [pc, #212]	@ (8009e3c <xTaskResumeAll+0x11c>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d05e      	beq.n	8009e2a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d6c:	e02f      	b.n	8009dce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d6e:	4b34      	ldr	r3, [pc, #208]	@ (8009e40 <xTaskResumeAll+0x120>)
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3318      	adds	r3, #24
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fe fd5e 	bl	800883c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	3304      	adds	r3, #4
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fe fd59 	bl	800883c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8009e44 <xTaskResumeAll+0x124>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d903      	bls.n	8009d9e <xTaskResumeAll+0x7e>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d9a:	4a2a      	ldr	r2, [pc, #168]	@ (8009e44 <xTaskResumeAll+0x124>)
 8009d9c:	6013      	str	r3, [r2, #0]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009da2:	4613      	mov	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4a27      	ldr	r2, [pc, #156]	@ (8009e48 <xTaskResumeAll+0x128>)
 8009dac:	441a      	add	r2, r3
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3304      	adds	r3, #4
 8009db2:	4619      	mov	r1, r3
 8009db4:	4610      	mov	r0, r2
 8009db6:	f7fe fce4 	bl	8008782 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dbe:	4b23      	ldr	r3, [pc, #140]	@ (8009e4c <xTaskResumeAll+0x12c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d302      	bcc.n	8009dce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009dc8:	4b21      	ldr	r3, [pc, #132]	@ (8009e50 <xTaskResumeAll+0x130>)
 8009dca:	2201      	movs	r2, #1
 8009dcc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009dce:	4b1c      	ldr	r3, [pc, #112]	@ (8009e40 <xTaskResumeAll+0x120>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1cb      	bne.n	8009d6e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ddc:	f000 fb58 	bl	800a490 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009de0:	4b1c      	ldr	r3, [pc, #112]	@ (8009e54 <xTaskResumeAll+0x134>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d010      	beq.n	8009e0e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009dec:	f000 f846 	bl	8009e7c <xTaskIncrementTick>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009df6:	4b16      	ldr	r3, [pc, #88]	@ (8009e50 <xTaskResumeAll+0x130>)
 8009df8:	2201      	movs	r2, #1
 8009dfa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1f1      	bne.n	8009dec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009e08:	4b12      	ldr	r3, [pc, #72]	@ (8009e54 <xTaskResumeAll+0x134>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009e0e:	4b10      	ldr	r3, [pc, #64]	@ (8009e50 <xTaskResumeAll+0x130>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d009      	beq.n	8009e2a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e16:	2301      	movs	r3, #1
 8009e18:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e58 <xTaskResumeAll+0x138>)
 8009e1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e20:	601a      	str	r2, [r3, #0]
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e2a:	f001 f9ef 	bl	800b20c <vPortExitCritical>

	return xAlreadyYielded;
 8009e2e:	68bb      	ldr	r3, [r7, #8]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	20001894 	.word	0x20001894
 8009e3c:	2000186c 	.word	0x2000186c
 8009e40:	2000182c 	.word	0x2000182c
 8009e44:	20001874 	.word	0x20001874
 8009e48:	2000139c 	.word	0x2000139c
 8009e4c:	20001398 	.word	0x20001398
 8009e50:	20001880 	.word	0x20001880
 8009e54:	2000187c 	.word	0x2000187c
 8009e58:	e000ed04 	.word	0xe000ed04

08009e5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009e62:	4b05      	ldr	r3, [pc, #20]	@ (8009e78 <xTaskGetTickCount+0x1c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009e68:	687b      	ldr	r3, [r7, #4]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	20001870 	.word	0x20001870

08009e7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e82:	2300      	movs	r3, #0
 8009e84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e86:	4b4f      	ldr	r3, [pc, #316]	@ (8009fc4 <xTaskIncrementTick+0x148>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f040 8090 	bne.w	8009fb0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e90:	4b4d      	ldr	r3, [pc, #308]	@ (8009fc8 <xTaskIncrementTick+0x14c>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3301      	adds	r3, #1
 8009e96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e98:	4a4b      	ldr	r2, [pc, #300]	@ (8009fc8 <xTaskIncrementTick+0x14c>)
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d121      	bne.n	8009ee8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ea4:	4b49      	ldr	r3, [pc, #292]	@ (8009fcc <xTaskIncrementTick+0x150>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00b      	beq.n	8009ec6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	603b      	str	r3, [r7, #0]
}
 8009ec0:	bf00      	nop
 8009ec2:	bf00      	nop
 8009ec4:	e7fd      	b.n	8009ec2 <xTaskIncrementTick+0x46>
 8009ec6:	4b41      	ldr	r3, [pc, #260]	@ (8009fcc <xTaskIncrementTick+0x150>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	60fb      	str	r3, [r7, #12]
 8009ecc:	4b40      	ldr	r3, [pc, #256]	@ (8009fd0 <xTaskIncrementTick+0x154>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a3e      	ldr	r2, [pc, #248]	@ (8009fcc <xTaskIncrementTick+0x150>)
 8009ed2:	6013      	str	r3, [r2, #0]
 8009ed4:	4a3e      	ldr	r2, [pc, #248]	@ (8009fd0 <xTaskIncrementTick+0x154>)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6013      	str	r3, [r2, #0]
 8009eda:	4b3e      	ldr	r3, [pc, #248]	@ (8009fd4 <xTaskIncrementTick+0x158>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	4a3c      	ldr	r2, [pc, #240]	@ (8009fd4 <xTaskIncrementTick+0x158>)
 8009ee2:	6013      	str	r3, [r2, #0]
 8009ee4:	f000 fad4 	bl	800a490 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8009fd8 <xTaskIncrementTick+0x15c>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	693a      	ldr	r2, [r7, #16]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d349      	bcc.n	8009f86 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ef2:	4b36      	ldr	r3, [pc, #216]	@ (8009fcc <xTaskIncrementTick+0x150>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d104      	bne.n	8009f06 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009efc:	4b36      	ldr	r3, [pc, #216]	@ (8009fd8 <xTaskIncrementTick+0x15c>)
 8009efe:	f04f 32ff 	mov.w	r2, #4294967295
 8009f02:	601a      	str	r2, [r3, #0]
					break;
 8009f04:	e03f      	b.n	8009f86 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f06:	4b31      	ldr	r3, [pc, #196]	@ (8009fcc <xTaskIncrementTick+0x150>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d203      	bcs.n	8009f26 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8009fd8 <xTaskIncrementTick+0x15c>)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009f24:	e02f      	b.n	8009f86 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	3304      	adds	r3, #4
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fe fc86 	bl	800883c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d004      	beq.n	8009f42 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	3318      	adds	r3, #24
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fe fc7d 	bl	800883c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f46:	4b25      	ldr	r3, [pc, #148]	@ (8009fdc <xTaskIncrementTick+0x160>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d903      	bls.n	8009f56 <xTaskIncrementTick+0xda>
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f52:	4a22      	ldr	r2, [pc, #136]	@ (8009fdc <xTaskIncrementTick+0x160>)
 8009f54:	6013      	str	r3, [r2, #0]
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	4413      	add	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4a1f      	ldr	r2, [pc, #124]	@ (8009fe0 <xTaskIncrementTick+0x164>)
 8009f64:	441a      	add	r2, r3
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	f7fe fc08 	bl	8008782 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f76:	4b1b      	ldr	r3, [pc, #108]	@ (8009fe4 <xTaskIncrementTick+0x168>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d3b8      	bcc.n	8009ef2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009f80:	2301      	movs	r3, #1
 8009f82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f84:	e7b5      	b.n	8009ef2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f86:	4b17      	ldr	r3, [pc, #92]	@ (8009fe4 <xTaskIncrementTick+0x168>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f8c:	4914      	ldr	r1, [pc, #80]	@ (8009fe0 <xTaskIncrementTick+0x164>)
 8009f8e:	4613      	mov	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	440b      	add	r3, r1
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d901      	bls.n	8009fa2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009fa2:	4b11      	ldr	r3, [pc, #68]	@ (8009fe8 <xTaskIncrementTick+0x16c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d007      	beq.n	8009fba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009faa:	2301      	movs	r3, #1
 8009fac:	617b      	str	r3, [r7, #20]
 8009fae:	e004      	b.n	8009fba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8009fec <xTaskIncrementTick+0x170>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8009fec <xTaskIncrementTick+0x170>)
 8009fb8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009fba:	697b      	ldr	r3, [r7, #20]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3718      	adds	r7, #24
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	20001894 	.word	0x20001894
 8009fc8:	20001870 	.word	0x20001870
 8009fcc:	20001824 	.word	0x20001824
 8009fd0:	20001828 	.word	0x20001828
 8009fd4:	20001884 	.word	0x20001884
 8009fd8:	2000188c 	.word	0x2000188c
 8009fdc:	20001874 	.word	0x20001874
 8009fe0:	2000139c 	.word	0x2000139c
 8009fe4:	20001398 	.word	0x20001398
 8009fe8:	20001880 	.word	0x20001880
 8009fec:	2000187c 	.word	0x2000187c

08009ff0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ff6:	4b28      	ldr	r3, [pc, #160]	@ (800a098 <vTaskSwitchContext+0xa8>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d003      	beq.n	800a006 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ffe:	4b27      	ldr	r3, [pc, #156]	@ (800a09c <vTaskSwitchContext+0xac>)
 800a000:	2201      	movs	r2, #1
 800a002:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a004:	e042      	b.n	800a08c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a006:	4b25      	ldr	r3, [pc, #148]	@ (800a09c <vTaskSwitchContext+0xac>)
 800a008:	2200      	movs	r2, #0
 800a00a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a00c:	4b24      	ldr	r3, [pc, #144]	@ (800a0a0 <vTaskSwitchContext+0xb0>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	60fb      	str	r3, [r7, #12]
 800a012:	e011      	b.n	800a038 <vTaskSwitchContext+0x48>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d10b      	bne.n	800a032 <vTaskSwitchContext+0x42>
	__asm volatile
 800a01a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a01e:	f383 8811 	msr	BASEPRI, r3
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	607b      	str	r3, [r7, #4]
}
 800a02c:	bf00      	nop
 800a02e:	bf00      	nop
 800a030:	e7fd      	b.n	800a02e <vTaskSwitchContext+0x3e>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	3b01      	subs	r3, #1
 800a036:	60fb      	str	r3, [r7, #12]
 800a038:	491a      	ldr	r1, [pc, #104]	@ (800a0a4 <vTaskSwitchContext+0xb4>)
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	4613      	mov	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4413      	add	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	440b      	add	r3, r1
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d0e3      	beq.n	800a014 <vTaskSwitchContext+0x24>
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	4613      	mov	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4a13      	ldr	r2, [pc, #76]	@ (800a0a4 <vTaskSwitchContext+0xb4>)
 800a058:	4413      	add	r3, r2
 800a05a:	60bb      	str	r3, [r7, #8]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	685a      	ldr	r2, [r3, #4]
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	605a      	str	r2, [r3, #4]
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	685a      	ldr	r2, [r3, #4]
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	3308      	adds	r3, #8
 800a06e:	429a      	cmp	r2, r3
 800a070:	d104      	bne.n	800a07c <vTaskSwitchContext+0x8c>
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	685a      	ldr	r2, [r3, #4]
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	605a      	str	r2, [r3, #4]
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	4a09      	ldr	r2, [pc, #36]	@ (800a0a8 <vTaskSwitchContext+0xb8>)
 800a084:	6013      	str	r3, [r2, #0]
 800a086:	4a06      	ldr	r2, [pc, #24]	@ (800a0a0 <vTaskSwitchContext+0xb0>)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6013      	str	r3, [r2, #0]
}
 800a08c:	bf00      	nop
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr
 800a098:	20001894 	.word	0x20001894
 800a09c:	20001880 	.word	0x20001880
 800a0a0:	20001874 	.word	0x20001874
 800a0a4:	2000139c 	.word	0x2000139c
 800a0a8:	20001398 	.word	0x20001398

0800a0ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10b      	bne.n	800a0d4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	60fb      	str	r3, [r7, #12]
}
 800a0ce:	bf00      	nop
 800a0d0:	bf00      	nop
 800a0d2:	e7fd      	b.n	800a0d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0d4:	4b07      	ldr	r3, [pc, #28]	@ (800a0f4 <vTaskPlaceOnEventList+0x48>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	3318      	adds	r3, #24
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f7fe fb74 	bl	80087ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	6838      	ldr	r0, [r7, #0]
 800a0e6:	f000 fb81 	bl	800a7ec <prvAddCurrentTaskToDelayedList>
}
 800a0ea:	bf00      	nop
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20001398 	.word	0x20001398

0800a0f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d10b      	bne.n	800a122 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10e:	f383 8811 	msr	BASEPRI, r3
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	617b      	str	r3, [r7, #20]
}
 800a11c:	bf00      	nop
 800a11e:	bf00      	nop
 800a120:	e7fd      	b.n	800a11e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a122:	4b0a      	ldr	r3, [pc, #40]	@ (800a14c <vTaskPlaceOnEventListRestricted+0x54>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	3318      	adds	r3, #24
 800a128:	4619      	mov	r1, r3
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f7fe fb29 	bl	8008782 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d002      	beq.n	800a13c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a136:	f04f 33ff 	mov.w	r3, #4294967295
 800a13a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a13c:	6879      	ldr	r1, [r7, #4]
 800a13e:	68b8      	ldr	r0, [r7, #8]
 800a140:	f000 fb54 	bl	800a7ec <prvAddCurrentTaskToDelayedList>
	}
 800a144:	bf00      	nop
 800a146:	3718      	adds	r7, #24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	20001398 	.word	0x20001398

0800a150 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10b      	bne.n	800a17e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	60fb      	str	r3, [r7, #12]
}
 800a178:	bf00      	nop
 800a17a:	bf00      	nop
 800a17c:	e7fd      	b.n	800a17a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	3318      	adds	r3, #24
 800a182:	4618      	mov	r0, r3
 800a184:	f7fe fb5a 	bl	800883c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a188:	4b1d      	ldr	r3, [pc, #116]	@ (800a200 <xTaskRemoveFromEventList+0xb0>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d11d      	bne.n	800a1cc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	3304      	adds	r3, #4
 800a194:	4618      	mov	r0, r3
 800a196:	f7fe fb51 	bl	800883c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a19e:	4b19      	ldr	r3, [pc, #100]	@ (800a204 <xTaskRemoveFromEventList+0xb4>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d903      	bls.n	800a1ae <xTaskRemoveFromEventList+0x5e>
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1aa:	4a16      	ldr	r2, [pc, #88]	@ (800a204 <xTaskRemoveFromEventList+0xb4>)
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4a13      	ldr	r2, [pc, #76]	@ (800a208 <xTaskRemoveFromEventList+0xb8>)
 800a1bc:	441a      	add	r2, r3
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	3304      	adds	r3, #4
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	4610      	mov	r0, r2
 800a1c6:	f7fe fadc 	bl	8008782 <vListInsertEnd>
 800a1ca:	e005      	b.n	800a1d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	3318      	adds	r3, #24
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	480e      	ldr	r0, [pc, #56]	@ (800a20c <xTaskRemoveFromEventList+0xbc>)
 800a1d4:	f7fe fad5 	bl	8008782 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a210 <xTaskRemoveFromEventList+0xc0>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d905      	bls.n	800a1f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a1ea:	4b0a      	ldr	r3, [pc, #40]	@ (800a214 <xTaskRemoveFromEventList+0xc4>)
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	601a      	str	r2, [r3, #0]
 800a1f0:	e001      	b.n	800a1f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a1f6:	697b      	ldr	r3, [r7, #20]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3718      	adds	r7, #24
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	20001894 	.word	0x20001894
 800a204:	20001874 	.word	0x20001874
 800a208:	2000139c 	.word	0x2000139c
 800a20c:	2000182c 	.word	0x2000182c
 800a210:	20001398 	.word	0x20001398
 800a214:	20001880 	.word	0x20001880

0800a218 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a220:	4b06      	ldr	r3, [pc, #24]	@ (800a23c <vTaskInternalSetTimeOutState+0x24>)
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a228:	4b05      	ldr	r3, [pc, #20]	@ (800a240 <vTaskInternalSetTimeOutState+0x28>)
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	605a      	str	r2, [r3, #4]
}
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	20001884 	.word	0x20001884
 800a240:	20001870 	.word	0x20001870

0800a244 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10b      	bne.n	800a26c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a258:	f383 8811 	msr	BASEPRI, r3
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f3bf 8f4f 	dsb	sy
 800a264:	613b      	str	r3, [r7, #16]
}
 800a266:	bf00      	nop
 800a268:	bf00      	nop
 800a26a:	e7fd      	b.n	800a268 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10b      	bne.n	800a28a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	60fb      	str	r3, [r7, #12]
}
 800a284:	bf00      	nop
 800a286:	bf00      	nop
 800a288:	e7fd      	b.n	800a286 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a28a:	f000 ff8d 	bl	800b1a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a28e:	4b1d      	ldr	r3, [pc, #116]	@ (800a304 <xTaskCheckForTimeOut+0xc0>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	69ba      	ldr	r2, [r7, #24]
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a6:	d102      	bne.n	800a2ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	61fb      	str	r3, [r7, #28]
 800a2ac:	e023      	b.n	800a2f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	4b15      	ldr	r3, [pc, #84]	@ (800a308 <xTaskCheckForTimeOut+0xc4>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d007      	beq.n	800a2ca <xTaskCheckForTimeOut+0x86>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	69ba      	ldr	r2, [r7, #24]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d302      	bcc.n	800a2ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	61fb      	str	r3, [r7, #28]
 800a2c8:	e015      	b.n	800a2f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d20b      	bcs.n	800a2ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	1ad2      	subs	r2, r2, r3
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f7ff ff99 	bl	800a218 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	61fb      	str	r3, [r7, #28]
 800a2ea:	e004      	b.n	800a2f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a2f6:	f000 ff89 	bl	800b20c <vPortExitCritical>

	return xReturn;
 800a2fa:	69fb      	ldr	r3, [r7, #28]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3720      	adds	r7, #32
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	20001870 	.word	0x20001870
 800a308:	20001884 	.word	0x20001884

0800a30c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a30c:	b480      	push	{r7}
 800a30e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a310:	4b03      	ldr	r3, [pc, #12]	@ (800a320 <vTaskMissedYield+0x14>)
 800a312:	2201      	movs	r2, #1
 800a314:	601a      	str	r2, [r3, #0]
}
 800a316:	bf00      	nop
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	20001880 	.word	0x20001880

0800a324 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a32c:	f000 f852 	bl	800a3d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a330:	4b06      	ldr	r3, [pc, #24]	@ (800a34c <prvIdleTask+0x28>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d9f9      	bls.n	800a32c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a338:	4b05      	ldr	r3, [pc, #20]	@ (800a350 <prvIdleTask+0x2c>)
 800a33a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a348:	e7f0      	b.n	800a32c <prvIdleTask+0x8>
 800a34a:	bf00      	nop
 800a34c:	2000139c 	.word	0x2000139c
 800a350:	e000ed04 	.word	0xe000ed04

0800a354 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a35a:	2300      	movs	r3, #0
 800a35c:	607b      	str	r3, [r7, #4]
 800a35e:	e00c      	b.n	800a37a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	4613      	mov	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	4413      	add	r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4a12      	ldr	r2, [pc, #72]	@ (800a3b4 <prvInitialiseTaskLists+0x60>)
 800a36c:	4413      	add	r3, r2
 800a36e:	4618      	mov	r0, r3
 800a370:	f7fe f9da 	bl	8008728 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	3301      	adds	r3, #1
 800a378:	607b      	str	r3, [r7, #4]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2b37      	cmp	r3, #55	@ 0x37
 800a37e:	d9ef      	bls.n	800a360 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a380:	480d      	ldr	r0, [pc, #52]	@ (800a3b8 <prvInitialiseTaskLists+0x64>)
 800a382:	f7fe f9d1 	bl	8008728 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a386:	480d      	ldr	r0, [pc, #52]	@ (800a3bc <prvInitialiseTaskLists+0x68>)
 800a388:	f7fe f9ce 	bl	8008728 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a38c:	480c      	ldr	r0, [pc, #48]	@ (800a3c0 <prvInitialiseTaskLists+0x6c>)
 800a38e:	f7fe f9cb 	bl	8008728 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a392:	480c      	ldr	r0, [pc, #48]	@ (800a3c4 <prvInitialiseTaskLists+0x70>)
 800a394:	f7fe f9c8 	bl	8008728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a398:	480b      	ldr	r0, [pc, #44]	@ (800a3c8 <prvInitialiseTaskLists+0x74>)
 800a39a:	f7fe f9c5 	bl	8008728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a39e:	4b0b      	ldr	r3, [pc, #44]	@ (800a3cc <prvInitialiseTaskLists+0x78>)
 800a3a0:	4a05      	ldr	r2, [pc, #20]	@ (800a3b8 <prvInitialiseTaskLists+0x64>)
 800a3a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a3a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a3d0 <prvInitialiseTaskLists+0x7c>)
 800a3a6:	4a05      	ldr	r2, [pc, #20]	@ (800a3bc <prvInitialiseTaskLists+0x68>)
 800a3a8:	601a      	str	r2, [r3, #0]
}
 800a3aa:	bf00      	nop
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	2000139c 	.word	0x2000139c
 800a3b8:	200017fc 	.word	0x200017fc
 800a3bc:	20001810 	.word	0x20001810
 800a3c0:	2000182c 	.word	0x2000182c
 800a3c4:	20001840 	.word	0x20001840
 800a3c8:	20001858 	.word	0x20001858
 800a3cc:	20001824 	.word	0x20001824
 800a3d0:	20001828 	.word	0x20001828

0800a3d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3da:	e019      	b.n	800a410 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a3dc:	f000 fee4 	bl	800b1a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3e0:	4b10      	ldr	r3, [pc, #64]	@ (800a424 <prvCheckTasksWaitingTermination+0x50>)
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	3304      	adds	r3, #4
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7fe fa25 	bl	800883c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a3f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a428 <prvCheckTasksWaitingTermination+0x54>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	4a0b      	ldr	r2, [pc, #44]	@ (800a428 <prvCheckTasksWaitingTermination+0x54>)
 800a3fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a3fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a42c <prvCheckTasksWaitingTermination+0x58>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	3b01      	subs	r3, #1
 800a402:	4a0a      	ldr	r2, [pc, #40]	@ (800a42c <prvCheckTasksWaitingTermination+0x58>)
 800a404:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a406:	f000 ff01 	bl	800b20c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f810 	bl	800a430 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a410:	4b06      	ldr	r3, [pc, #24]	@ (800a42c <prvCheckTasksWaitingTermination+0x58>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1e1      	bne.n	800a3dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a418:	bf00      	nop
 800a41a:	bf00      	nop
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	20001840 	.word	0x20001840
 800a428:	2000186c 	.word	0x2000186c
 800a42c:	20001854 	.word	0x20001854

0800a430 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d108      	bne.n	800a454 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a446:	4618      	mov	r0, r3
 800a448:	f001 f89e 	bl	800b588 <vPortFree>
				vPortFree( pxTCB );
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f001 f89b 	bl	800b588 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a452:	e019      	b.n	800a488 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d103      	bne.n	800a466 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f001 f892 	bl	800b588 <vPortFree>
	}
 800a464:	e010      	b.n	800a488 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d00b      	beq.n	800a488 <prvDeleteTCB+0x58>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	60fb      	str	r3, [r7, #12]
}
 800a482:	bf00      	nop
 800a484:	bf00      	nop
 800a486:	e7fd      	b.n	800a484 <prvDeleteTCB+0x54>
	}
 800a488:	bf00      	nop
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a496:	4b0c      	ldr	r3, [pc, #48]	@ (800a4c8 <prvResetNextTaskUnblockTime+0x38>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d104      	bne.n	800a4aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a4cc <prvResetNextTaskUnblockTime+0x3c>)
 800a4a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a4a8:	e008      	b.n	800a4bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4aa:	4b07      	ldr	r3, [pc, #28]	@ (800a4c8 <prvResetNextTaskUnblockTime+0x38>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	4a04      	ldr	r2, [pc, #16]	@ (800a4cc <prvResetNextTaskUnblockTime+0x3c>)
 800a4ba:	6013      	str	r3, [r2, #0]
}
 800a4bc:	bf00      	nop
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr
 800a4c8:	20001824 	.word	0x20001824
 800a4cc:	2000188c 	.word	0x2000188c

0800a4d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a4d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a504 <xTaskGetSchedulerState+0x34>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d102      	bne.n	800a4e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	607b      	str	r3, [r7, #4]
 800a4e2:	e008      	b.n	800a4f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4e4:	4b08      	ldr	r3, [pc, #32]	@ (800a508 <xTaskGetSchedulerState+0x38>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d102      	bne.n	800a4f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	607b      	str	r3, [r7, #4]
 800a4f0:	e001      	b.n	800a4f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a4f6:	687b      	ldr	r3, [r7, #4]
	}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr
 800a504:	20001878 	.word	0x20001878
 800a508:	20001894 	.word	0x20001894

0800a50c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a518:	2300      	movs	r3, #0
 800a51a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d051      	beq.n	800a5c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a526:	4b2a      	ldr	r3, [pc, #168]	@ (800a5d0 <xTaskPriorityInherit+0xc4>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d241      	bcs.n	800a5b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	2b00      	cmp	r3, #0
 800a536:	db06      	blt.n	800a546 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a538:	4b25      	ldr	r3, [pc, #148]	@ (800a5d0 <xTaskPriorityInherit+0xc4>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a53e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	6959      	ldr	r1, [r3, #20]
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a54e:	4613      	mov	r3, r2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4413      	add	r3, r2
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4a1f      	ldr	r2, [pc, #124]	@ (800a5d4 <xTaskPriorityInherit+0xc8>)
 800a558:	4413      	add	r3, r2
 800a55a:	4299      	cmp	r1, r3
 800a55c:	d122      	bne.n	800a5a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	3304      	adds	r3, #4
 800a562:	4618      	mov	r0, r3
 800a564:	f7fe f96a 	bl	800883c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a568:	4b19      	ldr	r3, [pc, #100]	@ (800a5d0 <xTaskPriorityInherit+0xc4>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a576:	4b18      	ldr	r3, [pc, #96]	@ (800a5d8 <xTaskPriorityInherit+0xcc>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d903      	bls.n	800a586 <xTaskPriorityInherit+0x7a>
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a582:	4a15      	ldr	r2, [pc, #84]	@ (800a5d8 <xTaskPriorityInherit+0xcc>)
 800a584:	6013      	str	r3, [r2, #0]
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a58a:	4613      	mov	r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4413      	add	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4a10      	ldr	r2, [pc, #64]	@ (800a5d4 <xTaskPriorityInherit+0xc8>)
 800a594:	441a      	add	r2, r3
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	3304      	adds	r3, #4
 800a59a:	4619      	mov	r1, r3
 800a59c:	4610      	mov	r0, r2
 800a59e:	f7fe f8f0 	bl	8008782 <vListInsertEnd>
 800a5a2:	e004      	b.n	800a5ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a5a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a5d0 <xTaskPriorityInherit+0xc4>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	60fb      	str	r3, [r7, #12]
 800a5b2:	e008      	b.n	800a5c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5b8:	4b05      	ldr	r3, [pc, #20]	@ (800a5d0 <xTaskPriorityInherit+0xc4>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d201      	bcs.n	800a5c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
	}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	20001398 	.word	0x20001398
 800a5d4:	2000139c 	.word	0x2000139c
 800a5d8:	20001874 	.word	0x20001874

0800a5dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b086      	sub	sp, #24
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d058      	beq.n	800a6a4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a5f2:	4b2f      	ldr	r3, [pc, #188]	@ (800a6b0 <xTaskPriorityDisinherit+0xd4>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d00b      	beq.n	800a614 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	60fb      	str	r3, [r7, #12]
}
 800a60e:	bf00      	nop
 800a610:	bf00      	nop
 800a612:	e7fd      	b.n	800a610 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10b      	bne.n	800a634 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	60bb      	str	r3, [r7, #8]
}
 800a62e:	bf00      	nop
 800a630:	bf00      	nop
 800a632:	e7fd      	b.n	800a630 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a638:	1e5a      	subs	r2, r3, #1
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a646:	429a      	cmp	r2, r3
 800a648:	d02c      	beq.n	800a6a4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d128      	bne.n	800a6a4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	3304      	adds	r3, #4
 800a656:	4618      	mov	r0, r3
 800a658:	f7fe f8f0 	bl	800883c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a668:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a674:	4b0f      	ldr	r3, [pc, #60]	@ (800a6b4 <xTaskPriorityDisinherit+0xd8>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d903      	bls.n	800a684 <xTaskPriorityDisinherit+0xa8>
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a680:	4a0c      	ldr	r2, [pc, #48]	@ (800a6b4 <xTaskPriorityDisinherit+0xd8>)
 800a682:	6013      	str	r3, [r2, #0]
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a688:	4613      	mov	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	4413      	add	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4a09      	ldr	r2, [pc, #36]	@ (800a6b8 <xTaskPriorityDisinherit+0xdc>)
 800a692:	441a      	add	r2, r3
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	3304      	adds	r3, #4
 800a698:	4619      	mov	r1, r3
 800a69a:	4610      	mov	r0, r2
 800a69c:	f7fe f871 	bl	8008782 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a6a4:	697b      	ldr	r3, [r7, #20]
	}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	20001398 	.word	0x20001398
 800a6b4:	20001874 	.word	0x20001874
 800a6b8:	2000139c 	.word	0x2000139c

0800a6bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b088      	sub	sp, #32
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d06c      	beq.n	800a7ae <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10b      	bne.n	800a6f4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e0:	f383 8811 	msr	BASEPRI, r3
 800a6e4:	f3bf 8f6f 	isb	sy
 800a6e8:	f3bf 8f4f 	dsb	sy
 800a6ec:	60fb      	str	r3, [r7, #12]
}
 800a6ee:	bf00      	nop
 800a6f0:	bf00      	nop
 800a6f2:	e7fd      	b.n	800a6f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d902      	bls.n	800a704 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	61fb      	str	r3, [r7, #28]
 800a702:	e002      	b.n	800a70a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a708:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a70e:	69fa      	ldr	r2, [r7, #28]
 800a710:	429a      	cmp	r2, r3
 800a712:	d04c      	beq.n	800a7ae <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a714:	69bb      	ldr	r3, [r7, #24]
 800a716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a718:	697a      	ldr	r2, [r7, #20]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d147      	bne.n	800a7ae <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a71e:	4b26      	ldr	r3, [pc, #152]	@ (800a7b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	69ba      	ldr	r2, [r7, #24]
 800a724:	429a      	cmp	r2, r3
 800a726:	d10b      	bne.n	800a740 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	60bb      	str	r3, [r7, #8]
}
 800a73a:	bf00      	nop
 800a73c:	bf00      	nop
 800a73e:	e7fd      	b.n	800a73c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a744:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	69fa      	ldr	r2, [r7, #28]
 800a74a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	2b00      	cmp	r3, #0
 800a752:	db04      	blt.n	800a75e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	6959      	ldr	r1, [r3, #20]
 800a762:	693a      	ldr	r2, [r7, #16]
 800a764:	4613      	mov	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	4413      	add	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4a13      	ldr	r2, [pc, #76]	@ (800a7bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a76e:	4413      	add	r3, r2
 800a770:	4299      	cmp	r1, r3
 800a772:	d11c      	bne.n	800a7ae <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	3304      	adds	r3, #4
 800a778:	4618      	mov	r0, r3
 800a77a:	f7fe f85f 	bl	800883c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a782:	4b0f      	ldr	r3, [pc, #60]	@ (800a7c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	429a      	cmp	r2, r3
 800a788:	d903      	bls.n	800a792 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a78e:	4a0c      	ldr	r2, [pc, #48]	@ (800a7c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a790:	6013      	str	r3, [r2, #0]
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a796:	4613      	mov	r3, r2
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	4413      	add	r3, r2
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	4a07      	ldr	r2, [pc, #28]	@ (800a7bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a7a0:	441a      	add	r2, r3
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	3304      	adds	r3, #4
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	f7fd ffea 	bl	8008782 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7ae:	bf00      	nop
 800a7b0:	3720      	adds	r7, #32
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	20001398 	.word	0x20001398
 800a7bc:	2000139c 	.word	0x2000139c
 800a7c0:	20001874 	.word	0x20001874

0800a7c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a7c4:	b480      	push	{r7}
 800a7c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a7c8:	4b07      	ldr	r3, [pc, #28]	@ (800a7e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d004      	beq.n	800a7da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a7d0:	4b05      	ldr	r3, [pc, #20]	@ (800a7e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a7d6:	3201      	adds	r2, #1
 800a7d8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a7da:	4b03      	ldr	r3, [pc, #12]	@ (800a7e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
	}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	20001398 	.word	0x20001398

0800a7ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a7f6:	4b21      	ldr	r3, [pc, #132]	@ (800a87c <prvAddCurrentTaskToDelayedList+0x90>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7fc:	4b20      	ldr	r3, [pc, #128]	@ (800a880 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3304      	adds	r3, #4
 800a802:	4618      	mov	r0, r3
 800a804:	f7fe f81a 	bl	800883c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80e:	d10a      	bne.n	800a826 <prvAddCurrentTaskToDelayedList+0x3a>
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d007      	beq.n	800a826 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a816:	4b1a      	ldr	r3, [pc, #104]	@ (800a880 <prvAddCurrentTaskToDelayedList+0x94>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	3304      	adds	r3, #4
 800a81c:	4619      	mov	r1, r3
 800a81e:	4819      	ldr	r0, [pc, #100]	@ (800a884 <prvAddCurrentTaskToDelayedList+0x98>)
 800a820:	f7fd ffaf 	bl	8008782 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a824:	e026      	b.n	800a874 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a826:	68fa      	ldr	r2, [r7, #12]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4413      	add	r3, r2
 800a82c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a82e:	4b14      	ldr	r3, [pc, #80]	@ (800a880 <prvAddCurrentTaskToDelayedList+0x94>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d209      	bcs.n	800a852 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a83e:	4b12      	ldr	r3, [pc, #72]	@ (800a888 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	4b0f      	ldr	r3, [pc, #60]	@ (800a880 <prvAddCurrentTaskToDelayedList+0x94>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	3304      	adds	r3, #4
 800a848:	4619      	mov	r1, r3
 800a84a:	4610      	mov	r0, r2
 800a84c:	f7fd ffbd 	bl	80087ca <vListInsert>
}
 800a850:	e010      	b.n	800a874 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a852:	4b0e      	ldr	r3, [pc, #56]	@ (800a88c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	4b0a      	ldr	r3, [pc, #40]	@ (800a880 <prvAddCurrentTaskToDelayedList+0x94>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	3304      	adds	r3, #4
 800a85c:	4619      	mov	r1, r3
 800a85e:	4610      	mov	r0, r2
 800a860:	f7fd ffb3 	bl	80087ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a864:	4b0a      	ldr	r3, [pc, #40]	@ (800a890 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d202      	bcs.n	800a874 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a86e:	4a08      	ldr	r2, [pc, #32]	@ (800a890 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	6013      	str	r3, [r2, #0]
}
 800a874:	bf00      	nop
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	20001870 	.word	0x20001870
 800a880:	20001398 	.word	0x20001398
 800a884:	20001858 	.word	0x20001858
 800a888:	20001828 	.word	0x20001828
 800a88c:	20001824 	.word	0x20001824
 800a890:	2000188c 	.word	0x2000188c

0800a894 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b08a      	sub	sp, #40	@ 0x28
 800a898:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a89a:	2300      	movs	r3, #0
 800a89c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a89e:	f000 fb13 	bl	800aec8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a8a2:	4b1d      	ldr	r3, [pc, #116]	@ (800a918 <xTimerCreateTimerTask+0x84>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d021      	beq.n	800a8ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a8b2:	1d3a      	adds	r2, r7, #4
 800a8b4:	f107 0108 	add.w	r1, r7, #8
 800a8b8:	f107 030c 	add.w	r3, r7, #12
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fd ff19 	bl	80086f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a8c2:	6879      	ldr	r1, [r7, #4]
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	9202      	str	r2, [sp, #8]
 800a8ca:	9301      	str	r3, [sp, #4]
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	460a      	mov	r2, r1
 800a8d4:	4911      	ldr	r1, [pc, #68]	@ (800a91c <xTimerCreateTimerTask+0x88>)
 800a8d6:	4812      	ldr	r0, [pc, #72]	@ (800a920 <xTimerCreateTimerTask+0x8c>)
 800a8d8:	f7ff f806 	bl	80098e8 <xTaskCreateStatic>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	4a11      	ldr	r2, [pc, #68]	@ (800a924 <xTimerCreateTimerTask+0x90>)
 800a8e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a8e2:	4b10      	ldr	r3, [pc, #64]	@ (800a924 <xTimerCreateTimerTask+0x90>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d001      	beq.n	800a8ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10b      	bne.n	800a90c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8f8:	f383 8811 	msr	BASEPRI, r3
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	613b      	str	r3, [r7, #16]
}
 800a906:	bf00      	nop
 800a908:	bf00      	nop
 800a90a:	e7fd      	b.n	800a908 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a90c:	697b      	ldr	r3, [r7, #20]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3718      	adds	r7, #24
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	200018c8 	.word	0x200018c8
 800a91c:	0800e4f8 	.word	0x0800e4f8
 800a920:	0800aa61 	.word	0x0800aa61
 800a924:	200018cc 	.word	0x200018cc

0800a928 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b08a      	sub	sp, #40	@ 0x28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
 800a934:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a936:	2300      	movs	r3, #0
 800a938:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10b      	bne.n	800a958 <xTimerGenericCommand+0x30>
	__asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a944:	f383 8811 	msr	BASEPRI, r3
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	623b      	str	r3, [r7, #32]
}
 800a952:	bf00      	nop
 800a954:	bf00      	nop
 800a956:	e7fd      	b.n	800a954 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a958:	4b19      	ldr	r3, [pc, #100]	@ (800a9c0 <xTimerGenericCommand+0x98>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d02a      	beq.n	800a9b6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	2b05      	cmp	r3, #5
 800a970:	dc18      	bgt.n	800a9a4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a972:	f7ff fdad 	bl	800a4d0 <xTaskGetSchedulerState>
 800a976:	4603      	mov	r3, r0
 800a978:	2b02      	cmp	r3, #2
 800a97a:	d109      	bne.n	800a990 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a97c:	4b10      	ldr	r3, [pc, #64]	@ (800a9c0 <xTimerGenericCommand+0x98>)
 800a97e:	6818      	ldr	r0, [r3, #0]
 800a980:	f107 0110 	add.w	r1, r7, #16
 800a984:	2300      	movs	r3, #0
 800a986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a988:	f7fe f936 	bl	8008bf8 <xQueueGenericSend>
 800a98c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a98e:	e012      	b.n	800a9b6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a990:	4b0b      	ldr	r3, [pc, #44]	@ (800a9c0 <xTimerGenericCommand+0x98>)
 800a992:	6818      	ldr	r0, [r3, #0]
 800a994:	f107 0110 	add.w	r1, r7, #16
 800a998:	2300      	movs	r3, #0
 800a99a:	2200      	movs	r2, #0
 800a99c:	f7fe f92c 	bl	8008bf8 <xQueueGenericSend>
 800a9a0:	6278      	str	r0, [r7, #36]	@ 0x24
 800a9a2:	e008      	b.n	800a9b6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a9a4:	4b06      	ldr	r3, [pc, #24]	@ (800a9c0 <xTimerGenericCommand+0x98>)
 800a9a6:	6818      	ldr	r0, [r3, #0]
 800a9a8:	f107 0110 	add.w	r1, r7, #16
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	f7fe fa24 	bl	8008dfc <xQueueGenericSendFromISR>
 800a9b4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3728      	adds	r7, #40	@ 0x28
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	200018c8 	.word	0x200018c8

0800a9c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b088      	sub	sp, #32
 800a9c8:	af02      	add	r7, sp, #8
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9ce:	4b23      	ldr	r3, [pc, #140]	@ (800aa5c <prvProcessExpiredTimer+0x98>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	3304      	adds	r3, #4
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7fd ff2d 	bl	800883c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9e8:	f003 0304 	and.w	r3, r3, #4
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d023      	beq.n	800aa38 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	699a      	ldr	r2, [r3, #24]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	18d1      	adds	r1, r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	6978      	ldr	r0, [r7, #20]
 800a9fe:	f000 f8d5 	bl	800abac <prvInsertTimerInActiveList>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d020      	beq.n	800aa4a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa08:	2300      	movs	r3, #0
 800aa0a:	9300      	str	r3, [sp, #0]
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	2100      	movs	r1, #0
 800aa12:	6978      	ldr	r0, [r7, #20]
 800aa14:	f7ff ff88 	bl	800a928 <xTimerGenericCommand>
 800aa18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d114      	bne.n	800aa4a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800aa20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa24:	f383 8811 	msr	BASEPRI, r3
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	60fb      	str	r3, [r7, #12]
}
 800aa32:	bf00      	nop
 800aa34:	bf00      	nop
 800aa36:	e7fd      	b.n	800aa34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa3e:	f023 0301 	bic.w	r3, r3, #1
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	6978      	ldr	r0, [r7, #20]
 800aa50:	4798      	blx	r3
}
 800aa52:	bf00      	nop
 800aa54:	3718      	adds	r7, #24
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	200018c0 	.word	0x200018c0

0800aa60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa68:	f107 0308 	add.w	r3, r7, #8
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f000 f859 	bl	800ab24 <prvGetNextExpireTime>
 800aa72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	4619      	mov	r1, r3
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 f805 	bl	800aa88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aa7e:	f000 f8d7 	bl	800ac30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa82:	bf00      	nop
 800aa84:	e7f0      	b.n	800aa68 <prvTimerTask+0x8>
	...

0800aa88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aa92:	f7ff f937 	bl	8009d04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa96:	f107 0308 	add.w	r3, r7, #8
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f000 f866 	bl	800ab6c <prvSampleTimeNow>
 800aaa0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d130      	bne.n	800ab0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10a      	bne.n	800aac4 <prvProcessTimerOrBlockTask+0x3c>
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d806      	bhi.n	800aac4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aab6:	f7ff f933 	bl	8009d20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aaba:	68f9      	ldr	r1, [r7, #12]
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f7ff ff81 	bl	800a9c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aac2:	e024      	b.n	800ab0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d008      	beq.n	800aadc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aaca:	4b13      	ldr	r3, [pc, #76]	@ (800ab18 <prvProcessTimerOrBlockTask+0x90>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d101      	bne.n	800aad8 <prvProcessTimerOrBlockTask+0x50>
 800aad4:	2301      	movs	r3, #1
 800aad6:	e000      	b.n	800aada <prvProcessTimerOrBlockTask+0x52>
 800aad8:	2300      	movs	r3, #0
 800aada:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aadc:	4b0f      	ldr	r3, [pc, #60]	@ (800ab1c <prvProcessTimerOrBlockTask+0x94>)
 800aade:	6818      	ldr	r0, [r3, #0]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	4619      	mov	r1, r3
 800aaea:	f7fe fec9 	bl	8009880 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aaee:	f7ff f917 	bl	8009d20 <xTaskResumeAll>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d10a      	bne.n	800ab0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aaf8:	4b09      	ldr	r3, [pc, #36]	@ (800ab20 <prvProcessTimerOrBlockTask+0x98>)
 800aafa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aafe:	601a      	str	r2, [r3, #0]
 800ab00:	f3bf 8f4f 	dsb	sy
 800ab04:	f3bf 8f6f 	isb	sy
}
 800ab08:	e001      	b.n	800ab0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ab0a:	f7ff f909 	bl	8009d20 <xTaskResumeAll>
}
 800ab0e:	bf00      	nop
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	200018c4 	.word	0x200018c4
 800ab1c:	200018c8 	.word	0x200018c8
 800ab20:	e000ed04 	.word	0xe000ed04

0800ab24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ab24:	b480      	push	{r7}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ab2c:	4b0e      	ldr	r3, [pc, #56]	@ (800ab68 <prvGetNextExpireTime+0x44>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d101      	bne.n	800ab3a <prvGetNextExpireTime+0x16>
 800ab36:	2201      	movs	r2, #1
 800ab38:	e000      	b.n	800ab3c <prvGetNextExpireTime+0x18>
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d105      	bne.n	800ab54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab48:	4b07      	ldr	r3, [pc, #28]	@ (800ab68 <prvGetNextExpireTime+0x44>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	60fb      	str	r3, [r7, #12]
 800ab52:	e001      	b.n	800ab58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ab54:	2300      	movs	r3, #0
 800ab56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ab58:	68fb      	ldr	r3, [r7, #12]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	200018c0 	.word	0x200018c0

0800ab6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ab74:	f7ff f972 	bl	8009e5c <xTaskGetTickCount>
 800ab78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ab7a:	4b0b      	ldr	r3, [pc, #44]	@ (800aba8 <prvSampleTimeNow+0x3c>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d205      	bcs.n	800ab90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ab84:	f000 f93a 	bl	800adfc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	601a      	str	r2, [r3, #0]
 800ab8e:	e002      	b.n	800ab96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ab96:	4a04      	ldr	r2, [pc, #16]	@ (800aba8 <prvSampleTimeNow+0x3c>)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	200018d0 	.word	0x200018d0

0800abac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
 800abb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800abba:	2300      	movs	r3, #0
 800abbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d812      	bhi.n	800abf8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	1ad2      	subs	r2, r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	699b      	ldr	r3, [r3, #24]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d302      	bcc.n	800abe6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800abe0:	2301      	movs	r3, #1
 800abe2:	617b      	str	r3, [r7, #20]
 800abe4:	e01b      	b.n	800ac1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800abe6:	4b10      	ldr	r3, [pc, #64]	@ (800ac28 <prvInsertTimerInActiveList+0x7c>)
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	3304      	adds	r3, #4
 800abee:	4619      	mov	r1, r3
 800abf0:	4610      	mov	r0, r2
 800abf2:	f7fd fdea 	bl	80087ca <vListInsert>
 800abf6:	e012      	b.n	800ac1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d206      	bcs.n	800ac0e <prvInsertTimerInActiveList+0x62>
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d302      	bcc.n	800ac0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	617b      	str	r3, [r7, #20]
 800ac0c:	e007      	b.n	800ac1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac0e:	4b07      	ldr	r3, [pc, #28]	@ (800ac2c <prvInsertTimerInActiveList+0x80>)
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	3304      	adds	r3, #4
 800ac16:	4619      	mov	r1, r3
 800ac18:	4610      	mov	r0, r2
 800ac1a:	f7fd fdd6 	bl	80087ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ac1e:	697b      	ldr	r3, [r7, #20]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3718      	adds	r7, #24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	200018c4 	.word	0x200018c4
 800ac2c:	200018c0 	.word	0x200018c0

0800ac30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b08e      	sub	sp, #56	@ 0x38
 800ac34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac36:	e0ce      	b.n	800add6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	da19      	bge.n	800ac72 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ac3e:	1d3b      	adds	r3, r7, #4
 800ac40:	3304      	adds	r3, #4
 800ac42:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ac44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10b      	bne.n	800ac62 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ac4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac4e:	f383 8811 	msr	BASEPRI, r3
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	61fb      	str	r3, [r7, #28]
}
 800ac5c:	bf00      	nop
 800ac5e:	bf00      	nop
 800ac60:	e7fd      	b.n	800ac5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ac62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac68:	6850      	ldr	r0, [r2, #4]
 800ac6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac6c:	6892      	ldr	r2, [r2, #8]
 800ac6e:	4611      	mov	r1, r2
 800ac70:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f2c0 80ae 	blt.w	800add6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ac7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac80:	695b      	ldr	r3, [r3, #20]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d004      	beq.n	800ac90 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac88:	3304      	adds	r3, #4
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fd fdd6 	bl	800883c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac90:	463b      	mov	r3, r7
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7ff ff6a 	bl	800ab6c <prvSampleTimeNow>
 800ac98:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2b09      	cmp	r3, #9
 800ac9e:	f200 8097 	bhi.w	800add0 <prvProcessReceivedCommands+0x1a0>
 800aca2:	a201      	add	r2, pc, #4	@ (adr r2, 800aca8 <prvProcessReceivedCommands+0x78>)
 800aca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca8:	0800acd1 	.word	0x0800acd1
 800acac:	0800acd1 	.word	0x0800acd1
 800acb0:	0800acd1 	.word	0x0800acd1
 800acb4:	0800ad47 	.word	0x0800ad47
 800acb8:	0800ad5b 	.word	0x0800ad5b
 800acbc:	0800ada7 	.word	0x0800ada7
 800acc0:	0800acd1 	.word	0x0800acd1
 800acc4:	0800acd1 	.word	0x0800acd1
 800acc8:	0800ad47 	.word	0x0800ad47
 800accc:	0800ad5b 	.word	0x0800ad5b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800acd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acd6:	f043 0301 	orr.w	r3, r3, #1
 800acda:	b2da      	uxtb	r2, r3
 800acdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ace2:	68ba      	ldr	r2, [r7, #8]
 800ace4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace6:	699b      	ldr	r3, [r3, #24]
 800ace8:	18d1      	adds	r1, r2, r3
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acf0:	f7ff ff5c 	bl	800abac <prvInsertTimerInActiveList>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d06c      	beq.n	800add4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad08:	f003 0304 	and.w	r3, r3, #4
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d061      	beq.n	800add4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad14:	699b      	ldr	r3, [r3, #24]
 800ad16:	441a      	add	r2, r3
 800ad18:	2300      	movs	r3, #0
 800ad1a:	9300      	str	r3, [sp, #0]
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	2100      	movs	r1, #0
 800ad20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad22:	f7ff fe01 	bl	800a928 <xTimerGenericCommand>
 800ad26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ad28:	6a3b      	ldr	r3, [r7, #32]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d152      	bne.n	800add4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	61bb      	str	r3, [r7, #24]
}
 800ad40:	bf00      	nop
 800ad42:	bf00      	nop
 800ad44:	e7fd      	b.n	800ad42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad4c:	f023 0301 	bic.w	r3, r3, #1
 800ad50:	b2da      	uxtb	r2, r3
 800ad52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ad58:	e03d      	b.n	800add6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad60:	f043 0301 	orr.w	r3, r3, #1
 800ad64:	b2da      	uxtb	r2, r3
 800ad66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad70:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ad72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad74:	699b      	ldr	r3, [r3, #24]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10b      	bne.n	800ad92 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ad7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad7e:	f383 8811 	msr	BASEPRI, r3
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	617b      	str	r3, [r7, #20]
}
 800ad8c:	bf00      	nop
 800ad8e:	bf00      	nop
 800ad90:	e7fd      	b.n	800ad8e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ad92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad94:	699a      	ldr	r2, [r3, #24]
 800ad96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad98:	18d1      	adds	r1, r2, r3
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ada0:	f7ff ff04 	bl	800abac <prvInsertTimerInActiveList>
					break;
 800ada4:	e017      	b.n	800add6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ada6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adac:	f003 0302 	and.w	r3, r3, #2
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d103      	bne.n	800adbc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800adb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adb6:	f000 fbe7 	bl	800b588 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800adba:	e00c      	b.n	800add6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adc2:	f023 0301 	bic.w	r3, r3, #1
 800adc6:	b2da      	uxtb	r2, r3
 800adc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800adce:	e002      	b.n	800add6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800add0:	bf00      	nop
 800add2:	e000      	b.n	800add6 <prvProcessReceivedCommands+0x1a6>
					break;
 800add4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800add6:	4b08      	ldr	r3, [pc, #32]	@ (800adf8 <prvProcessReceivedCommands+0x1c8>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	1d39      	adds	r1, r7, #4
 800addc:	2200      	movs	r2, #0
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fe f93a 	bl	8009058 <xQueueReceive>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f47f af26 	bne.w	800ac38 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800adec:	bf00      	nop
 800adee:	bf00      	nop
 800adf0:	3730      	adds	r7, #48	@ 0x30
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	200018c8 	.word	0x200018c8

0800adfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b088      	sub	sp, #32
 800ae00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae02:	e049      	b.n	800ae98 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae04:	4b2e      	ldr	r3, [pc, #184]	@ (800aec0 <prvSwitchTimerLists+0xc4>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae0e:	4b2c      	ldr	r3, [pc, #176]	@ (800aec0 <prvSwitchTimerLists+0xc4>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fd fd0d 	bl	800883c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae30:	f003 0304 	and.w	r3, r3, #4
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d02f      	beq.n	800ae98 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	699b      	ldr	r3, [r3, #24]
 800ae3c:	693a      	ldr	r2, [r7, #16]
 800ae3e:	4413      	add	r3, r2
 800ae40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ae42:	68ba      	ldr	r2, [r7, #8]
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d90e      	bls.n	800ae68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	68ba      	ldr	r2, [r7, #8]
 800ae4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae56:	4b1a      	ldr	r3, [pc, #104]	@ (800aec0 <prvSwitchTimerLists+0xc4>)
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	4619      	mov	r1, r3
 800ae60:	4610      	mov	r0, r2
 800ae62:	f7fd fcb2 	bl	80087ca <vListInsert>
 800ae66:	e017      	b.n	800ae98 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae68:	2300      	movs	r3, #0
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	693a      	ldr	r2, [r7, #16]
 800ae70:	2100      	movs	r1, #0
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f7ff fd58 	bl	800a928 <xTimerGenericCommand>
 800ae78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10b      	bne.n	800ae98 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	603b      	str	r3, [r7, #0]
}
 800ae92:	bf00      	nop
 800ae94:	bf00      	nop
 800ae96:	e7fd      	b.n	800ae94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae98:	4b09      	ldr	r3, [pc, #36]	@ (800aec0 <prvSwitchTimerLists+0xc4>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1b0      	bne.n	800ae04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aea2:	4b07      	ldr	r3, [pc, #28]	@ (800aec0 <prvSwitchTimerLists+0xc4>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aea8:	4b06      	ldr	r3, [pc, #24]	@ (800aec4 <prvSwitchTimerLists+0xc8>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a04      	ldr	r2, [pc, #16]	@ (800aec0 <prvSwitchTimerLists+0xc4>)
 800aeae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aeb0:	4a04      	ldr	r2, [pc, #16]	@ (800aec4 <prvSwitchTimerLists+0xc8>)
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	6013      	str	r3, [r2, #0]
}
 800aeb6:	bf00      	nop
 800aeb8:	3718      	adds	r7, #24
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	200018c0 	.word	0x200018c0
 800aec4:	200018c4 	.word	0x200018c4

0800aec8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aece:	f000 f96b 	bl	800b1a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aed2:	4b15      	ldr	r3, [pc, #84]	@ (800af28 <prvCheckForValidListAndQueue+0x60>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d120      	bne.n	800af1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aeda:	4814      	ldr	r0, [pc, #80]	@ (800af2c <prvCheckForValidListAndQueue+0x64>)
 800aedc:	f7fd fc24 	bl	8008728 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aee0:	4813      	ldr	r0, [pc, #76]	@ (800af30 <prvCheckForValidListAndQueue+0x68>)
 800aee2:	f7fd fc21 	bl	8008728 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aee6:	4b13      	ldr	r3, [pc, #76]	@ (800af34 <prvCheckForValidListAndQueue+0x6c>)
 800aee8:	4a10      	ldr	r2, [pc, #64]	@ (800af2c <prvCheckForValidListAndQueue+0x64>)
 800aeea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aeec:	4b12      	ldr	r3, [pc, #72]	@ (800af38 <prvCheckForValidListAndQueue+0x70>)
 800aeee:	4a10      	ldr	r2, [pc, #64]	@ (800af30 <prvCheckForValidListAndQueue+0x68>)
 800aef0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aef2:	2300      	movs	r3, #0
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	4b11      	ldr	r3, [pc, #68]	@ (800af3c <prvCheckForValidListAndQueue+0x74>)
 800aef8:	4a11      	ldr	r2, [pc, #68]	@ (800af40 <prvCheckForValidListAndQueue+0x78>)
 800aefa:	2110      	movs	r1, #16
 800aefc:	200a      	movs	r0, #10
 800aefe:	f7fd fd31 	bl	8008964 <xQueueGenericCreateStatic>
 800af02:	4603      	mov	r3, r0
 800af04:	4a08      	ldr	r2, [pc, #32]	@ (800af28 <prvCheckForValidListAndQueue+0x60>)
 800af06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800af08:	4b07      	ldr	r3, [pc, #28]	@ (800af28 <prvCheckForValidListAndQueue+0x60>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d005      	beq.n	800af1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800af10:	4b05      	ldr	r3, [pc, #20]	@ (800af28 <prvCheckForValidListAndQueue+0x60>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	490b      	ldr	r1, [pc, #44]	@ (800af44 <prvCheckForValidListAndQueue+0x7c>)
 800af16:	4618      	mov	r0, r3
 800af18:	f7fe fc5e 	bl	80097d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af1c:	f000 f976 	bl	800b20c <vPortExitCritical>
}
 800af20:	bf00      	nop
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	200018c8 	.word	0x200018c8
 800af2c:	20001898 	.word	0x20001898
 800af30:	200018ac 	.word	0x200018ac
 800af34:	200018c0 	.word	0x200018c0
 800af38:	200018c4 	.word	0x200018c4
 800af3c:	20001974 	.word	0x20001974
 800af40:	200018d4 	.word	0x200018d4
 800af44:	0800e500 	.word	0x0800e500

0800af48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	3b04      	subs	r3, #4
 800af58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800af60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	3b04      	subs	r3, #4
 800af66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	f023 0201 	bic.w	r2, r3, #1
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	3b04      	subs	r3, #4
 800af76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800af78:	4a0c      	ldr	r2, [pc, #48]	@ (800afac <pxPortInitialiseStack+0x64>)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	3b14      	subs	r3, #20
 800af82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	3b04      	subs	r3, #4
 800af8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f06f 0202 	mvn.w	r2, #2
 800af96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	3b20      	subs	r3, #32
 800af9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800af9e:	68fb      	ldr	r3, [r7, #12]
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3714      	adds	r7, #20
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr
 800afac:	0800afb1 	.word	0x0800afb1

0800afb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800afb0:	b480      	push	{r7}
 800afb2:	b085      	sub	sp, #20
 800afb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800afb6:	2300      	movs	r3, #0
 800afb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800afba:	4b13      	ldr	r3, [pc, #76]	@ (800b008 <prvTaskExitError+0x58>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc2:	d00b      	beq.n	800afdc <prvTaskExitError+0x2c>
	__asm volatile
 800afc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	60fb      	str	r3, [r7, #12]
}
 800afd6:	bf00      	nop
 800afd8:	bf00      	nop
 800afda:	e7fd      	b.n	800afd8 <prvTaskExitError+0x28>
	__asm volatile
 800afdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe0:	f383 8811 	msr	BASEPRI, r3
 800afe4:	f3bf 8f6f 	isb	sy
 800afe8:	f3bf 8f4f 	dsb	sy
 800afec:	60bb      	str	r3, [r7, #8]
}
 800afee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aff0:	bf00      	nop
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d0fc      	beq.n	800aff2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aff8:	bf00      	nop
 800affa:	bf00      	nop
 800affc:	3714      	adds	r7, #20
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	2000000c 	.word	0x2000000c
 800b00c:	00000000 	.word	0x00000000

0800b010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b010:	4b07      	ldr	r3, [pc, #28]	@ (800b030 <pxCurrentTCBConst2>)
 800b012:	6819      	ldr	r1, [r3, #0]
 800b014:	6808      	ldr	r0, [r1, #0]
 800b016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01a:	f380 8809 	msr	PSP, r0
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f04f 0000 	mov.w	r0, #0
 800b026:	f380 8811 	msr	BASEPRI, r0
 800b02a:	4770      	bx	lr
 800b02c:	f3af 8000 	nop.w

0800b030 <pxCurrentTCBConst2>:
 800b030:	20001398 	.word	0x20001398
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b034:	bf00      	nop
 800b036:	bf00      	nop

0800b038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b038:	4808      	ldr	r0, [pc, #32]	@ (800b05c <prvPortStartFirstTask+0x24>)
 800b03a:	6800      	ldr	r0, [r0, #0]
 800b03c:	6800      	ldr	r0, [r0, #0]
 800b03e:	f380 8808 	msr	MSP, r0
 800b042:	f04f 0000 	mov.w	r0, #0
 800b046:	f380 8814 	msr	CONTROL, r0
 800b04a:	b662      	cpsie	i
 800b04c:	b661      	cpsie	f
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	df00      	svc	0
 800b058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b05a:	bf00      	nop
 800b05c:	e000ed08 	.word	0xe000ed08

0800b060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b086      	sub	sp, #24
 800b064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b066:	4b47      	ldr	r3, [pc, #284]	@ (800b184 <xPortStartScheduler+0x124>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a47      	ldr	r2, [pc, #284]	@ (800b188 <xPortStartScheduler+0x128>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d10b      	bne.n	800b088 <xPortStartScheduler+0x28>
	__asm volatile
 800b070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	613b      	str	r3, [r7, #16]
}
 800b082:	bf00      	nop
 800b084:	bf00      	nop
 800b086:	e7fd      	b.n	800b084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b088:	4b3e      	ldr	r3, [pc, #248]	@ (800b184 <xPortStartScheduler+0x124>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a3f      	ldr	r2, [pc, #252]	@ (800b18c <xPortStartScheduler+0x12c>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d10b      	bne.n	800b0aa <xPortStartScheduler+0x4a>
	__asm volatile
 800b092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b096:	f383 8811 	msr	BASEPRI, r3
 800b09a:	f3bf 8f6f 	isb	sy
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	60fb      	str	r3, [r7, #12]
}
 800b0a4:	bf00      	nop
 800b0a6:	bf00      	nop
 800b0a8:	e7fd      	b.n	800b0a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b0aa:	4b39      	ldr	r3, [pc, #228]	@ (800b190 <xPortStartScheduler+0x130>)
 800b0ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	22ff      	movs	r2, #255	@ 0xff
 800b0ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b0c4:	78fb      	ldrb	r3, [r7, #3]
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b0cc:	b2da      	uxtb	r2, r3
 800b0ce:	4b31      	ldr	r3, [pc, #196]	@ (800b194 <xPortStartScheduler+0x134>)
 800b0d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b0d2:	4b31      	ldr	r3, [pc, #196]	@ (800b198 <xPortStartScheduler+0x138>)
 800b0d4:	2207      	movs	r2, #7
 800b0d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0d8:	e009      	b.n	800b0ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b0da:	4b2f      	ldr	r3, [pc, #188]	@ (800b198 <xPortStartScheduler+0x138>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	4a2d      	ldr	r2, [pc, #180]	@ (800b198 <xPortStartScheduler+0x138>)
 800b0e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b0e4:	78fb      	ldrb	r3, [r7, #3]
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	005b      	lsls	r3, r3, #1
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0ee:	78fb      	ldrb	r3, [r7, #3]
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0f6:	2b80      	cmp	r3, #128	@ 0x80
 800b0f8:	d0ef      	beq.n	800b0da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b0fa:	4b27      	ldr	r3, [pc, #156]	@ (800b198 <xPortStartScheduler+0x138>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f1c3 0307 	rsb	r3, r3, #7
 800b102:	2b04      	cmp	r3, #4
 800b104:	d00b      	beq.n	800b11e <xPortStartScheduler+0xbe>
	__asm volatile
 800b106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b10a:	f383 8811 	msr	BASEPRI, r3
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	f3bf 8f4f 	dsb	sy
 800b116:	60bb      	str	r3, [r7, #8]
}
 800b118:	bf00      	nop
 800b11a:	bf00      	nop
 800b11c:	e7fd      	b.n	800b11a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b11e:	4b1e      	ldr	r3, [pc, #120]	@ (800b198 <xPortStartScheduler+0x138>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	021b      	lsls	r3, r3, #8
 800b124:	4a1c      	ldr	r2, [pc, #112]	@ (800b198 <xPortStartScheduler+0x138>)
 800b126:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b128:	4b1b      	ldr	r3, [pc, #108]	@ (800b198 <xPortStartScheduler+0x138>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b130:	4a19      	ldr	r2, [pc, #100]	@ (800b198 <xPortStartScheduler+0x138>)
 800b132:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	b2da      	uxtb	r2, r3
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b13c:	4b17      	ldr	r3, [pc, #92]	@ (800b19c <xPortStartScheduler+0x13c>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a16      	ldr	r2, [pc, #88]	@ (800b19c <xPortStartScheduler+0x13c>)
 800b142:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b146:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b148:	4b14      	ldr	r3, [pc, #80]	@ (800b19c <xPortStartScheduler+0x13c>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a13      	ldr	r2, [pc, #76]	@ (800b19c <xPortStartScheduler+0x13c>)
 800b14e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b152:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b154:	f000 f8da 	bl	800b30c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b158:	4b11      	ldr	r3, [pc, #68]	@ (800b1a0 <xPortStartScheduler+0x140>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b15e:	f000 f8f9 	bl	800b354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b162:	4b10      	ldr	r3, [pc, #64]	@ (800b1a4 <xPortStartScheduler+0x144>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a0f      	ldr	r2, [pc, #60]	@ (800b1a4 <xPortStartScheduler+0x144>)
 800b168:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b16c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b16e:	f7ff ff63 	bl	800b038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b172:	f7fe ff3d 	bl	8009ff0 <vTaskSwitchContext>
	prvTaskExitError();
 800b176:	f7ff ff1b 	bl	800afb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3718      	adds	r7, #24
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	e000ed00 	.word	0xe000ed00
 800b188:	410fc271 	.word	0x410fc271
 800b18c:	410fc270 	.word	0x410fc270
 800b190:	e000e400 	.word	0xe000e400
 800b194:	200019c4 	.word	0x200019c4
 800b198:	200019c8 	.word	0x200019c8
 800b19c:	e000ed20 	.word	0xe000ed20
 800b1a0:	2000000c 	.word	0x2000000c
 800b1a4:	e000ef34 	.word	0xe000ef34

0800b1a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	607b      	str	r3, [r7, #4]
}
 800b1c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b1c2:	4b10      	ldr	r3, [pc, #64]	@ (800b204 <vPortEnterCritical+0x5c>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	4a0e      	ldr	r2, [pc, #56]	@ (800b204 <vPortEnterCritical+0x5c>)
 800b1ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b1cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b204 <vPortEnterCritical+0x5c>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d110      	bne.n	800b1f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b1d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b208 <vPortEnterCritical+0x60>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00b      	beq.n	800b1f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	603b      	str	r3, [r7, #0]
}
 800b1f0:	bf00      	nop
 800b1f2:	bf00      	nop
 800b1f4:	e7fd      	b.n	800b1f2 <vPortEnterCritical+0x4a>
	}
}
 800b1f6:	bf00      	nop
 800b1f8:	370c      	adds	r7, #12
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	2000000c 	.word	0x2000000c
 800b208:	e000ed04 	.word	0xe000ed04

0800b20c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b212:	4b12      	ldr	r3, [pc, #72]	@ (800b25c <vPortExitCritical+0x50>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d10b      	bne.n	800b232 <vPortExitCritical+0x26>
	__asm volatile
 800b21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	607b      	str	r3, [r7, #4]
}
 800b22c:	bf00      	nop
 800b22e:	bf00      	nop
 800b230:	e7fd      	b.n	800b22e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b232:	4b0a      	ldr	r3, [pc, #40]	@ (800b25c <vPortExitCritical+0x50>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	3b01      	subs	r3, #1
 800b238:	4a08      	ldr	r2, [pc, #32]	@ (800b25c <vPortExitCritical+0x50>)
 800b23a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b23c:	4b07      	ldr	r3, [pc, #28]	@ (800b25c <vPortExitCritical+0x50>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d105      	bne.n	800b250 <vPortExitCritical+0x44>
 800b244:	2300      	movs	r3, #0
 800b246:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	f383 8811 	msr	BASEPRI, r3
}
 800b24e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr
 800b25c:	2000000c 	.word	0x2000000c

0800b260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b260:	f3ef 8009 	mrs	r0, PSP
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	4b15      	ldr	r3, [pc, #84]	@ (800b2c0 <pxCurrentTCBConst>)
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	f01e 0f10 	tst.w	lr, #16
 800b270:	bf08      	it	eq
 800b272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27a:	6010      	str	r0, [r2, #0]
 800b27c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b280:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b284:	f380 8811 	msr	BASEPRI, r0
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	f7fe feae 	bl	8009ff0 <vTaskSwitchContext>
 800b294:	f04f 0000 	mov.w	r0, #0
 800b298:	f380 8811 	msr	BASEPRI, r0
 800b29c:	bc09      	pop	{r0, r3}
 800b29e:	6819      	ldr	r1, [r3, #0]
 800b2a0:	6808      	ldr	r0, [r1, #0]
 800b2a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a6:	f01e 0f10 	tst.w	lr, #16
 800b2aa:	bf08      	it	eq
 800b2ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b2b0:	f380 8809 	msr	PSP, r0
 800b2b4:	f3bf 8f6f 	isb	sy
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	f3af 8000 	nop.w

0800b2c0 <pxCurrentTCBConst>:
 800b2c0:	20001398 	.word	0x20001398
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b2c4:	bf00      	nop
 800b2c6:	bf00      	nop

0800b2c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	607b      	str	r3, [r7, #4]
}
 800b2e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b2e2:	f7fe fdcb 	bl	8009e7c <xTaskIncrementTick>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d003      	beq.n	800b2f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b2ec:	4b06      	ldr	r3, [pc, #24]	@ (800b308 <xPortSysTickHandler+0x40>)
 800b2ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2f2:	601a      	str	r2, [r3, #0]
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	f383 8811 	msr	BASEPRI, r3
}
 800b2fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b300:	bf00      	nop
 800b302:	3708      	adds	r7, #8
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	e000ed04 	.word	0xe000ed04

0800b30c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b30c:	b480      	push	{r7}
 800b30e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b310:	4b0b      	ldr	r3, [pc, #44]	@ (800b340 <vPortSetupTimerInterrupt+0x34>)
 800b312:	2200      	movs	r2, #0
 800b314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b316:	4b0b      	ldr	r3, [pc, #44]	@ (800b344 <vPortSetupTimerInterrupt+0x38>)
 800b318:	2200      	movs	r2, #0
 800b31a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b31c:	4b0a      	ldr	r3, [pc, #40]	@ (800b348 <vPortSetupTimerInterrupt+0x3c>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a0a      	ldr	r2, [pc, #40]	@ (800b34c <vPortSetupTimerInterrupt+0x40>)
 800b322:	fba2 2303 	umull	r2, r3, r2, r3
 800b326:	099b      	lsrs	r3, r3, #6
 800b328:	4a09      	ldr	r2, [pc, #36]	@ (800b350 <vPortSetupTimerInterrupt+0x44>)
 800b32a:	3b01      	subs	r3, #1
 800b32c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b32e:	4b04      	ldr	r3, [pc, #16]	@ (800b340 <vPortSetupTimerInterrupt+0x34>)
 800b330:	2207      	movs	r2, #7
 800b332:	601a      	str	r2, [r3, #0]
}
 800b334:	bf00      	nop
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	e000e010 	.word	0xe000e010
 800b344:	e000e018 	.word	0xe000e018
 800b348:	20000000 	.word	0x20000000
 800b34c:	10624dd3 	.word	0x10624dd3
 800b350:	e000e014 	.word	0xe000e014

0800b354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b354:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b364 <vPortEnableVFP+0x10>
 800b358:	6801      	ldr	r1, [r0, #0]
 800b35a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b35e:	6001      	str	r1, [r0, #0]
 800b360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b362:	bf00      	nop
 800b364:	e000ed88 	.word	0xe000ed88

0800b368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b36e:	f3ef 8305 	mrs	r3, IPSR
 800b372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2b0f      	cmp	r3, #15
 800b378:	d915      	bls.n	800b3a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b37a:	4a18      	ldr	r2, [pc, #96]	@ (800b3dc <vPortValidateInterruptPriority+0x74>)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	4413      	add	r3, r2
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b384:	4b16      	ldr	r3, [pc, #88]	@ (800b3e0 <vPortValidateInterruptPriority+0x78>)
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	7afa      	ldrb	r2, [r7, #11]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d20b      	bcs.n	800b3a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	607b      	str	r3, [r7, #4]
}
 800b3a0:	bf00      	nop
 800b3a2:	bf00      	nop
 800b3a4:	e7fd      	b.n	800b3a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b3a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b3e4 <vPortValidateInterruptPriority+0x7c>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b3ae:	4b0e      	ldr	r3, [pc, #56]	@ (800b3e8 <vPortValidateInterruptPriority+0x80>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d90b      	bls.n	800b3ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ba:	f383 8811 	msr	BASEPRI, r3
 800b3be:	f3bf 8f6f 	isb	sy
 800b3c2:	f3bf 8f4f 	dsb	sy
 800b3c6:	603b      	str	r3, [r7, #0]
}
 800b3c8:	bf00      	nop
 800b3ca:	bf00      	nop
 800b3cc:	e7fd      	b.n	800b3ca <vPortValidateInterruptPriority+0x62>
	}
 800b3ce:	bf00      	nop
 800b3d0:	3714      	adds	r7, #20
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	e000e3f0 	.word	0xe000e3f0
 800b3e0:	200019c4 	.word	0x200019c4
 800b3e4:	e000ed0c 	.word	0xe000ed0c
 800b3e8:	200019c8 	.word	0x200019c8

0800b3ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b08a      	sub	sp, #40	@ 0x28
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b3f8:	f7fe fc84 	bl	8009d04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b3fc:	4b5c      	ldr	r3, [pc, #368]	@ (800b570 <pvPortMalloc+0x184>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d101      	bne.n	800b408 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b404:	f000 f924 	bl	800b650 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b408:	4b5a      	ldr	r3, [pc, #360]	@ (800b574 <pvPortMalloc+0x188>)
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4013      	ands	r3, r2
 800b410:	2b00      	cmp	r3, #0
 800b412:	f040 8095 	bne.w	800b540 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d01e      	beq.n	800b45a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b41c:	2208      	movs	r2, #8
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4413      	add	r3, r2
 800b422:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f003 0307 	and.w	r3, r3, #7
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d015      	beq.n	800b45a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f023 0307 	bic.w	r3, r3, #7
 800b434:	3308      	adds	r3, #8
 800b436:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f003 0307 	and.w	r3, r3, #7
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00b      	beq.n	800b45a <pvPortMalloc+0x6e>
	__asm volatile
 800b442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	617b      	str	r3, [r7, #20]
}
 800b454:	bf00      	nop
 800b456:	bf00      	nop
 800b458:	e7fd      	b.n	800b456 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d06f      	beq.n	800b540 <pvPortMalloc+0x154>
 800b460:	4b45      	ldr	r3, [pc, #276]	@ (800b578 <pvPortMalloc+0x18c>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	429a      	cmp	r2, r3
 800b468:	d86a      	bhi.n	800b540 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b46a:	4b44      	ldr	r3, [pc, #272]	@ (800b57c <pvPortMalloc+0x190>)
 800b46c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b46e:	4b43      	ldr	r3, [pc, #268]	@ (800b57c <pvPortMalloc+0x190>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b474:	e004      	b.n	800b480 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b478:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	429a      	cmp	r2, r3
 800b488:	d903      	bls.n	800b492 <pvPortMalloc+0xa6>
 800b48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1f1      	bne.n	800b476 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b492:	4b37      	ldr	r3, [pc, #220]	@ (800b570 <pvPortMalloc+0x184>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b498:	429a      	cmp	r2, r3
 800b49a:	d051      	beq.n	800b540 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b49c:	6a3b      	ldr	r3, [r7, #32]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2208      	movs	r2, #8
 800b4a2:	4413      	add	r3, r2
 800b4a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	6a3b      	ldr	r3, [r7, #32]
 800b4ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b0:	685a      	ldr	r2, [r3, #4]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	1ad2      	subs	r2, r2, r3
 800b4b6:	2308      	movs	r3, #8
 800b4b8:	005b      	lsls	r3, r3, #1
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d920      	bls.n	800b500 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b4be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	f003 0307 	and.w	r3, r3, #7
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d00b      	beq.n	800b4e8 <pvPortMalloc+0xfc>
	__asm volatile
 800b4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	613b      	str	r3, [r7, #16]
}
 800b4e2:	bf00      	nop
 800b4e4:	bf00      	nop
 800b4e6:	e7fd      	b.n	800b4e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	1ad2      	subs	r2, r2, r3
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b4fa:	69b8      	ldr	r0, [r7, #24]
 800b4fc:	f000 f90a 	bl	800b714 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b500:	4b1d      	ldr	r3, [pc, #116]	@ (800b578 <pvPortMalloc+0x18c>)
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	4a1b      	ldr	r2, [pc, #108]	@ (800b578 <pvPortMalloc+0x18c>)
 800b50c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b50e:	4b1a      	ldr	r3, [pc, #104]	@ (800b578 <pvPortMalloc+0x18c>)
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	4b1b      	ldr	r3, [pc, #108]	@ (800b580 <pvPortMalloc+0x194>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	429a      	cmp	r2, r3
 800b518:	d203      	bcs.n	800b522 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b51a:	4b17      	ldr	r3, [pc, #92]	@ (800b578 <pvPortMalloc+0x18c>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a18      	ldr	r2, [pc, #96]	@ (800b580 <pvPortMalloc+0x194>)
 800b520:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b524:	685a      	ldr	r2, [r3, #4]
 800b526:	4b13      	ldr	r3, [pc, #76]	@ (800b574 <pvPortMalloc+0x188>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	431a      	orrs	r2, r3
 800b52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b532:	2200      	movs	r2, #0
 800b534:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b536:	4b13      	ldr	r3, [pc, #76]	@ (800b584 <pvPortMalloc+0x198>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3301      	adds	r3, #1
 800b53c:	4a11      	ldr	r2, [pc, #68]	@ (800b584 <pvPortMalloc+0x198>)
 800b53e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b540:	f7fe fbee 	bl	8009d20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	f003 0307 	and.w	r3, r3, #7
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00b      	beq.n	800b566 <pvPortMalloc+0x17a>
	__asm volatile
 800b54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	60fb      	str	r3, [r7, #12]
}
 800b560:	bf00      	nop
 800b562:	bf00      	nop
 800b564:	e7fd      	b.n	800b562 <pvPortMalloc+0x176>
	return pvReturn;
 800b566:	69fb      	ldr	r3, [r7, #28]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3728      	adds	r7, #40	@ 0x28
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	2000258c 	.word	0x2000258c
 800b574:	200025a0 	.word	0x200025a0
 800b578:	20002590 	.word	0x20002590
 800b57c:	20002584 	.word	0x20002584
 800b580:	20002594 	.word	0x20002594
 800b584:	20002598 	.word	0x20002598

0800b588 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b086      	sub	sp, #24
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d04f      	beq.n	800b63a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b59a:	2308      	movs	r3, #8
 800b59c:	425b      	negs	r3, r3
 800b59e:	697a      	ldr	r2, [r7, #20]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	685a      	ldr	r2, [r3, #4]
 800b5ac:	4b25      	ldr	r3, [pc, #148]	@ (800b644 <vPortFree+0xbc>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4013      	ands	r3, r2
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10b      	bne.n	800b5ce <vPortFree+0x46>
	__asm volatile
 800b5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	60fb      	str	r3, [r7, #12]
}
 800b5c8:	bf00      	nop
 800b5ca:	bf00      	nop
 800b5cc:	e7fd      	b.n	800b5ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00b      	beq.n	800b5ee <vPortFree+0x66>
	__asm volatile
 800b5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5da:	f383 8811 	msr	BASEPRI, r3
 800b5de:	f3bf 8f6f 	isb	sy
 800b5e2:	f3bf 8f4f 	dsb	sy
 800b5e6:	60bb      	str	r3, [r7, #8]
}
 800b5e8:	bf00      	nop
 800b5ea:	bf00      	nop
 800b5ec:	e7fd      	b.n	800b5ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	685a      	ldr	r2, [r3, #4]
 800b5f2:	4b14      	ldr	r3, [pc, #80]	@ (800b644 <vPortFree+0xbc>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4013      	ands	r3, r2
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d01e      	beq.n	800b63a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d11a      	bne.n	800b63a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	685a      	ldr	r2, [r3, #4]
 800b608:	4b0e      	ldr	r3, [pc, #56]	@ (800b644 <vPortFree+0xbc>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	43db      	mvns	r3, r3
 800b60e:	401a      	ands	r2, r3
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b614:	f7fe fb76 	bl	8009d04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	4b0a      	ldr	r3, [pc, #40]	@ (800b648 <vPortFree+0xc0>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4413      	add	r3, r2
 800b622:	4a09      	ldr	r2, [pc, #36]	@ (800b648 <vPortFree+0xc0>)
 800b624:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b626:	6938      	ldr	r0, [r7, #16]
 800b628:	f000 f874 	bl	800b714 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b62c:	4b07      	ldr	r3, [pc, #28]	@ (800b64c <vPortFree+0xc4>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	3301      	adds	r3, #1
 800b632:	4a06      	ldr	r2, [pc, #24]	@ (800b64c <vPortFree+0xc4>)
 800b634:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b636:	f7fe fb73 	bl	8009d20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b63a:	bf00      	nop
 800b63c:	3718      	adds	r7, #24
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	200025a0 	.word	0x200025a0
 800b648:	20002590 	.word	0x20002590
 800b64c:	2000259c 	.word	0x2000259c

0800b650 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b656:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800b65a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b65c:	4b27      	ldr	r3, [pc, #156]	@ (800b6fc <prvHeapInit+0xac>)
 800b65e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f003 0307 	and.w	r3, r3, #7
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00c      	beq.n	800b684 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	3307      	adds	r3, #7
 800b66e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f023 0307 	bic.w	r3, r3, #7
 800b676:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	4a1f      	ldr	r2, [pc, #124]	@ (800b6fc <prvHeapInit+0xac>)
 800b680:	4413      	add	r3, r2
 800b682:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b688:	4a1d      	ldr	r2, [pc, #116]	@ (800b700 <prvHeapInit+0xb0>)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b68e:	4b1c      	ldr	r3, [pc, #112]	@ (800b700 <prvHeapInit+0xb0>)
 800b690:	2200      	movs	r2, #0
 800b692:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	68ba      	ldr	r2, [r7, #8]
 800b698:	4413      	add	r3, r2
 800b69a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b69c:	2208      	movs	r2, #8
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	1a9b      	subs	r3, r3, r2
 800b6a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f023 0307 	bic.w	r3, r3, #7
 800b6aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	4a15      	ldr	r2, [pc, #84]	@ (800b704 <prvHeapInit+0xb4>)
 800b6b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b6b2:	4b14      	ldr	r3, [pc, #80]	@ (800b704 <prvHeapInit+0xb4>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b6ba:	4b12      	ldr	r3, [pc, #72]	@ (800b704 <prvHeapInit+0xb4>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	1ad2      	subs	r2, r2, r3
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b6d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b704 <prvHeapInit+0xb4>)
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	4a0a      	ldr	r2, [pc, #40]	@ (800b708 <prvHeapInit+0xb8>)
 800b6de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	4a09      	ldr	r2, [pc, #36]	@ (800b70c <prvHeapInit+0xbc>)
 800b6e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b6e8:	4b09      	ldr	r3, [pc, #36]	@ (800b710 <prvHeapInit+0xc0>)
 800b6ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b6ee:	601a      	str	r2, [r3, #0]
}
 800b6f0:	bf00      	nop
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr
 800b6fc:	200019cc 	.word	0x200019cc
 800b700:	20002584 	.word	0x20002584
 800b704:	2000258c 	.word	0x2000258c
 800b708:	20002594 	.word	0x20002594
 800b70c:	20002590 	.word	0x20002590
 800b710:	200025a0 	.word	0x200025a0

0800b714 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b714:	b480      	push	{r7}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b71c:	4b28      	ldr	r3, [pc, #160]	@ (800b7c0 <prvInsertBlockIntoFreeList+0xac>)
 800b71e:	60fb      	str	r3, [r7, #12]
 800b720:	e002      	b.n	800b728 <prvInsertBlockIntoFreeList+0x14>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	60fb      	str	r3, [r7, #12]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d8f7      	bhi.n	800b722 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	4413      	add	r3, r2
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	429a      	cmp	r2, r3
 800b742:	d108      	bne.n	800b756 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	685a      	ldr	r2, [r3, #4]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	441a      	add	r2, r3
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	441a      	add	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	429a      	cmp	r2, r3
 800b768:	d118      	bne.n	800b79c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	4b15      	ldr	r3, [pc, #84]	@ (800b7c4 <prvInsertBlockIntoFreeList+0xb0>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	429a      	cmp	r2, r3
 800b774:	d00d      	beq.n	800b792 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685a      	ldr	r2, [r3, #4]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	441a      	add	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	601a      	str	r2, [r3, #0]
 800b790:	e008      	b.n	800b7a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b792:	4b0c      	ldr	r3, [pc, #48]	@ (800b7c4 <prvInsertBlockIntoFreeList+0xb0>)
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	601a      	str	r2, [r3, #0]
 800b79a:	e003      	b.n	800b7a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d002      	beq.n	800b7b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7b2:	bf00      	nop
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	20002584 	.word	0x20002584
 800b7c4:	2000258c 	.word	0x2000258c

0800b7c8 <__cvt>:
 800b7c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7cc:	ec57 6b10 	vmov	r6, r7, d0
 800b7d0:	2f00      	cmp	r7, #0
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	463b      	mov	r3, r7
 800b7d8:	bfbb      	ittet	lt
 800b7da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b7de:	461f      	movlt	r7, r3
 800b7e0:	2300      	movge	r3, #0
 800b7e2:	232d      	movlt	r3, #45	@ 0x2d
 800b7e4:	700b      	strb	r3, [r1, #0]
 800b7e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b7ec:	4691      	mov	r9, r2
 800b7ee:	f023 0820 	bic.w	r8, r3, #32
 800b7f2:	bfbc      	itt	lt
 800b7f4:	4632      	movlt	r2, r6
 800b7f6:	4616      	movlt	r6, r2
 800b7f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b7fc:	d005      	beq.n	800b80a <__cvt+0x42>
 800b7fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b802:	d100      	bne.n	800b806 <__cvt+0x3e>
 800b804:	3401      	adds	r4, #1
 800b806:	2102      	movs	r1, #2
 800b808:	e000      	b.n	800b80c <__cvt+0x44>
 800b80a:	2103      	movs	r1, #3
 800b80c:	ab03      	add	r3, sp, #12
 800b80e:	9301      	str	r3, [sp, #4]
 800b810:	ab02      	add	r3, sp, #8
 800b812:	9300      	str	r3, [sp, #0]
 800b814:	ec47 6b10 	vmov	d0, r6, r7
 800b818:	4653      	mov	r3, sl
 800b81a:	4622      	mov	r2, r4
 800b81c:	f000 fe80 	bl	800c520 <_dtoa_r>
 800b820:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b824:	4605      	mov	r5, r0
 800b826:	d119      	bne.n	800b85c <__cvt+0x94>
 800b828:	f019 0f01 	tst.w	r9, #1
 800b82c:	d00e      	beq.n	800b84c <__cvt+0x84>
 800b82e:	eb00 0904 	add.w	r9, r0, r4
 800b832:	2200      	movs	r2, #0
 800b834:	2300      	movs	r3, #0
 800b836:	4630      	mov	r0, r6
 800b838:	4639      	mov	r1, r7
 800b83a:	f7f5 f945 	bl	8000ac8 <__aeabi_dcmpeq>
 800b83e:	b108      	cbz	r0, 800b844 <__cvt+0x7c>
 800b840:	f8cd 900c 	str.w	r9, [sp, #12]
 800b844:	2230      	movs	r2, #48	@ 0x30
 800b846:	9b03      	ldr	r3, [sp, #12]
 800b848:	454b      	cmp	r3, r9
 800b84a:	d31e      	bcc.n	800b88a <__cvt+0xc2>
 800b84c:	9b03      	ldr	r3, [sp, #12]
 800b84e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b850:	1b5b      	subs	r3, r3, r5
 800b852:	4628      	mov	r0, r5
 800b854:	6013      	str	r3, [r2, #0]
 800b856:	b004      	add	sp, #16
 800b858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b85c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b860:	eb00 0904 	add.w	r9, r0, r4
 800b864:	d1e5      	bne.n	800b832 <__cvt+0x6a>
 800b866:	7803      	ldrb	r3, [r0, #0]
 800b868:	2b30      	cmp	r3, #48	@ 0x30
 800b86a:	d10a      	bne.n	800b882 <__cvt+0xba>
 800b86c:	2200      	movs	r2, #0
 800b86e:	2300      	movs	r3, #0
 800b870:	4630      	mov	r0, r6
 800b872:	4639      	mov	r1, r7
 800b874:	f7f5 f928 	bl	8000ac8 <__aeabi_dcmpeq>
 800b878:	b918      	cbnz	r0, 800b882 <__cvt+0xba>
 800b87a:	f1c4 0401 	rsb	r4, r4, #1
 800b87e:	f8ca 4000 	str.w	r4, [sl]
 800b882:	f8da 3000 	ldr.w	r3, [sl]
 800b886:	4499      	add	r9, r3
 800b888:	e7d3      	b.n	800b832 <__cvt+0x6a>
 800b88a:	1c59      	adds	r1, r3, #1
 800b88c:	9103      	str	r1, [sp, #12]
 800b88e:	701a      	strb	r2, [r3, #0]
 800b890:	e7d9      	b.n	800b846 <__cvt+0x7e>

0800b892 <__exponent>:
 800b892:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b894:	2900      	cmp	r1, #0
 800b896:	bfba      	itte	lt
 800b898:	4249      	neglt	r1, r1
 800b89a:	232d      	movlt	r3, #45	@ 0x2d
 800b89c:	232b      	movge	r3, #43	@ 0x2b
 800b89e:	2909      	cmp	r1, #9
 800b8a0:	7002      	strb	r2, [r0, #0]
 800b8a2:	7043      	strb	r3, [r0, #1]
 800b8a4:	dd29      	ble.n	800b8fa <__exponent+0x68>
 800b8a6:	f10d 0307 	add.w	r3, sp, #7
 800b8aa:	461d      	mov	r5, r3
 800b8ac:	270a      	movs	r7, #10
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	fbb1 f6f7 	udiv	r6, r1, r7
 800b8b4:	fb07 1416 	mls	r4, r7, r6, r1
 800b8b8:	3430      	adds	r4, #48	@ 0x30
 800b8ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b8be:	460c      	mov	r4, r1
 800b8c0:	2c63      	cmp	r4, #99	@ 0x63
 800b8c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b8c6:	4631      	mov	r1, r6
 800b8c8:	dcf1      	bgt.n	800b8ae <__exponent+0x1c>
 800b8ca:	3130      	adds	r1, #48	@ 0x30
 800b8cc:	1e94      	subs	r4, r2, #2
 800b8ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b8d2:	1c41      	adds	r1, r0, #1
 800b8d4:	4623      	mov	r3, r4
 800b8d6:	42ab      	cmp	r3, r5
 800b8d8:	d30a      	bcc.n	800b8f0 <__exponent+0x5e>
 800b8da:	f10d 0309 	add.w	r3, sp, #9
 800b8de:	1a9b      	subs	r3, r3, r2
 800b8e0:	42ac      	cmp	r4, r5
 800b8e2:	bf88      	it	hi
 800b8e4:	2300      	movhi	r3, #0
 800b8e6:	3302      	adds	r3, #2
 800b8e8:	4403      	add	r3, r0
 800b8ea:	1a18      	subs	r0, r3, r0
 800b8ec:	b003      	add	sp, #12
 800b8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b8f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b8f8:	e7ed      	b.n	800b8d6 <__exponent+0x44>
 800b8fa:	2330      	movs	r3, #48	@ 0x30
 800b8fc:	3130      	adds	r1, #48	@ 0x30
 800b8fe:	7083      	strb	r3, [r0, #2]
 800b900:	70c1      	strb	r1, [r0, #3]
 800b902:	1d03      	adds	r3, r0, #4
 800b904:	e7f1      	b.n	800b8ea <__exponent+0x58>
	...

0800b908 <_printf_float>:
 800b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90c:	b08d      	sub	sp, #52	@ 0x34
 800b90e:	460c      	mov	r4, r1
 800b910:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b914:	4616      	mov	r6, r2
 800b916:	461f      	mov	r7, r3
 800b918:	4605      	mov	r5, r0
 800b91a:	f000 fcf3 	bl	800c304 <_localeconv_r>
 800b91e:	6803      	ldr	r3, [r0, #0]
 800b920:	9304      	str	r3, [sp, #16]
 800b922:	4618      	mov	r0, r3
 800b924:	f7f4 fca4 	bl	8000270 <strlen>
 800b928:	2300      	movs	r3, #0
 800b92a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b92c:	f8d8 3000 	ldr.w	r3, [r8]
 800b930:	9005      	str	r0, [sp, #20]
 800b932:	3307      	adds	r3, #7
 800b934:	f023 0307 	bic.w	r3, r3, #7
 800b938:	f103 0208 	add.w	r2, r3, #8
 800b93c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b940:	f8d4 b000 	ldr.w	fp, [r4]
 800b944:	f8c8 2000 	str.w	r2, [r8]
 800b948:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b94c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b950:	9307      	str	r3, [sp, #28]
 800b952:	f8cd 8018 	str.w	r8, [sp, #24]
 800b956:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b95a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b95e:	4b9c      	ldr	r3, [pc, #624]	@ (800bbd0 <_printf_float+0x2c8>)
 800b960:	f04f 32ff 	mov.w	r2, #4294967295
 800b964:	f7f5 f8e2 	bl	8000b2c <__aeabi_dcmpun>
 800b968:	bb70      	cbnz	r0, 800b9c8 <_printf_float+0xc0>
 800b96a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b96e:	4b98      	ldr	r3, [pc, #608]	@ (800bbd0 <_printf_float+0x2c8>)
 800b970:	f04f 32ff 	mov.w	r2, #4294967295
 800b974:	f7f5 f8bc 	bl	8000af0 <__aeabi_dcmple>
 800b978:	bb30      	cbnz	r0, 800b9c8 <_printf_float+0xc0>
 800b97a:	2200      	movs	r2, #0
 800b97c:	2300      	movs	r3, #0
 800b97e:	4640      	mov	r0, r8
 800b980:	4649      	mov	r1, r9
 800b982:	f7f5 f8ab 	bl	8000adc <__aeabi_dcmplt>
 800b986:	b110      	cbz	r0, 800b98e <_printf_float+0x86>
 800b988:	232d      	movs	r3, #45	@ 0x2d
 800b98a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b98e:	4a91      	ldr	r2, [pc, #580]	@ (800bbd4 <_printf_float+0x2cc>)
 800b990:	4b91      	ldr	r3, [pc, #580]	@ (800bbd8 <_printf_float+0x2d0>)
 800b992:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b996:	bf94      	ite	ls
 800b998:	4690      	movls	r8, r2
 800b99a:	4698      	movhi	r8, r3
 800b99c:	2303      	movs	r3, #3
 800b99e:	6123      	str	r3, [r4, #16]
 800b9a0:	f02b 0304 	bic.w	r3, fp, #4
 800b9a4:	6023      	str	r3, [r4, #0]
 800b9a6:	f04f 0900 	mov.w	r9, #0
 800b9aa:	9700      	str	r7, [sp, #0]
 800b9ac:	4633      	mov	r3, r6
 800b9ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b9b0:	4621      	mov	r1, r4
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	f000 f9d2 	bl	800bd5c <_printf_common>
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	f040 808d 	bne.w	800bad8 <_printf_float+0x1d0>
 800b9be:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c2:	b00d      	add	sp, #52	@ 0x34
 800b9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c8:	4642      	mov	r2, r8
 800b9ca:	464b      	mov	r3, r9
 800b9cc:	4640      	mov	r0, r8
 800b9ce:	4649      	mov	r1, r9
 800b9d0:	f7f5 f8ac 	bl	8000b2c <__aeabi_dcmpun>
 800b9d4:	b140      	cbz	r0, 800b9e8 <_printf_float+0xe0>
 800b9d6:	464b      	mov	r3, r9
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	bfbc      	itt	lt
 800b9dc:	232d      	movlt	r3, #45	@ 0x2d
 800b9de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b9e2:	4a7e      	ldr	r2, [pc, #504]	@ (800bbdc <_printf_float+0x2d4>)
 800b9e4:	4b7e      	ldr	r3, [pc, #504]	@ (800bbe0 <_printf_float+0x2d8>)
 800b9e6:	e7d4      	b.n	800b992 <_printf_float+0x8a>
 800b9e8:	6863      	ldr	r3, [r4, #4]
 800b9ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b9ee:	9206      	str	r2, [sp, #24]
 800b9f0:	1c5a      	adds	r2, r3, #1
 800b9f2:	d13b      	bne.n	800ba6c <_printf_float+0x164>
 800b9f4:	2306      	movs	r3, #6
 800b9f6:	6063      	str	r3, [r4, #4]
 800b9f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	6022      	str	r2, [r4, #0]
 800ba00:	9303      	str	r3, [sp, #12]
 800ba02:	ab0a      	add	r3, sp, #40	@ 0x28
 800ba04:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ba08:	ab09      	add	r3, sp, #36	@ 0x24
 800ba0a:	9300      	str	r3, [sp, #0]
 800ba0c:	6861      	ldr	r1, [r4, #4]
 800ba0e:	ec49 8b10 	vmov	d0, r8, r9
 800ba12:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ba16:	4628      	mov	r0, r5
 800ba18:	f7ff fed6 	bl	800b7c8 <__cvt>
 800ba1c:	9b06      	ldr	r3, [sp, #24]
 800ba1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba20:	2b47      	cmp	r3, #71	@ 0x47
 800ba22:	4680      	mov	r8, r0
 800ba24:	d129      	bne.n	800ba7a <_printf_float+0x172>
 800ba26:	1cc8      	adds	r0, r1, #3
 800ba28:	db02      	blt.n	800ba30 <_printf_float+0x128>
 800ba2a:	6863      	ldr	r3, [r4, #4]
 800ba2c:	4299      	cmp	r1, r3
 800ba2e:	dd41      	ble.n	800bab4 <_printf_float+0x1ac>
 800ba30:	f1aa 0a02 	sub.w	sl, sl, #2
 800ba34:	fa5f fa8a 	uxtb.w	sl, sl
 800ba38:	3901      	subs	r1, #1
 800ba3a:	4652      	mov	r2, sl
 800ba3c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ba40:	9109      	str	r1, [sp, #36]	@ 0x24
 800ba42:	f7ff ff26 	bl	800b892 <__exponent>
 800ba46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba48:	1813      	adds	r3, r2, r0
 800ba4a:	2a01      	cmp	r2, #1
 800ba4c:	4681      	mov	r9, r0
 800ba4e:	6123      	str	r3, [r4, #16]
 800ba50:	dc02      	bgt.n	800ba58 <_printf_float+0x150>
 800ba52:	6822      	ldr	r2, [r4, #0]
 800ba54:	07d2      	lsls	r2, r2, #31
 800ba56:	d501      	bpl.n	800ba5c <_printf_float+0x154>
 800ba58:	3301      	adds	r3, #1
 800ba5a:	6123      	str	r3, [r4, #16]
 800ba5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d0a2      	beq.n	800b9aa <_printf_float+0xa2>
 800ba64:	232d      	movs	r3, #45	@ 0x2d
 800ba66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba6a:	e79e      	b.n	800b9aa <_printf_float+0xa2>
 800ba6c:	9a06      	ldr	r2, [sp, #24]
 800ba6e:	2a47      	cmp	r2, #71	@ 0x47
 800ba70:	d1c2      	bne.n	800b9f8 <_printf_float+0xf0>
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1c0      	bne.n	800b9f8 <_printf_float+0xf0>
 800ba76:	2301      	movs	r3, #1
 800ba78:	e7bd      	b.n	800b9f6 <_printf_float+0xee>
 800ba7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ba7e:	d9db      	bls.n	800ba38 <_printf_float+0x130>
 800ba80:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ba84:	d118      	bne.n	800bab8 <_printf_float+0x1b0>
 800ba86:	2900      	cmp	r1, #0
 800ba88:	6863      	ldr	r3, [r4, #4]
 800ba8a:	dd0b      	ble.n	800baa4 <_printf_float+0x19c>
 800ba8c:	6121      	str	r1, [r4, #16]
 800ba8e:	b913      	cbnz	r3, 800ba96 <_printf_float+0x18e>
 800ba90:	6822      	ldr	r2, [r4, #0]
 800ba92:	07d0      	lsls	r0, r2, #31
 800ba94:	d502      	bpl.n	800ba9c <_printf_float+0x194>
 800ba96:	3301      	adds	r3, #1
 800ba98:	440b      	add	r3, r1
 800ba9a:	6123      	str	r3, [r4, #16]
 800ba9c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ba9e:	f04f 0900 	mov.w	r9, #0
 800baa2:	e7db      	b.n	800ba5c <_printf_float+0x154>
 800baa4:	b913      	cbnz	r3, 800baac <_printf_float+0x1a4>
 800baa6:	6822      	ldr	r2, [r4, #0]
 800baa8:	07d2      	lsls	r2, r2, #31
 800baaa:	d501      	bpl.n	800bab0 <_printf_float+0x1a8>
 800baac:	3302      	adds	r3, #2
 800baae:	e7f4      	b.n	800ba9a <_printf_float+0x192>
 800bab0:	2301      	movs	r3, #1
 800bab2:	e7f2      	b.n	800ba9a <_printf_float+0x192>
 800bab4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baba:	4299      	cmp	r1, r3
 800babc:	db05      	blt.n	800baca <_printf_float+0x1c2>
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	6121      	str	r1, [r4, #16]
 800bac2:	07d8      	lsls	r0, r3, #31
 800bac4:	d5ea      	bpl.n	800ba9c <_printf_float+0x194>
 800bac6:	1c4b      	adds	r3, r1, #1
 800bac8:	e7e7      	b.n	800ba9a <_printf_float+0x192>
 800baca:	2900      	cmp	r1, #0
 800bacc:	bfd4      	ite	le
 800bace:	f1c1 0202 	rsble	r2, r1, #2
 800bad2:	2201      	movgt	r2, #1
 800bad4:	4413      	add	r3, r2
 800bad6:	e7e0      	b.n	800ba9a <_printf_float+0x192>
 800bad8:	6823      	ldr	r3, [r4, #0]
 800bada:	055a      	lsls	r2, r3, #21
 800badc:	d407      	bmi.n	800baee <_printf_float+0x1e6>
 800bade:	6923      	ldr	r3, [r4, #16]
 800bae0:	4642      	mov	r2, r8
 800bae2:	4631      	mov	r1, r6
 800bae4:	4628      	mov	r0, r5
 800bae6:	47b8      	blx	r7
 800bae8:	3001      	adds	r0, #1
 800baea:	d12b      	bne.n	800bb44 <_printf_float+0x23c>
 800baec:	e767      	b.n	800b9be <_printf_float+0xb6>
 800baee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800baf2:	f240 80dd 	bls.w	800bcb0 <_printf_float+0x3a8>
 800baf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bafa:	2200      	movs	r2, #0
 800bafc:	2300      	movs	r3, #0
 800bafe:	f7f4 ffe3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb02:	2800      	cmp	r0, #0
 800bb04:	d033      	beq.n	800bb6e <_printf_float+0x266>
 800bb06:	4a37      	ldr	r2, [pc, #220]	@ (800bbe4 <_printf_float+0x2dc>)
 800bb08:	2301      	movs	r3, #1
 800bb0a:	4631      	mov	r1, r6
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	47b8      	blx	r7
 800bb10:	3001      	adds	r0, #1
 800bb12:	f43f af54 	beq.w	800b9be <_printf_float+0xb6>
 800bb16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bb1a:	4543      	cmp	r3, r8
 800bb1c:	db02      	blt.n	800bb24 <_printf_float+0x21c>
 800bb1e:	6823      	ldr	r3, [r4, #0]
 800bb20:	07d8      	lsls	r0, r3, #31
 800bb22:	d50f      	bpl.n	800bb44 <_printf_float+0x23c>
 800bb24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb28:	4631      	mov	r1, r6
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	47b8      	blx	r7
 800bb2e:	3001      	adds	r0, #1
 800bb30:	f43f af45 	beq.w	800b9be <_printf_float+0xb6>
 800bb34:	f04f 0900 	mov.w	r9, #0
 800bb38:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb3c:	f104 0a1a 	add.w	sl, r4, #26
 800bb40:	45c8      	cmp	r8, r9
 800bb42:	dc09      	bgt.n	800bb58 <_printf_float+0x250>
 800bb44:	6823      	ldr	r3, [r4, #0]
 800bb46:	079b      	lsls	r3, r3, #30
 800bb48:	f100 8103 	bmi.w	800bd52 <_printf_float+0x44a>
 800bb4c:	68e0      	ldr	r0, [r4, #12]
 800bb4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb50:	4298      	cmp	r0, r3
 800bb52:	bfb8      	it	lt
 800bb54:	4618      	movlt	r0, r3
 800bb56:	e734      	b.n	800b9c2 <_printf_float+0xba>
 800bb58:	2301      	movs	r3, #1
 800bb5a:	4652      	mov	r2, sl
 800bb5c:	4631      	mov	r1, r6
 800bb5e:	4628      	mov	r0, r5
 800bb60:	47b8      	blx	r7
 800bb62:	3001      	adds	r0, #1
 800bb64:	f43f af2b 	beq.w	800b9be <_printf_float+0xb6>
 800bb68:	f109 0901 	add.w	r9, r9, #1
 800bb6c:	e7e8      	b.n	800bb40 <_printf_float+0x238>
 800bb6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	dc39      	bgt.n	800bbe8 <_printf_float+0x2e0>
 800bb74:	4a1b      	ldr	r2, [pc, #108]	@ (800bbe4 <_printf_float+0x2dc>)
 800bb76:	2301      	movs	r3, #1
 800bb78:	4631      	mov	r1, r6
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	47b8      	blx	r7
 800bb7e:	3001      	adds	r0, #1
 800bb80:	f43f af1d 	beq.w	800b9be <_printf_float+0xb6>
 800bb84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bb88:	ea59 0303 	orrs.w	r3, r9, r3
 800bb8c:	d102      	bne.n	800bb94 <_printf_float+0x28c>
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	07d9      	lsls	r1, r3, #31
 800bb92:	d5d7      	bpl.n	800bb44 <_printf_float+0x23c>
 800bb94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb98:	4631      	mov	r1, r6
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	47b8      	blx	r7
 800bb9e:	3001      	adds	r0, #1
 800bba0:	f43f af0d 	beq.w	800b9be <_printf_float+0xb6>
 800bba4:	f04f 0a00 	mov.w	sl, #0
 800bba8:	f104 0b1a 	add.w	fp, r4, #26
 800bbac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbae:	425b      	negs	r3, r3
 800bbb0:	4553      	cmp	r3, sl
 800bbb2:	dc01      	bgt.n	800bbb8 <_printf_float+0x2b0>
 800bbb4:	464b      	mov	r3, r9
 800bbb6:	e793      	b.n	800bae0 <_printf_float+0x1d8>
 800bbb8:	2301      	movs	r3, #1
 800bbba:	465a      	mov	r2, fp
 800bbbc:	4631      	mov	r1, r6
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	47b8      	blx	r7
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	f43f aefb 	beq.w	800b9be <_printf_float+0xb6>
 800bbc8:	f10a 0a01 	add.w	sl, sl, #1
 800bbcc:	e7ee      	b.n	800bbac <_printf_float+0x2a4>
 800bbce:	bf00      	nop
 800bbd0:	7fefffff 	.word	0x7fefffff
 800bbd4:	0800e594 	.word	0x0800e594
 800bbd8:	0800e598 	.word	0x0800e598
 800bbdc:	0800e59c 	.word	0x0800e59c
 800bbe0:	0800e5a0 	.word	0x0800e5a0
 800bbe4:	0800e5a4 	.word	0x0800e5a4
 800bbe8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bbea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bbee:	4553      	cmp	r3, sl
 800bbf0:	bfa8      	it	ge
 800bbf2:	4653      	movge	r3, sl
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	4699      	mov	r9, r3
 800bbf8:	dc36      	bgt.n	800bc68 <_printf_float+0x360>
 800bbfa:	f04f 0b00 	mov.w	fp, #0
 800bbfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc02:	f104 021a 	add.w	r2, r4, #26
 800bc06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bc08:	9306      	str	r3, [sp, #24]
 800bc0a:	eba3 0309 	sub.w	r3, r3, r9
 800bc0e:	455b      	cmp	r3, fp
 800bc10:	dc31      	bgt.n	800bc76 <_printf_float+0x36e>
 800bc12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc14:	459a      	cmp	sl, r3
 800bc16:	dc3a      	bgt.n	800bc8e <_printf_float+0x386>
 800bc18:	6823      	ldr	r3, [r4, #0]
 800bc1a:	07da      	lsls	r2, r3, #31
 800bc1c:	d437      	bmi.n	800bc8e <_printf_float+0x386>
 800bc1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc20:	ebaa 0903 	sub.w	r9, sl, r3
 800bc24:	9b06      	ldr	r3, [sp, #24]
 800bc26:	ebaa 0303 	sub.w	r3, sl, r3
 800bc2a:	4599      	cmp	r9, r3
 800bc2c:	bfa8      	it	ge
 800bc2e:	4699      	movge	r9, r3
 800bc30:	f1b9 0f00 	cmp.w	r9, #0
 800bc34:	dc33      	bgt.n	800bc9e <_printf_float+0x396>
 800bc36:	f04f 0800 	mov.w	r8, #0
 800bc3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc3e:	f104 0b1a 	add.w	fp, r4, #26
 800bc42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc44:	ebaa 0303 	sub.w	r3, sl, r3
 800bc48:	eba3 0309 	sub.w	r3, r3, r9
 800bc4c:	4543      	cmp	r3, r8
 800bc4e:	f77f af79 	ble.w	800bb44 <_printf_float+0x23c>
 800bc52:	2301      	movs	r3, #1
 800bc54:	465a      	mov	r2, fp
 800bc56:	4631      	mov	r1, r6
 800bc58:	4628      	mov	r0, r5
 800bc5a:	47b8      	blx	r7
 800bc5c:	3001      	adds	r0, #1
 800bc5e:	f43f aeae 	beq.w	800b9be <_printf_float+0xb6>
 800bc62:	f108 0801 	add.w	r8, r8, #1
 800bc66:	e7ec      	b.n	800bc42 <_printf_float+0x33a>
 800bc68:	4642      	mov	r2, r8
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	47b8      	blx	r7
 800bc70:	3001      	adds	r0, #1
 800bc72:	d1c2      	bne.n	800bbfa <_printf_float+0x2f2>
 800bc74:	e6a3      	b.n	800b9be <_printf_float+0xb6>
 800bc76:	2301      	movs	r3, #1
 800bc78:	4631      	mov	r1, r6
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	9206      	str	r2, [sp, #24]
 800bc7e:	47b8      	blx	r7
 800bc80:	3001      	adds	r0, #1
 800bc82:	f43f ae9c 	beq.w	800b9be <_printf_float+0xb6>
 800bc86:	9a06      	ldr	r2, [sp, #24]
 800bc88:	f10b 0b01 	add.w	fp, fp, #1
 800bc8c:	e7bb      	b.n	800bc06 <_printf_float+0x2fe>
 800bc8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc92:	4631      	mov	r1, r6
 800bc94:	4628      	mov	r0, r5
 800bc96:	47b8      	blx	r7
 800bc98:	3001      	adds	r0, #1
 800bc9a:	d1c0      	bne.n	800bc1e <_printf_float+0x316>
 800bc9c:	e68f      	b.n	800b9be <_printf_float+0xb6>
 800bc9e:	9a06      	ldr	r2, [sp, #24]
 800bca0:	464b      	mov	r3, r9
 800bca2:	4442      	add	r2, r8
 800bca4:	4631      	mov	r1, r6
 800bca6:	4628      	mov	r0, r5
 800bca8:	47b8      	blx	r7
 800bcaa:	3001      	adds	r0, #1
 800bcac:	d1c3      	bne.n	800bc36 <_printf_float+0x32e>
 800bcae:	e686      	b.n	800b9be <_printf_float+0xb6>
 800bcb0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bcb4:	f1ba 0f01 	cmp.w	sl, #1
 800bcb8:	dc01      	bgt.n	800bcbe <_printf_float+0x3b6>
 800bcba:	07db      	lsls	r3, r3, #31
 800bcbc:	d536      	bpl.n	800bd2c <_printf_float+0x424>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	4642      	mov	r2, r8
 800bcc2:	4631      	mov	r1, r6
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	47b8      	blx	r7
 800bcc8:	3001      	adds	r0, #1
 800bcca:	f43f ae78 	beq.w	800b9be <_printf_float+0xb6>
 800bcce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcd2:	4631      	mov	r1, r6
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	47b8      	blx	r7
 800bcd8:	3001      	adds	r0, #1
 800bcda:	f43f ae70 	beq.w	800b9be <_printf_float+0xb6>
 800bcde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bce2:	2200      	movs	r2, #0
 800bce4:	2300      	movs	r3, #0
 800bce6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bcea:	f7f4 feed 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcee:	b9c0      	cbnz	r0, 800bd22 <_printf_float+0x41a>
 800bcf0:	4653      	mov	r3, sl
 800bcf2:	f108 0201 	add.w	r2, r8, #1
 800bcf6:	4631      	mov	r1, r6
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	47b8      	blx	r7
 800bcfc:	3001      	adds	r0, #1
 800bcfe:	d10c      	bne.n	800bd1a <_printf_float+0x412>
 800bd00:	e65d      	b.n	800b9be <_printf_float+0xb6>
 800bd02:	2301      	movs	r3, #1
 800bd04:	465a      	mov	r2, fp
 800bd06:	4631      	mov	r1, r6
 800bd08:	4628      	mov	r0, r5
 800bd0a:	47b8      	blx	r7
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	f43f ae56 	beq.w	800b9be <_printf_float+0xb6>
 800bd12:	f108 0801 	add.w	r8, r8, #1
 800bd16:	45d0      	cmp	r8, sl
 800bd18:	dbf3      	blt.n	800bd02 <_printf_float+0x3fa>
 800bd1a:	464b      	mov	r3, r9
 800bd1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bd20:	e6df      	b.n	800bae2 <_printf_float+0x1da>
 800bd22:	f04f 0800 	mov.w	r8, #0
 800bd26:	f104 0b1a 	add.w	fp, r4, #26
 800bd2a:	e7f4      	b.n	800bd16 <_printf_float+0x40e>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	4642      	mov	r2, r8
 800bd30:	e7e1      	b.n	800bcf6 <_printf_float+0x3ee>
 800bd32:	2301      	movs	r3, #1
 800bd34:	464a      	mov	r2, r9
 800bd36:	4631      	mov	r1, r6
 800bd38:	4628      	mov	r0, r5
 800bd3a:	47b8      	blx	r7
 800bd3c:	3001      	adds	r0, #1
 800bd3e:	f43f ae3e 	beq.w	800b9be <_printf_float+0xb6>
 800bd42:	f108 0801 	add.w	r8, r8, #1
 800bd46:	68e3      	ldr	r3, [r4, #12]
 800bd48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd4a:	1a5b      	subs	r3, r3, r1
 800bd4c:	4543      	cmp	r3, r8
 800bd4e:	dcf0      	bgt.n	800bd32 <_printf_float+0x42a>
 800bd50:	e6fc      	b.n	800bb4c <_printf_float+0x244>
 800bd52:	f04f 0800 	mov.w	r8, #0
 800bd56:	f104 0919 	add.w	r9, r4, #25
 800bd5a:	e7f4      	b.n	800bd46 <_printf_float+0x43e>

0800bd5c <_printf_common>:
 800bd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd60:	4616      	mov	r6, r2
 800bd62:	4698      	mov	r8, r3
 800bd64:	688a      	ldr	r2, [r1, #8]
 800bd66:	690b      	ldr	r3, [r1, #16]
 800bd68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	bfb8      	it	lt
 800bd70:	4613      	movlt	r3, r2
 800bd72:	6033      	str	r3, [r6, #0]
 800bd74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bd78:	4607      	mov	r7, r0
 800bd7a:	460c      	mov	r4, r1
 800bd7c:	b10a      	cbz	r2, 800bd82 <_printf_common+0x26>
 800bd7e:	3301      	adds	r3, #1
 800bd80:	6033      	str	r3, [r6, #0]
 800bd82:	6823      	ldr	r3, [r4, #0]
 800bd84:	0699      	lsls	r1, r3, #26
 800bd86:	bf42      	ittt	mi
 800bd88:	6833      	ldrmi	r3, [r6, #0]
 800bd8a:	3302      	addmi	r3, #2
 800bd8c:	6033      	strmi	r3, [r6, #0]
 800bd8e:	6825      	ldr	r5, [r4, #0]
 800bd90:	f015 0506 	ands.w	r5, r5, #6
 800bd94:	d106      	bne.n	800bda4 <_printf_common+0x48>
 800bd96:	f104 0a19 	add.w	sl, r4, #25
 800bd9a:	68e3      	ldr	r3, [r4, #12]
 800bd9c:	6832      	ldr	r2, [r6, #0]
 800bd9e:	1a9b      	subs	r3, r3, r2
 800bda0:	42ab      	cmp	r3, r5
 800bda2:	dc26      	bgt.n	800bdf2 <_printf_common+0x96>
 800bda4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bda8:	6822      	ldr	r2, [r4, #0]
 800bdaa:	3b00      	subs	r3, #0
 800bdac:	bf18      	it	ne
 800bdae:	2301      	movne	r3, #1
 800bdb0:	0692      	lsls	r2, r2, #26
 800bdb2:	d42b      	bmi.n	800be0c <_printf_common+0xb0>
 800bdb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bdb8:	4641      	mov	r1, r8
 800bdba:	4638      	mov	r0, r7
 800bdbc:	47c8      	blx	r9
 800bdbe:	3001      	adds	r0, #1
 800bdc0:	d01e      	beq.n	800be00 <_printf_common+0xa4>
 800bdc2:	6823      	ldr	r3, [r4, #0]
 800bdc4:	6922      	ldr	r2, [r4, #16]
 800bdc6:	f003 0306 	and.w	r3, r3, #6
 800bdca:	2b04      	cmp	r3, #4
 800bdcc:	bf02      	ittt	eq
 800bdce:	68e5      	ldreq	r5, [r4, #12]
 800bdd0:	6833      	ldreq	r3, [r6, #0]
 800bdd2:	1aed      	subeq	r5, r5, r3
 800bdd4:	68a3      	ldr	r3, [r4, #8]
 800bdd6:	bf0c      	ite	eq
 800bdd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bddc:	2500      	movne	r5, #0
 800bdde:	4293      	cmp	r3, r2
 800bde0:	bfc4      	itt	gt
 800bde2:	1a9b      	subgt	r3, r3, r2
 800bde4:	18ed      	addgt	r5, r5, r3
 800bde6:	2600      	movs	r6, #0
 800bde8:	341a      	adds	r4, #26
 800bdea:	42b5      	cmp	r5, r6
 800bdec:	d11a      	bne.n	800be24 <_printf_common+0xc8>
 800bdee:	2000      	movs	r0, #0
 800bdf0:	e008      	b.n	800be04 <_printf_common+0xa8>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	4652      	mov	r2, sl
 800bdf6:	4641      	mov	r1, r8
 800bdf8:	4638      	mov	r0, r7
 800bdfa:	47c8      	blx	r9
 800bdfc:	3001      	adds	r0, #1
 800bdfe:	d103      	bne.n	800be08 <_printf_common+0xac>
 800be00:	f04f 30ff 	mov.w	r0, #4294967295
 800be04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be08:	3501      	adds	r5, #1
 800be0a:	e7c6      	b.n	800bd9a <_printf_common+0x3e>
 800be0c:	18e1      	adds	r1, r4, r3
 800be0e:	1c5a      	adds	r2, r3, #1
 800be10:	2030      	movs	r0, #48	@ 0x30
 800be12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800be16:	4422      	add	r2, r4
 800be18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800be1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800be20:	3302      	adds	r3, #2
 800be22:	e7c7      	b.n	800bdb4 <_printf_common+0x58>
 800be24:	2301      	movs	r3, #1
 800be26:	4622      	mov	r2, r4
 800be28:	4641      	mov	r1, r8
 800be2a:	4638      	mov	r0, r7
 800be2c:	47c8      	blx	r9
 800be2e:	3001      	adds	r0, #1
 800be30:	d0e6      	beq.n	800be00 <_printf_common+0xa4>
 800be32:	3601      	adds	r6, #1
 800be34:	e7d9      	b.n	800bdea <_printf_common+0x8e>
	...

0800be38 <_printf_i>:
 800be38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be3c:	7e0f      	ldrb	r7, [r1, #24]
 800be3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be40:	2f78      	cmp	r7, #120	@ 0x78
 800be42:	4691      	mov	r9, r2
 800be44:	4680      	mov	r8, r0
 800be46:	460c      	mov	r4, r1
 800be48:	469a      	mov	sl, r3
 800be4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be4e:	d807      	bhi.n	800be60 <_printf_i+0x28>
 800be50:	2f62      	cmp	r7, #98	@ 0x62
 800be52:	d80a      	bhi.n	800be6a <_printf_i+0x32>
 800be54:	2f00      	cmp	r7, #0
 800be56:	f000 80d2 	beq.w	800bffe <_printf_i+0x1c6>
 800be5a:	2f58      	cmp	r7, #88	@ 0x58
 800be5c:	f000 80b9 	beq.w	800bfd2 <_printf_i+0x19a>
 800be60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be68:	e03a      	b.n	800bee0 <_printf_i+0xa8>
 800be6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800be6e:	2b15      	cmp	r3, #21
 800be70:	d8f6      	bhi.n	800be60 <_printf_i+0x28>
 800be72:	a101      	add	r1, pc, #4	@ (adr r1, 800be78 <_printf_i+0x40>)
 800be74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be78:	0800bed1 	.word	0x0800bed1
 800be7c:	0800bee5 	.word	0x0800bee5
 800be80:	0800be61 	.word	0x0800be61
 800be84:	0800be61 	.word	0x0800be61
 800be88:	0800be61 	.word	0x0800be61
 800be8c:	0800be61 	.word	0x0800be61
 800be90:	0800bee5 	.word	0x0800bee5
 800be94:	0800be61 	.word	0x0800be61
 800be98:	0800be61 	.word	0x0800be61
 800be9c:	0800be61 	.word	0x0800be61
 800bea0:	0800be61 	.word	0x0800be61
 800bea4:	0800bfe5 	.word	0x0800bfe5
 800bea8:	0800bf0f 	.word	0x0800bf0f
 800beac:	0800bf9f 	.word	0x0800bf9f
 800beb0:	0800be61 	.word	0x0800be61
 800beb4:	0800be61 	.word	0x0800be61
 800beb8:	0800c007 	.word	0x0800c007
 800bebc:	0800be61 	.word	0x0800be61
 800bec0:	0800bf0f 	.word	0x0800bf0f
 800bec4:	0800be61 	.word	0x0800be61
 800bec8:	0800be61 	.word	0x0800be61
 800becc:	0800bfa7 	.word	0x0800bfa7
 800bed0:	6833      	ldr	r3, [r6, #0]
 800bed2:	1d1a      	adds	r2, r3, #4
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	6032      	str	r2, [r6, #0]
 800bed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bedc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bee0:	2301      	movs	r3, #1
 800bee2:	e09d      	b.n	800c020 <_printf_i+0x1e8>
 800bee4:	6833      	ldr	r3, [r6, #0]
 800bee6:	6820      	ldr	r0, [r4, #0]
 800bee8:	1d19      	adds	r1, r3, #4
 800beea:	6031      	str	r1, [r6, #0]
 800beec:	0606      	lsls	r6, r0, #24
 800beee:	d501      	bpl.n	800bef4 <_printf_i+0xbc>
 800bef0:	681d      	ldr	r5, [r3, #0]
 800bef2:	e003      	b.n	800befc <_printf_i+0xc4>
 800bef4:	0645      	lsls	r5, r0, #25
 800bef6:	d5fb      	bpl.n	800bef0 <_printf_i+0xb8>
 800bef8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800befc:	2d00      	cmp	r5, #0
 800befe:	da03      	bge.n	800bf08 <_printf_i+0xd0>
 800bf00:	232d      	movs	r3, #45	@ 0x2d
 800bf02:	426d      	negs	r5, r5
 800bf04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf08:	4859      	ldr	r0, [pc, #356]	@ (800c070 <_printf_i+0x238>)
 800bf0a:	230a      	movs	r3, #10
 800bf0c:	e011      	b.n	800bf32 <_printf_i+0xfa>
 800bf0e:	6821      	ldr	r1, [r4, #0]
 800bf10:	6833      	ldr	r3, [r6, #0]
 800bf12:	0608      	lsls	r0, r1, #24
 800bf14:	f853 5b04 	ldr.w	r5, [r3], #4
 800bf18:	d402      	bmi.n	800bf20 <_printf_i+0xe8>
 800bf1a:	0649      	lsls	r1, r1, #25
 800bf1c:	bf48      	it	mi
 800bf1e:	b2ad      	uxthmi	r5, r5
 800bf20:	2f6f      	cmp	r7, #111	@ 0x6f
 800bf22:	4853      	ldr	r0, [pc, #332]	@ (800c070 <_printf_i+0x238>)
 800bf24:	6033      	str	r3, [r6, #0]
 800bf26:	bf14      	ite	ne
 800bf28:	230a      	movne	r3, #10
 800bf2a:	2308      	moveq	r3, #8
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bf32:	6866      	ldr	r6, [r4, #4]
 800bf34:	60a6      	str	r6, [r4, #8]
 800bf36:	2e00      	cmp	r6, #0
 800bf38:	bfa2      	ittt	ge
 800bf3a:	6821      	ldrge	r1, [r4, #0]
 800bf3c:	f021 0104 	bicge.w	r1, r1, #4
 800bf40:	6021      	strge	r1, [r4, #0]
 800bf42:	b90d      	cbnz	r5, 800bf48 <_printf_i+0x110>
 800bf44:	2e00      	cmp	r6, #0
 800bf46:	d04b      	beq.n	800bfe0 <_printf_i+0x1a8>
 800bf48:	4616      	mov	r6, r2
 800bf4a:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf4e:	fb03 5711 	mls	r7, r3, r1, r5
 800bf52:	5dc7      	ldrb	r7, [r0, r7]
 800bf54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf58:	462f      	mov	r7, r5
 800bf5a:	42bb      	cmp	r3, r7
 800bf5c:	460d      	mov	r5, r1
 800bf5e:	d9f4      	bls.n	800bf4a <_printf_i+0x112>
 800bf60:	2b08      	cmp	r3, #8
 800bf62:	d10b      	bne.n	800bf7c <_printf_i+0x144>
 800bf64:	6823      	ldr	r3, [r4, #0]
 800bf66:	07df      	lsls	r7, r3, #31
 800bf68:	d508      	bpl.n	800bf7c <_printf_i+0x144>
 800bf6a:	6923      	ldr	r3, [r4, #16]
 800bf6c:	6861      	ldr	r1, [r4, #4]
 800bf6e:	4299      	cmp	r1, r3
 800bf70:	bfde      	ittt	le
 800bf72:	2330      	movle	r3, #48	@ 0x30
 800bf74:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf78:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf7c:	1b92      	subs	r2, r2, r6
 800bf7e:	6122      	str	r2, [r4, #16]
 800bf80:	f8cd a000 	str.w	sl, [sp]
 800bf84:	464b      	mov	r3, r9
 800bf86:	aa03      	add	r2, sp, #12
 800bf88:	4621      	mov	r1, r4
 800bf8a:	4640      	mov	r0, r8
 800bf8c:	f7ff fee6 	bl	800bd5c <_printf_common>
 800bf90:	3001      	adds	r0, #1
 800bf92:	d14a      	bne.n	800c02a <_printf_i+0x1f2>
 800bf94:	f04f 30ff 	mov.w	r0, #4294967295
 800bf98:	b004      	add	sp, #16
 800bf9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	f043 0320 	orr.w	r3, r3, #32
 800bfa4:	6023      	str	r3, [r4, #0]
 800bfa6:	4833      	ldr	r0, [pc, #204]	@ (800c074 <_printf_i+0x23c>)
 800bfa8:	2778      	movs	r7, #120	@ 0x78
 800bfaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bfae:	6823      	ldr	r3, [r4, #0]
 800bfb0:	6831      	ldr	r1, [r6, #0]
 800bfb2:	061f      	lsls	r7, r3, #24
 800bfb4:	f851 5b04 	ldr.w	r5, [r1], #4
 800bfb8:	d402      	bmi.n	800bfc0 <_printf_i+0x188>
 800bfba:	065f      	lsls	r7, r3, #25
 800bfbc:	bf48      	it	mi
 800bfbe:	b2ad      	uxthmi	r5, r5
 800bfc0:	6031      	str	r1, [r6, #0]
 800bfc2:	07d9      	lsls	r1, r3, #31
 800bfc4:	bf44      	itt	mi
 800bfc6:	f043 0320 	orrmi.w	r3, r3, #32
 800bfca:	6023      	strmi	r3, [r4, #0]
 800bfcc:	b11d      	cbz	r5, 800bfd6 <_printf_i+0x19e>
 800bfce:	2310      	movs	r3, #16
 800bfd0:	e7ac      	b.n	800bf2c <_printf_i+0xf4>
 800bfd2:	4827      	ldr	r0, [pc, #156]	@ (800c070 <_printf_i+0x238>)
 800bfd4:	e7e9      	b.n	800bfaa <_printf_i+0x172>
 800bfd6:	6823      	ldr	r3, [r4, #0]
 800bfd8:	f023 0320 	bic.w	r3, r3, #32
 800bfdc:	6023      	str	r3, [r4, #0]
 800bfde:	e7f6      	b.n	800bfce <_printf_i+0x196>
 800bfe0:	4616      	mov	r6, r2
 800bfe2:	e7bd      	b.n	800bf60 <_printf_i+0x128>
 800bfe4:	6833      	ldr	r3, [r6, #0]
 800bfe6:	6825      	ldr	r5, [r4, #0]
 800bfe8:	6961      	ldr	r1, [r4, #20]
 800bfea:	1d18      	adds	r0, r3, #4
 800bfec:	6030      	str	r0, [r6, #0]
 800bfee:	062e      	lsls	r6, r5, #24
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	d501      	bpl.n	800bff8 <_printf_i+0x1c0>
 800bff4:	6019      	str	r1, [r3, #0]
 800bff6:	e002      	b.n	800bffe <_printf_i+0x1c6>
 800bff8:	0668      	lsls	r0, r5, #25
 800bffa:	d5fb      	bpl.n	800bff4 <_printf_i+0x1bc>
 800bffc:	8019      	strh	r1, [r3, #0]
 800bffe:	2300      	movs	r3, #0
 800c000:	6123      	str	r3, [r4, #16]
 800c002:	4616      	mov	r6, r2
 800c004:	e7bc      	b.n	800bf80 <_printf_i+0x148>
 800c006:	6833      	ldr	r3, [r6, #0]
 800c008:	1d1a      	adds	r2, r3, #4
 800c00a:	6032      	str	r2, [r6, #0]
 800c00c:	681e      	ldr	r6, [r3, #0]
 800c00e:	6862      	ldr	r2, [r4, #4]
 800c010:	2100      	movs	r1, #0
 800c012:	4630      	mov	r0, r6
 800c014:	f7f4 f8dc 	bl	80001d0 <memchr>
 800c018:	b108      	cbz	r0, 800c01e <_printf_i+0x1e6>
 800c01a:	1b80      	subs	r0, r0, r6
 800c01c:	6060      	str	r0, [r4, #4]
 800c01e:	6863      	ldr	r3, [r4, #4]
 800c020:	6123      	str	r3, [r4, #16]
 800c022:	2300      	movs	r3, #0
 800c024:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c028:	e7aa      	b.n	800bf80 <_printf_i+0x148>
 800c02a:	6923      	ldr	r3, [r4, #16]
 800c02c:	4632      	mov	r2, r6
 800c02e:	4649      	mov	r1, r9
 800c030:	4640      	mov	r0, r8
 800c032:	47d0      	blx	sl
 800c034:	3001      	adds	r0, #1
 800c036:	d0ad      	beq.n	800bf94 <_printf_i+0x15c>
 800c038:	6823      	ldr	r3, [r4, #0]
 800c03a:	079b      	lsls	r3, r3, #30
 800c03c:	d413      	bmi.n	800c066 <_printf_i+0x22e>
 800c03e:	68e0      	ldr	r0, [r4, #12]
 800c040:	9b03      	ldr	r3, [sp, #12]
 800c042:	4298      	cmp	r0, r3
 800c044:	bfb8      	it	lt
 800c046:	4618      	movlt	r0, r3
 800c048:	e7a6      	b.n	800bf98 <_printf_i+0x160>
 800c04a:	2301      	movs	r3, #1
 800c04c:	4632      	mov	r2, r6
 800c04e:	4649      	mov	r1, r9
 800c050:	4640      	mov	r0, r8
 800c052:	47d0      	blx	sl
 800c054:	3001      	adds	r0, #1
 800c056:	d09d      	beq.n	800bf94 <_printf_i+0x15c>
 800c058:	3501      	adds	r5, #1
 800c05a:	68e3      	ldr	r3, [r4, #12]
 800c05c:	9903      	ldr	r1, [sp, #12]
 800c05e:	1a5b      	subs	r3, r3, r1
 800c060:	42ab      	cmp	r3, r5
 800c062:	dcf2      	bgt.n	800c04a <_printf_i+0x212>
 800c064:	e7eb      	b.n	800c03e <_printf_i+0x206>
 800c066:	2500      	movs	r5, #0
 800c068:	f104 0619 	add.w	r6, r4, #25
 800c06c:	e7f5      	b.n	800c05a <_printf_i+0x222>
 800c06e:	bf00      	nop
 800c070:	0800e5a6 	.word	0x0800e5a6
 800c074:	0800e5b7 	.word	0x0800e5b7

0800c078 <std>:
 800c078:	2300      	movs	r3, #0
 800c07a:	b510      	push	{r4, lr}
 800c07c:	4604      	mov	r4, r0
 800c07e:	e9c0 3300 	strd	r3, r3, [r0]
 800c082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c086:	6083      	str	r3, [r0, #8]
 800c088:	8181      	strh	r1, [r0, #12]
 800c08a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c08c:	81c2      	strh	r2, [r0, #14]
 800c08e:	6183      	str	r3, [r0, #24]
 800c090:	4619      	mov	r1, r3
 800c092:	2208      	movs	r2, #8
 800c094:	305c      	adds	r0, #92	@ 0x5c
 800c096:	f000 f92d 	bl	800c2f4 <memset>
 800c09a:	4b0d      	ldr	r3, [pc, #52]	@ (800c0d0 <std+0x58>)
 800c09c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c09e:	4b0d      	ldr	r3, [pc, #52]	@ (800c0d4 <std+0x5c>)
 800c0a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c0a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c0d8 <std+0x60>)
 800c0a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c0a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c0dc <std+0x64>)
 800c0a8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c0aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c0e0 <std+0x68>)
 800c0ac:	6224      	str	r4, [r4, #32]
 800c0ae:	429c      	cmp	r4, r3
 800c0b0:	d006      	beq.n	800c0c0 <std+0x48>
 800c0b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c0b6:	4294      	cmp	r4, r2
 800c0b8:	d002      	beq.n	800c0c0 <std+0x48>
 800c0ba:	33d0      	adds	r3, #208	@ 0xd0
 800c0bc:	429c      	cmp	r4, r3
 800c0be:	d105      	bne.n	800c0cc <std+0x54>
 800c0c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c0c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0c8:	f000 b990 	b.w	800c3ec <__retarget_lock_init_recursive>
 800c0cc:	bd10      	pop	{r4, pc}
 800c0ce:	bf00      	nop
 800c0d0:	0800c1fd 	.word	0x0800c1fd
 800c0d4:	0800c21f 	.word	0x0800c21f
 800c0d8:	0800c257 	.word	0x0800c257
 800c0dc:	0800c27b 	.word	0x0800c27b
 800c0e0:	200025a4 	.word	0x200025a4

0800c0e4 <stdio_exit_handler>:
 800c0e4:	4a02      	ldr	r2, [pc, #8]	@ (800c0f0 <stdio_exit_handler+0xc>)
 800c0e6:	4903      	ldr	r1, [pc, #12]	@ (800c0f4 <stdio_exit_handler+0x10>)
 800c0e8:	4803      	ldr	r0, [pc, #12]	@ (800c0f8 <stdio_exit_handler+0x14>)
 800c0ea:	f000 b869 	b.w	800c1c0 <_fwalk_sglue>
 800c0ee:	bf00      	nop
 800c0f0:	20000010 	.word	0x20000010
 800c0f4:	0800dd65 	.word	0x0800dd65
 800c0f8:	20000020 	.word	0x20000020

0800c0fc <cleanup_stdio>:
 800c0fc:	6841      	ldr	r1, [r0, #4]
 800c0fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c130 <cleanup_stdio+0x34>)
 800c100:	4299      	cmp	r1, r3
 800c102:	b510      	push	{r4, lr}
 800c104:	4604      	mov	r4, r0
 800c106:	d001      	beq.n	800c10c <cleanup_stdio+0x10>
 800c108:	f001 fe2c 	bl	800dd64 <_fflush_r>
 800c10c:	68a1      	ldr	r1, [r4, #8]
 800c10e:	4b09      	ldr	r3, [pc, #36]	@ (800c134 <cleanup_stdio+0x38>)
 800c110:	4299      	cmp	r1, r3
 800c112:	d002      	beq.n	800c11a <cleanup_stdio+0x1e>
 800c114:	4620      	mov	r0, r4
 800c116:	f001 fe25 	bl	800dd64 <_fflush_r>
 800c11a:	68e1      	ldr	r1, [r4, #12]
 800c11c:	4b06      	ldr	r3, [pc, #24]	@ (800c138 <cleanup_stdio+0x3c>)
 800c11e:	4299      	cmp	r1, r3
 800c120:	d004      	beq.n	800c12c <cleanup_stdio+0x30>
 800c122:	4620      	mov	r0, r4
 800c124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c128:	f001 be1c 	b.w	800dd64 <_fflush_r>
 800c12c:	bd10      	pop	{r4, pc}
 800c12e:	bf00      	nop
 800c130:	200025a4 	.word	0x200025a4
 800c134:	2000260c 	.word	0x2000260c
 800c138:	20002674 	.word	0x20002674

0800c13c <global_stdio_init.part.0>:
 800c13c:	b510      	push	{r4, lr}
 800c13e:	4b0b      	ldr	r3, [pc, #44]	@ (800c16c <global_stdio_init.part.0+0x30>)
 800c140:	4c0b      	ldr	r4, [pc, #44]	@ (800c170 <global_stdio_init.part.0+0x34>)
 800c142:	4a0c      	ldr	r2, [pc, #48]	@ (800c174 <global_stdio_init.part.0+0x38>)
 800c144:	601a      	str	r2, [r3, #0]
 800c146:	4620      	mov	r0, r4
 800c148:	2200      	movs	r2, #0
 800c14a:	2104      	movs	r1, #4
 800c14c:	f7ff ff94 	bl	800c078 <std>
 800c150:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c154:	2201      	movs	r2, #1
 800c156:	2109      	movs	r1, #9
 800c158:	f7ff ff8e 	bl	800c078 <std>
 800c15c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c160:	2202      	movs	r2, #2
 800c162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c166:	2112      	movs	r1, #18
 800c168:	f7ff bf86 	b.w	800c078 <std>
 800c16c:	200026dc 	.word	0x200026dc
 800c170:	200025a4 	.word	0x200025a4
 800c174:	0800c0e5 	.word	0x0800c0e5

0800c178 <__sfp_lock_acquire>:
 800c178:	4801      	ldr	r0, [pc, #4]	@ (800c180 <__sfp_lock_acquire+0x8>)
 800c17a:	f000 b938 	b.w	800c3ee <__retarget_lock_acquire_recursive>
 800c17e:	bf00      	nop
 800c180:	200026e5 	.word	0x200026e5

0800c184 <__sfp_lock_release>:
 800c184:	4801      	ldr	r0, [pc, #4]	@ (800c18c <__sfp_lock_release+0x8>)
 800c186:	f000 b933 	b.w	800c3f0 <__retarget_lock_release_recursive>
 800c18a:	bf00      	nop
 800c18c:	200026e5 	.word	0x200026e5

0800c190 <__sinit>:
 800c190:	b510      	push	{r4, lr}
 800c192:	4604      	mov	r4, r0
 800c194:	f7ff fff0 	bl	800c178 <__sfp_lock_acquire>
 800c198:	6a23      	ldr	r3, [r4, #32]
 800c19a:	b11b      	cbz	r3, 800c1a4 <__sinit+0x14>
 800c19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1a0:	f7ff bff0 	b.w	800c184 <__sfp_lock_release>
 800c1a4:	4b04      	ldr	r3, [pc, #16]	@ (800c1b8 <__sinit+0x28>)
 800c1a6:	6223      	str	r3, [r4, #32]
 800c1a8:	4b04      	ldr	r3, [pc, #16]	@ (800c1bc <__sinit+0x2c>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1f5      	bne.n	800c19c <__sinit+0xc>
 800c1b0:	f7ff ffc4 	bl	800c13c <global_stdio_init.part.0>
 800c1b4:	e7f2      	b.n	800c19c <__sinit+0xc>
 800c1b6:	bf00      	nop
 800c1b8:	0800c0fd 	.word	0x0800c0fd
 800c1bc:	200026dc 	.word	0x200026dc

0800c1c0 <_fwalk_sglue>:
 800c1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1c4:	4607      	mov	r7, r0
 800c1c6:	4688      	mov	r8, r1
 800c1c8:	4614      	mov	r4, r2
 800c1ca:	2600      	movs	r6, #0
 800c1cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1d0:	f1b9 0901 	subs.w	r9, r9, #1
 800c1d4:	d505      	bpl.n	800c1e2 <_fwalk_sglue+0x22>
 800c1d6:	6824      	ldr	r4, [r4, #0]
 800c1d8:	2c00      	cmp	r4, #0
 800c1da:	d1f7      	bne.n	800c1cc <_fwalk_sglue+0xc>
 800c1dc:	4630      	mov	r0, r6
 800c1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1e2:	89ab      	ldrh	r3, [r5, #12]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d907      	bls.n	800c1f8 <_fwalk_sglue+0x38>
 800c1e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	d003      	beq.n	800c1f8 <_fwalk_sglue+0x38>
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	4638      	mov	r0, r7
 800c1f4:	47c0      	blx	r8
 800c1f6:	4306      	orrs	r6, r0
 800c1f8:	3568      	adds	r5, #104	@ 0x68
 800c1fa:	e7e9      	b.n	800c1d0 <_fwalk_sglue+0x10>

0800c1fc <__sread>:
 800c1fc:	b510      	push	{r4, lr}
 800c1fe:	460c      	mov	r4, r1
 800c200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c204:	f000 f8a4 	bl	800c350 <_read_r>
 800c208:	2800      	cmp	r0, #0
 800c20a:	bfab      	itete	ge
 800c20c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c20e:	89a3      	ldrhlt	r3, [r4, #12]
 800c210:	181b      	addge	r3, r3, r0
 800c212:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c216:	bfac      	ite	ge
 800c218:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c21a:	81a3      	strhlt	r3, [r4, #12]
 800c21c:	bd10      	pop	{r4, pc}

0800c21e <__swrite>:
 800c21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c222:	461f      	mov	r7, r3
 800c224:	898b      	ldrh	r3, [r1, #12]
 800c226:	05db      	lsls	r3, r3, #23
 800c228:	4605      	mov	r5, r0
 800c22a:	460c      	mov	r4, r1
 800c22c:	4616      	mov	r6, r2
 800c22e:	d505      	bpl.n	800c23c <__swrite+0x1e>
 800c230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c234:	2302      	movs	r3, #2
 800c236:	2200      	movs	r2, #0
 800c238:	f000 f878 	bl	800c32c <_lseek_r>
 800c23c:	89a3      	ldrh	r3, [r4, #12]
 800c23e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c242:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c246:	81a3      	strh	r3, [r4, #12]
 800c248:	4632      	mov	r2, r6
 800c24a:	463b      	mov	r3, r7
 800c24c:	4628      	mov	r0, r5
 800c24e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c252:	f000 b88f 	b.w	800c374 <_write_r>

0800c256 <__sseek>:
 800c256:	b510      	push	{r4, lr}
 800c258:	460c      	mov	r4, r1
 800c25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c25e:	f000 f865 	bl	800c32c <_lseek_r>
 800c262:	1c43      	adds	r3, r0, #1
 800c264:	89a3      	ldrh	r3, [r4, #12]
 800c266:	bf15      	itete	ne
 800c268:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c26a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c26e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c272:	81a3      	strheq	r3, [r4, #12]
 800c274:	bf18      	it	ne
 800c276:	81a3      	strhne	r3, [r4, #12]
 800c278:	bd10      	pop	{r4, pc}

0800c27a <__sclose>:
 800c27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c27e:	f000 b845 	b.w	800c30c <_close_r>

0800c282 <_vsniprintf_r>:
 800c282:	b530      	push	{r4, r5, lr}
 800c284:	4614      	mov	r4, r2
 800c286:	2c00      	cmp	r4, #0
 800c288:	b09b      	sub	sp, #108	@ 0x6c
 800c28a:	4605      	mov	r5, r0
 800c28c:	461a      	mov	r2, r3
 800c28e:	da05      	bge.n	800c29c <_vsniprintf_r+0x1a>
 800c290:	238b      	movs	r3, #139	@ 0x8b
 800c292:	6003      	str	r3, [r0, #0]
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	b01b      	add	sp, #108	@ 0x6c
 800c29a:	bd30      	pop	{r4, r5, pc}
 800c29c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c2a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c2a4:	bf14      	ite	ne
 800c2a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c2aa:	4623      	moveq	r3, r4
 800c2ac:	9302      	str	r3, [sp, #8]
 800c2ae:	9305      	str	r3, [sp, #20]
 800c2b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c2b4:	9100      	str	r1, [sp, #0]
 800c2b6:	9104      	str	r1, [sp, #16]
 800c2b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c2bc:	4669      	mov	r1, sp
 800c2be:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c2c0:	f001 fbd0 	bl	800da64 <_svfiprintf_r>
 800c2c4:	1c43      	adds	r3, r0, #1
 800c2c6:	bfbc      	itt	lt
 800c2c8:	238b      	movlt	r3, #139	@ 0x8b
 800c2ca:	602b      	strlt	r3, [r5, #0]
 800c2cc:	2c00      	cmp	r4, #0
 800c2ce:	d0e3      	beq.n	800c298 <_vsniprintf_r+0x16>
 800c2d0:	9b00      	ldr	r3, [sp, #0]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	701a      	strb	r2, [r3, #0]
 800c2d6:	e7df      	b.n	800c298 <_vsniprintf_r+0x16>

0800c2d8 <vsniprintf>:
 800c2d8:	b507      	push	{r0, r1, r2, lr}
 800c2da:	9300      	str	r3, [sp, #0]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	460a      	mov	r2, r1
 800c2e0:	4601      	mov	r1, r0
 800c2e2:	4803      	ldr	r0, [pc, #12]	@ (800c2f0 <vsniprintf+0x18>)
 800c2e4:	6800      	ldr	r0, [r0, #0]
 800c2e6:	f7ff ffcc 	bl	800c282 <_vsniprintf_r>
 800c2ea:	b003      	add	sp, #12
 800c2ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2f0:	2000001c 	.word	0x2000001c

0800c2f4 <memset>:
 800c2f4:	4402      	add	r2, r0
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d100      	bne.n	800c2fe <memset+0xa>
 800c2fc:	4770      	bx	lr
 800c2fe:	f803 1b01 	strb.w	r1, [r3], #1
 800c302:	e7f9      	b.n	800c2f8 <memset+0x4>

0800c304 <_localeconv_r>:
 800c304:	4800      	ldr	r0, [pc, #0]	@ (800c308 <_localeconv_r+0x4>)
 800c306:	4770      	bx	lr
 800c308:	2000015c 	.word	0x2000015c

0800c30c <_close_r>:
 800c30c:	b538      	push	{r3, r4, r5, lr}
 800c30e:	4d06      	ldr	r5, [pc, #24]	@ (800c328 <_close_r+0x1c>)
 800c310:	2300      	movs	r3, #0
 800c312:	4604      	mov	r4, r0
 800c314:	4608      	mov	r0, r1
 800c316:	602b      	str	r3, [r5, #0]
 800c318:	f7f5 ffa6 	bl	8002268 <_close>
 800c31c:	1c43      	adds	r3, r0, #1
 800c31e:	d102      	bne.n	800c326 <_close_r+0x1a>
 800c320:	682b      	ldr	r3, [r5, #0]
 800c322:	b103      	cbz	r3, 800c326 <_close_r+0x1a>
 800c324:	6023      	str	r3, [r4, #0]
 800c326:	bd38      	pop	{r3, r4, r5, pc}
 800c328:	200026e0 	.word	0x200026e0

0800c32c <_lseek_r>:
 800c32c:	b538      	push	{r3, r4, r5, lr}
 800c32e:	4d07      	ldr	r5, [pc, #28]	@ (800c34c <_lseek_r+0x20>)
 800c330:	4604      	mov	r4, r0
 800c332:	4608      	mov	r0, r1
 800c334:	4611      	mov	r1, r2
 800c336:	2200      	movs	r2, #0
 800c338:	602a      	str	r2, [r5, #0]
 800c33a:	461a      	mov	r2, r3
 800c33c:	f7f5 ffbb 	bl	80022b6 <_lseek>
 800c340:	1c43      	adds	r3, r0, #1
 800c342:	d102      	bne.n	800c34a <_lseek_r+0x1e>
 800c344:	682b      	ldr	r3, [r5, #0]
 800c346:	b103      	cbz	r3, 800c34a <_lseek_r+0x1e>
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	bd38      	pop	{r3, r4, r5, pc}
 800c34c:	200026e0 	.word	0x200026e0

0800c350 <_read_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	4d07      	ldr	r5, [pc, #28]	@ (800c370 <_read_r+0x20>)
 800c354:	4604      	mov	r4, r0
 800c356:	4608      	mov	r0, r1
 800c358:	4611      	mov	r1, r2
 800c35a:	2200      	movs	r2, #0
 800c35c:	602a      	str	r2, [r5, #0]
 800c35e:	461a      	mov	r2, r3
 800c360:	f7f5 ff49 	bl	80021f6 <_read>
 800c364:	1c43      	adds	r3, r0, #1
 800c366:	d102      	bne.n	800c36e <_read_r+0x1e>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	b103      	cbz	r3, 800c36e <_read_r+0x1e>
 800c36c:	6023      	str	r3, [r4, #0]
 800c36e:	bd38      	pop	{r3, r4, r5, pc}
 800c370:	200026e0 	.word	0x200026e0

0800c374 <_write_r>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	4d07      	ldr	r5, [pc, #28]	@ (800c394 <_write_r+0x20>)
 800c378:	4604      	mov	r4, r0
 800c37a:	4608      	mov	r0, r1
 800c37c:	4611      	mov	r1, r2
 800c37e:	2200      	movs	r2, #0
 800c380:	602a      	str	r2, [r5, #0]
 800c382:	461a      	mov	r2, r3
 800c384:	f7f5 ff54 	bl	8002230 <_write>
 800c388:	1c43      	adds	r3, r0, #1
 800c38a:	d102      	bne.n	800c392 <_write_r+0x1e>
 800c38c:	682b      	ldr	r3, [r5, #0]
 800c38e:	b103      	cbz	r3, 800c392 <_write_r+0x1e>
 800c390:	6023      	str	r3, [r4, #0]
 800c392:	bd38      	pop	{r3, r4, r5, pc}
 800c394:	200026e0 	.word	0x200026e0

0800c398 <__errno>:
 800c398:	4b01      	ldr	r3, [pc, #4]	@ (800c3a0 <__errno+0x8>)
 800c39a:	6818      	ldr	r0, [r3, #0]
 800c39c:	4770      	bx	lr
 800c39e:	bf00      	nop
 800c3a0:	2000001c 	.word	0x2000001c

0800c3a4 <__libc_init_array>:
 800c3a4:	b570      	push	{r4, r5, r6, lr}
 800c3a6:	4d0d      	ldr	r5, [pc, #52]	@ (800c3dc <__libc_init_array+0x38>)
 800c3a8:	4c0d      	ldr	r4, [pc, #52]	@ (800c3e0 <__libc_init_array+0x3c>)
 800c3aa:	1b64      	subs	r4, r4, r5
 800c3ac:	10a4      	asrs	r4, r4, #2
 800c3ae:	2600      	movs	r6, #0
 800c3b0:	42a6      	cmp	r6, r4
 800c3b2:	d109      	bne.n	800c3c8 <__libc_init_array+0x24>
 800c3b4:	4d0b      	ldr	r5, [pc, #44]	@ (800c3e4 <__libc_init_array+0x40>)
 800c3b6:	4c0c      	ldr	r4, [pc, #48]	@ (800c3e8 <__libc_init_array+0x44>)
 800c3b8:	f002 f864 	bl	800e484 <_init>
 800c3bc:	1b64      	subs	r4, r4, r5
 800c3be:	10a4      	asrs	r4, r4, #2
 800c3c0:	2600      	movs	r6, #0
 800c3c2:	42a6      	cmp	r6, r4
 800c3c4:	d105      	bne.n	800c3d2 <__libc_init_array+0x2e>
 800c3c6:	bd70      	pop	{r4, r5, r6, pc}
 800c3c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3cc:	4798      	blx	r3
 800c3ce:	3601      	adds	r6, #1
 800c3d0:	e7ee      	b.n	800c3b0 <__libc_init_array+0xc>
 800c3d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3d6:	4798      	blx	r3
 800c3d8:	3601      	adds	r6, #1
 800c3da:	e7f2      	b.n	800c3c2 <__libc_init_array+0x1e>
 800c3dc:	0800e910 	.word	0x0800e910
 800c3e0:	0800e910 	.word	0x0800e910
 800c3e4:	0800e910 	.word	0x0800e910
 800c3e8:	0800e914 	.word	0x0800e914

0800c3ec <__retarget_lock_init_recursive>:
 800c3ec:	4770      	bx	lr

0800c3ee <__retarget_lock_acquire_recursive>:
 800c3ee:	4770      	bx	lr

0800c3f0 <__retarget_lock_release_recursive>:
 800c3f0:	4770      	bx	lr

0800c3f2 <memcpy>:
 800c3f2:	440a      	add	r2, r1
 800c3f4:	4291      	cmp	r1, r2
 800c3f6:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3fa:	d100      	bne.n	800c3fe <memcpy+0xc>
 800c3fc:	4770      	bx	lr
 800c3fe:	b510      	push	{r4, lr}
 800c400:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c404:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c408:	4291      	cmp	r1, r2
 800c40a:	d1f9      	bne.n	800c400 <memcpy+0xe>
 800c40c:	bd10      	pop	{r4, pc}

0800c40e <quorem>:
 800c40e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c412:	6903      	ldr	r3, [r0, #16]
 800c414:	690c      	ldr	r4, [r1, #16]
 800c416:	42a3      	cmp	r3, r4
 800c418:	4607      	mov	r7, r0
 800c41a:	db7e      	blt.n	800c51a <quorem+0x10c>
 800c41c:	3c01      	subs	r4, #1
 800c41e:	f101 0814 	add.w	r8, r1, #20
 800c422:	00a3      	lsls	r3, r4, #2
 800c424:	f100 0514 	add.w	r5, r0, #20
 800c428:	9300      	str	r3, [sp, #0]
 800c42a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c42e:	9301      	str	r3, [sp, #4]
 800c430:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c434:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c438:	3301      	adds	r3, #1
 800c43a:	429a      	cmp	r2, r3
 800c43c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c440:	fbb2 f6f3 	udiv	r6, r2, r3
 800c444:	d32e      	bcc.n	800c4a4 <quorem+0x96>
 800c446:	f04f 0a00 	mov.w	sl, #0
 800c44a:	46c4      	mov	ip, r8
 800c44c:	46ae      	mov	lr, r5
 800c44e:	46d3      	mov	fp, sl
 800c450:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c454:	b298      	uxth	r0, r3
 800c456:	fb06 a000 	mla	r0, r6, r0, sl
 800c45a:	0c02      	lsrs	r2, r0, #16
 800c45c:	0c1b      	lsrs	r3, r3, #16
 800c45e:	fb06 2303 	mla	r3, r6, r3, r2
 800c462:	f8de 2000 	ldr.w	r2, [lr]
 800c466:	b280      	uxth	r0, r0
 800c468:	b292      	uxth	r2, r2
 800c46a:	1a12      	subs	r2, r2, r0
 800c46c:	445a      	add	r2, fp
 800c46e:	f8de 0000 	ldr.w	r0, [lr]
 800c472:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c476:	b29b      	uxth	r3, r3
 800c478:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c47c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c480:	b292      	uxth	r2, r2
 800c482:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c486:	45e1      	cmp	r9, ip
 800c488:	f84e 2b04 	str.w	r2, [lr], #4
 800c48c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c490:	d2de      	bcs.n	800c450 <quorem+0x42>
 800c492:	9b00      	ldr	r3, [sp, #0]
 800c494:	58eb      	ldr	r3, [r5, r3]
 800c496:	b92b      	cbnz	r3, 800c4a4 <quorem+0x96>
 800c498:	9b01      	ldr	r3, [sp, #4]
 800c49a:	3b04      	subs	r3, #4
 800c49c:	429d      	cmp	r5, r3
 800c49e:	461a      	mov	r2, r3
 800c4a0:	d32f      	bcc.n	800c502 <quorem+0xf4>
 800c4a2:	613c      	str	r4, [r7, #16]
 800c4a4:	4638      	mov	r0, r7
 800c4a6:	f001 f979 	bl	800d79c <__mcmp>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	db25      	blt.n	800c4fa <quorem+0xec>
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	f858 2b04 	ldr.w	r2, [r8], #4
 800c4b6:	f8d1 c000 	ldr.w	ip, [r1]
 800c4ba:	fa1f fe82 	uxth.w	lr, r2
 800c4be:	fa1f f38c 	uxth.w	r3, ip
 800c4c2:	eba3 030e 	sub.w	r3, r3, lr
 800c4c6:	4403      	add	r3, r0
 800c4c8:	0c12      	lsrs	r2, r2, #16
 800c4ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c4ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4d8:	45c1      	cmp	r9, r8
 800c4da:	f841 3b04 	str.w	r3, [r1], #4
 800c4de:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c4e2:	d2e6      	bcs.n	800c4b2 <quorem+0xa4>
 800c4e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4ec:	b922      	cbnz	r2, 800c4f8 <quorem+0xea>
 800c4ee:	3b04      	subs	r3, #4
 800c4f0:	429d      	cmp	r5, r3
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	d30b      	bcc.n	800c50e <quorem+0x100>
 800c4f6:	613c      	str	r4, [r7, #16]
 800c4f8:	3601      	adds	r6, #1
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	b003      	add	sp, #12
 800c4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c502:	6812      	ldr	r2, [r2, #0]
 800c504:	3b04      	subs	r3, #4
 800c506:	2a00      	cmp	r2, #0
 800c508:	d1cb      	bne.n	800c4a2 <quorem+0x94>
 800c50a:	3c01      	subs	r4, #1
 800c50c:	e7c6      	b.n	800c49c <quorem+0x8e>
 800c50e:	6812      	ldr	r2, [r2, #0]
 800c510:	3b04      	subs	r3, #4
 800c512:	2a00      	cmp	r2, #0
 800c514:	d1ef      	bne.n	800c4f6 <quorem+0xe8>
 800c516:	3c01      	subs	r4, #1
 800c518:	e7ea      	b.n	800c4f0 <quorem+0xe2>
 800c51a:	2000      	movs	r0, #0
 800c51c:	e7ee      	b.n	800c4fc <quorem+0xee>
	...

0800c520 <_dtoa_r>:
 800c520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c524:	69c7      	ldr	r7, [r0, #28]
 800c526:	b099      	sub	sp, #100	@ 0x64
 800c528:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c52c:	ec55 4b10 	vmov	r4, r5, d0
 800c530:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c532:	9109      	str	r1, [sp, #36]	@ 0x24
 800c534:	4683      	mov	fp, r0
 800c536:	920e      	str	r2, [sp, #56]	@ 0x38
 800c538:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c53a:	b97f      	cbnz	r7, 800c55c <_dtoa_r+0x3c>
 800c53c:	2010      	movs	r0, #16
 800c53e:	f000 fdfd 	bl	800d13c <malloc>
 800c542:	4602      	mov	r2, r0
 800c544:	f8cb 001c 	str.w	r0, [fp, #28]
 800c548:	b920      	cbnz	r0, 800c554 <_dtoa_r+0x34>
 800c54a:	4ba7      	ldr	r3, [pc, #668]	@ (800c7e8 <_dtoa_r+0x2c8>)
 800c54c:	21ef      	movs	r1, #239	@ 0xef
 800c54e:	48a7      	ldr	r0, [pc, #668]	@ (800c7ec <_dtoa_r+0x2cc>)
 800c550:	f001 fc5a 	bl	800de08 <__assert_func>
 800c554:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c558:	6007      	str	r7, [r0, #0]
 800c55a:	60c7      	str	r7, [r0, #12]
 800c55c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c560:	6819      	ldr	r1, [r3, #0]
 800c562:	b159      	cbz	r1, 800c57c <_dtoa_r+0x5c>
 800c564:	685a      	ldr	r2, [r3, #4]
 800c566:	604a      	str	r2, [r1, #4]
 800c568:	2301      	movs	r3, #1
 800c56a:	4093      	lsls	r3, r2
 800c56c:	608b      	str	r3, [r1, #8]
 800c56e:	4658      	mov	r0, fp
 800c570:	f000 feda 	bl	800d328 <_Bfree>
 800c574:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c578:	2200      	movs	r2, #0
 800c57a:	601a      	str	r2, [r3, #0]
 800c57c:	1e2b      	subs	r3, r5, #0
 800c57e:	bfb9      	ittee	lt
 800c580:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c584:	9303      	strlt	r3, [sp, #12]
 800c586:	2300      	movge	r3, #0
 800c588:	6033      	strge	r3, [r6, #0]
 800c58a:	9f03      	ldr	r7, [sp, #12]
 800c58c:	4b98      	ldr	r3, [pc, #608]	@ (800c7f0 <_dtoa_r+0x2d0>)
 800c58e:	bfbc      	itt	lt
 800c590:	2201      	movlt	r2, #1
 800c592:	6032      	strlt	r2, [r6, #0]
 800c594:	43bb      	bics	r3, r7
 800c596:	d112      	bne.n	800c5be <_dtoa_r+0x9e>
 800c598:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c59a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c59e:	6013      	str	r3, [r2, #0]
 800c5a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c5a4:	4323      	orrs	r3, r4
 800c5a6:	f000 854d 	beq.w	800d044 <_dtoa_r+0xb24>
 800c5aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c5ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c804 <_dtoa_r+0x2e4>
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	f000 854f 	beq.w	800d054 <_dtoa_r+0xb34>
 800c5b6:	f10a 0303 	add.w	r3, sl, #3
 800c5ba:	f000 bd49 	b.w	800d050 <_dtoa_r+0xb30>
 800c5be:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	ec51 0b17 	vmov	r0, r1, d7
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c5ce:	f7f4 fa7b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5d2:	4680      	mov	r8, r0
 800c5d4:	b158      	cbz	r0, 800c5ee <_dtoa_r+0xce>
 800c5d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c5d8:	2301      	movs	r3, #1
 800c5da:	6013      	str	r3, [r2, #0]
 800c5dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c5de:	b113      	cbz	r3, 800c5e6 <_dtoa_r+0xc6>
 800c5e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c5e2:	4b84      	ldr	r3, [pc, #528]	@ (800c7f4 <_dtoa_r+0x2d4>)
 800c5e4:	6013      	str	r3, [r2, #0]
 800c5e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c808 <_dtoa_r+0x2e8>
 800c5ea:	f000 bd33 	b.w	800d054 <_dtoa_r+0xb34>
 800c5ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c5f2:	aa16      	add	r2, sp, #88	@ 0x58
 800c5f4:	a917      	add	r1, sp, #92	@ 0x5c
 800c5f6:	4658      	mov	r0, fp
 800c5f8:	f001 f980 	bl	800d8fc <__d2b>
 800c5fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c600:	4681      	mov	r9, r0
 800c602:	2e00      	cmp	r6, #0
 800c604:	d077      	beq.n	800c6f6 <_dtoa_r+0x1d6>
 800c606:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c608:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c60c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c614:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c618:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c61c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c620:	4619      	mov	r1, r3
 800c622:	2200      	movs	r2, #0
 800c624:	4b74      	ldr	r3, [pc, #464]	@ (800c7f8 <_dtoa_r+0x2d8>)
 800c626:	f7f3 fe2f 	bl	8000288 <__aeabi_dsub>
 800c62a:	a369      	add	r3, pc, #420	@ (adr r3, 800c7d0 <_dtoa_r+0x2b0>)
 800c62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c630:	f7f3 ffe2 	bl	80005f8 <__aeabi_dmul>
 800c634:	a368      	add	r3, pc, #416	@ (adr r3, 800c7d8 <_dtoa_r+0x2b8>)
 800c636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63a:	f7f3 fe27 	bl	800028c <__adddf3>
 800c63e:	4604      	mov	r4, r0
 800c640:	4630      	mov	r0, r6
 800c642:	460d      	mov	r5, r1
 800c644:	f7f3 ff6e 	bl	8000524 <__aeabi_i2d>
 800c648:	a365      	add	r3, pc, #404	@ (adr r3, 800c7e0 <_dtoa_r+0x2c0>)
 800c64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64e:	f7f3 ffd3 	bl	80005f8 <__aeabi_dmul>
 800c652:	4602      	mov	r2, r0
 800c654:	460b      	mov	r3, r1
 800c656:	4620      	mov	r0, r4
 800c658:	4629      	mov	r1, r5
 800c65a:	f7f3 fe17 	bl	800028c <__adddf3>
 800c65e:	4604      	mov	r4, r0
 800c660:	460d      	mov	r5, r1
 800c662:	f7f4 fa79 	bl	8000b58 <__aeabi_d2iz>
 800c666:	2200      	movs	r2, #0
 800c668:	4607      	mov	r7, r0
 800c66a:	2300      	movs	r3, #0
 800c66c:	4620      	mov	r0, r4
 800c66e:	4629      	mov	r1, r5
 800c670:	f7f4 fa34 	bl	8000adc <__aeabi_dcmplt>
 800c674:	b140      	cbz	r0, 800c688 <_dtoa_r+0x168>
 800c676:	4638      	mov	r0, r7
 800c678:	f7f3 ff54 	bl	8000524 <__aeabi_i2d>
 800c67c:	4622      	mov	r2, r4
 800c67e:	462b      	mov	r3, r5
 800c680:	f7f4 fa22 	bl	8000ac8 <__aeabi_dcmpeq>
 800c684:	b900      	cbnz	r0, 800c688 <_dtoa_r+0x168>
 800c686:	3f01      	subs	r7, #1
 800c688:	2f16      	cmp	r7, #22
 800c68a:	d851      	bhi.n	800c730 <_dtoa_r+0x210>
 800c68c:	4b5b      	ldr	r3, [pc, #364]	@ (800c7fc <_dtoa_r+0x2dc>)
 800c68e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c69a:	f7f4 fa1f 	bl	8000adc <__aeabi_dcmplt>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d048      	beq.n	800c734 <_dtoa_r+0x214>
 800c6a2:	3f01      	subs	r7, #1
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	9312      	str	r3, [sp, #72]	@ 0x48
 800c6a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c6aa:	1b9b      	subs	r3, r3, r6
 800c6ac:	1e5a      	subs	r2, r3, #1
 800c6ae:	bf44      	itt	mi
 800c6b0:	f1c3 0801 	rsbmi	r8, r3, #1
 800c6b4:	2300      	movmi	r3, #0
 800c6b6:	9208      	str	r2, [sp, #32]
 800c6b8:	bf54      	ite	pl
 800c6ba:	f04f 0800 	movpl.w	r8, #0
 800c6be:	9308      	strmi	r3, [sp, #32]
 800c6c0:	2f00      	cmp	r7, #0
 800c6c2:	db39      	blt.n	800c738 <_dtoa_r+0x218>
 800c6c4:	9b08      	ldr	r3, [sp, #32]
 800c6c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c6c8:	443b      	add	r3, r7
 800c6ca:	9308      	str	r3, [sp, #32]
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6d2:	2b09      	cmp	r3, #9
 800c6d4:	d864      	bhi.n	800c7a0 <_dtoa_r+0x280>
 800c6d6:	2b05      	cmp	r3, #5
 800c6d8:	bfc4      	itt	gt
 800c6da:	3b04      	subgt	r3, #4
 800c6dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6e0:	f1a3 0302 	sub.w	r3, r3, #2
 800c6e4:	bfcc      	ite	gt
 800c6e6:	2400      	movgt	r4, #0
 800c6e8:	2401      	movle	r4, #1
 800c6ea:	2b03      	cmp	r3, #3
 800c6ec:	d863      	bhi.n	800c7b6 <_dtoa_r+0x296>
 800c6ee:	e8df f003 	tbb	[pc, r3]
 800c6f2:	372a      	.short	0x372a
 800c6f4:	5535      	.short	0x5535
 800c6f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c6fa:	441e      	add	r6, r3
 800c6fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c700:	2b20      	cmp	r3, #32
 800c702:	bfc1      	itttt	gt
 800c704:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c708:	409f      	lslgt	r7, r3
 800c70a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c70e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c712:	bfd6      	itet	le
 800c714:	f1c3 0320 	rsble	r3, r3, #32
 800c718:	ea47 0003 	orrgt.w	r0, r7, r3
 800c71c:	fa04 f003 	lslle.w	r0, r4, r3
 800c720:	f7f3 fef0 	bl	8000504 <__aeabi_ui2d>
 800c724:	2201      	movs	r2, #1
 800c726:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c72a:	3e01      	subs	r6, #1
 800c72c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c72e:	e777      	b.n	800c620 <_dtoa_r+0x100>
 800c730:	2301      	movs	r3, #1
 800c732:	e7b8      	b.n	800c6a6 <_dtoa_r+0x186>
 800c734:	9012      	str	r0, [sp, #72]	@ 0x48
 800c736:	e7b7      	b.n	800c6a8 <_dtoa_r+0x188>
 800c738:	427b      	negs	r3, r7
 800c73a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c73c:	2300      	movs	r3, #0
 800c73e:	eba8 0807 	sub.w	r8, r8, r7
 800c742:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c744:	e7c4      	b.n	800c6d0 <_dtoa_r+0x1b0>
 800c746:	2300      	movs	r3, #0
 800c748:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c74a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	dc35      	bgt.n	800c7bc <_dtoa_r+0x29c>
 800c750:	2301      	movs	r3, #1
 800c752:	9300      	str	r3, [sp, #0]
 800c754:	9307      	str	r3, [sp, #28]
 800c756:	461a      	mov	r2, r3
 800c758:	920e      	str	r2, [sp, #56]	@ 0x38
 800c75a:	e00b      	b.n	800c774 <_dtoa_r+0x254>
 800c75c:	2301      	movs	r3, #1
 800c75e:	e7f3      	b.n	800c748 <_dtoa_r+0x228>
 800c760:	2300      	movs	r3, #0
 800c762:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c764:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c766:	18fb      	adds	r3, r7, r3
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	3301      	adds	r3, #1
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	9307      	str	r3, [sp, #28]
 800c770:	bfb8      	it	lt
 800c772:	2301      	movlt	r3, #1
 800c774:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c778:	2100      	movs	r1, #0
 800c77a:	2204      	movs	r2, #4
 800c77c:	f102 0514 	add.w	r5, r2, #20
 800c780:	429d      	cmp	r5, r3
 800c782:	d91f      	bls.n	800c7c4 <_dtoa_r+0x2a4>
 800c784:	6041      	str	r1, [r0, #4]
 800c786:	4658      	mov	r0, fp
 800c788:	f000 fd8e 	bl	800d2a8 <_Balloc>
 800c78c:	4682      	mov	sl, r0
 800c78e:	2800      	cmp	r0, #0
 800c790:	d13c      	bne.n	800c80c <_dtoa_r+0x2ec>
 800c792:	4b1b      	ldr	r3, [pc, #108]	@ (800c800 <_dtoa_r+0x2e0>)
 800c794:	4602      	mov	r2, r0
 800c796:	f240 11af 	movw	r1, #431	@ 0x1af
 800c79a:	e6d8      	b.n	800c54e <_dtoa_r+0x2e>
 800c79c:	2301      	movs	r3, #1
 800c79e:	e7e0      	b.n	800c762 <_dtoa_r+0x242>
 800c7a0:	2401      	movs	r4, #1
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	9307      	str	r3, [sp, #28]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	2312      	movs	r3, #18
 800c7b4:	e7d0      	b.n	800c758 <_dtoa_r+0x238>
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7ba:	e7f5      	b.n	800c7a8 <_dtoa_r+0x288>
 800c7bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	9307      	str	r3, [sp, #28]
 800c7c2:	e7d7      	b.n	800c774 <_dtoa_r+0x254>
 800c7c4:	3101      	adds	r1, #1
 800c7c6:	0052      	lsls	r2, r2, #1
 800c7c8:	e7d8      	b.n	800c77c <_dtoa_r+0x25c>
 800c7ca:	bf00      	nop
 800c7cc:	f3af 8000 	nop.w
 800c7d0:	636f4361 	.word	0x636f4361
 800c7d4:	3fd287a7 	.word	0x3fd287a7
 800c7d8:	8b60c8b3 	.word	0x8b60c8b3
 800c7dc:	3fc68a28 	.word	0x3fc68a28
 800c7e0:	509f79fb 	.word	0x509f79fb
 800c7e4:	3fd34413 	.word	0x3fd34413
 800c7e8:	0800e5d5 	.word	0x0800e5d5
 800c7ec:	0800e5ec 	.word	0x0800e5ec
 800c7f0:	7ff00000 	.word	0x7ff00000
 800c7f4:	0800e5a5 	.word	0x0800e5a5
 800c7f8:	3ff80000 	.word	0x3ff80000
 800c7fc:	0800e6e8 	.word	0x0800e6e8
 800c800:	0800e644 	.word	0x0800e644
 800c804:	0800e5d1 	.word	0x0800e5d1
 800c808:	0800e5a4 	.word	0x0800e5a4
 800c80c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c810:	6018      	str	r0, [r3, #0]
 800c812:	9b07      	ldr	r3, [sp, #28]
 800c814:	2b0e      	cmp	r3, #14
 800c816:	f200 80a4 	bhi.w	800c962 <_dtoa_r+0x442>
 800c81a:	2c00      	cmp	r4, #0
 800c81c:	f000 80a1 	beq.w	800c962 <_dtoa_r+0x442>
 800c820:	2f00      	cmp	r7, #0
 800c822:	dd33      	ble.n	800c88c <_dtoa_r+0x36c>
 800c824:	4bad      	ldr	r3, [pc, #692]	@ (800cadc <_dtoa_r+0x5bc>)
 800c826:	f007 020f 	and.w	r2, r7, #15
 800c82a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c82e:	ed93 7b00 	vldr	d7, [r3]
 800c832:	05f8      	lsls	r0, r7, #23
 800c834:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c838:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c83c:	d516      	bpl.n	800c86c <_dtoa_r+0x34c>
 800c83e:	4ba8      	ldr	r3, [pc, #672]	@ (800cae0 <_dtoa_r+0x5c0>)
 800c840:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c844:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c848:	f7f4 f800 	bl	800084c <__aeabi_ddiv>
 800c84c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c850:	f004 040f 	and.w	r4, r4, #15
 800c854:	2603      	movs	r6, #3
 800c856:	4da2      	ldr	r5, [pc, #648]	@ (800cae0 <_dtoa_r+0x5c0>)
 800c858:	b954      	cbnz	r4, 800c870 <_dtoa_r+0x350>
 800c85a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c85e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c862:	f7f3 fff3 	bl	800084c <__aeabi_ddiv>
 800c866:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c86a:	e028      	b.n	800c8be <_dtoa_r+0x39e>
 800c86c:	2602      	movs	r6, #2
 800c86e:	e7f2      	b.n	800c856 <_dtoa_r+0x336>
 800c870:	07e1      	lsls	r1, r4, #31
 800c872:	d508      	bpl.n	800c886 <_dtoa_r+0x366>
 800c874:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c878:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c87c:	f7f3 febc 	bl	80005f8 <__aeabi_dmul>
 800c880:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c884:	3601      	adds	r6, #1
 800c886:	1064      	asrs	r4, r4, #1
 800c888:	3508      	adds	r5, #8
 800c88a:	e7e5      	b.n	800c858 <_dtoa_r+0x338>
 800c88c:	f000 80d2 	beq.w	800ca34 <_dtoa_r+0x514>
 800c890:	427c      	negs	r4, r7
 800c892:	4b92      	ldr	r3, [pc, #584]	@ (800cadc <_dtoa_r+0x5bc>)
 800c894:	4d92      	ldr	r5, [pc, #584]	@ (800cae0 <_dtoa_r+0x5c0>)
 800c896:	f004 020f 	and.w	r2, r4, #15
 800c89a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8a6:	f7f3 fea7 	bl	80005f8 <__aeabi_dmul>
 800c8aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8ae:	1124      	asrs	r4, r4, #4
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	2602      	movs	r6, #2
 800c8b4:	2c00      	cmp	r4, #0
 800c8b6:	f040 80b2 	bne.w	800ca1e <_dtoa_r+0x4fe>
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d1d3      	bne.n	800c866 <_dtoa_r+0x346>
 800c8be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c8c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	f000 80b7 	beq.w	800ca38 <_dtoa_r+0x518>
 800c8ca:	4b86      	ldr	r3, [pc, #536]	@ (800cae4 <_dtoa_r+0x5c4>)
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	f7f4 f903 	bl	8000adc <__aeabi_dcmplt>
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	f000 80ae 	beq.w	800ca38 <_dtoa_r+0x518>
 800c8dc:	9b07      	ldr	r3, [sp, #28]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	f000 80aa 	beq.w	800ca38 <_dtoa_r+0x518>
 800c8e4:	9b00      	ldr	r3, [sp, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	dd37      	ble.n	800c95a <_dtoa_r+0x43a>
 800c8ea:	1e7b      	subs	r3, r7, #1
 800c8ec:	9304      	str	r3, [sp, #16]
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	4b7d      	ldr	r3, [pc, #500]	@ (800cae8 <_dtoa_r+0x5c8>)
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	f7f3 fe7f 	bl	80005f8 <__aeabi_dmul>
 800c8fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8fe:	9c00      	ldr	r4, [sp, #0]
 800c900:	3601      	adds	r6, #1
 800c902:	4630      	mov	r0, r6
 800c904:	f7f3 fe0e 	bl	8000524 <__aeabi_i2d>
 800c908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c90c:	f7f3 fe74 	bl	80005f8 <__aeabi_dmul>
 800c910:	4b76      	ldr	r3, [pc, #472]	@ (800caec <_dtoa_r+0x5cc>)
 800c912:	2200      	movs	r2, #0
 800c914:	f7f3 fcba 	bl	800028c <__adddf3>
 800c918:	4605      	mov	r5, r0
 800c91a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c91e:	2c00      	cmp	r4, #0
 800c920:	f040 808d 	bne.w	800ca3e <_dtoa_r+0x51e>
 800c924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c928:	4b71      	ldr	r3, [pc, #452]	@ (800caf0 <_dtoa_r+0x5d0>)
 800c92a:	2200      	movs	r2, #0
 800c92c:	f7f3 fcac 	bl	8000288 <__aeabi_dsub>
 800c930:	4602      	mov	r2, r0
 800c932:	460b      	mov	r3, r1
 800c934:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c938:	462a      	mov	r2, r5
 800c93a:	4633      	mov	r3, r6
 800c93c:	f7f4 f8ec 	bl	8000b18 <__aeabi_dcmpgt>
 800c940:	2800      	cmp	r0, #0
 800c942:	f040 828b 	bne.w	800ce5c <_dtoa_r+0x93c>
 800c946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c94a:	462a      	mov	r2, r5
 800c94c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c950:	f7f4 f8c4 	bl	8000adc <__aeabi_dcmplt>
 800c954:	2800      	cmp	r0, #0
 800c956:	f040 8128 	bne.w	800cbaa <_dtoa_r+0x68a>
 800c95a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c95e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c962:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c964:	2b00      	cmp	r3, #0
 800c966:	f2c0 815a 	blt.w	800cc1e <_dtoa_r+0x6fe>
 800c96a:	2f0e      	cmp	r7, #14
 800c96c:	f300 8157 	bgt.w	800cc1e <_dtoa_r+0x6fe>
 800c970:	4b5a      	ldr	r3, [pc, #360]	@ (800cadc <_dtoa_r+0x5bc>)
 800c972:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c976:	ed93 7b00 	vldr	d7, [r3]
 800c97a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	ed8d 7b00 	vstr	d7, [sp]
 800c982:	da03      	bge.n	800c98c <_dtoa_r+0x46c>
 800c984:	9b07      	ldr	r3, [sp, #28]
 800c986:	2b00      	cmp	r3, #0
 800c988:	f340 8101 	ble.w	800cb8e <_dtoa_r+0x66e>
 800c98c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c990:	4656      	mov	r6, sl
 800c992:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c996:	4620      	mov	r0, r4
 800c998:	4629      	mov	r1, r5
 800c99a:	f7f3 ff57 	bl	800084c <__aeabi_ddiv>
 800c99e:	f7f4 f8db 	bl	8000b58 <__aeabi_d2iz>
 800c9a2:	4680      	mov	r8, r0
 800c9a4:	f7f3 fdbe 	bl	8000524 <__aeabi_i2d>
 800c9a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9ac:	f7f3 fe24 	bl	80005f8 <__aeabi_dmul>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	4629      	mov	r1, r5
 800c9b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c9bc:	f7f3 fc64 	bl	8000288 <__aeabi_dsub>
 800c9c0:	f806 4b01 	strb.w	r4, [r6], #1
 800c9c4:	9d07      	ldr	r5, [sp, #28]
 800c9c6:	eba6 040a 	sub.w	r4, r6, sl
 800c9ca:	42a5      	cmp	r5, r4
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	f040 8117 	bne.w	800cc02 <_dtoa_r+0x6e2>
 800c9d4:	f7f3 fc5a 	bl	800028c <__adddf3>
 800c9d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9dc:	4604      	mov	r4, r0
 800c9de:	460d      	mov	r5, r1
 800c9e0:	f7f4 f89a 	bl	8000b18 <__aeabi_dcmpgt>
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	f040 80f9 	bne.w	800cbdc <_dtoa_r+0x6bc>
 800c9ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	f7f4 f869 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9f6:	b118      	cbz	r0, 800ca00 <_dtoa_r+0x4e0>
 800c9f8:	f018 0f01 	tst.w	r8, #1
 800c9fc:	f040 80ee 	bne.w	800cbdc <_dtoa_r+0x6bc>
 800ca00:	4649      	mov	r1, r9
 800ca02:	4658      	mov	r0, fp
 800ca04:	f000 fc90 	bl	800d328 <_Bfree>
 800ca08:	2300      	movs	r3, #0
 800ca0a:	7033      	strb	r3, [r6, #0]
 800ca0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ca0e:	3701      	adds	r7, #1
 800ca10:	601f      	str	r7, [r3, #0]
 800ca12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f000 831d 	beq.w	800d054 <_dtoa_r+0xb34>
 800ca1a:	601e      	str	r6, [r3, #0]
 800ca1c:	e31a      	b.n	800d054 <_dtoa_r+0xb34>
 800ca1e:	07e2      	lsls	r2, r4, #31
 800ca20:	d505      	bpl.n	800ca2e <_dtoa_r+0x50e>
 800ca22:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca26:	f7f3 fde7 	bl	80005f8 <__aeabi_dmul>
 800ca2a:	3601      	adds	r6, #1
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	1064      	asrs	r4, r4, #1
 800ca30:	3508      	adds	r5, #8
 800ca32:	e73f      	b.n	800c8b4 <_dtoa_r+0x394>
 800ca34:	2602      	movs	r6, #2
 800ca36:	e742      	b.n	800c8be <_dtoa_r+0x39e>
 800ca38:	9c07      	ldr	r4, [sp, #28]
 800ca3a:	9704      	str	r7, [sp, #16]
 800ca3c:	e761      	b.n	800c902 <_dtoa_r+0x3e2>
 800ca3e:	4b27      	ldr	r3, [pc, #156]	@ (800cadc <_dtoa_r+0x5bc>)
 800ca40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ca42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ca4a:	4454      	add	r4, sl
 800ca4c:	2900      	cmp	r1, #0
 800ca4e:	d053      	beq.n	800caf8 <_dtoa_r+0x5d8>
 800ca50:	4928      	ldr	r1, [pc, #160]	@ (800caf4 <_dtoa_r+0x5d4>)
 800ca52:	2000      	movs	r0, #0
 800ca54:	f7f3 fefa 	bl	800084c <__aeabi_ddiv>
 800ca58:	4633      	mov	r3, r6
 800ca5a:	462a      	mov	r2, r5
 800ca5c:	f7f3 fc14 	bl	8000288 <__aeabi_dsub>
 800ca60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ca64:	4656      	mov	r6, sl
 800ca66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca6a:	f7f4 f875 	bl	8000b58 <__aeabi_d2iz>
 800ca6e:	4605      	mov	r5, r0
 800ca70:	f7f3 fd58 	bl	8000524 <__aeabi_i2d>
 800ca74:	4602      	mov	r2, r0
 800ca76:	460b      	mov	r3, r1
 800ca78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca7c:	f7f3 fc04 	bl	8000288 <__aeabi_dsub>
 800ca80:	3530      	adds	r5, #48	@ 0x30
 800ca82:	4602      	mov	r2, r0
 800ca84:	460b      	mov	r3, r1
 800ca86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca8a:	f806 5b01 	strb.w	r5, [r6], #1
 800ca8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ca92:	f7f4 f823 	bl	8000adc <__aeabi_dcmplt>
 800ca96:	2800      	cmp	r0, #0
 800ca98:	d171      	bne.n	800cb7e <_dtoa_r+0x65e>
 800ca9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca9e:	4911      	ldr	r1, [pc, #68]	@ (800cae4 <_dtoa_r+0x5c4>)
 800caa0:	2000      	movs	r0, #0
 800caa2:	f7f3 fbf1 	bl	8000288 <__aeabi_dsub>
 800caa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800caaa:	f7f4 f817 	bl	8000adc <__aeabi_dcmplt>
 800caae:	2800      	cmp	r0, #0
 800cab0:	f040 8095 	bne.w	800cbde <_dtoa_r+0x6be>
 800cab4:	42a6      	cmp	r6, r4
 800cab6:	f43f af50 	beq.w	800c95a <_dtoa_r+0x43a>
 800caba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cabe:	4b0a      	ldr	r3, [pc, #40]	@ (800cae8 <_dtoa_r+0x5c8>)
 800cac0:	2200      	movs	r2, #0
 800cac2:	f7f3 fd99 	bl	80005f8 <__aeabi_dmul>
 800cac6:	4b08      	ldr	r3, [pc, #32]	@ (800cae8 <_dtoa_r+0x5c8>)
 800cac8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cacc:	2200      	movs	r2, #0
 800cace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cad2:	f7f3 fd91 	bl	80005f8 <__aeabi_dmul>
 800cad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cada:	e7c4      	b.n	800ca66 <_dtoa_r+0x546>
 800cadc:	0800e6e8 	.word	0x0800e6e8
 800cae0:	0800e6c0 	.word	0x0800e6c0
 800cae4:	3ff00000 	.word	0x3ff00000
 800cae8:	40240000 	.word	0x40240000
 800caec:	401c0000 	.word	0x401c0000
 800caf0:	40140000 	.word	0x40140000
 800caf4:	3fe00000 	.word	0x3fe00000
 800caf8:	4631      	mov	r1, r6
 800cafa:	4628      	mov	r0, r5
 800cafc:	f7f3 fd7c 	bl	80005f8 <__aeabi_dmul>
 800cb00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb04:	9415      	str	r4, [sp, #84]	@ 0x54
 800cb06:	4656      	mov	r6, sl
 800cb08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb0c:	f7f4 f824 	bl	8000b58 <__aeabi_d2iz>
 800cb10:	4605      	mov	r5, r0
 800cb12:	f7f3 fd07 	bl	8000524 <__aeabi_i2d>
 800cb16:	4602      	mov	r2, r0
 800cb18:	460b      	mov	r3, r1
 800cb1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb1e:	f7f3 fbb3 	bl	8000288 <__aeabi_dsub>
 800cb22:	3530      	adds	r5, #48	@ 0x30
 800cb24:	f806 5b01 	strb.w	r5, [r6], #1
 800cb28:	4602      	mov	r2, r0
 800cb2a:	460b      	mov	r3, r1
 800cb2c:	42a6      	cmp	r6, r4
 800cb2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb32:	f04f 0200 	mov.w	r2, #0
 800cb36:	d124      	bne.n	800cb82 <_dtoa_r+0x662>
 800cb38:	4bac      	ldr	r3, [pc, #688]	@ (800cdec <_dtoa_r+0x8cc>)
 800cb3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cb3e:	f7f3 fba5 	bl	800028c <__adddf3>
 800cb42:	4602      	mov	r2, r0
 800cb44:	460b      	mov	r3, r1
 800cb46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb4a:	f7f3 ffe5 	bl	8000b18 <__aeabi_dcmpgt>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d145      	bne.n	800cbde <_dtoa_r+0x6be>
 800cb52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cb56:	49a5      	ldr	r1, [pc, #660]	@ (800cdec <_dtoa_r+0x8cc>)
 800cb58:	2000      	movs	r0, #0
 800cb5a:	f7f3 fb95 	bl	8000288 <__aeabi_dsub>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	460b      	mov	r3, r1
 800cb62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb66:	f7f3 ffb9 	bl	8000adc <__aeabi_dcmplt>
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	f43f aef5 	beq.w	800c95a <_dtoa_r+0x43a>
 800cb70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cb72:	1e73      	subs	r3, r6, #1
 800cb74:	9315      	str	r3, [sp, #84]	@ 0x54
 800cb76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cb7a:	2b30      	cmp	r3, #48	@ 0x30
 800cb7c:	d0f8      	beq.n	800cb70 <_dtoa_r+0x650>
 800cb7e:	9f04      	ldr	r7, [sp, #16]
 800cb80:	e73e      	b.n	800ca00 <_dtoa_r+0x4e0>
 800cb82:	4b9b      	ldr	r3, [pc, #620]	@ (800cdf0 <_dtoa_r+0x8d0>)
 800cb84:	f7f3 fd38 	bl	80005f8 <__aeabi_dmul>
 800cb88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb8c:	e7bc      	b.n	800cb08 <_dtoa_r+0x5e8>
 800cb8e:	d10c      	bne.n	800cbaa <_dtoa_r+0x68a>
 800cb90:	4b98      	ldr	r3, [pc, #608]	@ (800cdf4 <_dtoa_r+0x8d4>)
 800cb92:	2200      	movs	r2, #0
 800cb94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb98:	f7f3 fd2e 	bl	80005f8 <__aeabi_dmul>
 800cb9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cba0:	f7f3 ffb0 	bl	8000b04 <__aeabi_dcmpge>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	f000 8157 	beq.w	800ce58 <_dtoa_r+0x938>
 800cbaa:	2400      	movs	r4, #0
 800cbac:	4625      	mov	r5, r4
 800cbae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbb0:	43db      	mvns	r3, r3
 800cbb2:	9304      	str	r3, [sp, #16]
 800cbb4:	4656      	mov	r6, sl
 800cbb6:	2700      	movs	r7, #0
 800cbb8:	4621      	mov	r1, r4
 800cbba:	4658      	mov	r0, fp
 800cbbc:	f000 fbb4 	bl	800d328 <_Bfree>
 800cbc0:	2d00      	cmp	r5, #0
 800cbc2:	d0dc      	beq.n	800cb7e <_dtoa_r+0x65e>
 800cbc4:	b12f      	cbz	r7, 800cbd2 <_dtoa_r+0x6b2>
 800cbc6:	42af      	cmp	r7, r5
 800cbc8:	d003      	beq.n	800cbd2 <_dtoa_r+0x6b2>
 800cbca:	4639      	mov	r1, r7
 800cbcc:	4658      	mov	r0, fp
 800cbce:	f000 fbab 	bl	800d328 <_Bfree>
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	4658      	mov	r0, fp
 800cbd6:	f000 fba7 	bl	800d328 <_Bfree>
 800cbda:	e7d0      	b.n	800cb7e <_dtoa_r+0x65e>
 800cbdc:	9704      	str	r7, [sp, #16]
 800cbde:	4633      	mov	r3, r6
 800cbe0:	461e      	mov	r6, r3
 800cbe2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbe6:	2a39      	cmp	r2, #57	@ 0x39
 800cbe8:	d107      	bne.n	800cbfa <_dtoa_r+0x6da>
 800cbea:	459a      	cmp	sl, r3
 800cbec:	d1f8      	bne.n	800cbe0 <_dtoa_r+0x6c0>
 800cbee:	9a04      	ldr	r2, [sp, #16]
 800cbf0:	3201      	adds	r2, #1
 800cbf2:	9204      	str	r2, [sp, #16]
 800cbf4:	2230      	movs	r2, #48	@ 0x30
 800cbf6:	f88a 2000 	strb.w	r2, [sl]
 800cbfa:	781a      	ldrb	r2, [r3, #0]
 800cbfc:	3201      	adds	r2, #1
 800cbfe:	701a      	strb	r2, [r3, #0]
 800cc00:	e7bd      	b.n	800cb7e <_dtoa_r+0x65e>
 800cc02:	4b7b      	ldr	r3, [pc, #492]	@ (800cdf0 <_dtoa_r+0x8d0>)
 800cc04:	2200      	movs	r2, #0
 800cc06:	f7f3 fcf7 	bl	80005f8 <__aeabi_dmul>
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	4604      	mov	r4, r0
 800cc10:	460d      	mov	r5, r1
 800cc12:	f7f3 ff59 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc16:	2800      	cmp	r0, #0
 800cc18:	f43f aebb 	beq.w	800c992 <_dtoa_r+0x472>
 800cc1c:	e6f0      	b.n	800ca00 <_dtoa_r+0x4e0>
 800cc1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cc20:	2a00      	cmp	r2, #0
 800cc22:	f000 80db 	beq.w	800cddc <_dtoa_r+0x8bc>
 800cc26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc28:	2a01      	cmp	r2, #1
 800cc2a:	f300 80bf 	bgt.w	800cdac <_dtoa_r+0x88c>
 800cc2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cc30:	2a00      	cmp	r2, #0
 800cc32:	f000 80b7 	beq.w	800cda4 <_dtoa_r+0x884>
 800cc36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cc3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cc3c:	4646      	mov	r6, r8
 800cc3e:	9a08      	ldr	r2, [sp, #32]
 800cc40:	2101      	movs	r1, #1
 800cc42:	441a      	add	r2, r3
 800cc44:	4658      	mov	r0, fp
 800cc46:	4498      	add	r8, r3
 800cc48:	9208      	str	r2, [sp, #32]
 800cc4a:	f000 fc21 	bl	800d490 <__i2b>
 800cc4e:	4605      	mov	r5, r0
 800cc50:	b15e      	cbz	r6, 800cc6a <_dtoa_r+0x74a>
 800cc52:	9b08      	ldr	r3, [sp, #32]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	dd08      	ble.n	800cc6a <_dtoa_r+0x74a>
 800cc58:	42b3      	cmp	r3, r6
 800cc5a:	9a08      	ldr	r2, [sp, #32]
 800cc5c:	bfa8      	it	ge
 800cc5e:	4633      	movge	r3, r6
 800cc60:	eba8 0803 	sub.w	r8, r8, r3
 800cc64:	1af6      	subs	r6, r6, r3
 800cc66:	1ad3      	subs	r3, r2, r3
 800cc68:	9308      	str	r3, [sp, #32]
 800cc6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc6c:	b1f3      	cbz	r3, 800ccac <_dtoa_r+0x78c>
 800cc6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f000 80b7 	beq.w	800cde4 <_dtoa_r+0x8c4>
 800cc76:	b18c      	cbz	r4, 800cc9c <_dtoa_r+0x77c>
 800cc78:	4629      	mov	r1, r5
 800cc7a:	4622      	mov	r2, r4
 800cc7c:	4658      	mov	r0, fp
 800cc7e:	f000 fcc7 	bl	800d610 <__pow5mult>
 800cc82:	464a      	mov	r2, r9
 800cc84:	4601      	mov	r1, r0
 800cc86:	4605      	mov	r5, r0
 800cc88:	4658      	mov	r0, fp
 800cc8a:	f000 fc17 	bl	800d4bc <__multiply>
 800cc8e:	4649      	mov	r1, r9
 800cc90:	9004      	str	r0, [sp, #16]
 800cc92:	4658      	mov	r0, fp
 800cc94:	f000 fb48 	bl	800d328 <_Bfree>
 800cc98:	9b04      	ldr	r3, [sp, #16]
 800cc9a:	4699      	mov	r9, r3
 800cc9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc9e:	1b1a      	subs	r2, r3, r4
 800cca0:	d004      	beq.n	800ccac <_dtoa_r+0x78c>
 800cca2:	4649      	mov	r1, r9
 800cca4:	4658      	mov	r0, fp
 800cca6:	f000 fcb3 	bl	800d610 <__pow5mult>
 800ccaa:	4681      	mov	r9, r0
 800ccac:	2101      	movs	r1, #1
 800ccae:	4658      	mov	r0, fp
 800ccb0:	f000 fbee 	bl	800d490 <__i2b>
 800ccb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f000 81cf 	beq.w	800d05c <_dtoa_r+0xb3c>
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	4601      	mov	r1, r0
 800ccc2:	4658      	mov	r0, fp
 800ccc4:	f000 fca4 	bl	800d610 <__pow5mult>
 800ccc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	4604      	mov	r4, r0
 800ccce:	f300 8095 	bgt.w	800cdfc <_dtoa_r+0x8dc>
 800ccd2:	9b02      	ldr	r3, [sp, #8]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	f040 8087 	bne.w	800cde8 <_dtoa_r+0x8c8>
 800ccda:	9b03      	ldr	r3, [sp, #12]
 800ccdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f040 8089 	bne.w	800cdf8 <_dtoa_r+0x8d8>
 800cce6:	9b03      	ldr	r3, [sp, #12]
 800cce8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ccec:	0d1b      	lsrs	r3, r3, #20
 800ccee:	051b      	lsls	r3, r3, #20
 800ccf0:	b12b      	cbz	r3, 800ccfe <_dtoa_r+0x7de>
 800ccf2:	9b08      	ldr	r3, [sp, #32]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	9308      	str	r3, [sp, #32]
 800ccf8:	f108 0801 	add.w	r8, r8, #1
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	f000 81b0 	beq.w	800d068 <_dtoa_r+0xb48>
 800cd08:	6923      	ldr	r3, [r4, #16]
 800cd0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd0e:	6918      	ldr	r0, [r3, #16]
 800cd10:	f000 fb72 	bl	800d3f8 <__hi0bits>
 800cd14:	f1c0 0020 	rsb	r0, r0, #32
 800cd18:	9b08      	ldr	r3, [sp, #32]
 800cd1a:	4418      	add	r0, r3
 800cd1c:	f010 001f 	ands.w	r0, r0, #31
 800cd20:	d077      	beq.n	800ce12 <_dtoa_r+0x8f2>
 800cd22:	f1c0 0320 	rsb	r3, r0, #32
 800cd26:	2b04      	cmp	r3, #4
 800cd28:	dd6b      	ble.n	800ce02 <_dtoa_r+0x8e2>
 800cd2a:	9b08      	ldr	r3, [sp, #32]
 800cd2c:	f1c0 001c 	rsb	r0, r0, #28
 800cd30:	4403      	add	r3, r0
 800cd32:	4480      	add	r8, r0
 800cd34:	4406      	add	r6, r0
 800cd36:	9308      	str	r3, [sp, #32]
 800cd38:	f1b8 0f00 	cmp.w	r8, #0
 800cd3c:	dd05      	ble.n	800cd4a <_dtoa_r+0x82a>
 800cd3e:	4649      	mov	r1, r9
 800cd40:	4642      	mov	r2, r8
 800cd42:	4658      	mov	r0, fp
 800cd44:	f000 fcbe 	bl	800d6c4 <__lshift>
 800cd48:	4681      	mov	r9, r0
 800cd4a:	9b08      	ldr	r3, [sp, #32]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	dd05      	ble.n	800cd5c <_dtoa_r+0x83c>
 800cd50:	4621      	mov	r1, r4
 800cd52:	461a      	mov	r2, r3
 800cd54:	4658      	mov	r0, fp
 800cd56:	f000 fcb5 	bl	800d6c4 <__lshift>
 800cd5a:	4604      	mov	r4, r0
 800cd5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d059      	beq.n	800ce16 <_dtoa_r+0x8f6>
 800cd62:	4621      	mov	r1, r4
 800cd64:	4648      	mov	r0, r9
 800cd66:	f000 fd19 	bl	800d79c <__mcmp>
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	da53      	bge.n	800ce16 <_dtoa_r+0x8f6>
 800cd6e:	1e7b      	subs	r3, r7, #1
 800cd70:	9304      	str	r3, [sp, #16]
 800cd72:	4649      	mov	r1, r9
 800cd74:	2300      	movs	r3, #0
 800cd76:	220a      	movs	r2, #10
 800cd78:	4658      	mov	r0, fp
 800cd7a:	f000 faf7 	bl	800d36c <__multadd>
 800cd7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd80:	4681      	mov	r9, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	f000 8172 	beq.w	800d06c <_dtoa_r+0xb4c>
 800cd88:	2300      	movs	r3, #0
 800cd8a:	4629      	mov	r1, r5
 800cd8c:	220a      	movs	r2, #10
 800cd8e:	4658      	mov	r0, fp
 800cd90:	f000 faec 	bl	800d36c <__multadd>
 800cd94:	9b00      	ldr	r3, [sp, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	4605      	mov	r5, r0
 800cd9a:	dc67      	bgt.n	800ce6c <_dtoa_r+0x94c>
 800cd9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	dc41      	bgt.n	800ce26 <_dtoa_r+0x906>
 800cda2:	e063      	b.n	800ce6c <_dtoa_r+0x94c>
 800cda4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cda6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cdaa:	e746      	b.n	800cc3a <_dtoa_r+0x71a>
 800cdac:	9b07      	ldr	r3, [sp, #28]
 800cdae:	1e5c      	subs	r4, r3, #1
 800cdb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdb2:	42a3      	cmp	r3, r4
 800cdb4:	bfbf      	itttt	lt
 800cdb6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cdb8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cdba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cdbc:	1ae3      	sublt	r3, r4, r3
 800cdbe:	bfb4      	ite	lt
 800cdc0:	18d2      	addlt	r2, r2, r3
 800cdc2:	1b1c      	subge	r4, r3, r4
 800cdc4:	9b07      	ldr	r3, [sp, #28]
 800cdc6:	bfbc      	itt	lt
 800cdc8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800cdca:	2400      	movlt	r4, #0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	bfb5      	itete	lt
 800cdd0:	eba8 0603 	sublt.w	r6, r8, r3
 800cdd4:	9b07      	ldrge	r3, [sp, #28]
 800cdd6:	2300      	movlt	r3, #0
 800cdd8:	4646      	movge	r6, r8
 800cdda:	e730      	b.n	800cc3e <_dtoa_r+0x71e>
 800cddc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cdde:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cde0:	4646      	mov	r6, r8
 800cde2:	e735      	b.n	800cc50 <_dtoa_r+0x730>
 800cde4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cde6:	e75c      	b.n	800cca2 <_dtoa_r+0x782>
 800cde8:	2300      	movs	r3, #0
 800cdea:	e788      	b.n	800ccfe <_dtoa_r+0x7de>
 800cdec:	3fe00000 	.word	0x3fe00000
 800cdf0:	40240000 	.word	0x40240000
 800cdf4:	40140000 	.word	0x40140000
 800cdf8:	9b02      	ldr	r3, [sp, #8]
 800cdfa:	e780      	b.n	800ccfe <_dtoa_r+0x7de>
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce00:	e782      	b.n	800cd08 <_dtoa_r+0x7e8>
 800ce02:	d099      	beq.n	800cd38 <_dtoa_r+0x818>
 800ce04:	9a08      	ldr	r2, [sp, #32]
 800ce06:	331c      	adds	r3, #28
 800ce08:	441a      	add	r2, r3
 800ce0a:	4498      	add	r8, r3
 800ce0c:	441e      	add	r6, r3
 800ce0e:	9208      	str	r2, [sp, #32]
 800ce10:	e792      	b.n	800cd38 <_dtoa_r+0x818>
 800ce12:	4603      	mov	r3, r0
 800ce14:	e7f6      	b.n	800ce04 <_dtoa_r+0x8e4>
 800ce16:	9b07      	ldr	r3, [sp, #28]
 800ce18:	9704      	str	r7, [sp, #16]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	dc20      	bgt.n	800ce60 <_dtoa_r+0x940>
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce22:	2b02      	cmp	r3, #2
 800ce24:	dd1e      	ble.n	800ce64 <_dtoa_r+0x944>
 800ce26:	9b00      	ldr	r3, [sp, #0]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f47f aec0 	bne.w	800cbae <_dtoa_r+0x68e>
 800ce2e:	4621      	mov	r1, r4
 800ce30:	2205      	movs	r2, #5
 800ce32:	4658      	mov	r0, fp
 800ce34:	f000 fa9a 	bl	800d36c <__multadd>
 800ce38:	4601      	mov	r1, r0
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	4648      	mov	r0, r9
 800ce3e:	f000 fcad 	bl	800d79c <__mcmp>
 800ce42:	2800      	cmp	r0, #0
 800ce44:	f77f aeb3 	ble.w	800cbae <_dtoa_r+0x68e>
 800ce48:	4656      	mov	r6, sl
 800ce4a:	2331      	movs	r3, #49	@ 0x31
 800ce4c:	f806 3b01 	strb.w	r3, [r6], #1
 800ce50:	9b04      	ldr	r3, [sp, #16]
 800ce52:	3301      	adds	r3, #1
 800ce54:	9304      	str	r3, [sp, #16]
 800ce56:	e6ae      	b.n	800cbb6 <_dtoa_r+0x696>
 800ce58:	9c07      	ldr	r4, [sp, #28]
 800ce5a:	9704      	str	r7, [sp, #16]
 800ce5c:	4625      	mov	r5, r4
 800ce5e:	e7f3      	b.n	800ce48 <_dtoa_r+0x928>
 800ce60:	9b07      	ldr	r3, [sp, #28]
 800ce62:	9300      	str	r3, [sp, #0]
 800ce64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f000 8104 	beq.w	800d074 <_dtoa_r+0xb54>
 800ce6c:	2e00      	cmp	r6, #0
 800ce6e:	dd05      	ble.n	800ce7c <_dtoa_r+0x95c>
 800ce70:	4629      	mov	r1, r5
 800ce72:	4632      	mov	r2, r6
 800ce74:	4658      	mov	r0, fp
 800ce76:	f000 fc25 	bl	800d6c4 <__lshift>
 800ce7a:	4605      	mov	r5, r0
 800ce7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d05a      	beq.n	800cf38 <_dtoa_r+0xa18>
 800ce82:	6869      	ldr	r1, [r5, #4]
 800ce84:	4658      	mov	r0, fp
 800ce86:	f000 fa0f 	bl	800d2a8 <_Balloc>
 800ce8a:	4606      	mov	r6, r0
 800ce8c:	b928      	cbnz	r0, 800ce9a <_dtoa_r+0x97a>
 800ce8e:	4b84      	ldr	r3, [pc, #528]	@ (800d0a0 <_dtoa_r+0xb80>)
 800ce90:	4602      	mov	r2, r0
 800ce92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ce96:	f7ff bb5a 	b.w	800c54e <_dtoa_r+0x2e>
 800ce9a:	692a      	ldr	r2, [r5, #16]
 800ce9c:	3202      	adds	r2, #2
 800ce9e:	0092      	lsls	r2, r2, #2
 800cea0:	f105 010c 	add.w	r1, r5, #12
 800cea4:	300c      	adds	r0, #12
 800cea6:	f7ff faa4 	bl	800c3f2 <memcpy>
 800ceaa:	2201      	movs	r2, #1
 800ceac:	4631      	mov	r1, r6
 800ceae:	4658      	mov	r0, fp
 800ceb0:	f000 fc08 	bl	800d6c4 <__lshift>
 800ceb4:	f10a 0301 	add.w	r3, sl, #1
 800ceb8:	9307      	str	r3, [sp, #28]
 800ceba:	9b00      	ldr	r3, [sp, #0]
 800cebc:	4453      	add	r3, sl
 800cebe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cec0:	9b02      	ldr	r3, [sp, #8]
 800cec2:	f003 0301 	and.w	r3, r3, #1
 800cec6:	462f      	mov	r7, r5
 800cec8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ceca:	4605      	mov	r5, r0
 800cecc:	9b07      	ldr	r3, [sp, #28]
 800cece:	4621      	mov	r1, r4
 800ced0:	3b01      	subs	r3, #1
 800ced2:	4648      	mov	r0, r9
 800ced4:	9300      	str	r3, [sp, #0]
 800ced6:	f7ff fa9a 	bl	800c40e <quorem>
 800ceda:	4639      	mov	r1, r7
 800cedc:	9002      	str	r0, [sp, #8]
 800cede:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cee2:	4648      	mov	r0, r9
 800cee4:	f000 fc5a 	bl	800d79c <__mcmp>
 800cee8:	462a      	mov	r2, r5
 800ceea:	9008      	str	r0, [sp, #32]
 800ceec:	4621      	mov	r1, r4
 800ceee:	4658      	mov	r0, fp
 800cef0:	f000 fc70 	bl	800d7d4 <__mdiff>
 800cef4:	68c2      	ldr	r2, [r0, #12]
 800cef6:	4606      	mov	r6, r0
 800cef8:	bb02      	cbnz	r2, 800cf3c <_dtoa_r+0xa1c>
 800cefa:	4601      	mov	r1, r0
 800cefc:	4648      	mov	r0, r9
 800cefe:	f000 fc4d 	bl	800d79c <__mcmp>
 800cf02:	4602      	mov	r2, r0
 800cf04:	4631      	mov	r1, r6
 800cf06:	4658      	mov	r0, fp
 800cf08:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf0a:	f000 fa0d 	bl	800d328 <_Bfree>
 800cf0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf12:	9e07      	ldr	r6, [sp, #28]
 800cf14:	ea43 0102 	orr.w	r1, r3, r2
 800cf18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf1a:	4319      	orrs	r1, r3
 800cf1c:	d110      	bne.n	800cf40 <_dtoa_r+0xa20>
 800cf1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cf22:	d029      	beq.n	800cf78 <_dtoa_r+0xa58>
 800cf24:	9b08      	ldr	r3, [sp, #32]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	dd02      	ble.n	800cf30 <_dtoa_r+0xa10>
 800cf2a:	9b02      	ldr	r3, [sp, #8]
 800cf2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cf30:	9b00      	ldr	r3, [sp, #0]
 800cf32:	f883 8000 	strb.w	r8, [r3]
 800cf36:	e63f      	b.n	800cbb8 <_dtoa_r+0x698>
 800cf38:	4628      	mov	r0, r5
 800cf3a:	e7bb      	b.n	800ceb4 <_dtoa_r+0x994>
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	e7e1      	b.n	800cf04 <_dtoa_r+0x9e4>
 800cf40:	9b08      	ldr	r3, [sp, #32]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	db04      	blt.n	800cf50 <_dtoa_r+0xa30>
 800cf46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf48:	430b      	orrs	r3, r1
 800cf4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cf4c:	430b      	orrs	r3, r1
 800cf4e:	d120      	bne.n	800cf92 <_dtoa_r+0xa72>
 800cf50:	2a00      	cmp	r2, #0
 800cf52:	dded      	ble.n	800cf30 <_dtoa_r+0xa10>
 800cf54:	4649      	mov	r1, r9
 800cf56:	2201      	movs	r2, #1
 800cf58:	4658      	mov	r0, fp
 800cf5a:	f000 fbb3 	bl	800d6c4 <__lshift>
 800cf5e:	4621      	mov	r1, r4
 800cf60:	4681      	mov	r9, r0
 800cf62:	f000 fc1b 	bl	800d79c <__mcmp>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	dc03      	bgt.n	800cf72 <_dtoa_r+0xa52>
 800cf6a:	d1e1      	bne.n	800cf30 <_dtoa_r+0xa10>
 800cf6c:	f018 0f01 	tst.w	r8, #1
 800cf70:	d0de      	beq.n	800cf30 <_dtoa_r+0xa10>
 800cf72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cf76:	d1d8      	bne.n	800cf2a <_dtoa_r+0xa0a>
 800cf78:	9a00      	ldr	r2, [sp, #0]
 800cf7a:	2339      	movs	r3, #57	@ 0x39
 800cf7c:	7013      	strb	r3, [r2, #0]
 800cf7e:	4633      	mov	r3, r6
 800cf80:	461e      	mov	r6, r3
 800cf82:	3b01      	subs	r3, #1
 800cf84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cf88:	2a39      	cmp	r2, #57	@ 0x39
 800cf8a:	d052      	beq.n	800d032 <_dtoa_r+0xb12>
 800cf8c:	3201      	adds	r2, #1
 800cf8e:	701a      	strb	r2, [r3, #0]
 800cf90:	e612      	b.n	800cbb8 <_dtoa_r+0x698>
 800cf92:	2a00      	cmp	r2, #0
 800cf94:	dd07      	ble.n	800cfa6 <_dtoa_r+0xa86>
 800cf96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cf9a:	d0ed      	beq.n	800cf78 <_dtoa_r+0xa58>
 800cf9c:	9a00      	ldr	r2, [sp, #0]
 800cf9e:	f108 0301 	add.w	r3, r8, #1
 800cfa2:	7013      	strb	r3, [r2, #0]
 800cfa4:	e608      	b.n	800cbb8 <_dtoa_r+0x698>
 800cfa6:	9b07      	ldr	r3, [sp, #28]
 800cfa8:	9a07      	ldr	r2, [sp, #28]
 800cfaa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cfae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d028      	beq.n	800d006 <_dtoa_r+0xae6>
 800cfb4:	4649      	mov	r1, r9
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	220a      	movs	r2, #10
 800cfba:	4658      	mov	r0, fp
 800cfbc:	f000 f9d6 	bl	800d36c <__multadd>
 800cfc0:	42af      	cmp	r7, r5
 800cfc2:	4681      	mov	r9, r0
 800cfc4:	f04f 0300 	mov.w	r3, #0
 800cfc8:	f04f 020a 	mov.w	r2, #10
 800cfcc:	4639      	mov	r1, r7
 800cfce:	4658      	mov	r0, fp
 800cfd0:	d107      	bne.n	800cfe2 <_dtoa_r+0xac2>
 800cfd2:	f000 f9cb 	bl	800d36c <__multadd>
 800cfd6:	4607      	mov	r7, r0
 800cfd8:	4605      	mov	r5, r0
 800cfda:	9b07      	ldr	r3, [sp, #28]
 800cfdc:	3301      	adds	r3, #1
 800cfde:	9307      	str	r3, [sp, #28]
 800cfe0:	e774      	b.n	800cecc <_dtoa_r+0x9ac>
 800cfe2:	f000 f9c3 	bl	800d36c <__multadd>
 800cfe6:	4629      	mov	r1, r5
 800cfe8:	4607      	mov	r7, r0
 800cfea:	2300      	movs	r3, #0
 800cfec:	220a      	movs	r2, #10
 800cfee:	4658      	mov	r0, fp
 800cff0:	f000 f9bc 	bl	800d36c <__multadd>
 800cff4:	4605      	mov	r5, r0
 800cff6:	e7f0      	b.n	800cfda <_dtoa_r+0xaba>
 800cff8:	9b00      	ldr	r3, [sp, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	bfcc      	ite	gt
 800cffe:	461e      	movgt	r6, r3
 800d000:	2601      	movle	r6, #1
 800d002:	4456      	add	r6, sl
 800d004:	2700      	movs	r7, #0
 800d006:	4649      	mov	r1, r9
 800d008:	2201      	movs	r2, #1
 800d00a:	4658      	mov	r0, fp
 800d00c:	f000 fb5a 	bl	800d6c4 <__lshift>
 800d010:	4621      	mov	r1, r4
 800d012:	4681      	mov	r9, r0
 800d014:	f000 fbc2 	bl	800d79c <__mcmp>
 800d018:	2800      	cmp	r0, #0
 800d01a:	dcb0      	bgt.n	800cf7e <_dtoa_r+0xa5e>
 800d01c:	d102      	bne.n	800d024 <_dtoa_r+0xb04>
 800d01e:	f018 0f01 	tst.w	r8, #1
 800d022:	d1ac      	bne.n	800cf7e <_dtoa_r+0xa5e>
 800d024:	4633      	mov	r3, r6
 800d026:	461e      	mov	r6, r3
 800d028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d02c:	2a30      	cmp	r2, #48	@ 0x30
 800d02e:	d0fa      	beq.n	800d026 <_dtoa_r+0xb06>
 800d030:	e5c2      	b.n	800cbb8 <_dtoa_r+0x698>
 800d032:	459a      	cmp	sl, r3
 800d034:	d1a4      	bne.n	800cf80 <_dtoa_r+0xa60>
 800d036:	9b04      	ldr	r3, [sp, #16]
 800d038:	3301      	adds	r3, #1
 800d03a:	9304      	str	r3, [sp, #16]
 800d03c:	2331      	movs	r3, #49	@ 0x31
 800d03e:	f88a 3000 	strb.w	r3, [sl]
 800d042:	e5b9      	b.n	800cbb8 <_dtoa_r+0x698>
 800d044:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d046:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d0a4 <_dtoa_r+0xb84>
 800d04a:	b11b      	cbz	r3, 800d054 <_dtoa_r+0xb34>
 800d04c:	f10a 0308 	add.w	r3, sl, #8
 800d050:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d052:	6013      	str	r3, [r2, #0]
 800d054:	4650      	mov	r0, sl
 800d056:	b019      	add	sp, #100	@ 0x64
 800d058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d05c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d05e:	2b01      	cmp	r3, #1
 800d060:	f77f ae37 	ble.w	800ccd2 <_dtoa_r+0x7b2>
 800d064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d066:	930a      	str	r3, [sp, #40]	@ 0x28
 800d068:	2001      	movs	r0, #1
 800d06a:	e655      	b.n	800cd18 <_dtoa_r+0x7f8>
 800d06c:	9b00      	ldr	r3, [sp, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	f77f aed6 	ble.w	800ce20 <_dtoa_r+0x900>
 800d074:	4656      	mov	r6, sl
 800d076:	4621      	mov	r1, r4
 800d078:	4648      	mov	r0, r9
 800d07a:	f7ff f9c8 	bl	800c40e <quorem>
 800d07e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d082:	f806 8b01 	strb.w	r8, [r6], #1
 800d086:	9b00      	ldr	r3, [sp, #0]
 800d088:	eba6 020a 	sub.w	r2, r6, sl
 800d08c:	4293      	cmp	r3, r2
 800d08e:	ddb3      	ble.n	800cff8 <_dtoa_r+0xad8>
 800d090:	4649      	mov	r1, r9
 800d092:	2300      	movs	r3, #0
 800d094:	220a      	movs	r2, #10
 800d096:	4658      	mov	r0, fp
 800d098:	f000 f968 	bl	800d36c <__multadd>
 800d09c:	4681      	mov	r9, r0
 800d09e:	e7ea      	b.n	800d076 <_dtoa_r+0xb56>
 800d0a0:	0800e644 	.word	0x0800e644
 800d0a4:	0800e5c8 	.word	0x0800e5c8

0800d0a8 <_free_r>:
 800d0a8:	b538      	push	{r3, r4, r5, lr}
 800d0aa:	4605      	mov	r5, r0
 800d0ac:	2900      	cmp	r1, #0
 800d0ae:	d041      	beq.n	800d134 <_free_r+0x8c>
 800d0b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0b4:	1f0c      	subs	r4, r1, #4
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	bfb8      	it	lt
 800d0ba:	18e4      	addlt	r4, r4, r3
 800d0bc:	f000 f8e8 	bl	800d290 <__malloc_lock>
 800d0c0:	4a1d      	ldr	r2, [pc, #116]	@ (800d138 <_free_r+0x90>)
 800d0c2:	6813      	ldr	r3, [r2, #0]
 800d0c4:	b933      	cbnz	r3, 800d0d4 <_free_r+0x2c>
 800d0c6:	6063      	str	r3, [r4, #4]
 800d0c8:	6014      	str	r4, [r2, #0]
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0d0:	f000 b8e4 	b.w	800d29c <__malloc_unlock>
 800d0d4:	42a3      	cmp	r3, r4
 800d0d6:	d908      	bls.n	800d0ea <_free_r+0x42>
 800d0d8:	6820      	ldr	r0, [r4, #0]
 800d0da:	1821      	adds	r1, r4, r0
 800d0dc:	428b      	cmp	r3, r1
 800d0de:	bf01      	itttt	eq
 800d0e0:	6819      	ldreq	r1, [r3, #0]
 800d0e2:	685b      	ldreq	r3, [r3, #4]
 800d0e4:	1809      	addeq	r1, r1, r0
 800d0e6:	6021      	streq	r1, [r4, #0]
 800d0e8:	e7ed      	b.n	800d0c6 <_free_r+0x1e>
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	b10b      	cbz	r3, 800d0f4 <_free_r+0x4c>
 800d0f0:	42a3      	cmp	r3, r4
 800d0f2:	d9fa      	bls.n	800d0ea <_free_r+0x42>
 800d0f4:	6811      	ldr	r1, [r2, #0]
 800d0f6:	1850      	adds	r0, r2, r1
 800d0f8:	42a0      	cmp	r0, r4
 800d0fa:	d10b      	bne.n	800d114 <_free_r+0x6c>
 800d0fc:	6820      	ldr	r0, [r4, #0]
 800d0fe:	4401      	add	r1, r0
 800d100:	1850      	adds	r0, r2, r1
 800d102:	4283      	cmp	r3, r0
 800d104:	6011      	str	r1, [r2, #0]
 800d106:	d1e0      	bne.n	800d0ca <_free_r+0x22>
 800d108:	6818      	ldr	r0, [r3, #0]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	6053      	str	r3, [r2, #4]
 800d10e:	4408      	add	r0, r1
 800d110:	6010      	str	r0, [r2, #0]
 800d112:	e7da      	b.n	800d0ca <_free_r+0x22>
 800d114:	d902      	bls.n	800d11c <_free_r+0x74>
 800d116:	230c      	movs	r3, #12
 800d118:	602b      	str	r3, [r5, #0]
 800d11a:	e7d6      	b.n	800d0ca <_free_r+0x22>
 800d11c:	6820      	ldr	r0, [r4, #0]
 800d11e:	1821      	adds	r1, r4, r0
 800d120:	428b      	cmp	r3, r1
 800d122:	bf04      	itt	eq
 800d124:	6819      	ldreq	r1, [r3, #0]
 800d126:	685b      	ldreq	r3, [r3, #4]
 800d128:	6063      	str	r3, [r4, #4]
 800d12a:	bf04      	itt	eq
 800d12c:	1809      	addeq	r1, r1, r0
 800d12e:	6021      	streq	r1, [r4, #0]
 800d130:	6054      	str	r4, [r2, #4]
 800d132:	e7ca      	b.n	800d0ca <_free_r+0x22>
 800d134:	bd38      	pop	{r3, r4, r5, pc}
 800d136:	bf00      	nop
 800d138:	200026ec 	.word	0x200026ec

0800d13c <malloc>:
 800d13c:	4b02      	ldr	r3, [pc, #8]	@ (800d148 <malloc+0xc>)
 800d13e:	4601      	mov	r1, r0
 800d140:	6818      	ldr	r0, [r3, #0]
 800d142:	f000 b825 	b.w	800d190 <_malloc_r>
 800d146:	bf00      	nop
 800d148:	2000001c 	.word	0x2000001c

0800d14c <sbrk_aligned>:
 800d14c:	b570      	push	{r4, r5, r6, lr}
 800d14e:	4e0f      	ldr	r6, [pc, #60]	@ (800d18c <sbrk_aligned+0x40>)
 800d150:	460c      	mov	r4, r1
 800d152:	6831      	ldr	r1, [r6, #0]
 800d154:	4605      	mov	r5, r0
 800d156:	b911      	cbnz	r1, 800d15e <sbrk_aligned+0x12>
 800d158:	f000 fe46 	bl	800dde8 <_sbrk_r>
 800d15c:	6030      	str	r0, [r6, #0]
 800d15e:	4621      	mov	r1, r4
 800d160:	4628      	mov	r0, r5
 800d162:	f000 fe41 	bl	800dde8 <_sbrk_r>
 800d166:	1c43      	adds	r3, r0, #1
 800d168:	d103      	bne.n	800d172 <sbrk_aligned+0x26>
 800d16a:	f04f 34ff 	mov.w	r4, #4294967295
 800d16e:	4620      	mov	r0, r4
 800d170:	bd70      	pop	{r4, r5, r6, pc}
 800d172:	1cc4      	adds	r4, r0, #3
 800d174:	f024 0403 	bic.w	r4, r4, #3
 800d178:	42a0      	cmp	r0, r4
 800d17a:	d0f8      	beq.n	800d16e <sbrk_aligned+0x22>
 800d17c:	1a21      	subs	r1, r4, r0
 800d17e:	4628      	mov	r0, r5
 800d180:	f000 fe32 	bl	800dde8 <_sbrk_r>
 800d184:	3001      	adds	r0, #1
 800d186:	d1f2      	bne.n	800d16e <sbrk_aligned+0x22>
 800d188:	e7ef      	b.n	800d16a <sbrk_aligned+0x1e>
 800d18a:	bf00      	nop
 800d18c:	200026e8 	.word	0x200026e8

0800d190 <_malloc_r>:
 800d190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d194:	1ccd      	adds	r5, r1, #3
 800d196:	f025 0503 	bic.w	r5, r5, #3
 800d19a:	3508      	adds	r5, #8
 800d19c:	2d0c      	cmp	r5, #12
 800d19e:	bf38      	it	cc
 800d1a0:	250c      	movcc	r5, #12
 800d1a2:	2d00      	cmp	r5, #0
 800d1a4:	4606      	mov	r6, r0
 800d1a6:	db01      	blt.n	800d1ac <_malloc_r+0x1c>
 800d1a8:	42a9      	cmp	r1, r5
 800d1aa:	d904      	bls.n	800d1b6 <_malloc_r+0x26>
 800d1ac:	230c      	movs	r3, #12
 800d1ae:	6033      	str	r3, [r6, #0]
 800d1b0:	2000      	movs	r0, #0
 800d1b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d28c <_malloc_r+0xfc>
 800d1ba:	f000 f869 	bl	800d290 <__malloc_lock>
 800d1be:	f8d8 3000 	ldr.w	r3, [r8]
 800d1c2:	461c      	mov	r4, r3
 800d1c4:	bb44      	cbnz	r4, 800d218 <_malloc_r+0x88>
 800d1c6:	4629      	mov	r1, r5
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	f7ff ffbf 	bl	800d14c <sbrk_aligned>
 800d1ce:	1c43      	adds	r3, r0, #1
 800d1d0:	4604      	mov	r4, r0
 800d1d2:	d158      	bne.n	800d286 <_malloc_r+0xf6>
 800d1d4:	f8d8 4000 	ldr.w	r4, [r8]
 800d1d8:	4627      	mov	r7, r4
 800d1da:	2f00      	cmp	r7, #0
 800d1dc:	d143      	bne.n	800d266 <_malloc_r+0xd6>
 800d1de:	2c00      	cmp	r4, #0
 800d1e0:	d04b      	beq.n	800d27a <_malloc_r+0xea>
 800d1e2:	6823      	ldr	r3, [r4, #0]
 800d1e4:	4639      	mov	r1, r7
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	eb04 0903 	add.w	r9, r4, r3
 800d1ec:	f000 fdfc 	bl	800dde8 <_sbrk_r>
 800d1f0:	4581      	cmp	r9, r0
 800d1f2:	d142      	bne.n	800d27a <_malloc_r+0xea>
 800d1f4:	6821      	ldr	r1, [r4, #0]
 800d1f6:	1a6d      	subs	r5, r5, r1
 800d1f8:	4629      	mov	r1, r5
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	f7ff ffa6 	bl	800d14c <sbrk_aligned>
 800d200:	3001      	adds	r0, #1
 800d202:	d03a      	beq.n	800d27a <_malloc_r+0xea>
 800d204:	6823      	ldr	r3, [r4, #0]
 800d206:	442b      	add	r3, r5
 800d208:	6023      	str	r3, [r4, #0]
 800d20a:	f8d8 3000 	ldr.w	r3, [r8]
 800d20e:	685a      	ldr	r2, [r3, #4]
 800d210:	bb62      	cbnz	r2, 800d26c <_malloc_r+0xdc>
 800d212:	f8c8 7000 	str.w	r7, [r8]
 800d216:	e00f      	b.n	800d238 <_malloc_r+0xa8>
 800d218:	6822      	ldr	r2, [r4, #0]
 800d21a:	1b52      	subs	r2, r2, r5
 800d21c:	d420      	bmi.n	800d260 <_malloc_r+0xd0>
 800d21e:	2a0b      	cmp	r2, #11
 800d220:	d917      	bls.n	800d252 <_malloc_r+0xc2>
 800d222:	1961      	adds	r1, r4, r5
 800d224:	42a3      	cmp	r3, r4
 800d226:	6025      	str	r5, [r4, #0]
 800d228:	bf18      	it	ne
 800d22a:	6059      	strne	r1, [r3, #4]
 800d22c:	6863      	ldr	r3, [r4, #4]
 800d22e:	bf08      	it	eq
 800d230:	f8c8 1000 	streq.w	r1, [r8]
 800d234:	5162      	str	r2, [r4, r5]
 800d236:	604b      	str	r3, [r1, #4]
 800d238:	4630      	mov	r0, r6
 800d23a:	f000 f82f 	bl	800d29c <__malloc_unlock>
 800d23e:	f104 000b 	add.w	r0, r4, #11
 800d242:	1d23      	adds	r3, r4, #4
 800d244:	f020 0007 	bic.w	r0, r0, #7
 800d248:	1ac2      	subs	r2, r0, r3
 800d24a:	bf1c      	itt	ne
 800d24c:	1a1b      	subne	r3, r3, r0
 800d24e:	50a3      	strne	r3, [r4, r2]
 800d250:	e7af      	b.n	800d1b2 <_malloc_r+0x22>
 800d252:	6862      	ldr	r2, [r4, #4]
 800d254:	42a3      	cmp	r3, r4
 800d256:	bf0c      	ite	eq
 800d258:	f8c8 2000 	streq.w	r2, [r8]
 800d25c:	605a      	strne	r2, [r3, #4]
 800d25e:	e7eb      	b.n	800d238 <_malloc_r+0xa8>
 800d260:	4623      	mov	r3, r4
 800d262:	6864      	ldr	r4, [r4, #4]
 800d264:	e7ae      	b.n	800d1c4 <_malloc_r+0x34>
 800d266:	463c      	mov	r4, r7
 800d268:	687f      	ldr	r7, [r7, #4]
 800d26a:	e7b6      	b.n	800d1da <_malloc_r+0x4a>
 800d26c:	461a      	mov	r2, r3
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	42a3      	cmp	r3, r4
 800d272:	d1fb      	bne.n	800d26c <_malloc_r+0xdc>
 800d274:	2300      	movs	r3, #0
 800d276:	6053      	str	r3, [r2, #4]
 800d278:	e7de      	b.n	800d238 <_malloc_r+0xa8>
 800d27a:	230c      	movs	r3, #12
 800d27c:	6033      	str	r3, [r6, #0]
 800d27e:	4630      	mov	r0, r6
 800d280:	f000 f80c 	bl	800d29c <__malloc_unlock>
 800d284:	e794      	b.n	800d1b0 <_malloc_r+0x20>
 800d286:	6005      	str	r5, [r0, #0]
 800d288:	e7d6      	b.n	800d238 <_malloc_r+0xa8>
 800d28a:	bf00      	nop
 800d28c:	200026ec 	.word	0x200026ec

0800d290 <__malloc_lock>:
 800d290:	4801      	ldr	r0, [pc, #4]	@ (800d298 <__malloc_lock+0x8>)
 800d292:	f7ff b8ac 	b.w	800c3ee <__retarget_lock_acquire_recursive>
 800d296:	bf00      	nop
 800d298:	200026e4 	.word	0x200026e4

0800d29c <__malloc_unlock>:
 800d29c:	4801      	ldr	r0, [pc, #4]	@ (800d2a4 <__malloc_unlock+0x8>)
 800d29e:	f7ff b8a7 	b.w	800c3f0 <__retarget_lock_release_recursive>
 800d2a2:	bf00      	nop
 800d2a4:	200026e4 	.word	0x200026e4

0800d2a8 <_Balloc>:
 800d2a8:	b570      	push	{r4, r5, r6, lr}
 800d2aa:	69c6      	ldr	r6, [r0, #28]
 800d2ac:	4604      	mov	r4, r0
 800d2ae:	460d      	mov	r5, r1
 800d2b0:	b976      	cbnz	r6, 800d2d0 <_Balloc+0x28>
 800d2b2:	2010      	movs	r0, #16
 800d2b4:	f7ff ff42 	bl	800d13c <malloc>
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	61e0      	str	r0, [r4, #28]
 800d2bc:	b920      	cbnz	r0, 800d2c8 <_Balloc+0x20>
 800d2be:	4b18      	ldr	r3, [pc, #96]	@ (800d320 <_Balloc+0x78>)
 800d2c0:	4818      	ldr	r0, [pc, #96]	@ (800d324 <_Balloc+0x7c>)
 800d2c2:	216b      	movs	r1, #107	@ 0x6b
 800d2c4:	f000 fda0 	bl	800de08 <__assert_func>
 800d2c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2cc:	6006      	str	r6, [r0, #0]
 800d2ce:	60c6      	str	r6, [r0, #12]
 800d2d0:	69e6      	ldr	r6, [r4, #28]
 800d2d2:	68f3      	ldr	r3, [r6, #12]
 800d2d4:	b183      	cbz	r3, 800d2f8 <_Balloc+0x50>
 800d2d6:	69e3      	ldr	r3, [r4, #28]
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d2de:	b9b8      	cbnz	r0, 800d310 <_Balloc+0x68>
 800d2e0:	2101      	movs	r1, #1
 800d2e2:	fa01 f605 	lsl.w	r6, r1, r5
 800d2e6:	1d72      	adds	r2, r6, #5
 800d2e8:	0092      	lsls	r2, r2, #2
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	f000 fdaa 	bl	800de44 <_calloc_r>
 800d2f0:	b160      	cbz	r0, 800d30c <_Balloc+0x64>
 800d2f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d2f6:	e00e      	b.n	800d316 <_Balloc+0x6e>
 800d2f8:	2221      	movs	r2, #33	@ 0x21
 800d2fa:	2104      	movs	r1, #4
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f000 fda1 	bl	800de44 <_calloc_r>
 800d302:	69e3      	ldr	r3, [r4, #28]
 800d304:	60f0      	str	r0, [r6, #12]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d1e4      	bne.n	800d2d6 <_Balloc+0x2e>
 800d30c:	2000      	movs	r0, #0
 800d30e:	bd70      	pop	{r4, r5, r6, pc}
 800d310:	6802      	ldr	r2, [r0, #0]
 800d312:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d316:	2300      	movs	r3, #0
 800d318:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d31c:	e7f7      	b.n	800d30e <_Balloc+0x66>
 800d31e:	bf00      	nop
 800d320:	0800e5d5 	.word	0x0800e5d5
 800d324:	0800e655 	.word	0x0800e655

0800d328 <_Bfree>:
 800d328:	b570      	push	{r4, r5, r6, lr}
 800d32a:	69c6      	ldr	r6, [r0, #28]
 800d32c:	4605      	mov	r5, r0
 800d32e:	460c      	mov	r4, r1
 800d330:	b976      	cbnz	r6, 800d350 <_Bfree+0x28>
 800d332:	2010      	movs	r0, #16
 800d334:	f7ff ff02 	bl	800d13c <malloc>
 800d338:	4602      	mov	r2, r0
 800d33a:	61e8      	str	r0, [r5, #28]
 800d33c:	b920      	cbnz	r0, 800d348 <_Bfree+0x20>
 800d33e:	4b09      	ldr	r3, [pc, #36]	@ (800d364 <_Bfree+0x3c>)
 800d340:	4809      	ldr	r0, [pc, #36]	@ (800d368 <_Bfree+0x40>)
 800d342:	218f      	movs	r1, #143	@ 0x8f
 800d344:	f000 fd60 	bl	800de08 <__assert_func>
 800d348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d34c:	6006      	str	r6, [r0, #0]
 800d34e:	60c6      	str	r6, [r0, #12]
 800d350:	b13c      	cbz	r4, 800d362 <_Bfree+0x3a>
 800d352:	69eb      	ldr	r3, [r5, #28]
 800d354:	6862      	ldr	r2, [r4, #4]
 800d356:	68db      	ldr	r3, [r3, #12]
 800d358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d35c:	6021      	str	r1, [r4, #0]
 800d35e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d362:	bd70      	pop	{r4, r5, r6, pc}
 800d364:	0800e5d5 	.word	0x0800e5d5
 800d368:	0800e655 	.word	0x0800e655

0800d36c <__multadd>:
 800d36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d370:	690d      	ldr	r5, [r1, #16]
 800d372:	4607      	mov	r7, r0
 800d374:	460c      	mov	r4, r1
 800d376:	461e      	mov	r6, r3
 800d378:	f101 0c14 	add.w	ip, r1, #20
 800d37c:	2000      	movs	r0, #0
 800d37e:	f8dc 3000 	ldr.w	r3, [ip]
 800d382:	b299      	uxth	r1, r3
 800d384:	fb02 6101 	mla	r1, r2, r1, r6
 800d388:	0c1e      	lsrs	r6, r3, #16
 800d38a:	0c0b      	lsrs	r3, r1, #16
 800d38c:	fb02 3306 	mla	r3, r2, r6, r3
 800d390:	b289      	uxth	r1, r1
 800d392:	3001      	adds	r0, #1
 800d394:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d398:	4285      	cmp	r5, r0
 800d39a:	f84c 1b04 	str.w	r1, [ip], #4
 800d39e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d3a2:	dcec      	bgt.n	800d37e <__multadd+0x12>
 800d3a4:	b30e      	cbz	r6, 800d3ea <__multadd+0x7e>
 800d3a6:	68a3      	ldr	r3, [r4, #8]
 800d3a8:	42ab      	cmp	r3, r5
 800d3aa:	dc19      	bgt.n	800d3e0 <__multadd+0x74>
 800d3ac:	6861      	ldr	r1, [r4, #4]
 800d3ae:	4638      	mov	r0, r7
 800d3b0:	3101      	adds	r1, #1
 800d3b2:	f7ff ff79 	bl	800d2a8 <_Balloc>
 800d3b6:	4680      	mov	r8, r0
 800d3b8:	b928      	cbnz	r0, 800d3c6 <__multadd+0x5a>
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	4b0c      	ldr	r3, [pc, #48]	@ (800d3f0 <__multadd+0x84>)
 800d3be:	480d      	ldr	r0, [pc, #52]	@ (800d3f4 <__multadd+0x88>)
 800d3c0:	21ba      	movs	r1, #186	@ 0xba
 800d3c2:	f000 fd21 	bl	800de08 <__assert_func>
 800d3c6:	6922      	ldr	r2, [r4, #16]
 800d3c8:	3202      	adds	r2, #2
 800d3ca:	f104 010c 	add.w	r1, r4, #12
 800d3ce:	0092      	lsls	r2, r2, #2
 800d3d0:	300c      	adds	r0, #12
 800d3d2:	f7ff f80e 	bl	800c3f2 <memcpy>
 800d3d6:	4621      	mov	r1, r4
 800d3d8:	4638      	mov	r0, r7
 800d3da:	f7ff ffa5 	bl	800d328 <_Bfree>
 800d3de:	4644      	mov	r4, r8
 800d3e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d3e4:	3501      	adds	r5, #1
 800d3e6:	615e      	str	r6, [r3, #20]
 800d3e8:	6125      	str	r5, [r4, #16]
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3f0:	0800e644 	.word	0x0800e644
 800d3f4:	0800e655 	.word	0x0800e655

0800d3f8 <__hi0bits>:
 800d3f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	bf36      	itet	cc
 800d400:	0403      	lslcc	r3, r0, #16
 800d402:	2000      	movcs	r0, #0
 800d404:	2010      	movcc	r0, #16
 800d406:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d40a:	bf3c      	itt	cc
 800d40c:	021b      	lslcc	r3, r3, #8
 800d40e:	3008      	addcc	r0, #8
 800d410:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d414:	bf3c      	itt	cc
 800d416:	011b      	lslcc	r3, r3, #4
 800d418:	3004      	addcc	r0, #4
 800d41a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d41e:	bf3c      	itt	cc
 800d420:	009b      	lslcc	r3, r3, #2
 800d422:	3002      	addcc	r0, #2
 800d424:	2b00      	cmp	r3, #0
 800d426:	db05      	blt.n	800d434 <__hi0bits+0x3c>
 800d428:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d42c:	f100 0001 	add.w	r0, r0, #1
 800d430:	bf08      	it	eq
 800d432:	2020      	moveq	r0, #32
 800d434:	4770      	bx	lr

0800d436 <__lo0bits>:
 800d436:	6803      	ldr	r3, [r0, #0]
 800d438:	4602      	mov	r2, r0
 800d43a:	f013 0007 	ands.w	r0, r3, #7
 800d43e:	d00b      	beq.n	800d458 <__lo0bits+0x22>
 800d440:	07d9      	lsls	r1, r3, #31
 800d442:	d421      	bmi.n	800d488 <__lo0bits+0x52>
 800d444:	0798      	lsls	r0, r3, #30
 800d446:	bf49      	itett	mi
 800d448:	085b      	lsrmi	r3, r3, #1
 800d44a:	089b      	lsrpl	r3, r3, #2
 800d44c:	2001      	movmi	r0, #1
 800d44e:	6013      	strmi	r3, [r2, #0]
 800d450:	bf5c      	itt	pl
 800d452:	6013      	strpl	r3, [r2, #0]
 800d454:	2002      	movpl	r0, #2
 800d456:	4770      	bx	lr
 800d458:	b299      	uxth	r1, r3
 800d45a:	b909      	cbnz	r1, 800d460 <__lo0bits+0x2a>
 800d45c:	0c1b      	lsrs	r3, r3, #16
 800d45e:	2010      	movs	r0, #16
 800d460:	b2d9      	uxtb	r1, r3
 800d462:	b909      	cbnz	r1, 800d468 <__lo0bits+0x32>
 800d464:	3008      	adds	r0, #8
 800d466:	0a1b      	lsrs	r3, r3, #8
 800d468:	0719      	lsls	r1, r3, #28
 800d46a:	bf04      	itt	eq
 800d46c:	091b      	lsreq	r3, r3, #4
 800d46e:	3004      	addeq	r0, #4
 800d470:	0799      	lsls	r1, r3, #30
 800d472:	bf04      	itt	eq
 800d474:	089b      	lsreq	r3, r3, #2
 800d476:	3002      	addeq	r0, #2
 800d478:	07d9      	lsls	r1, r3, #31
 800d47a:	d403      	bmi.n	800d484 <__lo0bits+0x4e>
 800d47c:	085b      	lsrs	r3, r3, #1
 800d47e:	f100 0001 	add.w	r0, r0, #1
 800d482:	d003      	beq.n	800d48c <__lo0bits+0x56>
 800d484:	6013      	str	r3, [r2, #0]
 800d486:	4770      	bx	lr
 800d488:	2000      	movs	r0, #0
 800d48a:	4770      	bx	lr
 800d48c:	2020      	movs	r0, #32
 800d48e:	4770      	bx	lr

0800d490 <__i2b>:
 800d490:	b510      	push	{r4, lr}
 800d492:	460c      	mov	r4, r1
 800d494:	2101      	movs	r1, #1
 800d496:	f7ff ff07 	bl	800d2a8 <_Balloc>
 800d49a:	4602      	mov	r2, r0
 800d49c:	b928      	cbnz	r0, 800d4aa <__i2b+0x1a>
 800d49e:	4b05      	ldr	r3, [pc, #20]	@ (800d4b4 <__i2b+0x24>)
 800d4a0:	4805      	ldr	r0, [pc, #20]	@ (800d4b8 <__i2b+0x28>)
 800d4a2:	f240 1145 	movw	r1, #325	@ 0x145
 800d4a6:	f000 fcaf 	bl	800de08 <__assert_func>
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	6144      	str	r4, [r0, #20]
 800d4ae:	6103      	str	r3, [r0, #16]
 800d4b0:	bd10      	pop	{r4, pc}
 800d4b2:	bf00      	nop
 800d4b4:	0800e644 	.word	0x0800e644
 800d4b8:	0800e655 	.word	0x0800e655

0800d4bc <__multiply>:
 800d4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c0:	4614      	mov	r4, r2
 800d4c2:	690a      	ldr	r2, [r1, #16]
 800d4c4:	6923      	ldr	r3, [r4, #16]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	bfa8      	it	ge
 800d4ca:	4623      	movge	r3, r4
 800d4cc:	460f      	mov	r7, r1
 800d4ce:	bfa4      	itt	ge
 800d4d0:	460c      	movge	r4, r1
 800d4d2:	461f      	movge	r7, r3
 800d4d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d4d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d4dc:	68a3      	ldr	r3, [r4, #8]
 800d4de:	6861      	ldr	r1, [r4, #4]
 800d4e0:	eb0a 0609 	add.w	r6, sl, r9
 800d4e4:	42b3      	cmp	r3, r6
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	bfb8      	it	lt
 800d4ea:	3101      	addlt	r1, #1
 800d4ec:	f7ff fedc 	bl	800d2a8 <_Balloc>
 800d4f0:	b930      	cbnz	r0, 800d500 <__multiply+0x44>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	4b44      	ldr	r3, [pc, #272]	@ (800d608 <__multiply+0x14c>)
 800d4f6:	4845      	ldr	r0, [pc, #276]	@ (800d60c <__multiply+0x150>)
 800d4f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d4fc:	f000 fc84 	bl	800de08 <__assert_func>
 800d500:	f100 0514 	add.w	r5, r0, #20
 800d504:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d508:	462b      	mov	r3, r5
 800d50a:	2200      	movs	r2, #0
 800d50c:	4543      	cmp	r3, r8
 800d50e:	d321      	bcc.n	800d554 <__multiply+0x98>
 800d510:	f107 0114 	add.w	r1, r7, #20
 800d514:	f104 0214 	add.w	r2, r4, #20
 800d518:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d51c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d520:	9302      	str	r3, [sp, #8]
 800d522:	1b13      	subs	r3, r2, r4
 800d524:	3b15      	subs	r3, #21
 800d526:	f023 0303 	bic.w	r3, r3, #3
 800d52a:	3304      	adds	r3, #4
 800d52c:	f104 0715 	add.w	r7, r4, #21
 800d530:	42ba      	cmp	r2, r7
 800d532:	bf38      	it	cc
 800d534:	2304      	movcc	r3, #4
 800d536:	9301      	str	r3, [sp, #4]
 800d538:	9b02      	ldr	r3, [sp, #8]
 800d53a:	9103      	str	r1, [sp, #12]
 800d53c:	428b      	cmp	r3, r1
 800d53e:	d80c      	bhi.n	800d55a <__multiply+0x9e>
 800d540:	2e00      	cmp	r6, #0
 800d542:	dd03      	ble.n	800d54c <__multiply+0x90>
 800d544:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d05b      	beq.n	800d604 <__multiply+0x148>
 800d54c:	6106      	str	r6, [r0, #16]
 800d54e:	b005      	add	sp, #20
 800d550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d554:	f843 2b04 	str.w	r2, [r3], #4
 800d558:	e7d8      	b.n	800d50c <__multiply+0x50>
 800d55a:	f8b1 a000 	ldrh.w	sl, [r1]
 800d55e:	f1ba 0f00 	cmp.w	sl, #0
 800d562:	d024      	beq.n	800d5ae <__multiply+0xf2>
 800d564:	f104 0e14 	add.w	lr, r4, #20
 800d568:	46a9      	mov	r9, r5
 800d56a:	f04f 0c00 	mov.w	ip, #0
 800d56e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d572:	f8d9 3000 	ldr.w	r3, [r9]
 800d576:	fa1f fb87 	uxth.w	fp, r7
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d580:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d584:	f8d9 7000 	ldr.w	r7, [r9]
 800d588:	4463      	add	r3, ip
 800d58a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d58e:	fb0a c70b 	mla	r7, sl, fp, ip
 800d592:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d596:	b29b      	uxth	r3, r3
 800d598:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d59c:	4572      	cmp	r2, lr
 800d59e:	f849 3b04 	str.w	r3, [r9], #4
 800d5a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d5a6:	d8e2      	bhi.n	800d56e <__multiply+0xb2>
 800d5a8:	9b01      	ldr	r3, [sp, #4]
 800d5aa:	f845 c003 	str.w	ip, [r5, r3]
 800d5ae:	9b03      	ldr	r3, [sp, #12]
 800d5b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d5b4:	3104      	adds	r1, #4
 800d5b6:	f1b9 0f00 	cmp.w	r9, #0
 800d5ba:	d021      	beq.n	800d600 <__multiply+0x144>
 800d5bc:	682b      	ldr	r3, [r5, #0]
 800d5be:	f104 0c14 	add.w	ip, r4, #20
 800d5c2:	46ae      	mov	lr, r5
 800d5c4:	f04f 0a00 	mov.w	sl, #0
 800d5c8:	f8bc b000 	ldrh.w	fp, [ip]
 800d5cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d5d0:	fb09 770b 	mla	r7, r9, fp, r7
 800d5d4:	4457      	add	r7, sl
 800d5d6:	b29b      	uxth	r3, r3
 800d5d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d5dc:	f84e 3b04 	str.w	r3, [lr], #4
 800d5e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d5e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d5e8:	f8be 3000 	ldrh.w	r3, [lr]
 800d5ec:	fb09 330a 	mla	r3, r9, sl, r3
 800d5f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d5f4:	4562      	cmp	r2, ip
 800d5f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d5fa:	d8e5      	bhi.n	800d5c8 <__multiply+0x10c>
 800d5fc:	9f01      	ldr	r7, [sp, #4]
 800d5fe:	51eb      	str	r3, [r5, r7]
 800d600:	3504      	adds	r5, #4
 800d602:	e799      	b.n	800d538 <__multiply+0x7c>
 800d604:	3e01      	subs	r6, #1
 800d606:	e79b      	b.n	800d540 <__multiply+0x84>
 800d608:	0800e644 	.word	0x0800e644
 800d60c:	0800e655 	.word	0x0800e655

0800d610 <__pow5mult>:
 800d610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d614:	4615      	mov	r5, r2
 800d616:	f012 0203 	ands.w	r2, r2, #3
 800d61a:	4607      	mov	r7, r0
 800d61c:	460e      	mov	r6, r1
 800d61e:	d007      	beq.n	800d630 <__pow5mult+0x20>
 800d620:	4c25      	ldr	r4, [pc, #148]	@ (800d6b8 <__pow5mult+0xa8>)
 800d622:	3a01      	subs	r2, #1
 800d624:	2300      	movs	r3, #0
 800d626:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d62a:	f7ff fe9f 	bl	800d36c <__multadd>
 800d62e:	4606      	mov	r6, r0
 800d630:	10ad      	asrs	r5, r5, #2
 800d632:	d03d      	beq.n	800d6b0 <__pow5mult+0xa0>
 800d634:	69fc      	ldr	r4, [r7, #28]
 800d636:	b97c      	cbnz	r4, 800d658 <__pow5mult+0x48>
 800d638:	2010      	movs	r0, #16
 800d63a:	f7ff fd7f 	bl	800d13c <malloc>
 800d63e:	4602      	mov	r2, r0
 800d640:	61f8      	str	r0, [r7, #28]
 800d642:	b928      	cbnz	r0, 800d650 <__pow5mult+0x40>
 800d644:	4b1d      	ldr	r3, [pc, #116]	@ (800d6bc <__pow5mult+0xac>)
 800d646:	481e      	ldr	r0, [pc, #120]	@ (800d6c0 <__pow5mult+0xb0>)
 800d648:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d64c:	f000 fbdc 	bl	800de08 <__assert_func>
 800d650:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d654:	6004      	str	r4, [r0, #0]
 800d656:	60c4      	str	r4, [r0, #12]
 800d658:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d65c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d660:	b94c      	cbnz	r4, 800d676 <__pow5mult+0x66>
 800d662:	f240 2171 	movw	r1, #625	@ 0x271
 800d666:	4638      	mov	r0, r7
 800d668:	f7ff ff12 	bl	800d490 <__i2b>
 800d66c:	2300      	movs	r3, #0
 800d66e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d672:	4604      	mov	r4, r0
 800d674:	6003      	str	r3, [r0, #0]
 800d676:	f04f 0900 	mov.w	r9, #0
 800d67a:	07eb      	lsls	r3, r5, #31
 800d67c:	d50a      	bpl.n	800d694 <__pow5mult+0x84>
 800d67e:	4631      	mov	r1, r6
 800d680:	4622      	mov	r2, r4
 800d682:	4638      	mov	r0, r7
 800d684:	f7ff ff1a 	bl	800d4bc <__multiply>
 800d688:	4631      	mov	r1, r6
 800d68a:	4680      	mov	r8, r0
 800d68c:	4638      	mov	r0, r7
 800d68e:	f7ff fe4b 	bl	800d328 <_Bfree>
 800d692:	4646      	mov	r6, r8
 800d694:	106d      	asrs	r5, r5, #1
 800d696:	d00b      	beq.n	800d6b0 <__pow5mult+0xa0>
 800d698:	6820      	ldr	r0, [r4, #0]
 800d69a:	b938      	cbnz	r0, 800d6ac <__pow5mult+0x9c>
 800d69c:	4622      	mov	r2, r4
 800d69e:	4621      	mov	r1, r4
 800d6a0:	4638      	mov	r0, r7
 800d6a2:	f7ff ff0b 	bl	800d4bc <__multiply>
 800d6a6:	6020      	str	r0, [r4, #0]
 800d6a8:	f8c0 9000 	str.w	r9, [r0]
 800d6ac:	4604      	mov	r4, r0
 800d6ae:	e7e4      	b.n	800d67a <__pow5mult+0x6a>
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6b6:	bf00      	nop
 800d6b8:	0800e6b0 	.word	0x0800e6b0
 800d6bc:	0800e5d5 	.word	0x0800e5d5
 800d6c0:	0800e655 	.word	0x0800e655

0800d6c4 <__lshift>:
 800d6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6c8:	460c      	mov	r4, r1
 800d6ca:	6849      	ldr	r1, [r1, #4]
 800d6cc:	6923      	ldr	r3, [r4, #16]
 800d6ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d6d2:	68a3      	ldr	r3, [r4, #8]
 800d6d4:	4607      	mov	r7, r0
 800d6d6:	4691      	mov	r9, r2
 800d6d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d6dc:	f108 0601 	add.w	r6, r8, #1
 800d6e0:	42b3      	cmp	r3, r6
 800d6e2:	db0b      	blt.n	800d6fc <__lshift+0x38>
 800d6e4:	4638      	mov	r0, r7
 800d6e6:	f7ff fddf 	bl	800d2a8 <_Balloc>
 800d6ea:	4605      	mov	r5, r0
 800d6ec:	b948      	cbnz	r0, 800d702 <__lshift+0x3e>
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	4b28      	ldr	r3, [pc, #160]	@ (800d794 <__lshift+0xd0>)
 800d6f2:	4829      	ldr	r0, [pc, #164]	@ (800d798 <__lshift+0xd4>)
 800d6f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d6f8:	f000 fb86 	bl	800de08 <__assert_func>
 800d6fc:	3101      	adds	r1, #1
 800d6fe:	005b      	lsls	r3, r3, #1
 800d700:	e7ee      	b.n	800d6e0 <__lshift+0x1c>
 800d702:	2300      	movs	r3, #0
 800d704:	f100 0114 	add.w	r1, r0, #20
 800d708:	f100 0210 	add.w	r2, r0, #16
 800d70c:	4618      	mov	r0, r3
 800d70e:	4553      	cmp	r3, sl
 800d710:	db33      	blt.n	800d77a <__lshift+0xb6>
 800d712:	6920      	ldr	r0, [r4, #16]
 800d714:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d718:	f104 0314 	add.w	r3, r4, #20
 800d71c:	f019 091f 	ands.w	r9, r9, #31
 800d720:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d724:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d728:	d02b      	beq.n	800d782 <__lshift+0xbe>
 800d72a:	f1c9 0e20 	rsb	lr, r9, #32
 800d72e:	468a      	mov	sl, r1
 800d730:	2200      	movs	r2, #0
 800d732:	6818      	ldr	r0, [r3, #0]
 800d734:	fa00 f009 	lsl.w	r0, r0, r9
 800d738:	4310      	orrs	r0, r2
 800d73a:	f84a 0b04 	str.w	r0, [sl], #4
 800d73e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d742:	459c      	cmp	ip, r3
 800d744:	fa22 f20e 	lsr.w	r2, r2, lr
 800d748:	d8f3      	bhi.n	800d732 <__lshift+0x6e>
 800d74a:	ebac 0304 	sub.w	r3, ip, r4
 800d74e:	3b15      	subs	r3, #21
 800d750:	f023 0303 	bic.w	r3, r3, #3
 800d754:	3304      	adds	r3, #4
 800d756:	f104 0015 	add.w	r0, r4, #21
 800d75a:	4584      	cmp	ip, r0
 800d75c:	bf38      	it	cc
 800d75e:	2304      	movcc	r3, #4
 800d760:	50ca      	str	r2, [r1, r3]
 800d762:	b10a      	cbz	r2, 800d768 <__lshift+0xa4>
 800d764:	f108 0602 	add.w	r6, r8, #2
 800d768:	3e01      	subs	r6, #1
 800d76a:	4638      	mov	r0, r7
 800d76c:	612e      	str	r6, [r5, #16]
 800d76e:	4621      	mov	r1, r4
 800d770:	f7ff fdda 	bl	800d328 <_Bfree>
 800d774:	4628      	mov	r0, r5
 800d776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d77a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d77e:	3301      	adds	r3, #1
 800d780:	e7c5      	b.n	800d70e <__lshift+0x4a>
 800d782:	3904      	subs	r1, #4
 800d784:	f853 2b04 	ldr.w	r2, [r3], #4
 800d788:	f841 2f04 	str.w	r2, [r1, #4]!
 800d78c:	459c      	cmp	ip, r3
 800d78e:	d8f9      	bhi.n	800d784 <__lshift+0xc0>
 800d790:	e7ea      	b.n	800d768 <__lshift+0xa4>
 800d792:	bf00      	nop
 800d794:	0800e644 	.word	0x0800e644
 800d798:	0800e655 	.word	0x0800e655

0800d79c <__mcmp>:
 800d79c:	690a      	ldr	r2, [r1, #16]
 800d79e:	4603      	mov	r3, r0
 800d7a0:	6900      	ldr	r0, [r0, #16]
 800d7a2:	1a80      	subs	r0, r0, r2
 800d7a4:	b530      	push	{r4, r5, lr}
 800d7a6:	d10e      	bne.n	800d7c6 <__mcmp+0x2a>
 800d7a8:	3314      	adds	r3, #20
 800d7aa:	3114      	adds	r1, #20
 800d7ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d7b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d7b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d7b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d7bc:	4295      	cmp	r5, r2
 800d7be:	d003      	beq.n	800d7c8 <__mcmp+0x2c>
 800d7c0:	d205      	bcs.n	800d7ce <__mcmp+0x32>
 800d7c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c6:	bd30      	pop	{r4, r5, pc}
 800d7c8:	42a3      	cmp	r3, r4
 800d7ca:	d3f3      	bcc.n	800d7b4 <__mcmp+0x18>
 800d7cc:	e7fb      	b.n	800d7c6 <__mcmp+0x2a>
 800d7ce:	2001      	movs	r0, #1
 800d7d0:	e7f9      	b.n	800d7c6 <__mcmp+0x2a>
	...

0800d7d4 <__mdiff>:
 800d7d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	4689      	mov	r9, r1
 800d7da:	4606      	mov	r6, r0
 800d7dc:	4611      	mov	r1, r2
 800d7de:	4648      	mov	r0, r9
 800d7e0:	4614      	mov	r4, r2
 800d7e2:	f7ff ffdb 	bl	800d79c <__mcmp>
 800d7e6:	1e05      	subs	r5, r0, #0
 800d7e8:	d112      	bne.n	800d810 <__mdiff+0x3c>
 800d7ea:	4629      	mov	r1, r5
 800d7ec:	4630      	mov	r0, r6
 800d7ee:	f7ff fd5b 	bl	800d2a8 <_Balloc>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	b928      	cbnz	r0, 800d802 <__mdiff+0x2e>
 800d7f6:	4b3f      	ldr	r3, [pc, #252]	@ (800d8f4 <__mdiff+0x120>)
 800d7f8:	f240 2137 	movw	r1, #567	@ 0x237
 800d7fc:	483e      	ldr	r0, [pc, #248]	@ (800d8f8 <__mdiff+0x124>)
 800d7fe:	f000 fb03 	bl	800de08 <__assert_func>
 800d802:	2301      	movs	r3, #1
 800d804:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d808:	4610      	mov	r0, r2
 800d80a:	b003      	add	sp, #12
 800d80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d810:	bfbc      	itt	lt
 800d812:	464b      	movlt	r3, r9
 800d814:	46a1      	movlt	r9, r4
 800d816:	4630      	mov	r0, r6
 800d818:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d81c:	bfba      	itte	lt
 800d81e:	461c      	movlt	r4, r3
 800d820:	2501      	movlt	r5, #1
 800d822:	2500      	movge	r5, #0
 800d824:	f7ff fd40 	bl	800d2a8 <_Balloc>
 800d828:	4602      	mov	r2, r0
 800d82a:	b918      	cbnz	r0, 800d834 <__mdiff+0x60>
 800d82c:	4b31      	ldr	r3, [pc, #196]	@ (800d8f4 <__mdiff+0x120>)
 800d82e:	f240 2145 	movw	r1, #581	@ 0x245
 800d832:	e7e3      	b.n	800d7fc <__mdiff+0x28>
 800d834:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d838:	6926      	ldr	r6, [r4, #16]
 800d83a:	60c5      	str	r5, [r0, #12]
 800d83c:	f109 0310 	add.w	r3, r9, #16
 800d840:	f109 0514 	add.w	r5, r9, #20
 800d844:	f104 0e14 	add.w	lr, r4, #20
 800d848:	f100 0b14 	add.w	fp, r0, #20
 800d84c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d850:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d854:	9301      	str	r3, [sp, #4]
 800d856:	46d9      	mov	r9, fp
 800d858:	f04f 0c00 	mov.w	ip, #0
 800d85c:	9b01      	ldr	r3, [sp, #4]
 800d85e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d862:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d866:	9301      	str	r3, [sp, #4]
 800d868:	fa1f f38a 	uxth.w	r3, sl
 800d86c:	4619      	mov	r1, r3
 800d86e:	b283      	uxth	r3, r0
 800d870:	1acb      	subs	r3, r1, r3
 800d872:	0c00      	lsrs	r0, r0, #16
 800d874:	4463      	add	r3, ip
 800d876:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d87a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d87e:	b29b      	uxth	r3, r3
 800d880:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d884:	4576      	cmp	r6, lr
 800d886:	f849 3b04 	str.w	r3, [r9], #4
 800d88a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d88e:	d8e5      	bhi.n	800d85c <__mdiff+0x88>
 800d890:	1b33      	subs	r3, r6, r4
 800d892:	3b15      	subs	r3, #21
 800d894:	f023 0303 	bic.w	r3, r3, #3
 800d898:	3415      	adds	r4, #21
 800d89a:	3304      	adds	r3, #4
 800d89c:	42a6      	cmp	r6, r4
 800d89e:	bf38      	it	cc
 800d8a0:	2304      	movcc	r3, #4
 800d8a2:	441d      	add	r5, r3
 800d8a4:	445b      	add	r3, fp
 800d8a6:	461e      	mov	r6, r3
 800d8a8:	462c      	mov	r4, r5
 800d8aa:	4544      	cmp	r4, r8
 800d8ac:	d30e      	bcc.n	800d8cc <__mdiff+0xf8>
 800d8ae:	f108 0103 	add.w	r1, r8, #3
 800d8b2:	1b49      	subs	r1, r1, r5
 800d8b4:	f021 0103 	bic.w	r1, r1, #3
 800d8b8:	3d03      	subs	r5, #3
 800d8ba:	45a8      	cmp	r8, r5
 800d8bc:	bf38      	it	cc
 800d8be:	2100      	movcc	r1, #0
 800d8c0:	440b      	add	r3, r1
 800d8c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d8c6:	b191      	cbz	r1, 800d8ee <__mdiff+0x11a>
 800d8c8:	6117      	str	r7, [r2, #16]
 800d8ca:	e79d      	b.n	800d808 <__mdiff+0x34>
 800d8cc:	f854 1b04 	ldr.w	r1, [r4], #4
 800d8d0:	46e6      	mov	lr, ip
 800d8d2:	0c08      	lsrs	r0, r1, #16
 800d8d4:	fa1c fc81 	uxtah	ip, ip, r1
 800d8d8:	4471      	add	r1, lr
 800d8da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d8de:	b289      	uxth	r1, r1
 800d8e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d8e4:	f846 1b04 	str.w	r1, [r6], #4
 800d8e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d8ec:	e7dd      	b.n	800d8aa <__mdiff+0xd6>
 800d8ee:	3f01      	subs	r7, #1
 800d8f0:	e7e7      	b.n	800d8c2 <__mdiff+0xee>
 800d8f2:	bf00      	nop
 800d8f4:	0800e644 	.word	0x0800e644
 800d8f8:	0800e655 	.word	0x0800e655

0800d8fc <__d2b>:
 800d8fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d900:	460f      	mov	r7, r1
 800d902:	2101      	movs	r1, #1
 800d904:	ec59 8b10 	vmov	r8, r9, d0
 800d908:	4616      	mov	r6, r2
 800d90a:	f7ff fccd 	bl	800d2a8 <_Balloc>
 800d90e:	4604      	mov	r4, r0
 800d910:	b930      	cbnz	r0, 800d920 <__d2b+0x24>
 800d912:	4602      	mov	r2, r0
 800d914:	4b23      	ldr	r3, [pc, #140]	@ (800d9a4 <__d2b+0xa8>)
 800d916:	4824      	ldr	r0, [pc, #144]	@ (800d9a8 <__d2b+0xac>)
 800d918:	f240 310f 	movw	r1, #783	@ 0x30f
 800d91c:	f000 fa74 	bl	800de08 <__assert_func>
 800d920:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d924:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d928:	b10d      	cbz	r5, 800d92e <__d2b+0x32>
 800d92a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d92e:	9301      	str	r3, [sp, #4]
 800d930:	f1b8 0300 	subs.w	r3, r8, #0
 800d934:	d023      	beq.n	800d97e <__d2b+0x82>
 800d936:	4668      	mov	r0, sp
 800d938:	9300      	str	r3, [sp, #0]
 800d93a:	f7ff fd7c 	bl	800d436 <__lo0bits>
 800d93e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d942:	b1d0      	cbz	r0, 800d97a <__d2b+0x7e>
 800d944:	f1c0 0320 	rsb	r3, r0, #32
 800d948:	fa02 f303 	lsl.w	r3, r2, r3
 800d94c:	430b      	orrs	r3, r1
 800d94e:	40c2      	lsrs	r2, r0
 800d950:	6163      	str	r3, [r4, #20]
 800d952:	9201      	str	r2, [sp, #4]
 800d954:	9b01      	ldr	r3, [sp, #4]
 800d956:	61a3      	str	r3, [r4, #24]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	bf0c      	ite	eq
 800d95c:	2201      	moveq	r2, #1
 800d95e:	2202      	movne	r2, #2
 800d960:	6122      	str	r2, [r4, #16]
 800d962:	b1a5      	cbz	r5, 800d98e <__d2b+0x92>
 800d964:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d968:	4405      	add	r5, r0
 800d96a:	603d      	str	r5, [r7, #0]
 800d96c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d970:	6030      	str	r0, [r6, #0]
 800d972:	4620      	mov	r0, r4
 800d974:	b003      	add	sp, #12
 800d976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d97a:	6161      	str	r1, [r4, #20]
 800d97c:	e7ea      	b.n	800d954 <__d2b+0x58>
 800d97e:	a801      	add	r0, sp, #4
 800d980:	f7ff fd59 	bl	800d436 <__lo0bits>
 800d984:	9b01      	ldr	r3, [sp, #4]
 800d986:	6163      	str	r3, [r4, #20]
 800d988:	3020      	adds	r0, #32
 800d98a:	2201      	movs	r2, #1
 800d98c:	e7e8      	b.n	800d960 <__d2b+0x64>
 800d98e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d992:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d996:	6038      	str	r0, [r7, #0]
 800d998:	6918      	ldr	r0, [r3, #16]
 800d99a:	f7ff fd2d 	bl	800d3f8 <__hi0bits>
 800d99e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d9a2:	e7e5      	b.n	800d970 <__d2b+0x74>
 800d9a4:	0800e644 	.word	0x0800e644
 800d9a8:	0800e655 	.word	0x0800e655

0800d9ac <__ssputs_r>:
 800d9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9b0:	688e      	ldr	r6, [r1, #8]
 800d9b2:	461f      	mov	r7, r3
 800d9b4:	42be      	cmp	r6, r7
 800d9b6:	680b      	ldr	r3, [r1, #0]
 800d9b8:	4682      	mov	sl, r0
 800d9ba:	460c      	mov	r4, r1
 800d9bc:	4690      	mov	r8, r2
 800d9be:	d82d      	bhi.n	800da1c <__ssputs_r+0x70>
 800d9c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d9c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d9c8:	d026      	beq.n	800da18 <__ssputs_r+0x6c>
 800d9ca:	6965      	ldr	r5, [r4, #20]
 800d9cc:	6909      	ldr	r1, [r1, #16]
 800d9ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9d2:	eba3 0901 	sub.w	r9, r3, r1
 800d9d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9da:	1c7b      	adds	r3, r7, #1
 800d9dc:	444b      	add	r3, r9
 800d9de:	106d      	asrs	r5, r5, #1
 800d9e0:	429d      	cmp	r5, r3
 800d9e2:	bf38      	it	cc
 800d9e4:	461d      	movcc	r5, r3
 800d9e6:	0553      	lsls	r3, r2, #21
 800d9e8:	d527      	bpl.n	800da3a <__ssputs_r+0x8e>
 800d9ea:	4629      	mov	r1, r5
 800d9ec:	f7ff fbd0 	bl	800d190 <_malloc_r>
 800d9f0:	4606      	mov	r6, r0
 800d9f2:	b360      	cbz	r0, 800da4e <__ssputs_r+0xa2>
 800d9f4:	6921      	ldr	r1, [r4, #16]
 800d9f6:	464a      	mov	r2, r9
 800d9f8:	f7fe fcfb 	bl	800c3f2 <memcpy>
 800d9fc:	89a3      	ldrh	r3, [r4, #12]
 800d9fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da06:	81a3      	strh	r3, [r4, #12]
 800da08:	6126      	str	r6, [r4, #16]
 800da0a:	6165      	str	r5, [r4, #20]
 800da0c:	444e      	add	r6, r9
 800da0e:	eba5 0509 	sub.w	r5, r5, r9
 800da12:	6026      	str	r6, [r4, #0]
 800da14:	60a5      	str	r5, [r4, #8]
 800da16:	463e      	mov	r6, r7
 800da18:	42be      	cmp	r6, r7
 800da1a:	d900      	bls.n	800da1e <__ssputs_r+0x72>
 800da1c:	463e      	mov	r6, r7
 800da1e:	6820      	ldr	r0, [r4, #0]
 800da20:	4632      	mov	r2, r6
 800da22:	4641      	mov	r1, r8
 800da24:	f000 f9c6 	bl	800ddb4 <memmove>
 800da28:	68a3      	ldr	r3, [r4, #8]
 800da2a:	1b9b      	subs	r3, r3, r6
 800da2c:	60a3      	str	r3, [r4, #8]
 800da2e:	6823      	ldr	r3, [r4, #0]
 800da30:	4433      	add	r3, r6
 800da32:	6023      	str	r3, [r4, #0]
 800da34:	2000      	movs	r0, #0
 800da36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da3a:	462a      	mov	r2, r5
 800da3c:	f000 fa28 	bl	800de90 <_realloc_r>
 800da40:	4606      	mov	r6, r0
 800da42:	2800      	cmp	r0, #0
 800da44:	d1e0      	bne.n	800da08 <__ssputs_r+0x5c>
 800da46:	6921      	ldr	r1, [r4, #16]
 800da48:	4650      	mov	r0, sl
 800da4a:	f7ff fb2d 	bl	800d0a8 <_free_r>
 800da4e:	230c      	movs	r3, #12
 800da50:	f8ca 3000 	str.w	r3, [sl]
 800da54:	89a3      	ldrh	r3, [r4, #12]
 800da56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da5a:	81a3      	strh	r3, [r4, #12]
 800da5c:	f04f 30ff 	mov.w	r0, #4294967295
 800da60:	e7e9      	b.n	800da36 <__ssputs_r+0x8a>
	...

0800da64 <_svfiprintf_r>:
 800da64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da68:	4698      	mov	r8, r3
 800da6a:	898b      	ldrh	r3, [r1, #12]
 800da6c:	061b      	lsls	r3, r3, #24
 800da6e:	b09d      	sub	sp, #116	@ 0x74
 800da70:	4607      	mov	r7, r0
 800da72:	460d      	mov	r5, r1
 800da74:	4614      	mov	r4, r2
 800da76:	d510      	bpl.n	800da9a <_svfiprintf_r+0x36>
 800da78:	690b      	ldr	r3, [r1, #16]
 800da7a:	b973      	cbnz	r3, 800da9a <_svfiprintf_r+0x36>
 800da7c:	2140      	movs	r1, #64	@ 0x40
 800da7e:	f7ff fb87 	bl	800d190 <_malloc_r>
 800da82:	6028      	str	r0, [r5, #0]
 800da84:	6128      	str	r0, [r5, #16]
 800da86:	b930      	cbnz	r0, 800da96 <_svfiprintf_r+0x32>
 800da88:	230c      	movs	r3, #12
 800da8a:	603b      	str	r3, [r7, #0]
 800da8c:	f04f 30ff 	mov.w	r0, #4294967295
 800da90:	b01d      	add	sp, #116	@ 0x74
 800da92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da96:	2340      	movs	r3, #64	@ 0x40
 800da98:	616b      	str	r3, [r5, #20]
 800da9a:	2300      	movs	r3, #0
 800da9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800da9e:	2320      	movs	r3, #32
 800daa0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800daa4:	f8cd 800c 	str.w	r8, [sp, #12]
 800daa8:	2330      	movs	r3, #48	@ 0x30
 800daaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dc48 <_svfiprintf_r+0x1e4>
 800daae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dab2:	f04f 0901 	mov.w	r9, #1
 800dab6:	4623      	mov	r3, r4
 800dab8:	469a      	mov	sl, r3
 800daba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dabe:	b10a      	cbz	r2, 800dac4 <_svfiprintf_r+0x60>
 800dac0:	2a25      	cmp	r2, #37	@ 0x25
 800dac2:	d1f9      	bne.n	800dab8 <_svfiprintf_r+0x54>
 800dac4:	ebba 0b04 	subs.w	fp, sl, r4
 800dac8:	d00b      	beq.n	800dae2 <_svfiprintf_r+0x7e>
 800daca:	465b      	mov	r3, fp
 800dacc:	4622      	mov	r2, r4
 800dace:	4629      	mov	r1, r5
 800dad0:	4638      	mov	r0, r7
 800dad2:	f7ff ff6b 	bl	800d9ac <__ssputs_r>
 800dad6:	3001      	adds	r0, #1
 800dad8:	f000 80a7 	beq.w	800dc2a <_svfiprintf_r+0x1c6>
 800dadc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dade:	445a      	add	r2, fp
 800dae0:	9209      	str	r2, [sp, #36]	@ 0x24
 800dae2:	f89a 3000 	ldrb.w	r3, [sl]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f000 809f 	beq.w	800dc2a <_svfiprintf_r+0x1c6>
 800daec:	2300      	movs	r3, #0
 800daee:	f04f 32ff 	mov.w	r2, #4294967295
 800daf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daf6:	f10a 0a01 	add.w	sl, sl, #1
 800dafa:	9304      	str	r3, [sp, #16]
 800dafc:	9307      	str	r3, [sp, #28]
 800dafe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db02:	931a      	str	r3, [sp, #104]	@ 0x68
 800db04:	4654      	mov	r4, sl
 800db06:	2205      	movs	r2, #5
 800db08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db0c:	484e      	ldr	r0, [pc, #312]	@ (800dc48 <_svfiprintf_r+0x1e4>)
 800db0e:	f7f2 fb5f 	bl	80001d0 <memchr>
 800db12:	9a04      	ldr	r2, [sp, #16]
 800db14:	b9d8      	cbnz	r0, 800db4e <_svfiprintf_r+0xea>
 800db16:	06d0      	lsls	r0, r2, #27
 800db18:	bf44      	itt	mi
 800db1a:	2320      	movmi	r3, #32
 800db1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db20:	0711      	lsls	r1, r2, #28
 800db22:	bf44      	itt	mi
 800db24:	232b      	movmi	r3, #43	@ 0x2b
 800db26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db2a:	f89a 3000 	ldrb.w	r3, [sl]
 800db2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800db30:	d015      	beq.n	800db5e <_svfiprintf_r+0xfa>
 800db32:	9a07      	ldr	r2, [sp, #28]
 800db34:	4654      	mov	r4, sl
 800db36:	2000      	movs	r0, #0
 800db38:	f04f 0c0a 	mov.w	ip, #10
 800db3c:	4621      	mov	r1, r4
 800db3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db42:	3b30      	subs	r3, #48	@ 0x30
 800db44:	2b09      	cmp	r3, #9
 800db46:	d94b      	bls.n	800dbe0 <_svfiprintf_r+0x17c>
 800db48:	b1b0      	cbz	r0, 800db78 <_svfiprintf_r+0x114>
 800db4a:	9207      	str	r2, [sp, #28]
 800db4c:	e014      	b.n	800db78 <_svfiprintf_r+0x114>
 800db4e:	eba0 0308 	sub.w	r3, r0, r8
 800db52:	fa09 f303 	lsl.w	r3, r9, r3
 800db56:	4313      	orrs	r3, r2
 800db58:	9304      	str	r3, [sp, #16]
 800db5a:	46a2      	mov	sl, r4
 800db5c:	e7d2      	b.n	800db04 <_svfiprintf_r+0xa0>
 800db5e:	9b03      	ldr	r3, [sp, #12]
 800db60:	1d19      	adds	r1, r3, #4
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	9103      	str	r1, [sp, #12]
 800db66:	2b00      	cmp	r3, #0
 800db68:	bfbb      	ittet	lt
 800db6a:	425b      	neglt	r3, r3
 800db6c:	f042 0202 	orrlt.w	r2, r2, #2
 800db70:	9307      	strge	r3, [sp, #28]
 800db72:	9307      	strlt	r3, [sp, #28]
 800db74:	bfb8      	it	lt
 800db76:	9204      	strlt	r2, [sp, #16]
 800db78:	7823      	ldrb	r3, [r4, #0]
 800db7a:	2b2e      	cmp	r3, #46	@ 0x2e
 800db7c:	d10a      	bne.n	800db94 <_svfiprintf_r+0x130>
 800db7e:	7863      	ldrb	r3, [r4, #1]
 800db80:	2b2a      	cmp	r3, #42	@ 0x2a
 800db82:	d132      	bne.n	800dbea <_svfiprintf_r+0x186>
 800db84:	9b03      	ldr	r3, [sp, #12]
 800db86:	1d1a      	adds	r2, r3, #4
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	9203      	str	r2, [sp, #12]
 800db8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db90:	3402      	adds	r4, #2
 800db92:	9305      	str	r3, [sp, #20]
 800db94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dc58 <_svfiprintf_r+0x1f4>
 800db98:	7821      	ldrb	r1, [r4, #0]
 800db9a:	2203      	movs	r2, #3
 800db9c:	4650      	mov	r0, sl
 800db9e:	f7f2 fb17 	bl	80001d0 <memchr>
 800dba2:	b138      	cbz	r0, 800dbb4 <_svfiprintf_r+0x150>
 800dba4:	9b04      	ldr	r3, [sp, #16]
 800dba6:	eba0 000a 	sub.w	r0, r0, sl
 800dbaa:	2240      	movs	r2, #64	@ 0x40
 800dbac:	4082      	lsls	r2, r0
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	3401      	adds	r4, #1
 800dbb2:	9304      	str	r3, [sp, #16]
 800dbb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbb8:	4824      	ldr	r0, [pc, #144]	@ (800dc4c <_svfiprintf_r+0x1e8>)
 800dbba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dbbe:	2206      	movs	r2, #6
 800dbc0:	f7f2 fb06 	bl	80001d0 <memchr>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d036      	beq.n	800dc36 <_svfiprintf_r+0x1d2>
 800dbc8:	4b21      	ldr	r3, [pc, #132]	@ (800dc50 <_svfiprintf_r+0x1ec>)
 800dbca:	bb1b      	cbnz	r3, 800dc14 <_svfiprintf_r+0x1b0>
 800dbcc:	9b03      	ldr	r3, [sp, #12]
 800dbce:	3307      	adds	r3, #7
 800dbd0:	f023 0307 	bic.w	r3, r3, #7
 800dbd4:	3308      	adds	r3, #8
 800dbd6:	9303      	str	r3, [sp, #12]
 800dbd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbda:	4433      	add	r3, r6
 800dbdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbde:	e76a      	b.n	800dab6 <_svfiprintf_r+0x52>
 800dbe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbe4:	460c      	mov	r4, r1
 800dbe6:	2001      	movs	r0, #1
 800dbe8:	e7a8      	b.n	800db3c <_svfiprintf_r+0xd8>
 800dbea:	2300      	movs	r3, #0
 800dbec:	3401      	adds	r4, #1
 800dbee:	9305      	str	r3, [sp, #20]
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	f04f 0c0a 	mov.w	ip, #10
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbfc:	3a30      	subs	r2, #48	@ 0x30
 800dbfe:	2a09      	cmp	r2, #9
 800dc00:	d903      	bls.n	800dc0a <_svfiprintf_r+0x1a6>
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d0c6      	beq.n	800db94 <_svfiprintf_r+0x130>
 800dc06:	9105      	str	r1, [sp, #20]
 800dc08:	e7c4      	b.n	800db94 <_svfiprintf_r+0x130>
 800dc0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc0e:	4604      	mov	r4, r0
 800dc10:	2301      	movs	r3, #1
 800dc12:	e7f0      	b.n	800dbf6 <_svfiprintf_r+0x192>
 800dc14:	ab03      	add	r3, sp, #12
 800dc16:	9300      	str	r3, [sp, #0]
 800dc18:	462a      	mov	r2, r5
 800dc1a:	4b0e      	ldr	r3, [pc, #56]	@ (800dc54 <_svfiprintf_r+0x1f0>)
 800dc1c:	a904      	add	r1, sp, #16
 800dc1e:	4638      	mov	r0, r7
 800dc20:	f7fd fe72 	bl	800b908 <_printf_float>
 800dc24:	1c42      	adds	r2, r0, #1
 800dc26:	4606      	mov	r6, r0
 800dc28:	d1d6      	bne.n	800dbd8 <_svfiprintf_r+0x174>
 800dc2a:	89ab      	ldrh	r3, [r5, #12]
 800dc2c:	065b      	lsls	r3, r3, #25
 800dc2e:	f53f af2d 	bmi.w	800da8c <_svfiprintf_r+0x28>
 800dc32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc34:	e72c      	b.n	800da90 <_svfiprintf_r+0x2c>
 800dc36:	ab03      	add	r3, sp, #12
 800dc38:	9300      	str	r3, [sp, #0]
 800dc3a:	462a      	mov	r2, r5
 800dc3c:	4b05      	ldr	r3, [pc, #20]	@ (800dc54 <_svfiprintf_r+0x1f0>)
 800dc3e:	a904      	add	r1, sp, #16
 800dc40:	4638      	mov	r0, r7
 800dc42:	f7fe f8f9 	bl	800be38 <_printf_i>
 800dc46:	e7ed      	b.n	800dc24 <_svfiprintf_r+0x1c0>
 800dc48:	0800e7b0 	.word	0x0800e7b0
 800dc4c:	0800e7ba 	.word	0x0800e7ba
 800dc50:	0800b909 	.word	0x0800b909
 800dc54:	0800d9ad 	.word	0x0800d9ad
 800dc58:	0800e7b6 	.word	0x0800e7b6

0800dc5c <__sflush_r>:
 800dc5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc64:	0716      	lsls	r6, r2, #28
 800dc66:	4605      	mov	r5, r0
 800dc68:	460c      	mov	r4, r1
 800dc6a:	d454      	bmi.n	800dd16 <__sflush_r+0xba>
 800dc6c:	684b      	ldr	r3, [r1, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	dc02      	bgt.n	800dc78 <__sflush_r+0x1c>
 800dc72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	dd48      	ble.n	800dd0a <__sflush_r+0xae>
 800dc78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc7a:	2e00      	cmp	r6, #0
 800dc7c:	d045      	beq.n	800dd0a <__sflush_r+0xae>
 800dc7e:	2300      	movs	r3, #0
 800dc80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dc84:	682f      	ldr	r7, [r5, #0]
 800dc86:	6a21      	ldr	r1, [r4, #32]
 800dc88:	602b      	str	r3, [r5, #0]
 800dc8a:	d030      	beq.n	800dcee <__sflush_r+0x92>
 800dc8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dc8e:	89a3      	ldrh	r3, [r4, #12]
 800dc90:	0759      	lsls	r1, r3, #29
 800dc92:	d505      	bpl.n	800dca0 <__sflush_r+0x44>
 800dc94:	6863      	ldr	r3, [r4, #4]
 800dc96:	1ad2      	subs	r2, r2, r3
 800dc98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dc9a:	b10b      	cbz	r3, 800dca0 <__sflush_r+0x44>
 800dc9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dc9e:	1ad2      	subs	r2, r2, r3
 800dca0:	2300      	movs	r3, #0
 800dca2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dca4:	6a21      	ldr	r1, [r4, #32]
 800dca6:	4628      	mov	r0, r5
 800dca8:	47b0      	blx	r6
 800dcaa:	1c43      	adds	r3, r0, #1
 800dcac:	89a3      	ldrh	r3, [r4, #12]
 800dcae:	d106      	bne.n	800dcbe <__sflush_r+0x62>
 800dcb0:	6829      	ldr	r1, [r5, #0]
 800dcb2:	291d      	cmp	r1, #29
 800dcb4:	d82b      	bhi.n	800dd0e <__sflush_r+0xb2>
 800dcb6:	4a2a      	ldr	r2, [pc, #168]	@ (800dd60 <__sflush_r+0x104>)
 800dcb8:	410a      	asrs	r2, r1
 800dcba:	07d6      	lsls	r6, r2, #31
 800dcbc:	d427      	bmi.n	800dd0e <__sflush_r+0xb2>
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	6062      	str	r2, [r4, #4]
 800dcc2:	04d9      	lsls	r1, r3, #19
 800dcc4:	6922      	ldr	r2, [r4, #16]
 800dcc6:	6022      	str	r2, [r4, #0]
 800dcc8:	d504      	bpl.n	800dcd4 <__sflush_r+0x78>
 800dcca:	1c42      	adds	r2, r0, #1
 800dccc:	d101      	bne.n	800dcd2 <__sflush_r+0x76>
 800dcce:	682b      	ldr	r3, [r5, #0]
 800dcd0:	b903      	cbnz	r3, 800dcd4 <__sflush_r+0x78>
 800dcd2:	6560      	str	r0, [r4, #84]	@ 0x54
 800dcd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dcd6:	602f      	str	r7, [r5, #0]
 800dcd8:	b1b9      	cbz	r1, 800dd0a <__sflush_r+0xae>
 800dcda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dcde:	4299      	cmp	r1, r3
 800dce0:	d002      	beq.n	800dce8 <__sflush_r+0x8c>
 800dce2:	4628      	mov	r0, r5
 800dce4:	f7ff f9e0 	bl	800d0a8 <_free_r>
 800dce8:	2300      	movs	r3, #0
 800dcea:	6363      	str	r3, [r4, #52]	@ 0x34
 800dcec:	e00d      	b.n	800dd0a <__sflush_r+0xae>
 800dcee:	2301      	movs	r3, #1
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	47b0      	blx	r6
 800dcf4:	4602      	mov	r2, r0
 800dcf6:	1c50      	adds	r0, r2, #1
 800dcf8:	d1c9      	bne.n	800dc8e <__sflush_r+0x32>
 800dcfa:	682b      	ldr	r3, [r5, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d0c6      	beq.n	800dc8e <__sflush_r+0x32>
 800dd00:	2b1d      	cmp	r3, #29
 800dd02:	d001      	beq.n	800dd08 <__sflush_r+0xac>
 800dd04:	2b16      	cmp	r3, #22
 800dd06:	d11e      	bne.n	800dd46 <__sflush_r+0xea>
 800dd08:	602f      	str	r7, [r5, #0]
 800dd0a:	2000      	movs	r0, #0
 800dd0c:	e022      	b.n	800dd54 <__sflush_r+0xf8>
 800dd0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd12:	b21b      	sxth	r3, r3
 800dd14:	e01b      	b.n	800dd4e <__sflush_r+0xf2>
 800dd16:	690f      	ldr	r7, [r1, #16]
 800dd18:	2f00      	cmp	r7, #0
 800dd1a:	d0f6      	beq.n	800dd0a <__sflush_r+0xae>
 800dd1c:	0793      	lsls	r3, r2, #30
 800dd1e:	680e      	ldr	r6, [r1, #0]
 800dd20:	bf08      	it	eq
 800dd22:	694b      	ldreq	r3, [r1, #20]
 800dd24:	600f      	str	r7, [r1, #0]
 800dd26:	bf18      	it	ne
 800dd28:	2300      	movne	r3, #0
 800dd2a:	eba6 0807 	sub.w	r8, r6, r7
 800dd2e:	608b      	str	r3, [r1, #8]
 800dd30:	f1b8 0f00 	cmp.w	r8, #0
 800dd34:	dde9      	ble.n	800dd0a <__sflush_r+0xae>
 800dd36:	6a21      	ldr	r1, [r4, #32]
 800dd38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dd3a:	4643      	mov	r3, r8
 800dd3c:	463a      	mov	r2, r7
 800dd3e:	4628      	mov	r0, r5
 800dd40:	47b0      	blx	r6
 800dd42:	2800      	cmp	r0, #0
 800dd44:	dc08      	bgt.n	800dd58 <__sflush_r+0xfc>
 800dd46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd4e:	81a3      	strh	r3, [r4, #12]
 800dd50:	f04f 30ff 	mov.w	r0, #4294967295
 800dd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd58:	4407      	add	r7, r0
 800dd5a:	eba8 0800 	sub.w	r8, r8, r0
 800dd5e:	e7e7      	b.n	800dd30 <__sflush_r+0xd4>
 800dd60:	dfbffffe 	.word	0xdfbffffe

0800dd64 <_fflush_r>:
 800dd64:	b538      	push	{r3, r4, r5, lr}
 800dd66:	690b      	ldr	r3, [r1, #16]
 800dd68:	4605      	mov	r5, r0
 800dd6a:	460c      	mov	r4, r1
 800dd6c:	b913      	cbnz	r3, 800dd74 <_fflush_r+0x10>
 800dd6e:	2500      	movs	r5, #0
 800dd70:	4628      	mov	r0, r5
 800dd72:	bd38      	pop	{r3, r4, r5, pc}
 800dd74:	b118      	cbz	r0, 800dd7e <_fflush_r+0x1a>
 800dd76:	6a03      	ldr	r3, [r0, #32]
 800dd78:	b90b      	cbnz	r3, 800dd7e <_fflush_r+0x1a>
 800dd7a:	f7fe fa09 	bl	800c190 <__sinit>
 800dd7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d0f3      	beq.n	800dd6e <_fflush_r+0xa>
 800dd86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dd88:	07d0      	lsls	r0, r2, #31
 800dd8a:	d404      	bmi.n	800dd96 <_fflush_r+0x32>
 800dd8c:	0599      	lsls	r1, r3, #22
 800dd8e:	d402      	bmi.n	800dd96 <_fflush_r+0x32>
 800dd90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd92:	f7fe fb2c 	bl	800c3ee <__retarget_lock_acquire_recursive>
 800dd96:	4628      	mov	r0, r5
 800dd98:	4621      	mov	r1, r4
 800dd9a:	f7ff ff5f 	bl	800dc5c <__sflush_r>
 800dd9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dda0:	07da      	lsls	r2, r3, #31
 800dda2:	4605      	mov	r5, r0
 800dda4:	d4e4      	bmi.n	800dd70 <_fflush_r+0xc>
 800dda6:	89a3      	ldrh	r3, [r4, #12]
 800dda8:	059b      	lsls	r3, r3, #22
 800ddaa:	d4e1      	bmi.n	800dd70 <_fflush_r+0xc>
 800ddac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddae:	f7fe fb1f 	bl	800c3f0 <__retarget_lock_release_recursive>
 800ddb2:	e7dd      	b.n	800dd70 <_fflush_r+0xc>

0800ddb4 <memmove>:
 800ddb4:	4288      	cmp	r0, r1
 800ddb6:	b510      	push	{r4, lr}
 800ddb8:	eb01 0402 	add.w	r4, r1, r2
 800ddbc:	d902      	bls.n	800ddc4 <memmove+0x10>
 800ddbe:	4284      	cmp	r4, r0
 800ddc0:	4623      	mov	r3, r4
 800ddc2:	d807      	bhi.n	800ddd4 <memmove+0x20>
 800ddc4:	1e43      	subs	r3, r0, #1
 800ddc6:	42a1      	cmp	r1, r4
 800ddc8:	d008      	beq.n	800dddc <memmove+0x28>
 800ddca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ddce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ddd2:	e7f8      	b.n	800ddc6 <memmove+0x12>
 800ddd4:	4402      	add	r2, r0
 800ddd6:	4601      	mov	r1, r0
 800ddd8:	428a      	cmp	r2, r1
 800ddda:	d100      	bne.n	800ddde <memmove+0x2a>
 800dddc:	bd10      	pop	{r4, pc}
 800ddde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dde2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dde6:	e7f7      	b.n	800ddd8 <memmove+0x24>

0800dde8 <_sbrk_r>:
 800dde8:	b538      	push	{r3, r4, r5, lr}
 800ddea:	4d06      	ldr	r5, [pc, #24]	@ (800de04 <_sbrk_r+0x1c>)
 800ddec:	2300      	movs	r3, #0
 800ddee:	4604      	mov	r4, r0
 800ddf0:	4608      	mov	r0, r1
 800ddf2:	602b      	str	r3, [r5, #0]
 800ddf4:	f7f4 fa6c 	bl	80022d0 <_sbrk>
 800ddf8:	1c43      	adds	r3, r0, #1
 800ddfa:	d102      	bne.n	800de02 <_sbrk_r+0x1a>
 800ddfc:	682b      	ldr	r3, [r5, #0]
 800ddfe:	b103      	cbz	r3, 800de02 <_sbrk_r+0x1a>
 800de00:	6023      	str	r3, [r4, #0]
 800de02:	bd38      	pop	{r3, r4, r5, pc}
 800de04:	200026e0 	.word	0x200026e0

0800de08 <__assert_func>:
 800de08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de0a:	4614      	mov	r4, r2
 800de0c:	461a      	mov	r2, r3
 800de0e:	4b09      	ldr	r3, [pc, #36]	@ (800de34 <__assert_func+0x2c>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4605      	mov	r5, r0
 800de14:	68d8      	ldr	r0, [r3, #12]
 800de16:	b954      	cbnz	r4, 800de2e <__assert_func+0x26>
 800de18:	4b07      	ldr	r3, [pc, #28]	@ (800de38 <__assert_func+0x30>)
 800de1a:	461c      	mov	r4, r3
 800de1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de20:	9100      	str	r1, [sp, #0]
 800de22:	462b      	mov	r3, r5
 800de24:	4905      	ldr	r1, [pc, #20]	@ (800de3c <__assert_func+0x34>)
 800de26:	f000 f86f 	bl	800df08 <fiprintf>
 800de2a:	f000 f87f 	bl	800df2c <abort>
 800de2e:	4b04      	ldr	r3, [pc, #16]	@ (800de40 <__assert_func+0x38>)
 800de30:	e7f4      	b.n	800de1c <__assert_func+0x14>
 800de32:	bf00      	nop
 800de34:	2000001c 	.word	0x2000001c
 800de38:	0800e806 	.word	0x0800e806
 800de3c:	0800e7d8 	.word	0x0800e7d8
 800de40:	0800e7cb 	.word	0x0800e7cb

0800de44 <_calloc_r>:
 800de44:	b570      	push	{r4, r5, r6, lr}
 800de46:	fba1 5402 	umull	r5, r4, r1, r2
 800de4a:	b93c      	cbnz	r4, 800de5c <_calloc_r+0x18>
 800de4c:	4629      	mov	r1, r5
 800de4e:	f7ff f99f 	bl	800d190 <_malloc_r>
 800de52:	4606      	mov	r6, r0
 800de54:	b928      	cbnz	r0, 800de62 <_calloc_r+0x1e>
 800de56:	2600      	movs	r6, #0
 800de58:	4630      	mov	r0, r6
 800de5a:	bd70      	pop	{r4, r5, r6, pc}
 800de5c:	220c      	movs	r2, #12
 800de5e:	6002      	str	r2, [r0, #0]
 800de60:	e7f9      	b.n	800de56 <_calloc_r+0x12>
 800de62:	462a      	mov	r2, r5
 800de64:	4621      	mov	r1, r4
 800de66:	f7fe fa45 	bl	800c2f4 <memset>
 800de6a:	e7f5      	b.n	800de58 <_calloc_r+0x14>

0800de6c <__ascii_mbtowc>:
 800de6c:	b082      	sub	sp, #8
 800de6e:	b901      	cbnz	r1, 800de72 <__ascii_mbtowc+0x6>
 800de70:	a901      	add	r1, sp, #4
 800de72:	b142      	cbz	r2, 800de86 <__ascii_mbtowc+0x1a>
 800de74:	b14b      	cbz	r3, 800de8a <__ascii_mbtowc+0x1e>
 800de76:	7813      	ldrb	r3, [r2, #0]
 800de78:	600b      	str	r3, [r1, #0]
 800de7a:	7812      	ldrb	r2, [r2, #0]
 800de7c:	1e10      	subs	r0, r2, #0
 800de7e:	bf18      	it	ne
 800de80:	2001      	movne	r0, #1
 800de82:	b002      	add	sp, #8
 800de84:	4770      	bx	lr
 800de86:	4610      	mov	r0, r2
 800de88:	e7fb      	b.n	800de82 <__ascii_mbtowc+0x16>
 800de8a:	f06f 0001 	mvn.w	r0, #1
 800de8e:	e7f8      	b.n	800de82 <__ascii_mbtowc+0x16>

0800de90 <_realloc_r>:
 800de90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de94:	4680      	mov	r8, r0
 800de96:	4615      	mov	r5, r2
 800de98:	460c      	mov	r4, r1
 800de9a:	b921      	cbnz	r1, 800dea6 <_realloc_r+0x16>
 800de9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dea0:	4611      	mov	r1, r2
 800dea2:	f7ff b975 	b.w	800d190 <_malloc_r>
 800dea6:	b92a      	cbnz	r2, 800deb4 <_realloc_r+0x24>
 800dea8:	f7ff f8fe 	bl	800d0a8 <_free_r>
 800deac:	2400      	movs	r4, #0
 800deae:	4620      	mov	r0, r4
 800deb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deb4:	f000 f841 	bl	800df3a <_malloc_usable_size_r>
 800deb8:	4285      	cmp	r5, r0
 800deba:	4606      	mov	r6, r0
 800debc:	d802      	bhi.n	800dec4 <_realloc_r+0x34>
 800debe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dec2:	d8f4      	bhi.n	800deae <_realloc_r+0x1e>
 800dec4:	4629      	mov	r1, r5
 800dec6:	4640      	mov	r0, r8
 800dec8:	f7ff f962 	bl	800d190 <_malloc_r>
 800decc:	4607      	mov	r7, r0
 800dece:	2800      	cmp	r0, #0
 800ded0:	d0ec      	beq.n	800deac <_realloc_r+0x1c>
 800ded2:	42b5      	cmp	r5, r6
 800ded4:	462a      	mov	r2, r5
 800ded6:	4621      	mov	r1, r4
 800ded8:	bf28      	it	cs
 800deda:	4632      	movcs	r2, r6
 800dedc:	f7fe fa89 	bl	800c3f2 <memcpy>
 800dee0:	4621      	mov	r1, r4
 800dee2:	4640      	mov	r0, r8
 800dee4:	f7ff f8e0 	bl	800d0a8 <_free_r>
 800dee8:	463c      	mov	r4, r7
 800deea:	e7e0      	b.n	800deae <_realloc_r+0x1e>

0800deec <__ascii_wctomb>:
 800deec:	4603      	mov	r3, r0
 800deee:	4608      	mov	r0, r1
 800def0:	b141      	cbz	r1, 800df04 <__ascii_wctomb+0x18>
 800def2:	2aff      	cmp	r2, #255	@ 0xff
 800def4:	d904      	bls.n	800df00 <__ascii_wctomb+0x14>
 800def6:	228a      	movs	r2, #138	@ 0x8a
 800def8:	601a      	str	r2, [r3, #0]
 800defa:	f04f 30ff 	mov.w	r0, #4294967295
 800defe:	4770      	bx	lr
 800df00:	700a      	strb	r2, [r1, #0]
 800df02:	2001      	movs	r0, #1
 800df04:	4770      	bx	lr
	...

0800df08 <fiprintf>:
 800df08:	b40e      	push	{r1, r2, r3}
 800df0a:	b503      	push	{r0, r1, lr}
 800df0c:	4601      	mov	r1, r0
 800df0e:	ab03      	add	r3, sp, #12
 800df10:	4805      	ldr	r0, [pc, #20]	@ (800df28 <fiprintf+0x20>)
 800df12:	f853 2b04 	ldr.w	r2, [r3], #4
 800df16:	6800      	ldr	r0, [r0, #0]
 800df18:	9301      	str	r3, [sp, #4]
 800df1a:	f000 f83f 	bl	800df9c <_vfiprintf_r>
 800df1e:	b002      	add	sp, #8
 800df20:	f85d eb04 	ldr.w	lr, [sp], #4
 800df24:	b003      	add	sp, #12
 800df26:	4770      	bx	lr
 800df28:	2000001c 	.word	0x2000001c

0800df2c <abort>:
 800df2c:	b508      	push	{r3, lr}
 800df2e:	2006      	movs	r0, #6
 800df30:	f000 fa08 	bl	800e344 <raise>
 800df34:	2001      	movs	r0, #1
 800df36:	f7f4 f953 	bl	80021e0 <_exit>

0800df3a <_malloc_usable_size_r>:
 800df3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df3e:	1f18      	subs	r0, r3, #4
 800df40:	2b00      	cmp	r3, #0
 800df42:	bfbc      	itt	lt
 800df44:	580b      	ldrlt	r3, [r1, r0]
 800df46:	18c0      	addlt	r0, r0, r3
 800df48:	4770      	bx	lr

0800df4a <__sfputc_r>:
 800df4a:	6893      	ldr	r3, [r2, #8]
 800df4c:	3b01      	subs	r3, #1
 800df4e:	2b00      	cmp	r3, #0
 800df50:	b410      	push	{r4}
 800df52:	6093      	str	r3, [r2, #8]
 800df54:	da08      	bge.n	800df68 <__sfputc_r+0x1e>
 800df56:	6994      	ldr	r4, [r2, #24]
 800df58:	42a3      	cmp	r3, r4
 800df5a:	db01      	blt.n	800df60 <__sfputc_r+0x16>
 800df5c:	290a      	cmp	r1, #10
 800df5e:	d103      	bne.n	800df68 <__sfputc_r+0x1e>
 800df60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df64:	f000 b932 	b.w	800e1cc <__swbuf_r>
 800df68:	6813      	ldr	r3, [r2, #0]
 800df6a:	1c58      	adds	r0, r3, #1
 800df6c:	6010      	str	r0, [r2, #0]
 800df6e:	7019      	strb	r1, [r3, #0]
 800df70:	4608      	mov	r0, r1
 800df72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df76:	4770      	bx	lr

0800df78 <__sfputs_r>:
 800df78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df7a:	4606      	mov	r6, r0
 800df7c:	460f      	mov	r7, r1
 800df7e:	4614      	mov	r4, r2
 800df80:	18d5      	adds	r5, r2, r3
 800df82:	42ac      	cmp	r4, r5
 800df84:	d101      	bne.n	800df8a <__sfputs_r+0x12>
 800df86:	2000      	movs	r0, #0
 800df88:	e007      	b.n	800df9a <__sfputs_r+0x22>
 800df8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df8e:	463a      	mov	r2, r7
 800df90:	4630      	mov	r0, r6
 800df92:	f7ff ffda 	bl	800df4a <__sfputc_r>
 800df96:	1c43      	adds	r3, r0, #1
 800df98:	d1f3      	bne.n	800df82 <__sfputs_r+0xa>
 800df9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df9c <_vfiprintf_r>:
 800df9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa0:	460d      	mov	r5, r1
 800dfa2:	b09d      	sub	sp, #116	@ 0x74
 800dfa4:	4614      	mov	r4, r2
 800dfa6:	4698      	mov	r8, r3
 800dfa8:	4606      	mov	r6, r0
 800dfaa:	b118      	cbz	r0, 800dfb4 <_vfiprintf_r+0x18>
 800dfac:	6a03      	ldr	r3, [r0, #32]
 800dfae:	b90b      	cbnz	r3, 800dfb4 <_vfiprintf_r+0x18>
 800dfb0:	f7fe f8ee 	bl	800c190 <__sinit>
 800dfb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfb6:	07d9      	lsls	r1, r3, #31
 800dfb8:	d405      	bmi.n	800dfc6 <_vfiprintf_r+0x2a>
 800dfba:	89ab      	ldrh	r3, [r5, #12]
 800dfbc:	059a      	lsls	r2, r3, #22
 800dfbe:	d402      	bmi.n	800dfc6 <_vfiprintf_r+0x2a>
 800dfc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfc2:	f7fe fa14 	bl	800c3ee <__retarget_lock_acquire_recursive>
 800dfc6:	89ab      	ldrh	r3, [r5, #12]
 800dfc8:	071b      	lsls	r3, r3, #28
 800dfca:	d501      	bpl.n	800dfd0 <_vfiprintf_r+0x34>
 800dfcc:	692b      	ldr	r3, [r5, #16]
 800dfce:	b99b      	cbnz	r3, 800dff8 <_vfiprintf_r+0x5c>
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	f000 f938 	bl	800e248 <__swsetup_r>
 800dfd8:	b170      	cbz	r0, 800dff8 <_vfiprintf_r+0x5c>
 800dfda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfdc:	07dc      	lsls	r4, r3, #31
 800dfde:	d504      	bpl.n	800dfea <_vfiprintf_r+0x4e>
 800dfe0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe4:	b01d      	add	sp, #116	@ 0x74
 800dfe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfea:	89ab      	ldrh	r3, [r5, #12]
 800dfec:	0598      	lsls	r0, r3, #22
 800dfee:	d4f7      	bmi.n	800dfe0 <_vfiprintf_r+0x44>
 800dff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dff2:	f7fe f9fd 	bl	800c3f0 <__retarget_lock_release_recursive>
 800dff6:	e7f3      	b.n	800dfe0 <_vfiprintf_r+0x44>
 800dff8:	2300      	movs	r3, #0
 800dffa:	9309      	str	r3, [sp, #36]	@ 0x24
 800dffc:	2320      	movs	r3, #32
 800dffe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e002:	f8cd 800c 	str.w	r8, [sp, #12]
 800e006:	2330      	movs	r3, #48	@ 0x30
 800e008:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e1b8 <_vfiprintf_r+0x21c>
 800e00c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e010:	f04f 0901 	mov.w	r9, #1
 800e014:	4623      	mov	r3, r4
 800e016:	469a      	mov	sl, r3
 800e018:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e01c:	b10a      	cbz	r2, 800e022 <_vfiprintf_r+0x86>
 800e01e:	2a25      	cmp	r2, #37	@ 0x25
 800e020:	d1f9      	bne.n	800e016 <_vfiprintf_r+0x7a>
 800e022:	ebba 0b04 	subs.w	fp, sl, r4
 800e026:	d00b      	beq.n	800e040 <_vfiprintf_r+0xa4>
 800e028:	465b      	mov	r3, fp
 800e02a:	4622      	mov	r2, r4
 800e02c:	4629      	mov	r1, r5
 800e02e:	4630      	mov	r0, r6
 800e030:	f7ff ffa2 	bl	800df78 <__sfputs_r>
 800e034:	3001      	adds	r0, #1
 800e036:	f000 80a7 	beq.w	800e188 <_vfiprintf_r+0x1ec>
 800e03a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e03c:	445a      	add	r2, fp
 800e03e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e040:	f89a 3000 	ldrb.w	r3, [sl]
 800e044:	2b00      	cmp	r3, #0
 800e046:	f000 809f 	beq.w	800e188 <_vfiprintf_r+0x1ec>
 800e04a:	2300      	movs	r3, #0
 800e04c:	f04f 32ff 	mov.w	r2, #4294967295
 800e050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e054:	f10a 0a01 	add.w	sl, sl, #1
 800e058:	9304      	str	r3, [sp, #16]
 800e05a:	9307      	str	r3, [sp, #28]
 800e05c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e060:	931a      	str	r3, [sp, #104]	@ 0x68
 800e062:	4654      	mov	r4, sl
 800e064:	2205      	movs	r2, #5
 800e066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e06a:	4853      	ldr	r0, [pc, #332]	@ (800e1b8 <_vfiprintf_r+0x21c>)
 800e06c:	f7f2 f8b0 	bl	80001d0 <memchr>
 800e070:	9a04      	ldr	r2, [sp, #16]
 800e072:	b9d8      	cbnz	r0, 800e0ac <_vfiprintf_r+0x110>
 800e074:	06d1      	lsls	r1, r2, #27
 800e076:	bf44      	itt	mi
 800e078:	2320      	movmi	r3, #32
 800e07a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e07e:	0713      	lsls	r3, r2, #28
 800e080:	bf44      	itt	mi
 800e082:	232b      	movmi	r3, #43	@ 0x2b
 800e084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e088:	f89a 3000 	ldrb.w	r3, [sl]
 800e08c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e08e:	d015      	beq.n	800e0bc <_vfiprintf_r+0x120>
 800e090:	9a07      	ldr	r2, [sp, #28]
 800e092:	4654      	mov	r4, sl
 800e094:	2000      	movs	r0, #0
 800e096:	f04f 0c0a 	mov.w	ip, #10
 800e09a:	4621      	mov	r1, r4
 800e09c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0a0:	3b30      	subs	r3, #48	@ 0x30
 800e0a2:	2b09      	cmp	r3, #9
 800e0a4:	d94b      	bls.n	800e13e <_vfiprintf_r+0x1a2>
 800e0a6:	b1b0      	cbz	r0, 800e0d6 <_vfiprintf_r+0x13a>
 800e0a8:	9207      	str	r2, [sp, #28]
 800e0aa:	e014      	b.n	800e0d6 <_vfiprintf_r+0x13a>
 800e0ac:	eba0 0308 	sub.w	r3, r0, r8
 800e0b0:	fa09 f303 	lsl.w	r3, r9, r3
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	9304      	str	r3, [sp, #16]
 800e0b8:	46a2      	mov	sl, r4
 800e0ba:	e7d2      	b.n	800e062 <_vfiprintf_r+0xc6>
 800e0bc:	9b03      	ldr	r3, [sp, #12]
 800e0be:	1d19      	adds	r1, r3, #4
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	9103      	str	r1, [sp, #12]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	bfbb      	ittet	lt
 800e0c8:	425b      	neglt	r3, r3
 800e0ca:	f042 0202 	orrlt.w	r2, r2, #2
 800e0ce:	9307      	strge	r3, [sp, #28]
 800e0d0:	9307      	strlt	r3, [sp, #28]
 800e0d2:	bfb8      	it	lt
 800e0d4:	9204      	strlt	r2, [sp, #16]
 800e0d6:	7823      	ldrb	r3, [r4, #0]
 800e0d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0da:	d10a      	bne.n	800e0f2 <_vfiprintf_r+0x156>
 800e0dc:	7863      	ldrb	r3, [r4, #1]
 800e0de:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0e0:	d132      	bne.n	800e148 <_vfiprintf_r+0x1ac>
 800e0e2:	9b03      	ldr	r3, [sp, #12]
 800e0e4:	1d1a      	adds	r2, r3, #4
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	9203      	str	r2, [sp, #12]
 800e0ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0ee:	3402      	adds	r4, #2
 800e0f0:	9305      	str	r3, [sp, #20]
 800e0f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e1c8 <_vfiprintf_r+0x22c>
 800e0f6:	7821      	ldrb	r1, [r4, #0]
 800e0f8:	2203      	movs	r2, #3
 800e0fa:	4650      	mov	r0, sl
 800e0fc:	f7f2 f868 	bl	80001d0 <memchr>
 800e100:	b138      	cbz	r0, 800e112 <_vfiprintf_r+0x176>
 800e102:	9b04      	ldr	r3, [sp, #16]
 800e104:	eba0 000a 	sub.w	r0, r0, sl
 800e108:	2240      	movs	r2, #64	@ 0x40
 800e10a:	4082      	lsls	r2, r0
 800e10c:	4313      	orrs	r3, r2
 800e10e:	3401      	adds	r4, #1
 800e110:	9304      	str	r3, [sp, #16]
 800e112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e116:	4829      	ldr	r0, [pc, #164]	@ (800e1bc <_vfiprintf_r+0x220>)
 800e118:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e11c:	2206      	movs	r2, #6
 800e11e:	f7f2 f857 	bl	80001d0 <memchr>
 800e122:	2800      	cmp	r0, #0
 800e124:	d03f      	beq.n	800e1a6 <_vfiprintf_r+0x20a>
 800e126:	4b26      	ldr	r3, [pc, #152]	@ (800e1c0 <_vfiprintf_r+0x224>)
 800e128:	bb1b      	cbnz	r3, 800e172 <_vfiprintf_r+0x1d6>
 800e12a:	9b03      	ldr	r3, [sp, #12]
 800e12c:	3307      	adds	r3, #7
 800e12e:	f023 0307 	bic.w	r3, r3, #7
 800e132:	3308      	adds	r3, #8
 800e134:	9303      	str	r3, [sp, #12]
 800e136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e138:	443b      	add	r3, r7
 800e13a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e13c:	e76a      	b.n	800e014 <_vfiprintf_r+0x78>
 800e13e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e142:	460c      	mov	r4, r1
 800e144:	2001      	movs	r0, #1
 800e146:	e7a8      	b.n	800e09a <_vfiprintf_r+0xfe>
 800e148:	2300      	movs	r3, #0
 800e14a:	3401      	adds	r4, #1
 800e14c:	9305      	str	r3, [sp, #20]
 800e14e:	4619      	mov	r1, r3
 800e150:	f04f 0c0a 	mov.w	ip, #10
 800e154:	4620      	mov	r0, r4
 800e156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e15a:	3a30      	subs	r2, #48	@ 0x30
 800e15c:	2a09      	cmp	r2, #9
 800e15e:	d903      	bls.n	800e168 <_vfiprintf_r+0x1cc>
 800e160:	2b00      	cmp	r3, #0
 800e162:	d0c6      	beq.n	800e0f2 <_vfiprintf_r+0x156>
 800e164:	9105      	str	r1, [sp, #20]
 800e166:	e7c4      	b.n	800e0f2 <_vfiprintf_r+0x156>
 800e168:	fb0c 2101 	mla	r1, ip, r1, r2
 800e16c:	4604      	mov	r4, r0
 800e16e:	2301      	movs	r3, #1
 800e170:	e7f0      	b.n	800e154 <_vfiprintf_r+0x1b8>
 800e172:	ab03      	add	r3, sp, #12
 800e174:	9300      	str	r3, [sp, #0]
 800e176:	462a      	mov	r2, r5
 800e178:	4b12      	ldr	r3, [pc, #72]	@ (800e1c4 <_vfiprintf_r+0x228>)
 800e17a:	a904      	add	r1, sp, #16
 800e17c:	4630      	mov	r0, r6
 800e17e:	f7fd fbc3 	bl	800b908 <_printf_float>
 800e182:	4607      	mov	r7, r0
 800e184:	1c78      	adds	r0, r7, #1
 800e186:	d1d6      	bne.n	800e136 <_vfiprintf_r+0x19a>
 800e188:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e18a:	07d9      	lsls	r1, r3, #31
 800e18c:	d405      	bmi.n	800e19a <_vfiprintf_r+0x1fe>
 800e18e:	89ab      	ldrh	r3, [r5, #12]
 800e190:	059a      	lsls	r2, r3, #22
 800e192:	d402      	bmi.n	800e19a <_vfiprintf_r+0x1fe>
 800e194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e196:	f7fe f92b 	bl	800c3f0 <__retarget_lock_release_recursive>
 800e19a:	89ab      	ldrh	r3, [r5, #12]
 800e19c:	065b      	lsls	r3, r3, #25
 800e19e:	f53f af1f 	bmi.w	800dfe0 <_vfiprintf_r+0x44>
 800e1a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e1a4:	e71e      	b.n	800dfe4 <_vfiprintf_r+0x48>
 800e1a6:	ab03      	add	r3, sp, #12
 800e1a8:	9300      	str	r3, [sp, #0]
 800e1aa:	462a      	mov	r2, r5
 800e1ac:	4b05      	ldr	r3, [pc, #20]	@ (800e1c4 <_vfiprintf_r+0x228>)
 800e1ae:	a904      	add	r1, sp, #16
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	f7fd fe41 	bl	800be38 <_printf_i>
 800e1b6:	e7e4      	b.n	800e182 <_vfiprintf_r+0x1e6>
 800e1b8:	0800e7b0 	.word	0x0800e7b0
 800e1bc:	0800e7ba 	.word	0x0800e7ba
 800e1c0:	0800b909 	.word	0x0800b909
 800e1c4:	0800df79 	.word	0x0800df79
 800e1c8:	0800e7b6 	.word	0x0800e7b6

0800e1cc <__swbuf_r>:
 800e1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ce:	460e      	mov	r6, r1
 800e1d0:	4614      	mov	r4, r2
 800e1d2:	4605      	mov	r5, r0
 800e1d4:	b118      	cbz	r0, 800e1de <__swbuf_r+0x12>
 800e1d6:	6a03      	ldr	r3, [r0, #32]
 800e1d8:	b90b      	cbnz	r3, 800e1de <__swbuf_r+0x12>
 800e1da:	f7fd ffd9 	bl	800c190 <__sinit>
 800e1de:	69a3      	ldr	r3, [r4, #24]
 800e1e0:	60a3      	str	r3, [r4, #8]
 800e1e2:	89a3      	ldrh	r3, [r4, #12]
 800e1e4:	071a      	lsls	r2, r3, #28
 800e1e6:	d501      	bpl.n	800e1ec <__swbuf_r+0x20>
 800e1e8:	6923      	ldr	r3, [r4, #16]
 800e1ea:	b943      	cbnz	r3, 800e1fe <__swbuf_r+0x32>
 800e1ec:	4621      	mov	r1, r4
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f000 f82a 	bl	800e248 <__swsetup_r>
 800e1f4:	b118      	cbz	r0, 800e1fe <__swbuf_r+0x32>
 800e1f6:	f04f 37ff 	mov.w	r7, #4294967295
 800e1fa:	4638      	mov	r0, r7
 800e1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1fe:	6823      	ldr	r3, [r4, #0]
 800e200:	6922      	ldr	r2, [r4, #16]
 800e202:	1a98      	subs	r0, r3, r2
 800e204:	6963      	ldr	r3, [r4, #20]
 800e206:	b2f6      	uxtb	r6, r6
 800e208:	4283      	cmp	r3, r0
 800e20a:	4637      	mov	r7, r6
 800e20c:	dc05      	bgt.n	800e21a <__swbuf_r+0x4e>
 800e20e:	4621      	mov	r1, r4
 800e210:	4628      	mov	r0, r5
 800e212:	f7ff fda7 	bl	800dd64 <_fflush_r>
 800e216:	2800      	cmp	r0, #0
 800e218:	d1ed      	bne.n	800e1f6 <__swbuf_r+0x2a>
 800e21a:	68a3      	ldr	r3, [r4, #8]
 800e21c:	3b01      	subs	r3, #1
 800e21e:	60a3      	str	r3, [r4, #8]
 800e220:	6823      	ldr	r3, [r4, #0]
 800e222:	1c5a      	adds	r2, r3, #1
 800e224:	6022      	str	r2, [r4, #0]
 800e226:	701e      	strb	r6, [r3, #0]
 800e228:	6962      	ldr	r2, [r4, #20]
 800e22a:	1c43      	adds	r3, r0, #1
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d004      	beq.n	800e23a <__swbuf_r+0x6e>
 800e230:	89a3      	ldrh	r3, [r4, #12]
 800e232:	07db      	lsls	r3, r3, #31
 800e234:	d5e1      	bpl.n	800e1fa <__swbuf_r+0x2e>
 800e236:	2e0a      	cmp	r6, #10
 800e238:	d1df      	bne.n	800e1fa <__swbuf_r+0x2e>
 800e23a:	4621      	mov	r1, r4
 800e23c:	4628      	mov	r0, r5
 800e23e:	f7ff fd91 	bl	800dd64 <_fflush_r>
 800e242:	2800      	cmp	r0, #0
 800e244:	d0d9      	beq.n	800e1fa <__swbuf_r+0x2e>
 800e246:	e7d6      	b.n	800e1f6 <__swbuf_r+0x2a>

0800e248 <__swsetup_r>:
 800e248:	b538      	push	{r3, r4, r5, lr}
 800e24a:	4b29      	ldr	r3, [pc, #164]	@ (800e2f0 <__swsetup_r+0xa8>)
 800e24c:	4605      	mov	r5, r0
 800e24e:	6818      	ldr	r0, [r3, #0]
 800e250:	460c      	mov	r4, r1
 800e252:	b118      	cbz	r0, 800e25c <__swsetup_r+0x14>
 800e254:	6a03      	ldr	r3, [r0, #32]
 800e256:	b90b      	cbnz	r3, 800e25c <__swsetup_r+0x14>
 800e258:	f7fd ff9a 	bl	800c190 <__sinit>
 800e25c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e260:	0719      	lsls	r1, r3, #28
 800e262:	d422      	bmi.n	800e2aa <__swsetup_r+0x62>
 800e264:	06da      	lsls	r2, r3, #27
 800e266:	d407      	bmi.n	800e278 <__swsetup_r+0x30>
 800e268:	2209      	movs	r2, #9
 800e26a:	602a      	str	r2, [r5, #0]
 800e26c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e270:	81a3      	strh	r3, [r4, #12]
 800e272:	f04f 30ff 	mov.w	r0, #4294967295
 800e276:	e033      	b.n	800e2e0 <__swsetup_r+0x98>
 800e278:	0758      	lsls	r0, r3, #29
 800e27a:	d512      	bpl.n	800e2a2 <__swsetup_r+0x5a>
 800e27c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e27e:	b141      	cbz	r1, 800e292 <__swsetup_r+0x4a>
 800e280:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e284:	4299      	cmp	r1, r3
 800e286:	d002      	beq.n	800e28e <__swsetup_r+0x46>
 800e288:	4628      	mov	r0, r5
 800e28a:	f7fe ff0d 	bl	800d0a8 <_free_r>
 800e28e:	2300      	movs	r3, #0
 800e290:	6363      	str	r3, [r4, #52]	@ 0x34
 800e292:	89a3      	ldrh	r3, [r4, #12]
 800e294:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e298:	81a3      	strh	r3, [r4, #12]
 800e29a:	2300      	movs	r3, #0
 800e29c:	6063      	str	r3, [r4, #4]
 800e29e:	6923      	ldr	r3, [r4, #16]
 800e2a0:	6023      	str	r3, [r4, #0]
 800e2a2:	89a3      	ldrh	r3, [r4, #12]
 800e2a4:	f043 0308 	orr.w	r3, r3, #8
 800e2a8:	81a3      	strh	r3, [r4, #12]
 800e2aa:	6923      	ldr	r3, [r4, #16]
 800e2ac:	b94b      	cbnz	r3, 800e2c2 <__swsetup_r+0x7a>
 800e2ae:	89a3      	ldrh	r3, [r4, #12]
 800e2b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e2b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2b8:	d003      	beq.n	800e2c2 <__swsetup_r+0x7a>
 800e2ba:	4621      	mov	r1, r4
 800e2bc:	4628      	mov	r0, r5
 800e2be:	f000 f883 	bl	800e3c8 <__smakebuf_r>
 800e2c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2c6:	f013 0201 	ands.w	r2, r3, #1
 800e2ca:	d00a      	beq.n	800e2e2 <__swsetup_r+0x9a>
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	60a2      	str	r2, [r4, #8]
 800e2d0:	6962      	ldr	r2, [r4, #20]
 800e2d2:	4252      	negs	r2, r2
 800e2d4:	61a2      	str	r2, [r4, #24]
 800e2d6:	6922      	ldr	r2, [r4, #16]
 800e2d8:	b942      	cbnz	r2, 800e2ec <__swsetup_r+0xa4>
 800e2da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e2de:	d1c5      	bne.n	800e26c <__swsetup_r+0x24>
 800e2e0:	bd38      	pop	{r3, r4, r5, pc}
 800e2e2:	0799      	lsls	r1, r3, #30
 800e2e4:	bf58      	it	pl
 800e2e6:	6962      	ldrpl	r2, [r4, #20]
 800e2e8:	60a2      	str	r2, [r4, #8]
 800e2ea:	e7f4      	b.n	800e2d6 <__swsetup_r+0x8e>
 800e2ec:	2000      	movs	r0, #0
 800e2ee:	e7f7      	b.n	800e2e0 <__swsetup_r+0x98>
 800e2f0:	2000001c 	.word	0x2000001c

0800e2f4 <_raise_r>:
 800e2f4:	291f      	cmp	r1, #31
 800e2f6:	b538      	push	{r3, r4, r5, lr}
 800e2f8:	4605      	mov	r5, r0
 800e2fa:	460c      	mov	r4, r1
 800e2fc:	d904      	bls.n	800e308 <_raise_r+0x14>
 800e2fe:	2316      	movs	r3, #22
 800e300:	6003      	str	r3, [r0, #0]
 800e302:	f04f 30ff 	mov.w	r0, #4294967295
 800e306:	bd38      	pop	{r3, r4, r5, pc}
 800e308:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e30a:	b112      	cbz	r2, 800e312 <_raise_r+0x1e>
 800e30c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e310:	b94b      	cbnz	r3, 800e326 <_raise_r+0x32>
 800e312:	4628      	mov	r0, r5
 800e314:	f000 f830 	bl	800e378 <_getpid_r>
 800e318:	4622      	mov	r2, r4
 800e31a:	4601      	mov	r1, r0
 800e31c:	4628      	mov	r0, r5
 800e31e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e322:	f000 b817 	b.w	800e354 <_kill_r>
 800e326:	2b01      	cmp	r3, #1
 800e328:	d00a      	beq.n	800e340 <_raise_r+0x4c>
 800e32a:	1c59      	adds	r1, r3, #1
 800e32c:	d103      	bne.n	800e336 <_raise_r+0x42>
 800e32e:	2316      	movs	r3, #22
 800e330:	6003      	str	r3, [r0, #0]
 800e332:	2001      	movs	r0, #1
 800e334:	e7e7      	b.n	800e306 <_raise_r+0x12>
 800e336:	2100      	movs	r1, #0
 800e338:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e33c:	4620      	mov	r0, r4
 800e33e:	4798      	blx	r3
 800e340:	2000      	movs	r0, #0
 800e342:	e7e0      	b.n	800e306 <_raise_r+0x12>

0800e344 <raise>:
 800e344:	4b02      	ldr	r3, [pc, #8]	@ (800e350 <raise+0xc>)
 800e346:	4601      	mov	r1, r0
 800e348:	6818      	ldr	r0, [r3, #0]
 800e34a:	f7ff bfd3 	b.w	800e2f4 <_raise_r>
 800e34e:	bf00      	nop
 800e350:	2000001c 	.word	0x2000001c

0800e354 <_kill_r>:
 800e354:	b538      	push	{r3, r4, r5, lr}
 800e356:	4d07      	ldr	r5, [pc, #28]	@ (800e374 <_kill_r+0x20>)
 800e358:	2300      	movs	r3, #0
 800e35a:	4604      	mov	r4, r0
 800e35c:	4608      	mov	r0, r1
 800e35e:	4611      	mov	r1, r2
 800e360:	602b      	str	r3, [r5, #0]
 800e362:	f7f3 ff2d 	bl	80021c0 <_kill>
 800e366:	1c43      	adds	r3, r0, #1
 800e368:	d102      	bne.n	800e370 <_kill_r+0x1c>
 800e36a:	682b      	ldr	r3, [r5, #0]
 800e36c:	b103      	cbz	r3, 800e370 <_kill_r+0x1c>
 800e36e:	6023      	str	r3, [r4, #0]
 800e370:	bd38      	pop	{r3, r4, r5, pc}
 800e372:	bf00      	nop
 800e374:	200026e0 	.word	0x200026e0

0800e378 <_getpid_r>:
 800e378:	f7f3 bf1a 	b.w	80021b0 <_getpid>

0800e37c <__swhatbuf_r>:
 800e37c:	b570      	push	{r4, r5, r6, lr}
 800e37e:	460c      	mov	r4, r1
 800e380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e384:	2900      	cmp	r1, #0
 800e386:	b096      	sub	sp, #88	@ 0x58
 800e388:	4615      	mov	r5, r2
 800e38a:	461e      	mov	r6, r3
 800e38c:	da0d      	bge.n	800e3aa <__swhatbuf_r+0x2e>
 800e38e:	89a3      	ldrh	r3, [r4, #12]
 800e390:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e394:	f04f 0100 	mov.w	r1, #0
 800e398:	bf14      	ite	ne
 800e39a:	2340      	movne	r3, #64	@ 0x40
 800e39c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e3a0:	2000      	movs	r0, #0
 800e3a2:	6031      	str	r1, [r6, #0]
 800e3a4:	602b      	str	r3, [r5, #0]
 800e3a6:	b016      	add	sp, #88	@ 0x58
 800e3a8:	bd70      	pop	{r4, r5, r6, pc}
 800e3aa:	466a      	mov	r2, sp
 800e3ac:	f000 f848 	bl	800e440 <_fstat_r>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	dbec      	blt.n	800e38e <__swhatbuf_r+0x12>
 800e3b4:	9901      	ldr	r1, [sp, #4]
 800e3b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e3ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e3be:	4259      	negs	r1, r3
 800e3c0:	4159      	adcs	r1, r3
 800e3c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3c6:	e7eb      	b.n	800e3a0 <__swhatbuf_r+0x24>

0800e3c8 <__smakebuf_r>:
 800e3c8:	898b      	ldrh	r3, [r1, #12]
 800e3ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3cc:	079d      	lsls	r5, r3, #30
 800e3ce:	4606      	mov	r6, r0
 800e3d0:	460c      	mov	r4, r1
 800e3d2:	d507      	bpl.n	800e3e4 <__smakebuf_r+0x1c>
 800e3d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e3d8:	6023      	str	r3, [r4, #0]
 800e3da:	6123      	str	r3, [r4, #16]
 800e3dc:	2301      	movs	r3, #1
 800e3de:	6163      	str	r3, [r4, #20]
 800e3e0:	b003      	add	sp, #12
 800e3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3e4:	ab01      	add	r3, sp, #4
 800e3e6:	466a      	mov	r2, sp
 800e3e8:	f7ff ffc8 	bl	800e37c <__swhatbuf_r>
 800e3ec:	9f00      	ldr	r7, [sp, #0]
 800e3ee:	4605      	mov	r5, r0
 800e3f0:	4639      	mov	r1, r7
 800e3f2:	4630      	mov	r0, r6
 800e3f4:	f7fe fecc 	bl	800d190 <_malloc_r>
 800e3f8:	b948      	cbnz	r0, 800e40e <__smakebuf_r+0x46>
 800e3fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3fe:	059a      	lsls	r2, r3, #22
 800e400:	d4ee      	bmi.n	800e3e0 <__smakebuf_r+0x18>
 800e402:	f023 0303 	bic.w	r3, r3, #3
 800e406:	f043 0302 	orr.w	r3, r3, #2
 800e40a:	81a3      	strh	r3, [r4, #12]
 800e40c:	e7e2      	b.n	800e3d4 <__smakebuf_r+0xc>
 800e40e:	89a3      	ldrh	r3, [r4, #12]
 800e410:	6020      	str	r0, [r4, #0]
 800e412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e416:	81a3      	strh	r3, [r4, #12]
 800e418:	9b01      	ldr	r3, [sp, #4]
 800e41a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e41e:	b15b      	cbz	r3, 800e438 <__smakebuf_r+0x70>
 800e420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e424:	4630      	mov	r0, r6
 800e426:	f000 f81d 	bl	800e464 <_isatty_r>
 800e42a:	b128      	cbz	r0, 800e438 <__smakebuf_r+0x70>
 800e42c:	89a3      	ldrh	r3, [r4, #12]
 800e42e:	f023 0303 	bic.w	r3, r3, #3
 800e432:	f043 0301 	orr.w	r3, r3, #1
 800e436:	81a3      	strh	r3, [r4, #12]
 800e438:	89a3      	ldrh	r3, [r4, #12]
 800e43a:	431d      	orrs	r5, r3
 800e43c:	81a5      	strh	r5, [r4, #12]
 800e43e:	e7cf      	b.n	800e3e0 <__smakebuf_r+0x18>

0800e440 <_fstat_r>:
 800e440:	b538      	push	{r3, r4, r5, lr}
 800e442:	4d07      	ldr	r5, [pc, #28]	@ (800e460 <_fstat_r+0x20>)
 800e444:	2300      	movs	r3, #0
 800e446:	4604      	mov	r4, r0
 800e448:	4608      	mov	r0, r1
 800e44a:	4611      	mov	r1, r2
 800e44c:	602b      	str	r3, [r5, #0]
 800e44e:	f7f3 ff17 	bl	8002280 <_fstat>
 800e452:	1c43      	adds	r3, r0, #1
 800e454:	d102      	bne.n	800e45c <_fstat_r+0x1c>
 800e456:	682b      	ldr	r3, [r5, #0]
 800e458:	b103      	cbz	r3, 800e45c <_fstat_r+0x1c>
 800e45a:	6023      	str	r3, [r4, #0]
 800e45c:	bd38      	pop	{r3, r4, r5, pc}
 800e45e:	bf00      	nop
 800e460:	200026e0 	.word	0x200026e0

0800e464 <_isatty_r>:
 800e464:	b538      	push	{r3, r4, r5, lr}
 800e466:	4d06      	ldr	r5, [pc, #24]	@ (800e480 <_isatty_r+0x1c>)
 800e468:	2300      	movs	r3, #0
 800e46a:	4604      	mov	r4, r0
 800e46c:	4608      	mov	r0, r1
 800e46e:	602b      	str	r3, [r5, #0]
 800e470:	f7f3 ff16 	bl	80022a0 <_isatty>
 800e474:	1c43      	adds	r3, r0, #1
 800e476:	d102      	bne.n	800e47e <_isatty_r+0x1a>
 800e478:	682b      	ldr	r3, [r5, #0]
 800e47a:	b103      	cbz	r3, 800e47e <_isatty_r+0x1a>
 800e47c:	6023      	str	r3, [r4, #0]
 800e47e:	bd38      	pop	{r3, r4, r5, pc}
 800e480:	200026e0 	.word	0x200026e0

0800e484 <_init>:
 800e484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e486:	bf00      	nop
 800e488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e48a:	bc08      	pop	{r3}
 800e48c:	469e      	mov	lr, r3
 800e48e:	4770      	bx	lr

0800e490 <_fini>:
 800e490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e492:	bf00      	nop
 800e494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e496:	bc08      	pop	{r3}
 800e498:	469e      	mov	lr, r3
 800e49a:	4770      	bx	lr
