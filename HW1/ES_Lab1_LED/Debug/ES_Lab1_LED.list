
ES_Lab1_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008524  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080086b4  080086b4  000096b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008774  08008774  0000a010  2**0
                  CONTENTS
  4 .ARM          00000008  08008774  08008774  00009774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800877c  0800877c  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800877c  0800877c  0000977c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008780  08008780  00009780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08008784  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002088  20000010  08008794  0000a010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002098  08008794  0000a098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021d26  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004637  00000000  00000000  0002bd66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e08  00000000  00000000  000303a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001743  00000000  00000000  000321a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045d3  00000000  00000000  000338eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000221b2  00000000  00000000  00037ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcefc  00000000  00000000  0005a070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156f6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080a8  00000000  00000000  00156fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0015f058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800869c 	.word	0x0800869c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800869c 	.word	0x0800869c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
  * @retval int
  */
osEventFlagsId_t button_press;
osMutexId_t led_blink;
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 ff79 	bl	80013ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f842 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 fa0a 	bl	80008e4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d0:	f000 f8a0 	bl	8000614 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004d4:	f000 f8d6 	bl	8000684 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004d8:	f000 f912 	bl	8000700 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004dc:	f000 f936 	bl	800074c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f972 	bl	80007c8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004e4:	f000 f9a0 	bl	8000828 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004e8:	f000 f9ce 	bl	8000888 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ec:	f004 fb28 	bl	8004b40 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 80004f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000530 <main+0x70>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	480f      	ldr	r0, [pc, #60]	@ (8000534 <main+0x74>)
 80004f6:	f004 fb6d 	bl	8004bd4 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000538 <main+0x78>)
 80004fe:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000500:	4a0e      	ldr	r2, [pc, #56]	@ (800053c <main+0x7c>)
 8000502:	2100      	movs	r1, #0
 8000504:	480e      	ldr	r0, [pc, #56]	@ (8000540 <main+0x80>)
 8000506:	f004 fb65 	bl	8004bd4 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <main+0x84>)
 800050e:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  button_press = osEventFlagsNew(NULL);
 8000510:	2000      	movs	r0, #0
 8000512:	f004 fc0c 	bl	8004d2e <osEventFlagsNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a0b      	ldr	r2, [pc, #44]	@ (8000548 <main+0x88>)
 800051a:	6013      	str	r3, [r2, #0]
  led_blink = osMutexNew(NULL);
 800051c:	2000      	movs	r0, #0
 800051e:	f004 fcec 	bl	8004efa <osMutexNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a09      	ldr	r2, [pc, #36]	@ (800054c <main+0x8c>)
 8000526:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000528:	f004 fb2e 	bl	8004b88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <main+0x6c>
 8000530:	080086e4 	.word	0x080086e4
 8000534:	08000c79 	.word	0x08000c79
 8000538:	20000754 	.word	0x20000754
 800053c:	08008708 	.word	0x08008708
 8000540:	08000cdd 	.word	0x08000cdd
 8000544:	20000758 	.word	0x20000758
 8000548:	2000075c 	.word	0x2000075c
 800054c:	20000760 	.word	0x20000760

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b096      	sub	sp, #88	@ 0x58
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	2244      	movs	r2, #68	@ 0x44
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f008 f862 	bl	8008628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	463b      	mov	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000572:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000576:	f001 fe4f 	bl	8002218 <HAL_PWREx_ControlVoltageScaling>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000580:	f000 fbd6 	bl	8000d30 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000584:	f001 fe2a 	bl	80021dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000588:	4b21      	ldr	r3, [pc, #132]	@ (8000610 <SystemClock_Config+0xc0>)
 800058a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800058e:	4a20      	ldr	r2, [pc, #128]	@ (8000610 <SystemClock_Config+0xc0>)
 8000590:	f023 0318 	bic.w	r3, r3, #24
 8000594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000598:	2314      	movs	r3, #20
 800059a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005a8:	2360      	movs	r3, #96	@ 0x60
 80005aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ac:	2302      	movs	r3, #2
 80005ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005b0:	2301      	movs	r3, #1
 80005b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005b8:	2328      	movs	r3, #40	@ 0x28
 80005ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005bc:	2307      	movs	r3, #7
 80005be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 ff45 	bl	800245c <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005d8:	f000 fbaa 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2303      	movs	r3, #3
 80005e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f0:	463b      	mov	r3, r7
 80005f2:	2104      	movs	r1, #4
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 fb0d 	bl	8002c14 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000600:	f000 fb96 	bl	8000d30 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000604:	f003 f814 	bl	8003630 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000608:	bf00      	nop
 800060a:	3758      	adds	r7, #88	@ 0x58
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40021000 	.word	0x40021000

08000614 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000618:	4b18      	ldr	r3, [pc, #96]	@ (800067c <MX_DFSDM1_Init+0x68>)
 800061a:	4a19      	ldr	r2, [pc, #100]	@ (8000680 <MX_DFSDM1_Init+0x6c>)
 800061c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800061e:	4b17      	ldr	r3, [pc, #92]	@ (800067c <MX_DFSDM1_Init+0x68>)
 8000620:	2201      	movs	r2, #1
 8000622:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000624:	4b15      	ldr	r3, [pc, #84]	@ (800067c <MX_DFSDM1_Init+0x68>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800062a:	4b14      	ldr	r3, [pc, #80]	@ (800067c <MX_DFSDM1_Init+0x68>)
 800062c:	2202      	movs	r2, #2
 800062e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <MX_DFSDM1_Init+0x68>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000636:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_DFSDM1_Init+0x68>)
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <MX_DFSDM1_Init+0x68>)
 800063e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000642:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000644:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <MX_DFSDM1_Init+0x68>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800064a:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <MX_DFSDM1_Init+0x68>)
 800064c:	2204      	movs	r2, #4
 800064e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000650:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <MX_DFSDM1_Init+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_DFSDM1_Init+0x68>)
 8000658:	2201      	movs	r2, #1
 800065a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800065c:	4b07      	ldr	r3, [pc, #28]	@ (800067c <MX_DFSDM1_Init+0x68>)
 800065e:	2200      	movs	r2, #0
 8000660:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_DFSDM1_Init+0x68>)
 8000664:	2200      	movs	r2, #0
 8000666:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	@ (800067c <MX_DFSDM1_Init+0x68>)
 800066a:	f001 f851 	bl	8001710 <HAL_DFSDM_ChannelInit>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000674:	f000 fb5c 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	2000002c 	.word	0x2000002c
 8000680:	40016020 	.word	0x40016020

08000684 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <MX_I2C2_Init+0x74>)
 800068a:	4a1c      	ldr	r2, [pc, #112]	@ (80006fc <MX_I2C2_Init+0x78>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800068e:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <MX_I2C2_Init+0x74>)
 8000690:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000694:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000696:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_I2C2_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069c:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <MX_I2C2_Init+0x74>)
 800069e:	2201      	movs	r2, #1
 80006a0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a2:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_I2C2_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006a8:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <MX_I2C2_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ae:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_I2C2_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b4:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <MX_I2C2_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_I2C2_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006c0:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_I2C2_Init+0x74>)
 80006c2:	f001 fb25 	bl	8001d10 <HAL_I2C_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006cc:	f000 fb30 	bl	8000d30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d0:	2100      	movs	r1, #0
 80006d2:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <MX_I2C2_Init+0x74>)
 80006d4:	f001 fbb7 	bl	8001e46 <HAL_I2CEx_ConfigAnalogFilter>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80006de:	f000 fb27 	bl	8000d30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <MX_I2C2_Init+0x74>)
 80006e6:	f001 fbf9 	bl	8001edc <HAL_I2CEx_ConfigDigitalFilter>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80006f0:	f000 fb1e 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000064 	.word	0x20000064
 80006fc:	40005800 	.word	0x40005800

08000700 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_QUADSPI_Init+0x44>)
 8000706:	4a10      	ldr	r2, [pc, #64]	@ (8000748 <MX_QUADSPI_Init+0x48>)
 8000708:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_QUADSPI_Init+0x44>)
 800070c:	2202      	movs	r2, #2
 800070e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_QUADSPI_Init+0x44>)
 8000712:	2204      	movs	r2, #4
 8000714:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_QUADSPI_Init+0x44>)
 8000718:	2210      	movs	r2, #16
 800071a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_QUADSPI_Init+0x44>)
 800071e:	2217      	movs	r2, #23
 8000720:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <MX_QUADSPI_Init+0x44>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_QUADSPI_Init+0x44>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_QUADSPI_Init+0x44>)
 8000730:	f001 fdd8 	bl	80022e4 <HAL_QSPI_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800073a:	f000 faf9 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000b8 	.word	0x200000b8
 8000748:	a0001000 	.word	0xa0001000

0800074c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000750:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <MX_SPI3_Init+0x74>)
 8000752:	4a1c      	ldr	r2, [pc, #112]	@ (80007c4 <MX_SPI3_Init+0x78>)
 8000754:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000756:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <MX_SPI3_Init+0x74>)
 8000758:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800075c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800075e:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <MX_SPI3_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000764:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <MX_SPI3_Init+0x74>)
 8000766:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800076a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076c:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_SPI3_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000772:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <MX_SPI3_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_SPI3_Init+0x74>)
 800077a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800077e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_SPI3_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_SPI3_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_SPI3_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <MX_SPI3_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_SPI3_Init+0x74>)
 800079a:	2207      	movs	r2, #7
 800079c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <MX_SPI3_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_SPI3_Init+0x74>)
 80007a6:	2208      	movs	r2, #8
 80007a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_SPI3_Init+0x74>)
 80007ac:	f003 f922 	bl	80039f4 <HAL_SPI_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007b6:	f000 fabb 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000fc 	.word	0x200000fc
 80007c4:	40003c00 	.word	0x40003c00

080007c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007cc:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 80007ce:	4a15      	ldr	r2, [pc, #84]	@ (8000824 <MX_USART1_UART_Init+0x5c>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_USART1_UART_Init+0x58>)
 800080c:	f003 f995 	bl	8003b3a <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000816:	f000 fa8b 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000160 	.word	0x20000160
 8000824:	40013800 	.word	0x40013800

08000828 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 800082e:	4a15      	ldr	r2, [pc, #84]	@ (8000884 <MX_USART3_UART_Init+0x5c>)
 8000830:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000832:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 800086c:	f003 f965 	bl	8003b3a <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 fa5b 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200001e8 	.word	0x200001e8
 8000884:	40004800 	.word	0x40004800

08000888 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000892:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	2206      	movs	r2, #6
 8000898:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089c:	2202      	movs	r2, #2
 800089e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80008b8:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	f001 fb52 	bl	8001f74 <HAL_PCD_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008d6:	f000 fa2b 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000270 	.word	0x20000270

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	@ 0x28
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fa:	4bbd      	ldr	r3, [pc, #756]	@ (8000bf0 <MX_GPIO_Init+0x30c>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4abc      	ldr	r2, [pc, #752]	@ (8000bf0 <MX_GPIO_Init+0x30c>)
 8000900:	f043 0310 	orr.w	r3, r3, #16
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4bba      	ldr	r3, [pc, #744]	@ (8000bf0 <MX_GPIO_Init+0x30c>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0310 	and.w	r3, r3, #16
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	4bb7      	ldr	r3, [pc, #732]	@ (8000bf0 <MX_GPIO_Init+0x30c>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	4ab6      	ldr	r2, [pc, #728]	@ (8000bf0 <MX_GPIO_Init+0x30c>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091e:	4bb4      	ldr	r3, [pc, #720]	@ (8000bf0 <MX_GPIO_Init+0x30c>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4bb1      	ldr	r3, [pc, #708]	@ (8000bf0 <MX_GPIO_Init+0x30c>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	4ab0      	ldr	r2, [pc, #704]	@ (8000bf0 <MX_GPIO_Init+0x30c>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000936:	4bae      	ldr	r3, [pc, #696]	@ (8000bf0 <MX_GPIO_Init+0x30c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4bab      	ldr	r3, [pc, #684]	@ (8000bf0 <MX_GPIO_Init+0x30c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	4aaa      	ldr	r2, [pc, #680]	@ (8000bf0 <MX_GPIO_Init+0x30c>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094e:	4ba8      	ldr	r3, [pc, #672]	@ (8000bf0 <MX_GPIO_Init+0x30c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	4ba5      	ldr	r3, [pc, #660]	@ (8000bf0 <MX_GPIO_Init+0x30c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	4aa4      	ldr	r2, [pc, #656]	@ (8000bf0 <MX_GPIO_Init+0x30c>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000966:	4ba2      	ldr	r3, [pc, #648]	@ (8000bf0 <MX_GPIO_Init+0x30c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000978:	489e      	ldr	r0, [pc, #632]	@ (8000bf4 <MX_GPIO_Init+0x310>)
 800097a:	f001 f97f 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000984:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000988:	f001 f978 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800098c:	2200      	movs	r2, #0
 800098e:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000992:	4899      	ldr	r0, [pc, #612]	@ (8000bf8 <MX_GPIO_Init+0x314>)
 8000994:	f001 f972 	bl	8001c7c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f241 0181 	movw	r1, #4225	@ 0x1081
 800099e:	4897      	ldr	r0, [pc, #604]	@ (8000bfc <MX_GPIO_Init+0x318>)
 80009a0:	f001 f96c 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009aa:	4894      	ldr	r0, [pc, #592]	@ (8000bfc <MX_GPIO_Init+0x318>)
 80009ac:	f001 f966 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80009b6:	4892      	ldr	r0, [pc, #584]	@ (8000c00 <MX_GPIO_Init+0x31c>)
 80009b8:	f001 f960 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	2120      	movs	r1, #32
 80009c0:	488d      	ldr	r0, [pc, #564]	@ (8000bf8 <MX_GPIO_Init+0x314>)
 80009c2:	f001 f95b 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	2101      	movs	r1, #1
 80009ca:	488a      	ldr	r0, [pc, #552]	@ (8000bf4 <MX_GPIO_Init+0x310>)
 80009cc:	f001 f956 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80009d0:	f240 1315 	movw	r3, #277	@ 0x115
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4882      	ldr	r0, [pc, #520]	@ (8000bf4 <MX_GPIO_Init+0x310>)
 80009ea:	f000 ff9d 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80009ee:	236a      	movs	r3, #106	@ 0x6a
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	487c      	ldr	r0, [pc, #496]	@ (8000bf4 <MX_GPIO_Init+0x310>)
 8000a04:	f000 ff90 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a0e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4878      	ldr	r0, [pc, #480]	@ (8000c00 <MX_GPIO_Init+0x31c>)
 8000a20:	f000 ff82 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a24:	233f      	movs	r3, #63	@ 0x3f
 8000a26:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a28:	230b      	movs	r3, #11
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4872      	ldr	r0, [pc, #456]	@ (8000c00 <MX_GPIO_Init+0x31c>)
 8000a38:	f000 ff76 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5a:	f000 ff65 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a5e:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7a:	f000 ff55 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a7e:	2308      	movs	r3, #8
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9c:	f000 ff44 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aa4:	230b      	movs	r3, #11
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab6:	f000 ff37 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000aba:	23e0      	movs	r3, #224	@ 0xe0
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aca:	2305      	movs	r3, #5
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad8:	f000 ff26 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000adc:	2301      	movs	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4841      	ldr	r0, [pc, #260]	@ (8000bf8 <MX_GPIO_Init+0x314>)
 8000af2:	f000 ff19 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000af6:	2302      	movs	r3, #2
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000afa:	230b      	movs	r3, #11
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	483b      	ldr	r0, [pc, #236]	@ (8000bf8 <MX_GPIO_Init+0x314>)
 8000b0a:	f000 ff0d 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b0e:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000b12:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	4834      	ldr	r0, [pc, #208]	@ (8000bf8 <MX_GPIO_Init+0x314>)
 8000b28:	f000 fefe 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b2c:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000b30:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b32:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	482e      	ldr	r0, [pc, #184]	@ (8000bfc <MX_GPIO_Init+0x318>)
 8000b44:	f000 fef0 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b48:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4826      	ldr	r0, [pc, #152]	@ (8000bfc <MX_GPIO_Init+0x318>)
 8000b62:	f000 fee1 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b66:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4820      	ldr	r0, [pc, #128]	@ (8000c00 <MX_GPIO_Init+0x31c>)
 8000b80:	f000 fed2 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b84:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4819      	ldr	r0, [pc, #100]	@ (8000c00 <MX_GPIO_Init+0x31c>)
 8000b9c:	f000 fec4 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bb0:	2305      	movs	r3, #5
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4810      	ldr	r0, [pc, #64]	@ (8000bfc <MX_GPIO_Init+0x318>)
 8000bbc:	f000 feb4 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000bc0:	2378      	movs	r3, #120	@ 0x78
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd0:	2307      	movs	r3, #7
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4808      	ldr	r0, [pc, #32]	@ (8000bfc <MX_GPIO_Init+0x318>)
 8000bdc:	f000 fea4 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000be0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be6:	2312      	movs	r3, #18
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e00a      	b.n	8000c04 <MX_GPIO_Init+0x320>
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	48001000 	.word	0x48001000
 8000bf8:	48000400 	.word	0x48000400
 8000bfc:	48000c00 	.word	0x48000c00
 8000c00:	48000800 	.word	0x48000800
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	480b      	ldr	r0, [pc, #44]	@ (8000c44 <MX_GPIO_Init+0x360>)
 8000c16:	f000 fe87 	bl	8001928 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2105      	movs	r1, #5
 8000c1e:	2017      	movs	r0, #23
 8000c20:	f000 fd3f 	bl	80016a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c24:	2017      	movs	r0, #23
 8000c26:	f000 fd58 	bl	80016da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2105      	movs	r1, #5
 8000c2e:	2028      	movs	r0, #40	@ 0x28
 8000c30:	f000 fd37 	bl	80016a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c34:	2028      	movs	r0, #40	@ 0x28
 8000c36:	f000 fd50 	bl	80016da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	@ 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	48000400 	.word	0x48000400

08000c48 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c58:	d106      	bne.n	8000c68 <HAL_GPIO_EXTI_Callback+0x20>
  {
  case GPIO_PIN_13:
	  //HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
	  osEventFlagsSet(button_press, 0x0001);
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2101      	movs	r1, #1
 8000c60:	4618      	mov	r0, r3
 8000c62:	f004 f8a3 	bl	8004dac <osEventFlagsSet>
    break;
 8000c66:	e000      	b.n	8000c6a <HAL_GPIO_EXTI_Callback+0x22>
  default:
    break;
 8000c68:	bf00      	nop
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000075c 	.word	0x2000075c

08000c78 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(button_press, 0x0001, osFlagsWaitAny, osWaitForever);
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <StartTask01+0x58>)
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	f004 f8d0 	bl	8004e30 <osEventFlagsWait>
	  osMutexAcquire(led_blink, osWaitForever);
 8000c90:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <StartTask01+0x5c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 f9b4 	bl	8005006 <osMutexAcquire>
	  for(int i=0; i<10; i++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	e00b      	b.n	8000cbc <StartTask01+0x44>
	  {
		  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000ca4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ca8:	480b      	ldr	r0, [pc, #44]	@ (8000cd8 <StartTask01+0x60>)
 8000caa:	f000 ffff 	bl	8001cac <HAL_GPIO_TogglePin>
		  osDelay(500);
 8000cae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cb2:	f004 f821 	bl	8004cf8 <osDelay>
	  for(int i=0; i<10; i++)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2b09      	cmp	r3, #9
 8000cc0:	ddf0      	ble.n	8000ca4 <StartTask01+0x2c>
	  }
	  //osEventFlagsClear(button_press, 0x0001); this prevents button press during blinking in task02
	  osMutexRelease(led_blink);
 8000cc2:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <StartTask01+0x5c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f004 f9e8 	bl	800509c <osMutexRelease>
	  osEventFlagsWait(button_press, 0x0001, osFlagsWaitAny, osWaitForever);
 8000ccc:	e7d8      	b.n	8000c80 <StartTask01+0x8>
 8000cce:	bf00      	nop
 8000cd0:	2000075c 	.word	0x2000075c
 8000cd4:	20000760 	.word	0x20000760
 8000cd8:	48000400 	.word	0x48000400

08000cdc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(8000);
 8000ce4:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8000ce8:	f004 f806 	bl	8004cf8 <osDelay>
	  osMutexAcquire(led_blink, osWaitForever);
 8000cec:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <StartTask02+0x4c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f004 f986 	bl	8005006 <osMutexAcquire>
	  for(int i=0; i<40; i++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	e00a      	b.n	8000d16 <StartTask02+0x3a>
	  {
		  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000d00:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d04:	4809      	ldr	r0, [pc, #36]	@ (8000d2c <StartTask02+0x50>)
 8000d06:	f000 ffd1 	bl	8001cac <HAL_GPIO_TogglePin>
		  osDelay(50);
 8000d0a:	2032      	movs	r0, #50	@ 0x32
 8000d0c:	f003 fff4 	bl	8004cf8 <osDelay>
	  for(int i=0; i<40; i++)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3301      	adds	r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2b27      	cmp	r3, #39	@ 0x27
 8000d1a:	ddf1      	ble.n	8000d00 <StartTask02+0x24>
	  }
	  //osEventFlagsClear(button_press, 0x0001); this doesn't prevent button press during blinking in task02
	  osMutexRelease(led_blink);
 8000d1c:	4b02      	ldr	r3, [pc, #8]	@ (8000d28 <StartTask02+0x4c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f004 f9bb 	bl	800509c <osMutexRelease>
	  osDelay(8000);
 8000d26:	e7dd      	b.n	8000ce4 <StartTask02+0x8>
 8000d28:	20000760 	.word	0x20000760
 8000d2c:	48000400 	.word	0x48000400

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <Error_Handler+0x8>

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d46:	4a10      	ldr	r2, [pc, #64]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d64:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d66:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	210f      	movs	r1, #15
 8000d76:	f06f 0001 	mvn.w	r0, #1
 8000d7a:	f000 fc92 	bl	80016a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0ac      	sub	sp, #176	@ 0xb0
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2288      	movs	r2, #136	@ 0x88
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f007 fc3b 	bl	8008628 <memset>
  if(DFSDM1_Init == 0)
 8000db2:	4b25      	ldr	r3, [pc, #148]	@ (8000e48 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d142      	bne.n	8000e40 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000dba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dbe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f002 f946 	bl	800305c <HAL_RCCEx_PeriphCLKConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000dd6:	f7ff ffab 	bl	8000d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000dda:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dde:	4a1b      	ldr	r2, [pc, #108]	@ (8000e4c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000de0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000de4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000de6:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df2:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	4a15      	ldr	r2, [pc, #84]	@ (8000e4c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000e0a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000e0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e24:	2306      	movs	r3, #6
 8000e26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e2a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4807      	ldr	r0, [pc, #28]	@ (8000e50 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000e32:	f000 fd79 	bl	8001928 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000e36:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	4a02      	ldr	r2, [pc, #8]	@ (8000e48 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e3e:	6013      	str	r3, [r2, #0]
  }

}
 8000e40:	bf00      	nop
 8000e42:	37b0      	adds	r7, #176	@ 0xb0
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000764 	.word	0x20000764
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	48001000 	.word	0x48001000

08000e54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b0ac      	sub	sp, #176	@ 0xb0
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2288      	movs	r2, #136	@ 0x88
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f007 fbd7 	bl	8008628 <memset>
  if(hi2c->Instance==I2C2)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a21      	ldr	r2, [pc, #132]	@ (8000f04 <HAL_I2C_MspInit+0xb0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d13b      	bne.n	8000efc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e84:	2380      	movs	r3, #128	@ 0x80
 8000e86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4618      	mov	r0, r3
 8000e92:	f002 f8e3 	bl	800305c <HAL_RCCEx_PeriphCLKConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e9c:	f7ff ff48 	bl	8000d30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea0:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea4:	4a18      	ldr	r2, [pc, #96]	@ (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ea6:	f043 0302 	orr.w	r3, r3, #2
 8000eaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000eb8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ebc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec0:	2312      	movs	r3, #18
 8000ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000edc:	4619      	mov	r1, r3
 8000ede:	480b      	ldr	r0, [pc, #44]	@ (8000f0c <HAL_I2C_MspInit+0xb8>)
 8000ee0:	f000 fd22 	bl	8001928 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee8:	4a07      	ldr	r2, [pc, #28]	@ (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000eea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000efc:	bf00      	nop
 8000efe:	37b0      	adds	r7, #176	@ 0xb0
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40005800 	.word	0x40005800
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	48000400 	.word	0x48000400

08000f10 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	@ 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a17      	ldr	r2, [pc, #92]	@ (8000f8c <HAL_QSPI_MspInit+0x7c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d128      	bne.n	8000f84 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f32:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <HAL_QSPI_MspInit+0x80>)
 8000f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f36:	4a16      	ldr	r2, [pc, #88]	@ (8000f90 <HAL_QSPI_MspInit+0x80>)
 8000f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f3c:	6513      	str	r3, [r2, #80]	@ 0x50
 8000f3e:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <HAL_QSPI_MspInit+0x80>)
 8000f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <HAL_QSPI_MspInit+0x80>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4e:	4a10      	ldr	r2, [pc, #64]	@ (8000f90 <HAL_QSPI_MspInit+0x80>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <HAL_QSPI_MspInit+0x80>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f62:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000f66:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f74:	230a      	movs	r3, #10
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <HAL_QSPI_MspInit+0x84>)
 8000f80:	f000 fcd2 	bl	8001928 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	@ 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	a0001000 	.word	0xa0001000
 8000f90:	40021000 	.word	0x40021000
 8000f94:	48001000 	.word	0x48001000

08000f98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a17      	ldr	r2, [pc, #92]	@ (8001014 <HAL_SPI_MspInit+0x7c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d128      	bne.n	800100c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fbe:	4a16      	ldr	r2, [pc, #88]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fc6:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000fea:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	4805      	ldr	r0, [pc, #20]	@ (800101c <HAL_SPI_MspInit+0x84>)
 8001008:	f000 fc8e 	bl	8001928 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	@ 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40003c00 	.word	0x40003c00
 8001018:	40021000 	.word	0x40021000
 800101c:	48000800 	.word	0x48000800

08001020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0ae      	sub	sp, #184	@ 0xb8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	2288      	movs	r2, #136	@ 0x88
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f007 faf1 	bl	8008628 <memset>
  if(huart->Instance==USART1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a42      	ldr	r2, [pc, #264]	@ (8001154 <HAL_UART_MspInit+0x134>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d13b      	bne.n	80010c8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001050:	2301      	movs	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001054:	2300      	movs	r3, #0
 8001056:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fffd 	bl	800305c <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001068:	f7ff fe62 	bl	8000d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800106c:	4b3a      	ldr	r3, [pc, #232]	@ (8001158 <HAL_UART_MspInit+0x138>)
 800106e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001070:	4a39      	ldr	r2, [pc, #228]	@ (8001158 <HAL_UART_MspInit+0x138>)
 8001072:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001076:	6613      	str	r3, [r2, #96]	@ 0x60
 8001078:	4b37      	ldr	r3, [pc, #220]	@ (8001158 <HAL_UART_MspInit+0x138>)
 800107a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001080:	61bb      	str	r3, [r7, #24]
 8001082:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001084:	4b34      	ldr	r3, [pc, #208]	@ (8001158 <HAL_UART_MspInit+0x138>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001088:	4a33      	ldr	r2, [pc, #204]	@ (8001158 <HAL_UART_MspInit+0x138>)
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001090:	4b31      	ldr	r3, [pc, #196]	@ (8001158 <HAL_UART_MspInit+0x138>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800109c:	23c0      	movs	r3, #192	@ 0xc0
 800109e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010b4:	2307      	movs	r3, #7
 80010b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010be:	4619      	mov	r1, r3
 80010c0:	4826      	ldr	r0, [pc, #152]	@ (800115c <HAL_UART_MspInit+0x13c>)
 80010c2:	f000 fc31 	bl	8001928 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010c6:	e040      	b.n	800114a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a24      	ldr	r2, [pc, #144]	@ (8001160 <HAL_UART_MspInit+0x140>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d13b      	bne.n	800114a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010d2:	2304      	movs	r3, #4
 80010d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 ffbc 	bl	800305c <HAL_RCCEx_PeriphCLKConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_UART_MspInit+0xce>
      Error_Handler();
 80010ea:	f7ff fe21 	bl	8000d30 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <HAL_UART_MspInit+0x138>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f2:	4a19      	ldr	r2, [pc, #100]	@ (8001158 <HAL_UART_MspInit+0x138>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010fa:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <HAL_UART_MspInit+0x138>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <HAL_UART_MspInit+0x138>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	4a13      	ldr	r2, [pc, #76]	@ (8001158 <HAL_UART_MspInit+0x138>)
 800110c:	f043 0308 	orr.w	r3, r3, #8
 8001110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001112:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <HAL_UART_MspInit+0x138>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800111e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001138:	2307      	movs	r3, #7
 800113a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800113e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001142:	4619      	mov	r1, r3
 8001144:	4807      	ldr	r0, [pc, #28]	@ (8001164 <HAL_UART_MspInit+0x144>)
 8001146:	f000 fbef 	bl	8001928 <HAL_GPIO_Init>
}
 800114a:	bf00      	nop
 800114c:	37b8      	adds	r7, #184	@ 0xb8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40013800 	.word	0x40013800
 8001158:	40021000 	.word	0x40021000
 800115c:	48000400 	.word	0x48000400
 8001160:	40004800 	.word	0x40004800
 8001164:	48000c00 	.word	0x48000c00

08001168 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0ac      	sub	sp, #176	@ 0xb0
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2288      	movs	r2, #136	@ 0x88
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f007 fa4d 	bl	8008628 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001196:	d17c      	bne.n	8001292 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001198:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800119c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800119e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80011a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80011a6:	2301      	movs	r3, #1
 80011a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80011ae:	2318      	movs	r3, #24
 80011b0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011b2:	2307      	movs	r3, #7
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80011be:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011c2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 ff47 	bl	800305c <HAL_RCCEx_PeriphCLKConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80011d4:	f7ff fdac 	bl	8000d30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	4b30      	ldr	r3, [pc, #192]	@ (800129c <HAL_PCD_MspInit+0x134>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011dc:	4a2f      	ldr	r2, [pc, #188]	@ (800129c <HAL_PCD_MspInit+0x134>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e4:	4b2d      	ldr	r3, [pc, #180]	@ (800129c <HAL_PCD_MspInit+0x134>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80011f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001208:	4619      	mov	r1, r3
 800120a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120e:	f000 fb8b 	bl	8001928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001212:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001216:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800122c:	230a      	movs	r3, #10
 800122e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123c:	f000 fb74 	bl	8001928 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <HAL_PCD_MspInit+0x134>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001244:	4a15      	ldr	r2, [pc, #84]	@ (800129c <HAL_PCD_MspInit+0x134>)
 8001246:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800124a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124c:	4b13      	ldr	r3, [pc, #76]	@ (800129c <HAL_PCD_MspInit+0x134>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001250:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <HAL_PCD_MspInit+0x134>)
 800125a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d114      	bne.n	800128e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001264:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <HAL_PCD_MspInit+0x134>)
 8001266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001268:	4a0c      	ldr	r2, [pc, #48]	@ (800129c <HAL_PCD_MspInit+0x134>)
 800126a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001270:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <HAL_PCD_MspInit+0x134>)
 8001272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800127c:	f001 f822 	bl	80022c4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_PCD_MspInit+0x134>)
 8001282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001284:	4a05      	ldr	r2, [pc, #20]	@ (800129c <HAL_PCD_MspInit+0x134>)
 8001286:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800128a:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800128c:	e001      	b.n	8001292 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800128e:	f001 f819 	bl	80022c4 <HAL_PWREx_EnableVddUSB>
}
 8001292:	bf00      	nop
 8001294:	37b0      	adds	r7, #176	@ 0xb0
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <NMI_Handler+0x4>

080012a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <MemManage_Handler+0x4>

080012b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012da:	f000 f8c3 	bl	8001464 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012de:	f005 ffeb 	bl	80072b8 <xTaskGetSchedulerState>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d001      	beq.n	80012ec <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012e8:	f006 ff1e 	bl	8008128 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80012f4:	2020      	movs	r0, #32
 80012f6:	f000 fcf3 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80012fa:	2040      	movs	r0, #64	@ 0x40
 80012fc:	f000 fcf0 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001300:	2080      	movs	r0, #128	@ 0x80
 8001302:	f000 fced 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001306:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800130a:	f000 fce9 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}

08001312 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001316:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800131a:	f000 fce1 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800131e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001322:	f000 fcdd 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001326:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800132a:	f000 fcd9 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800132e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001332:	f000 fcd5 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001336:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800133a:	f000 fcd1 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <SystemInit+0x20>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800134e:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <SystemInit+0x20>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001368:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800136c:	f7ff ffea 	bl	8001344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001370:	480c      	ldr	r0, [pc, #48]	@ (80013a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001372:	490d      	ldr	r1, [pc, #52]	@ (80013a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001374:	4a0d      	ldr	r2, [pc, #52]	@ (80013ac <LoopForever+0xe>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001378:	e002      	b.n	8001380 <LoopCopyDataInit>

0800137a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800137c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137e:	3304      	adds	r3, #4

08001380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001384:	d3f9      	bcc.n	800137a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001386:	4a0a      	ldr	r2, [pc, #40]	@ (80013b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001388:	4c0a      	ldr	r4, [pc, #40]	@ (80013b4 <LoopForever+0x16>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800138c:	e001      	b.n	8001392 <LoopFillZerobss>

0800138e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001390:	3204      	adds	r2, #4

08001392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001394:	d3fb      	bcc.n	800138e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001396:	f007 f94f 	bl	8008638 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800139a:	f7ff f891 	bl	80004c0 <main>

0800139e <LoopForever>:

LoopForever:
    b LoopForever
 800139e:	e7fe      	b.n	800139e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80013ac:	08008784 	.word	0x08008784
  ldr r2, =_sbss
 80013b0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80013b4:	20002098 	.word	0x20002098

080013b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC1_2_IRQHandler>

080013ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c4:	2003      	movs	r0, #3
 80013c6:	f000 f961 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ca:	200f      	movs	r0, #15
 80013cc:	f000 f80e 	bl	80013ec <HAL_InitTick>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	e001      	b.n	80013e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013dc:	f7ff fcae 	bl	8000d3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013e0:	79fb      	ldrb	r3, [r7, #7]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013f8:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <HAL_InitTick+0x6c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d023      	beq.n	8001448 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001400:	4b16      	ldr	r3, [pc, #88]	@ (800145c <HAL_InitTick+0x70>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <HAL_InitTick+0x6c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f96d 	bl	80016f6 <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10f      	bne.n	8001442 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d809      	bhi.n	800143c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f000 f937 	bl	80016a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001434:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <HAL_InitTick+0x74>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e007      	b.n	800144c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	e004      	b.n	800144c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	e001      	b.n	800144c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800144c:	7bfb      	ldrb	r3, [r7, #15]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000008 	.word	0x20000008
 800145c:	20000000 	.word	0x20000000
 8001460:	20000004 	.word	0x20000004

08001464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <HAL_IncTick+0x20>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <HAL_IncTick+0x24>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4413      	add	r3, r2
 8001474:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <HAL_IncTick+0x24>)
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000008 	.word	0x20000008
 8001488:	20000768 	.word	0x20000768

0800148c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return uwTick;
 8001490:	4b03      	ldr	r3, [pc, #12]	@ (80014a0 <HAL_GetTick+0x14>)
 8001492:	681b      	ldr	r3, [r3, #0]
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000768 	.word	0x20000768

080014a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ac:	f7ff ffee 	bl	800148c <HAL_GetTick>
 80014b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014bc:	d005      	beq.n	80014ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <HAL_Delay+0x44>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4413      	add	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ca:	bf00      	nop
 80014cc:	f7ff ffde 	bl	800148c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d8f7      	bhi.n	80014cc <HAL_Delay+0x28>
  {
  }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000008 	.word	0x20000008

080014ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001508:	4013      	ands	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001514:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800151c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151e:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	60d3      	str	r3, [r2, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001538:	4b04      	ldr	r3, [pc, #16]	@ (800154c <__NVIC_GetPriorityGrouping+0x18>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	f003 0307 	and.w	r3, r3, #7
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db0b      	blt.n	800157a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	4907      	ldr	r1, [pc, #28]	@ (8001588 <__NVIC_EnableIRQ+0x38>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	2001      	movs	r0, #1
 8001572:	fa00 f202 	lsl.w	r2, r0, r2
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	@ (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	@ (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
         );
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	@ 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f7ff ff8e 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff29 	bl	80014ec <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff3e 	bl	8001534 <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff8e 	bl	80015e0 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5d 	bl	800158c <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff31 	bl	8001550 <__NVIC_EnableIRQ>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffa2 	bl	8001648 <SysTick_Config>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e0ac      	b.n	800187c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f8b2 	bl	8001890 <DFSDM_GetChannelFromInstance>
 800172c:	4603      	mov	r3, r0
 800172e:	4a55      	ldr	r2, [pc, #340]	@ (8001884 <HAL_DFSDM_ChannelInit+0x174>)
 8001730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e09f      	b.n	800187c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff fb25 	bl	8000d8c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001742:	4b51      	ldr	r3, [pc, #324]	@ (8001888 <HAL_DFSDM_ChannelInit+0x178>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	4a4f      	ldr	r2, [pc, #316]	@ (8001888 <HAL_DFSDM_ChannelInit+0x178>)
 800174a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800174c:	4b4e      	ldr	r3, [pc, #312]	@ (8001888 <HAL_DFSDM_ChannelInit+0x178>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d125      	bne.n	80017a0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001754:	4b4d      	ldr	r3, [pc, #308]	@ (800188c <HAL_DFSDM_ChannelInit+0x17c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a4c      	ldr	r2, [pc, #304]	@ (800188c <HAL_DFSDM_ChannelInit+0x17c>)
 800175a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800175e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001760:	4b4a      	ldr	r3, [pc, #296]	@ (800188c <HAL_DFSDM_ChannelInit+0x17c>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4948      	ldr	r1, [pc, #288]	@ (800188c <HAL_DFSDM_ChannelInit+0x17c>)
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800176e:	4b47      	ldr	r3, [pc, #284]	@ (800188c <HAL_DFSDM_ChannelInit+0x17c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a46      	ldr	r2, [pc, #280]	@ (800188c <HAL_DFSDM_ChannelInit+0x17c>)
 8001774:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001778:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	791b      	ldrb	r3, [r3, #4]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d108      	bne.n	8001794 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001782:	4b42      	ldr	r3, [pc, #264]	@ (800188c <HAL_DFSDM_ChannelInit+0x17c>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	3b01      	subs	r3, #1
 800178c:	041b      	lsls	r3, r3, #16
 800178e:	493f      	ldr	r1, [pc, #252]	@ (800188c <HAL_DFSDM_ChannelInit+0x17c>)
 8001790:	4313      	orrs	r3, r2
 8001792:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001794:	4b3d      	ldr	r3, [pc, #244]	@ (800188c <HAL_DFSDM_ChannelInit+0x17c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a3c      	ldr	r2, [pc, #240]	@ (800188c <HAL_DFSDM_ChannelInit+0x17c>)
 800179a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800179e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80017ae:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6819      	ldr	r1, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017be:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017c4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 020f 	bic.w	r2, r2, #15
 80017dc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6819      	ldr	r1, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001804:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6899      	ldr	r1, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001814:	3b01      	subs	r3, #1
 8001816:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f002 0207 	and.w	r2, r2, #7
 8001830:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800185c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f810 	bl	8001890 <DFSDM_GetChannelFromInstance>
 8001870:	4602      	mov	r2, r0
 8001872:	4904      	ldr	r1, [pc, #16]	@ (8001884 <HAL_DFSDM_ChannelInit+0x174>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000770 	.word	0x20000770
 8001888:	2000076c 	.word	0x2000076c
 800188c:	40016000 	.word	0x40016000

08001890 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a1c      	ldr	r2, [pc, #112]	@ (800190c <DFSDM_GetChannelFromInstance+0x7c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d102      	bne.n	80018a6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	e02b      	b.n	80018fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a19      	ldr	r2, [pc, #100]	@ (8001910 <DFSDM_GetChannelFromInstance+0x80>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d102      	bne.n	80018b4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80018ae:	2301      	movs	r3, #1
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	e024      	b.n	80018fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a17      	ldr	r2, [pc, #92]	@ (8001914 <DFSDM_GetChannelFromInstance+0x84>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d102      	bne.n	80018c2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80018bc:	2302      	movs	r3, #2
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	e01d      	b.n	80018fe <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a14      	ldr	r2, [pc, #80]	@ (8001918 <DFSDM_GetChannelFromInstance+0x88>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d102      	bne.n	80018d0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80018ca:	2304      	movs	r3, #4
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	e016      	b.n	80018fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a12      	ldr	r2, [pc, #72]	@ (800191c <DFSDM_GetChannelFromInstance+0x8c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d102      	bne.n	80018de <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80018d8:	2305      	movs	r3, #5
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	e00f      	b.n	80018fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001920 <DFSDM_GetChannelFromInstance+0x90>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d102      	bne.n	80018ec <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80018e6:	2306      	movs	r3, #6
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	e008      	b.n	80018fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001924 <DFSDM_GetChannelFromInstance+0x94>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d102      	bne.n	80018fa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80018f4:	2307      	movs	r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	e001      	b.n	80018fe <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80018fa:	2303      	movs	r3, #3
 80018fc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	40016000 	.word	0x40016000
 8001910:	40016020 	.word	0x40016020
 8001914:	40016040 	.word	0x40016040
 8001918:	40016080 	.word	0x40016080
 800191c:	400160a0 	.word	0x400160a0
 8001920:	400160c0 	.word	0x400160c0
 8001924:	400160e0 	.word	0x400160e0

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001936:	e17f      	b.n	8001c38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	2101      	movs	r1, #1
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	4013      	ands	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 8171 	beq.w	8001c32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d005      	beq.n	8001968 <HAL_GPIO_Init+0x40>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d130      	bne.n	80019ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800199e:	2201      	movs	r2, #1
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	f003 0201 	and.w	r2, r3, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d118      	bne.n	8001a08 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019dc:	2201      	movs	r2, #1
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	08db      	lsrs	r3, r3, #3
 80019f2:	f003 0201 	and.w	r2, r3, #1
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d017      	beq.n	8001a44 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d123      	bne.n	8001a98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	08da      	lsrs	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3208      	adds	r2, #8
 8001a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	220f      	movs	r2, #15
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	08da      	lsrs	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3208      	adds	r2, #8
 8001a92:	6939      	ldr	r1, [r7, #16]
 8001a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0203 	and.w	r2, r3, #3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80ac 	beq.w	8001c32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	4b5f      	ldr	r3, [pc, #380]	@ (8001c58 <HAL_GPIO_Init+0x330>)
 8001adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ade:	4a5e      	ldr	r2, [pc, #376]	@ (8001c58 <HAL_GPIO_Init+0x330>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ae6:	4b5c      	ldr	r3, [pc, #368]	@ (8001c58 <HAL_GPIO_Init+0x330>)
 8001ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001af2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c5c <HAL_GPIO_Init+0x334>)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	220f      	movs	r2, #15
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b1c:	d025      	beq.n	8001b6a <HAL_GPIO_Init+0x242>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4f      	ldr	r2, [pc, #316]	@ (8001c60 <HAL_GPIO_Init+0x338>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d01f      	beq.n	8001b66 <HAL_GPIO_Init+0x23e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4e      	ldr	r2, [pc, #312]	@ (8001c64 <HAL_GPIO_Init+0x33c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d019      	beq.n	8001b62 <HAL_GPIO_Init+0x23a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4d      	ldr	r2, [pc, #308]	@ (8001c68 <HAL_GPIO_Init+0x340>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_GPIO_Init+0x236>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4c      	ldr	r2, [pc, #304]	@ (8001c6c <HAL_GPIO_Init+0x344>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00d      	beq.n	8001b5a <HAL_GPIO_Init+0x232>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4b      	ldr	r2, [pc, #300]	@ (8001c70 <HAL_GPIO_Init+0x348>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d007      	beq.n	8001b56 <HAL_GPIO_Init+0x22e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4a      	ldr	r2, [pc, #296]	@ (8001c74 <HAL_GPIO_Init+0x34c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d101      	bne.n	8001b52 <HAL_GPIO_Init+0x22a>
 8001b4e:	2306      	movs	r3, #6
 8001b50:	e00c      	b.n	8001b6c <HAL_GPIO_Init+0x244>
 8001b52:	2307      	movs	r3, #7
 8001b54:	e00a      	b.n	8001b6c <HAL_GPIO_Init+0x244>
 8001b56:	2305      	movs	r3, #5
 8001b58:	e008      	b.n	8001b6c <HAL_GPIO_Init+0x244>
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x244>
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e004      	b.n	8001b6c <HAL_GPIO_Init+0x244>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e002      	b.n	8001b6c <HAL_GPIO_Init+0x244>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_GPIO_Init+0x244>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	f002 0203 	and.w	r2, r2, #3
 8001b72:	0092      	lsls	r2, r2, #2
 8001b74:	4093      	lsls	r3, r2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b7c:	4937      	ldr	r1, [pc, #220]	@ (8001c5c <HAL_GPIO_Init+0x334>)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	3302      	adds	r3, #2
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c78 <HAL_GPIO_Init+0x350>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bae:	4a32      	ldr	r2, [pc, #200]	@ (8001c78 <HAL_GPIO_Init+0x350>)
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bb4:	4b30      	ldr	r3, [pc, #192]	@ (8001c78 <HAL_GPIO_Init+0x350>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bd8:	4a27      	ldr	r2, [pc, #156]	@ (8001c78 <HAL_GPIO_Init+0x350>)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bde:	4b26      	ldr	r3, [pc, #152]	@ (8001c78 <HAL_GPIO_Init+0x350>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c02:	4a1d      	ldr	r2, [pc, #116]	@ (8001c78 <HAL_GPIO_Init+0x350>)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <HAL_GPIO_Init+0x350>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c2c:	4a12      	ldr	r2, [pc, #72]	@ (8001c78 <HAL_GPIO_Init+0x350>)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	3301      	adds	r3, #1
 8001c36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f47f ae78 	bne.w	8001938 <HAL_GPIO_Init+0x10>
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	371c      	adds	r7, #28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	48000400 	.word	0x48000400
 8001c64:	48000800 	.word	0x48000800
 8001c68:	48000c00 	.word	0x48000c00
 8001c6c:	48001000 	.word	0x48001000
 8001c70:	48001400 	.word	0x48001400
 8001c74:	48001800 	.word	0x48001800
 8001c78:	40010400 	.word	0x40010400

08001c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c8c:	787b      	ldrb	r3, [r7, #1]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c98:	e002      	b.n	8001ca0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	041a      	lsls	r2, r3, #16
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	43d9      	mvns	r1, r3
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	400b      	ands	r3, r1
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cea:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cf6:	4a05      	ldr	r2, [pc, #20]	@ (8001d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe ffa2 	bl	8000c48 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40010400 	.word	0x40010400

08001d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e08d      	b.n	8001e3e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d106      	bne.n	8001d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff f88c 	bl	8000e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2224      	movs	r2, #36	@ 0x24
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0201 	bic.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d107      	bne.n	8001d8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	e006      	b.n	8001d98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d108      	bne.n	8001db2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	e007      	b.n	8001dc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001de4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691a      	ldr	r2, [r3, #16]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69d9      	ldr	r1, [r3, #28]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1a      	ldr	r2, [r3, #32]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b20      	cmp	r3, #32
 8001e5a:	d138      	bne.n	8001ece <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e032      	b.n	8001ed0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2224      	movs	r2, #36	@ 0x24
 8001e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0201 	bic.w	r2, r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e98:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6819      	ldr	r1, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ece:	2302      	movs	r3, #2
  }
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b20      	cmp	r3, #32
 8001ef0:	d139      	bne.n	8001f66 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e033      	b.n	8001f68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2224      	movs	r2, #36	@ 0x24
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0201 	bic.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f2e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2220      	movs	r2, #32
 8001f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	e000      	b.n	8001f68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f66:	2302      	movs	r3, #2
  }
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e101      	b.n	800218a <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff f8e4 	bl	8001168 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f002 fb10 	bl	80045d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	7c1a      	ldrb	r2, [r3, #16]
 8001fc0:	f88d 2000 	strb.w	r2, [sp]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc8:	f002 fad9 	bl	800457e <USB_CoreInit>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0d5      	b.n	800218a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f002 fb08 	bl	80045fa <USB_SetCurrentMode>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0c6      	b.n	800218a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	e04a      	b.n	8002098 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	3315      	adds	r3, #21
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	3314      	adds	r3, #20
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	b298      	uxth	r0, r3
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	332e      	adds	r3, #46	@ 0x2e
 800203e:	4602      	mov	r2, r0
 8002040:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	3318      	adds	r3, #24
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	331c      	adds	r3, #28
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	3320      	adds	r3, #32
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	3324      	adds	r3, #36	@ 0x24
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	3301      	adds	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	791b      	ldrb	r3, [r3, #4]
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d3af      	bcc.n	8002002 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]
 80020a6:	e044      	b.n	8002132 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020a8:	7bfa      	ldrb	r2, [r7, #15]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	3301      	adds	r3, #1
 8002130:	73fb      	strb	r3, [r7, #15]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	791b      	ldrb	r3, [r3, #4]
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	429a      	cmp	r2, r3
 800213a:	d3b5      	bcc.n	80020a8 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7c1a      	ldrb	r2, [r3, #16]
 8002144:	f88d 2000 	strb.w	r2, [sp]
 8002148:	3304      	adds	r3, #4
 800214a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800214c:	f002 faa2 	bl	8004694 <USB_DevInit>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2202      	movs	r2, #2
 800215a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e013      	b.n	800218a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7b1b      	ldrb	r3, [r3, #12]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d102      	bne.n	800217e <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f80a 	bl	8002192 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f002 fc47 	bl	8004a16 <USB_DevDisconnect>

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c4:	f043 0303 	orr.w	r3, r3, #3
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e0:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a04      	ldr	r2, [pc, #16]	@ (80021f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ea:	6013      	str	r3, [r2, #0]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40007000 	.word	0x40007000

080021fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002200:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <HAL_PWREx_GetVoltageRange+0x18>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40007000 	.word	0x40007000

08002218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002226:	d130      	bne.n	800228a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002228:	4b23      	ldr	r3, [pc, #140]	@ (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002234:	d038      	beq.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002236:	4b20      	ldr	r3, [pc, #128]	@ (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800223e:	4a1e      	ldr	r2, [pc, #120]	@ (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002240:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002244:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002246:	4b1d      	ldr	r3, [pc, #116]	@ (80022bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2232      	movs	r2, #50	@ 0x32
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	4a1b      	ldr	r2, [pc, #108]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	0c9b      	lsrs	r3, r3, #18
 8002258:	3301      	adds	r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800225c:	e002      	b.n	8002264 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3b01      	subs	r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002264:	4b14      	ldr	r3, [pc, #80]	@ (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800226c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002270:	d102      	bne.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f2      	bne.n	800225e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002278:	4b0f      	ldr	r3, [pc, #60]	@ (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002284:	d110      	bne.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e00f      	b.n	80022aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800228a:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002296:	d007      	beq.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002298:	4b07      	ldr	r3, [pc, #28]	@ (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022a0:	4a05      	ldr	r2, [pc, #20]	@ (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40007000 	.word	0x40007000
 80022bc:	20000000 	.word	0x20000000
 80022c0:	431bde83 	.word	0x431bde83

080022c4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80022c8:	4b05      	ldr	r3, [pc, #20]	@ (80022e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	4a04      	ldr	r2, [pc, #16]	@ (80022e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80022ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022d2:	6053      	str	r3, [r2, #4]
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40007000 	.word	0x40007000

080022e4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80022ec:	f7ff f8ce 	bl	800148c <HAL_GetTick>
 80022f0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e063      	b.n	80023c4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10b      	bne.n	8002320 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7fe fdfd 	bl	8000f10 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002316:	f241 3188 	movw	r1, #5000	@ 0x1388
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f858 	bl	80023d0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	3b01      	subs	r3, #1
 8002330:	021a      	lsls	r2, r3, #8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	2120      	movs	r1, #32
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f850 	bl	80023ec <QSPI_WaitFlagStateUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002350:	7afb      	ldrb	r3, [r7, #11]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d131      	bne.n	80023ba <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002360:	f023 0310 	bic.w	r3, r3, #16
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6852      	ldr	r2, [r2, #4]
 8002368:	0611      	lsls	r1, r2, #24
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68d2      	ldr	r2, [r2, #12]
 800236e:	4311      	orrs	r1, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	430b      	orrs	r3, r1
 8002376:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	4b13      	ldr	r3, [pc, #76]	@ (80023cc <HAL_QSPI_Init+0xe8>)
 8002380:	4013      	ands	r3, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6912      	ldr	r2, [r2, #16]
 8002386:	0411      	lsls	r1, r2, #16
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6952      	ldr	r2, [r2, #20]
 800238c:	4311      	orrs	r1, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6992      	ldr	r2, [r2, #24]
 8002392:	4311      	orrs	r1, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	430b      	orrs	r3, r1
 800239a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80023c2:	7afb      	ldrb	r3, [r7, #11]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	ffe0f8fe 	.word	0xffe0f8fe

080023d0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80023fc:	e01a      	b.n	8002434 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002404:	d016      	beq.n	8002434 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002406:	f7ff f841 	bl	800148c <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	429a      	cmp	r2, r3
 8002414:	d302      	bcc.n	800241c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10b      	bne.n	8002434 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2204      	movs	r2, #4
 8002420:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e00e      	b.n	8002452 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	bf14      	ite	ne
 8002442:	2301      	movne	r3, #1
 8002444:	2300      	moveq	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	429a      	cmp	r2, r3
 800244e:	d1d6      	bne.n	80023fe <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e3ca      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246e:	4b97      	ldr	r3, [pc, #604]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002478:	4b94      	ldr	r3, [pc, #592]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80e4 	beq.w	8002658 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_RCC_OscConfig+0x4a>
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b0c      	cmp	r3, #12
 800249a:	f040 808b 	bne.w	80025b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	f040 8087 	bne.w	80025b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024a6:	4b89      	ldr	r3, [pc, #548]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_RCC_OscConfig+0x62>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e3a2      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1a      	ldr	r2, [r3, #32]
 80024c2:	4b82      	ldr	r3, [pc, #520]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <HAL_RCC_OscConfig+0x7c>
 80024ce:	4b7f      	ldr	r3, [pc, #508]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024d6:	e005      	b.n	80024e4 <HAL_RCC_OscConfig+0x88>
 80024d8:	4b7c      	ldr	r3, [pc, #496]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024de:	091b      	lsrs	r3, r3, #4
 80024e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d223      	bcs.n	8002530 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 fd55 	bl	8002f9c <RCC_SetFlashLatencyFromMSIRange>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e383      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024fc:	4b73      	ldr	r3, [pc, #460]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a72      	ldr	r2, [pc, #456]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 8002502:	f043 0308 	orr.w	r3, r3, #8
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b70      	ldr	r3, [pc, #448]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	496d      	ldr	r1, [pc, #436]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800251a:	4b6c      	ldr	r3, [pc, #432]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	4968      	ldr	r1, [pc, #416]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
 800252e:	e025      	b.n	800257c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002530:	4b66      	ldr	r3, [pc, #408]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a65      	ldr	r2, [pc, #404]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 8002536:	f043 0308 	orr.w	r3, r3, #8
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b63      	ldr	r3, [pc, #396]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	4960      	ldr	r1, [pc, #384]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800254e:	4b5f      	ldr	r3, [pc, #380]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	495b      	ldr	r1, [pc, #364]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fd15 	bl	8002f9c <RCC_SetFlashLatencyFromMSIRange>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e343      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800257c:	f000 fc4a 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8002580:	4602      	mov	r2, r0
 8002582:	4b52      	ldr	r3, [pc, #328]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	4950      	ldr	r1, [pc, #320]	@ (80026d0 <HAL_RCC_OscConfig+0x274>)
 800258e:	5ccb      	ldrb	r3, [r1, r3]
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
 8002598:	4a4e      	ldr	r2, [pc, #312]	@ (80026d4 <HAL_RCC_OscConfig+0x278>)
 800259a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800259c:	4b4e      	ldr	r3, [pc, #312]	@ (80026d8 <HAL_RCC_OscConfig+0x27c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe ff23 	bl	80013ec <HAL_InitTick>
 80025a6:	4603      	mov	r3, r0
 80025a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d052      	beq.n	8002656 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	e327      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d032      	beq.n	8002622 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025bc:	4b43      	ldr	r3, [pc, #268]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a42      	ldr	r2, [pc, #264]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025c8:	f7fe ff60 	bl	800148c <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025d0:	f7fe ff5c 	bl	800148c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e310      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025e2:	4b3a      	ldr	r3, [pc, #232]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ee:	4b37      	ldr	r3, [pc, #220]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a36      	ldr	r2, [pc, #216]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 80025f4:	f043 0308 	orr.w	r3, r3, #8
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b34      	ldr	r3, [pc, #208]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	4931      	ldr	r1, [pc, #196]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 8002608:	4313      	orrs	r3, r2
 800260a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800260c:	4b2f      	ldr	r3, [pc, #188]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	492c      	ldr	r1, [pc, #176]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
 8002620:	e01a      	b.n	8002658 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002622:	4b2a      	ldr	r3, [pc, #168]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a29      	ldr	r2, [pc, #164]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800262e:	f7fe ff2d 	bl	800148c <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002636:	f7fe ff29 	bl	800148c <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e2dd      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002648:	4b20      	ldr	r3, [pc, #128]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f0      	bne.n	8002636 <HAL_RCC_OscConfig+0x1da>
 8002654:	e000      	b.n	8002658 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002656:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d074      	beq.n	800274e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b08      	cmp	r3, #8
 8002668:	d005      	beq.n	8002676 <HAL_RCC_OscConfig+0x21a>
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2b0c      	cmp	r3, #12
 800266e:	d10e      	bne.n	800268e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2b03      	cmp	r3, #3
 8002674:	d10b      	bne.n	800268e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002676:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d064      	beq.n	800274c <HAL_RCC_OscConfig+0x2f0>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d160      	bne.n	800274c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e2ba      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002696:	d106      	bne.n	80026a6 <HAL_RCC_OscConfig+0x24a>
 8002698:	4b0c      	ldr	r3, [pc, #48]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0b      	ldr	r2, [pc, #44]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 800269e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	e026      	b.n	80026f4 <HAL_RCC_OscConfig+0x298>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026ae:	d115      	bne.n	80026dc <HAL_RCC_OscConfig+0x280>
 80026b0:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a05      	ldr	r2, [pc, #20]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 80026b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b03      	ldr	r3, [pc, #12]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a02      	ldr	r2, [pc, #8]	@ (80026cc <HAL_RCC_OscConfig+0x270>)
 80026c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	e014      	b.n	80026f4 <HAL_RCC_OscConfig+0x298>
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000
 80026d0:	0800872c 	.word	0x0800872c
 80026d4:	20000000 	.word	0x20000000
 80026d8:	20000004 	.word	0x20000004
 80026dc:	4ba0      	ldr	r3, [pc, #640]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a9f      	ldr	r2, [pc, #636]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 80026e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	4b9d      	ldr	r3, [pc, #628]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a9c      	ldr	r2, [pc, #624]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 80026ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d013      	beq.n	8002724 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fc:	f7fe fec6 	bl	800148c <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002704:	f7fe fec2 	bl	800148c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b64      	cmp	r3, #100	@ 0x64
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e276      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002716:	4b92      	ldr	r3, [pc, #584]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x2a8>
 8002722:	e014      	b.n	800274e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002724:	f7fe feb2 	bl	800148c <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800272c:	f7fe feae 	bl	800148c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	@ 0x64
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e262      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800273e:	4b88      	ldr	r3, [pc, #544]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x2d0>
 800274a:	e000      	b.n	800274e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d060      	beq.n	800281c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	2b04      	cmp	r3, #4
 800275e:	d005      	beq.n	800276c <HAL_RCC_OscConfig+0x310>
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d119      	bne.n	800279a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d116      	bne.n	800279a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800276c:	4b7c      	ldr	r3, [pc, #496]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_OscConfig+0x328>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e23f      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002784:	4b76      	ldr	r3, [pc, #472]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	061b      	lsls	r3, r3, #24
 8002792:	4973      	ldr	r1, [pc, #460]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002798:	e040      	b.n	800281c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d023      	beq.n	80027ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a2:	4b6f      	ldr	r3, [pc, #444]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 80027a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ae:	f7fe fe6d 	bl	800148c <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b6:	f7fe fe69 	bl	800148c <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e21d      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c8:	4b65      	ldr	r3, [pc, #404]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d4:	4b62      	ldr	r3, [pc, #392]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	495f      	ldr	r1, [pc, #380]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
 80027e8:	e018      	b.n	800281c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a5c      	ldr	r2, [pc, #368]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 80027f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f6:	f7fe fe49 	bl	800148c <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fe:	f7fe fe45 	bl	800148c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e1f9      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002810:	4b53      	ldr	r3, [pc, #332]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d03c      	beq.n	80028a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01c      	beq.n	800286a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002830:	4b4b      	ldr	r3, [pc, #300]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 8002832:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002836:	4a4a      	ldr	r2, [pc, #296]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7fe fe24 	bl	800148c <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002848:	f7fe fe20 	bl	800148c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e1d4      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800285a:	4b41      	ldr	r3, [pc, #260]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 800285c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0ef      	beq.n	8002848 <HAL_RCC_OscConfig+0x3ec>
 8002868:	e01b      	b.n	80028a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800286a:	4b3d      	ldr	r3, [pc, #244]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 800286c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002870:	4a3b      	ldr	r2, [pc, #236]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 8002872:	f023 0301 	bic.w	r3, r3, #1
 8002876:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287a:	f7fe fe07 	bl	800148c <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002882:	f7fe fe03 	bl	800148c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e1b7      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002894:	4b32      	ldr	r3, [pc, #200]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 8002896:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1ef      	bne.n	8002882 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 80a6 	beq.w	80029fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b0:	2300      	movs	r3, #0
 80028b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10d      	bne.n	80028dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c0:	4b27      	ldr	r3, [pc, #156]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 80028c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c4:	4a26      	ldr	r2, [pc, #152]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 80028c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80028cc:	4b24      	ldr	r3, [pc, #144]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 80028ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d8:	2301      	movs	r3, #1
 80028da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028dc:	4b21      	ldr	r3, [pc, #132]	@ (8002964 <HAL_RCC_OscConfig+0x508>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d118      	bne.n	800291a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002964 <HAL_RCC_OscConfig+0x508>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002964 <HAL_RCC_OscConfig+0x508>)
 80028ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f4:	f7fe fdca 	bl	800148c <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fc:	f7fe fdc6 	bl	800148c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e17a      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800290e:	4b15      	ldr	r3, [pc, #84]	@ (8002964 <HAL_RCC_OscConfig+0x508>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d108      	bne.n	8002934 <HAL_RCC_OscConfig+0x4d8>
 8002922:	4b0f      	ldr	r3, [pc, #60]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002928:	4a0d      	ldr	r2, [pc, #52]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002932:	e029      	b.n	8002988 <HAL_RCC_OscConfig+0x52c>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b05      	cmp	r3, #5
 800293a:	d115      	bne.n	8002968 <HAL_RCC_OscConfig+0x50c>
 800293c:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002942:	4a07      	ldr	r2, [pc, #28]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 8002944:	f043 0304 	orr.w	r3, r3, #4
 8002948:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800294c:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002952:	4a03      	ldr	r2, [pc, #12]	@ (8002960 <HAL_RCC_OscConfig+0x504>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800295c:	e014      	b.n	8002988 <HAL_RCC_OscConfig+0x52c>
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	40007000 	.word	0x40007000
 8002968:	4b9c      	ldr	r3, [pc, #624]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296e:	4a9b      	ldr	r2, [pc, #620]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002978:	4b98      	ldr	r3, [pc, #608]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800297e:	4a97      	ldr	r2, [pc, #604]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002980:	f023 0304 	bic.w	r3, r3, #4
 8002984:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d016      	beq.n	80029be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002990:	f7fe fd7c 	bl	800148c <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002996:	e00a      	b.n	80029ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002998:	f7fe fd78 	bl	800148c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e12a      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ae:	4b8b      	ldr	r3, [pc, #556]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0ed      	beq.n	8002998 <HAL_RCC_OscConfig+0x53c>
 80029bc:	e015      	b.n	80029ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029be:	f7fe fd65 	bl	800148c <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fe fd61 	bl	800148c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e113      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029dc:	4b7f      	ldr	r3, [pc, #508]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1ed      	bne.n	80029c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ea:	7ffb      	ldrb	r3, [r7, #31]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f0:	4b7a      	ldr	r3, [pc, #488]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f4:	4a79      	ldr	r2, [pc, #484]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 80029f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80fe 	beq.w	8002c02 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	f040 80d0 	bne.w	8002bb0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a10:	4b72      	ldr	r3, [pc, #456]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f003 0203 	and.w	r2, r3, #3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d130      	bne.n	8002a86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d127      	bne.n	8002a86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d11f      	bne.n	8002a86 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a50:	2a07      	cmp	r2, #7
 8002a52:	bf14      	ite	ne
 8002a54:	2201      	movne	r2, #1
 8002a56:	2200      	moveq	r2, #0
 8002a58:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d113      	bne.n	8002a86 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a68:	085b      	lsrs	r3, r3, #1
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d109      	bne.n	8002a86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d06e      	beq.n	8002b64 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	2b0c      	cmp	r3, #12
 8002a8a:	d069      	beq.n	8002b60 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a8c:	4b53      	ldr	r3, [pc, #332]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d105      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a98:	4b50      	ldr	r3, [pc, #320]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0ad      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002aa8:	4b4c      	ldr	r3, [pc, #304]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a4b      	ldr	r2, [pc, #300]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002aae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ab2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ab4:	f7fe fcea 	bl	800148c <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abc:	f7fe fce6 	bl	800148c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e09a      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ace:	4b43      	ldr	r3, [pc, #268]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ada:	4b40      	ldr	r3, [pc, #256]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	4b40      	ldr	r3, [pc, #256]	@ (8002be0 <HAL_RCC_OscConfig+0x784>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002aea:	3a01      	subs	r2, #1
 8002aec:	0112      	lsls	r2, r2, #4
 8002aee:	4311      	orrs	r1, r2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002af4:	0212      	lsls	r2, r2, #8
 8002af6:	4311      	orrs	r1, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002afc:	0852      	lsrs	r2, r2, #1
 8002afe:	3a01      	subs	r2, #1
 8002b00:	0552      	lsls	r2, r2, #21
 8002b02:	4311      	orrs	r1, r2
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b08:	0852      	lsrs	r2, r2, #1
 8002b0a:	3a01      	subs	r2, #1
 8002b0c:	0652      	lsls	r2, r2, #25
 8002b0e:	4311      	orrs	r1, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b14:	0912      	lsrs	r2, r2, #4
 8002b16:	0452      	lsls	r2, r2, #17
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	4930      	ldr	r1, [pc, #192]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b20:	4b2e      	ldr	r3, [pc, #184]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2d      	ldr	r2, [pc, #180]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002b26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4a2a      	ldr	r2, [pc, #168]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b38:	f7fe fca8 	bl	800148c <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b40:	f7fe fca4 	bl	800148c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e058      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b52:	4b22      	ldr	r3, [pc, #136]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b5e:	e050      	b.n	8002c02 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e04f      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b64:	4b1d      	ldr	r3, [pc, #116]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d148      	bne.n	8002c02 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b70:	4b1a      	ldr	r3, [pc, #104]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a19      	ldr	r2, [pc, #100]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002b76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b7c:	4b17      	ldr	r3, [pc, #92]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4a16      	ldr	r2, [pc, #88]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002b82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b88:	f7fe fc80 	bl	800148c <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b90:	f7fe fc7c 	bl	800148c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e030      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x734>
 8002bae:	e028      	b.n	8002c02 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d023      	beq.n	8002bfe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb6:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a08      	ldr	r2, [pc, #32]	@ (8002bdc <HAL_RCC_OscConfig+0x780>)
 8002bbc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc2:	f7fe fc63 	bl	800148c <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc8:	e00c      	b.n	8002be4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bca:	f7fe fc5f 	bl	800148c <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d905      	bls.n	8002be4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e013      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be4:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <HAL_RCC_OscConfig+0x7b0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1ec      	bne.n	8002bca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bf0:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <HAL_RCC_OscConfig+0x7b0>)
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	4905      	ldr	r1, [pc, #20]	@ (8002c0c <HAL_RCC_OscConfig+0x7b0>)
 8002bf6:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <HAL_RCC_OscConfig+0x7b4>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60cb      	str	r3, [r1, #12]
 8002bfc:	e001      	b.n	8002c02 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3720      	adds	r7, #32
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	feeefffc 	.word	0xfeeefffc

08002c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0e7      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c28:	4b75      	ldr	r3, [pc, #468]	@ (8002e00 <HAL_RCC_ClockConfig+0x1ec>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d910      	bls.n	8002c58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b72      	ldr	r3, [pc, #456]	@ (8002e00 <HAL_RCC_ClockConfig+0x1ec>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 0207 	bic.w	r2, r3, #7
 8002c3e:	4970      	ldr	r1, [pc, #448]	@ (8002e00 <HAL_RCC_ClockConfig+0x1ec>)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b6e      	ldr	r3, [pc, #440]	@ (8002e00 <HAL_RCC_ClockConfig+0x1ec>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0cf      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d010      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	4b66      	ldr	r3, [pc, #408]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d908      	bls.n	8002c86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c74:	4b63      	ldr	r3, [pc, #396]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4960      	ldr	r1, [pc, #384]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d04c      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d107      	bne.n	8002caa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9a:	4b5a      	ldr	r3, [pc, #360]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d121      	bne.n	8002cea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e0a6      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d107      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb2:	4b54      	ldr	r3, [pc, #336]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d115      	bne.n	8002cea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e09a      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d107      	bne.n	8002cda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cca:	4b4e      	ldr	r3, [pc, #312]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e08e      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cda:	4b4a      	ldr	r3, [pc, #296]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e086      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cea:	4b46      	ldr	r3, [pc, #280]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f023 0203 	bic.w	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4943      	ldr	r1, [pc, #268]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfc:	f7fe fbc6 	bl	800148c <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d04:	f7fe fbc2 	bl	800148c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e06e      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 020c 	and.w	r2, r3, #12
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d1eb      	bne.n	8002d04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d010      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	4b31      	ldr	r3, [pc, #196]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d208      	bcs.n	8002d5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d48:	4b2e      	ldr	r3, [pc, #184]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	492b      	ldr	r1, [pc, #172]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d5a:	4b29      	ldr	r3, [pc, #164]	@ (8002e00 <HAL_RCC_ClockConfig+0x1ec>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d210      	bcs.n	8002d8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d68:	4b25      	ldr	r3, [pc, #148]	@ (8002e00 <HAL_RCC_ClockConfig+0x1ec>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f023 0207 	bic.w	r2, r3, #7
 8002d70:	4923      	ldr	r1, [pc, #140]	@ (8002e00 <HAL_RCC_ClockConfig+0x1ec>)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d78:	4b21      	ldr	r3, [pc, #132]	@ (8002e00 <HAL_RCC_ClockConfig+0x1ec>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d001      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e036      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d96:	4b1b      	ldr	r3, [pc, #108]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4918      	ldr	r1, [pc, #96]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d009      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002db4:	4b13      	ldr	r3, [pc, #76]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4910      	ldr	r1, [pc, #64]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dc8:	f000 f824 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	091b      	lsrs	r3, r3, #4
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	490b      	ldr	r1, [pc, #44]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f4>)
 8002dda:	5ccb      	ldrb	r3, [r1, r3]
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	fa22 f303 	lsr.w	r3, r2, r3
 8002de4:	4a09      	ldr	r2, [pc, #36]	@ (8002e0c <HAL_RCC_ClockConfig+0x1f8>)
 8002de6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002de8:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <HAL_RCC_ClockConfig+0x1fc>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe fafd 	bl	80013ec <HAL_InitTick>
 8002df2:	4603      	mov	r3, r0
 8002df4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002df6:	7afb      	ldrb	r3, [r7, #11]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40022000 	.word	0x40022000
 8002e04:	40021000 	.word	0x40021000
 8002e08:	0800872c 	.word	0x0800872c
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	20000004 	.word	0x20000004

08002e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	@ 0x24
 8002e18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e22:	4b3e      	ldr	r3, [pc, #248]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x34>
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	2b0c      	cmp	r3, #12
 8002e40:	d121      	bne.n	8002e86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d11e      	bne.n	8002e86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e48:	4b34      	ldr	r3, [pc, #208]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e54:	4b31      	ldr	r3, [pc, #196]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	e005      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e64:	4b2d      	ldr	r3, [pc, #180]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e70:	4a2b      	ldr	r2, [pc, #172]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10d      	bne.n	8002e9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e84:	e00a      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d102      	bne.n	8002e92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e8c:	4b25      	ldr	r3, [pc, #148]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e8e:	61bb      	str	r3, [r7, #24]
 8002e90:	e004      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e98:	4b23      	ldr	r3, [pc, #140]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b0c      	cmp	r3, #12
 8002ea0:	d134      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d003      	beq.n	8002eba <HAL_RCC_GetSysClockFreq+0xa6>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d003      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xac>
 8002eb8:	e005      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002eba:	4b1a      	ldr	r3, [pc, #104]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ebc:	617b      	str	r3, [r7, #20]
      break;
 8002ebe:	e005      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ec0:	4b19      	ldr	r3, [pc, #100]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ec2:	617b      	str	r3, [r7, #20]
      break;
 8002ec4:	e002      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	617b      	str	r3, [r7, #20]
      break;
 8002eca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ecc:	4b13      	ldr	r3, [pc, #76]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eda:	4b10      	ldr	r3, [pc, #64]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	fb03 f202 	mul.w	r2, r3, r2
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	0e5b      	lsrs	r3, r3, #25
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	3301      	adds	r3, #1
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f0c:	69bb      	ldr	r3, [r7, #24]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3724      	adds	r7, #36	@ 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	08008744 	.word	0x08008744
 8002f24:	00f42400 	.word	0x00f42400
 8002f28:	007a1200 	.word	0x007a1200

08002f2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f30:	4b03      	ldr	r3, [pc, #12]	@ (8002f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f32:	681b      	ldr	r3, [r3, #0]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	20000000 	.word	0x20000000

08002f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f48:	f7ff fff0 	bl	8002f2c <HAL_RCC_GetHCLKFreq>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	0a1b      	lsrs	r3, r3, #8
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	4904      	ldr	r1, [pc, #16]	@ (8002f6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f5a:	5ccb      	ldrb	r3, [r1, r3]
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	0800873c 	.word	0x0800873c

08002f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f74:	f7ff ffda 	bl	8002f2c <HAL_RCC_GetHCLKFreq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	0adb      	lsrs	r3, r3, #11
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	4904      	ldr	r1, [pc, #16]	@ (8002f98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f86:	5ccb      	ldrb	r3, [r1, r3]
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000
 8002f98:	0800873c 	.word	0x0800873c

08002f9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8003054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fb4:	f7ff f922 	bl	80021fc <HAL_PWREx_GetVoltageRange>
 8002fb8:	6178      	str	r0, [r7, #20]
 8002fba:	e014      	b.n	8002fe6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fbc:	4b25      	ldr	r3, [pc, #148]	@ (8003054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc0:	4a24      	ldr	r2, [pc, #144]	@ (8003054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fc8:	4b22      	ldr	r3, [pc, #136]	@ (8003054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fd4:	f7ff f912 	bl	80021fc <HAL_PWREx_GetVoltageRange>
 8002fd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fda:	4b1e      	ldr	r3, [pc, #120]	@ (8003054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fde:	4a1d      	ldr	r2, [pc, #116]	@ (8003054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fe4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fec:	d10b      	bne.n	8003006 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b80      	cmp	r3, #128	@ 0x80
 8002ff2:	d919      	bls.n	8003028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ff8:	d902      	bls.n	8003000 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	e013      	b.n	8003028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003000:	2301      	movs	r3, #1
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	e010      	b.n	8003028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b80      	cmp	r3, #128	@ 0x80
 800300a:	d902      	bls.n	8003012 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800300c:	2303      	movs	r3, #3
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	e00a      	b.n	8003028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b80      	cmp	r3, #128	@ 0x80
 8003016:	d102      	bne.n	800301e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003018:	2302      	movs	r3, #2
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	e004      	b.n	8003028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b70      	cmp	r3, #112	@ 0x70
 8003022:	d101      	bne.n	8003028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003024:	2301      	movs	r3, #1
 8003026:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003028:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f023 0207 	bic.w	r2, r3, #7
 8003030:	4909      	ldr	r1, [pc, #36]	@ (8003058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003038:	4b07      	ldr	r3, [pc, #28]	@ (8003058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	429a      	cmp	r2, r3
 8003044:	d001      	beq.n	800304a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	40022000 	.word	0x40022000

0800305c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003064:	2300      	movs	r3, #0
 8003066:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003068:	2300      	movs	r3, #0
 800306a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003074:	2b00      	cmp	r3, #0
 8003076:	d041      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800307c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003080:	d02a      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003082:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003086:	d824      	bhi.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003088:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800308c:	d008      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800308e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003092:	d81e      	bhi.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003098:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800309c:	d010      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800309e:	e018      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030a0:	4b86      	ldr	r3, [pc, #536]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4a85      	ldr	r2, [pc, #532]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030ac:	e015      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3304      	adds	r3, #4
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 facb 	bl	8003650 <RCCEx_PLLSAI1_Config>
 80030ba:	4603      	mov	r3, r0
 80030bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030be:	e00c      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3320      	adds	r3, #32
 80030c4:	2100      	movs	r1, #0
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fbb6 	bl	8003838 <RCCEx_PLLSAI2_Config>
 80030cc:	4603      	mov	r3, r0
 80030ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030d0:	e003      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	74fb      	strb	r3, [r7, #19]
      break;
 80030d6:	e000      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10b      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030e0:	4b76      	ldr	r3, [pc, #472]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030ee:	4973      	ldr	r1, [pc, #460]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80030f6:	e001      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d041      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800310c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003110:	d02a      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003112:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003116:	d824      	bhi.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003118:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800311c:	d008      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800311e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003122:	d81e      	bhi.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003128:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800312c:	d010      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800312e:	e018      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003130:	4b62      	ldr	r3, [pc, #392]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4a61      	ldr	r2, [pc, #388]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800313a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800313c:	e015      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3304      	adds	r3, #4
 8003142:	2100      	movs	r1, #0
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fa83 	bl	8003650 <RCCEx_PLLSAI1_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800314e:	e00c      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3320      	adds	r3, #32
 8003154:	2100      	movs	r1, #0
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fb6e 	bl	8003838 <RCCEx_PLLSAI2_Config>
 800315c:	4603      	mov	r3, r0
 800315e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003160:	e003      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	74fb      	strb	r3, [r7, #19]
      break;
 8003166:	e000      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003168:	bf00      	nop
    }

    if(ret == HAL_OK)
 800316a:	7cfb      	ldrb	r3, [r7, #19]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10b      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003170:	4b52      	ldr	r3, [pc, #328]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003176:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800317e:	494f      	ldr	r1, [pc, #316]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003186:	e001      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80a0 	beq.w	80032da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800319a:	2300      	movs	r3, #0
 800319c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800319e:	4b47      	ldr	r3, [pc, #284]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031ae:	2300      	movs	r3, #0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00d      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b4:	4b41      	ldr	r3, [pc, #260]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b8:	4a40      	ldr	r2, [pc, #256]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031be:	6593      	str	r3, [r2, #88]	@ 0x58
 80031c0:	4b3e      	ldr	r3, [pc, #248]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031cc:	2301      	movs	r3, #1
 80031ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031d0:	4b3b      	ldr	r3, [pc, #236]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a3a      	ldr	r2, [pc, #232]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031dc:	f7fe f956 	bl	800148c <HAL_GetTick>
 80031e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031e2:	e009      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e4:	f7fe f952 	bl	800148c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d902      	bls.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	74fb      	strb	r3, [r7, #19]
        break;
 80031f6:	e005      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031f8:	4b31      	ldr	r3, [pc, #196]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0ef      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003204:	7cfb      	ldrb	r3, [r7, #19]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d15c      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800320a:	4b2c      	ldr	r3, [pc, #176]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003210:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003214:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01f      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	429a      	cmp	r2, r3
 8003226:	d019      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003228:	4b24      	ldr	r3, [pc, #144]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003232:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003234:	4b21      	ldr	r3, [pc, #132]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323a:	4a20      	ldr	r2, [pc, #128]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003240:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003244:	4b1d      	ldr	r3, [pc, #116]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800324a:	4a1c      	ldr	r2, [pc, #112]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003254:	4a19      	ldr	r2, [pc, #100]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d016      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003266:	f7fe f911 	bl	800148c <HAL_GetTick>
 800326a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800326c:	e00b      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7fe f90d 	bl	800148c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d902      	bls.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	74fb      	strb	r3, [r7, #19]
            break;
 8003284:	e006      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003286:	4b0d      	ldr	r3, [pc, #52]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0ec      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003294:	7cfb      	ldrb	r3, [r7, #19]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10c      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800329a:	4b08      	ldr	r3, [pc, #32]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032aa:	4904      	ldr	r1, [pc, #16]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80032b2:	e009      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032b4:	7cfb      	ldrb	r3, [r7, #19]
 80032b6:	74bb      	strb	r3, [r7, #18]
 80032b8:	e006      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032ba:	bf00      	nop
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c4:	7cfb      	ldrb	r3, [r7, #19]
 80032c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032c8:	7c7b      	ldrb	r3, [r7, #17]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d105      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ce:	4b9e      	ldr	r3, [pc, #632]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d2:	4a9d      	ldr	r2, [pc, #628]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032e6:	4b98      	ldr	r3, [pc, #608]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ec:	f023 0203 	bic.w	r2, r3, #3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f4:	4994      	ldr	r1, [pc, #592]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003308:	4b8f      	ldr	r3, [pc, #572]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800330e:	f023 020c 	bic.w	r2, r3, #12
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003316:	498c      	ldr	r1, [pc, #560]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800332a:	4b87      	ldr	r3, [pc, #540]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003330:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	4983      	ldr	r1, [pc, #524]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800334c:	4b7e      	ldr	r3, [pc, #504]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003352:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335a:	497b      	ldr	r1, [pc, #492]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800336e:	4b76      	ldr	r3, [pc, #472]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003374:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800337c:	4972      	ldr	r1, [pc, #456]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003390:	4b6d      	ldr	r3, [pc, #436]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003396:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339e:	496a      	ldr	r1, [pc, #424]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033b2:	4b65      	ldr	r3, [pc, #404]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c0:	4961      	ldr	r1, [pc, #388]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033d4:	4b5c      	ldr	r3, [pc, #368]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e2:	4959      	ldr	r1, [pc, #356]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033f6:	4b54      	ldr	r3, [pc, #336]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003404:	4950      	ldr	r1, [pc, #320]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003418:	4b4b      	ldr	r3, [pc, #300]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003426:	4948      	ldr	r1, [pc, #288]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800343a:	4b43      	ldr	r3, [pc, #268]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003440:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003448:	493f      	ldr	r1, [pc, #252]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d028      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800345c:	4b3a      	ldr	r3, [pc, #232]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003462:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800346a:	4937      	ldr	r1, [pc, #220]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003476:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800347a:	d106      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800347c:	4b32      	ldr	r3, [pc, #200]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4a31      	ldr	r2, [pc, #196]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003482:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003486:	60d3      	str	r3, [r2, #12]
 8003488:	e011      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800348e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003492:	d10c      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3304      	adds	r3, #4
 8003498:	2101      	movs	r1, #1
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f8d8 	bl	8003650 <RCCEx_PLLSAI1_Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034aa:	7cfb      	ldrb	r3, [r7, #19]
 80034ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d028      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034ba:	4b23      	ldr	r3, [pc, #140]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c8:	491f      	ldr	r1, [pc, #124]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034d8:	d106      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034da:	4b1b      	ldr	r3, [pc, #108]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	4a1a      	ldr	r2, [pc, #104]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034e4:	60d3      	str	r3, [r2, #12]
 80034e6:	e011      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034f0:	d10c      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2101      	movs	r1, #1
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 f8a9 	bl	8003650 <RCCEx_PLLSAI1_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003502:	7cfb      	ldrb	r3, [r7, #19]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d02b      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003518:	4b0b      	ldr	r3, [pc, #44]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003526:	4908      	ldr	r1, [pc, #32]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003532:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003536:	d109      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003538:	4b03      	ldr	r3, [pc, #12]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4a02      	ldr	r2, [pc, #8]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003542:	60d3      	str	r3, [r2, #12]
 8003544:	e014      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003550:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003554:	d10c      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3304      	adds	r3, #4
 800355a:	2101      	movs	r1, #1
 800355c:	4618      	mov	r0, r3
 800355e:	f000 f877 	bl	8003650 <RCCEx_PLLSAI1_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003566:	7cfb      	ldrb	r3, [r7, #19]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02f      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800357c:	4b2b      	ldr	r3, [pc, #172]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003582:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800358a:	4928      	ldr	r1, [pc, #160]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003596:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800359a:	d10d      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3304      	adds	r3, #4
 80035a0:	2102      	movs	r1, #2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f854 	bl	8003650 <RCCEx_PLLSAI1_Config>
 80035a8:	4603      	mov	r3, r0
 80035aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ac:	7cfb      	ldrb	r3, [r7, #19]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d014      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035b2:	7cfb      	ldrb	r3, [r7, #19]
 80035b4:	74bb      	strb	r3, [r7, #18]
 80035b6:	e011      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035c0:	d10c      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3320      	adds	r3, #32
 80035c6:	2102      	movs	r1, #2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 f935 	bl	8003838 <RCCEx_PLLSAI2_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035d2:	7cfb      	ldrb	r3, [r7, #19]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035e8:	4b10      	ldr	r3, [pc, #64]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035f6:	490d      	ldr	r1, [pc, #52]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00b      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800360a:	4b08      	ldr	r3, [pc, #32]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003610:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800361a:	4904      	ldr	r1, [pc, #16]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003622:	7cbb      	ldrb	r3, [r7, #18]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40021000 	.word	0x40021000

08003630 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003634:	4b05      	ldr	r3, [pc, #20]	@ (800364c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a04      	ldr	r2, [pc, #16]	@ (800364c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800363a:	f043 0304 	orr.w	r3, r3, #4
 800363e:	6013      	str	r3, [r2, #0]
}
 8003640:	bf00      	nop
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000

08003650 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800365e:	4b75      	ldr	r3, [pc, #468]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d018      	beq.n	800369c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800366a:	4b72      	ldr	r3, [pc, #456]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0203 	and.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d10d      	bne.n	8003696 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
       ||
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003682:	4b6c      	ldr	r3, [pc, #432]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
       ||
 8003692:	429a      	cmp	r2, r3
 8003694:	d047      	beq.n	8003726 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	e044      	b.n	8003726 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d018      	beq.n	80036d6 <RCCEx_PLLSAI1_Config+0x86>
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d825      	bhi.n	80036f4 <RCCEx_PLLSAI1_Config+0xa4>
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d002      	beq.n	80036b2 <RCCEx_PLLSAI1_Config+0x62>
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d009      	beq.n	80036c4 <RCCEx_PLLSAI1_Config+0x74>
 80036b0:	e020      	b.n	80036f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036b2:	4b60      	ldr	r3, [pc, #384]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d11d      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c2:	e01a      	b.n	80036fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036c4:	4b5b      	ldr	r3, [pc, #364]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d116      	bne.n	80036fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d4:	e013      	b.n	80036fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036d6:	4b57      	ldr	r3, [pc, #348]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10f      	bne.n	8003702 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036e2:	4b54      	ldr	r3, [pc, #336]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036f2:	e006      	b.n	8003702 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      break;
 80036f8:	e004      	b.n	8003704 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036fa:	bf00      	nop
 80036fc:	e002      	b.n	8003704 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036fe:	bf00      	nop
 8003700:	e000      	b.n	8003704 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003702:	bf00      	nop
    }

    if(status == HAL_OK)
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10d      	bne.n	8003726 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800370a:	4b4a      	ldr	r3, [pc, #296]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6819      	ldr	r1, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	3b01      	subs	r3, #1
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	430b      	orrs	r3, r1
 8003720:	4944      	ldr	r1, [pc, #272]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003722:	4313      	orrs	r3, r2
 8003724:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d17d      	bne.n	8003828 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800372c:	4b41      	ldr	r3, [pc, #260]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a40      	ldr	r2, [pc, #256]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003732:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003738:	f7fd fea8 	bl	800148c <HAL_GetTick>
 800373c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800373e:	e009      	b.n	8003754 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003740:	f7fd fea4 	bl	800148c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d902      	bls.n	8003754 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	73fb      	strb	r3, [r7, #15]
        break;
 8003752:	e005      	b.n	8003760 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003754:	4b37      	ldr	r3, [pc, #220]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1ef      	bne.n	8003740 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d160      	bne.n	8003828 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d111      	bne.n	8003790 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800376c:	4b31      	ldr	r3, [pc, #196]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003774:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6892      	ldr	r2, [r2, #8]
 800377c:	0211      	lsls	r1, r2, #8
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68d2      	ldr	r2, [r2, #12]
 8003782:	0912      	lsrs	r2, r2, #4
 8003784:	0452      	lsls	r2, r2, #17
 8003786:	430a      	orrs	r2, r1
 8003788:	492a      	ldr	r1, [pc, #168]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	610b      	str	r3, [r1, #16]
 800378e:	e027      	b.n	80037e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d112      	bne.n	80037bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003796:	4b27      	ldr	r3, [pc, #156]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800379e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6892      	ldr	r2, [r2, #8]
 80037a6:	0211      	lsls	r1, r2, #8
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6912      	ldr	r2, [r2, #16]
 80037ac:	0852      	lsrs	r2, r2, #1
 80037ae:	3a01      	subs	r2, #1
 80037b0:	0552      	lsls	r2, r2, #21
 80037b2:	430a      	orrs	r2, r1
 80037b4:	491f      	ldr	r1, [pc, #124]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	610b      	str	r3, [r1, #16]
 80037ba:	e011      	b.n	80037e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80037c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6892      	ldr	r2, [r2, #8]
 80037cc:	0211      	lsls	r1, r2, #8
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6952      	ldr	r2, [r2, #20]
 80037d2:	0852      	lsrs	r2, r2, #1
 80037d4:	3a01      	subs	r2, #1
 80037d6:	0652      	lsls	r2, r2, #25
 80037d8:	430a      	orrs	r2, r1
 80037da:	4916      	ldr	r1, [pc, #88]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037e0:	4b14      	ldr	r3, [pc, #80]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a13      	ldr	r2, [pc, #76]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fd fe4e 	bl	800148c <HAL_GetTick>
 80037f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037f2:	e009      	b.n	8003808 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037f4:	f7fd fe4a 	bl	800148c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d902      	bls.n	8003808 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	73fb      	strb	r3, [r7, #15]
          break;
 8003806:	e005      	b.n	8003814 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003808:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0ef      	beq.n	80037f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800381a:	4b06      	ldr	r3, [pc, #24]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	4904      	ldr	r1, [pc, #16]	@ (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003824:	4313      	orrs	r3, r2
 8003826:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40021000 	.word	0x40021000

08003838 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003846:	4b6a      	ldr	r3, [pc, #424]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d018      	beq.n	8003884 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003852:	4b67      	ldr	r3, [pc, #412]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0203 	and.w	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d10d      	bne.n	800387e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
       ||
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800386a:	4b61      	ldr	r3, [pc, #388]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	091b      	lsrs	r3, r3, #4
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
       ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d047      	beq.n	800390e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
 8003882:	e044      	b.n	800390e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b03      	cmp	r3, #3
 800388a:	d018      	beq.n	80038be <RCCEx_PLLSAI2_Config+0x86>
 800388c:	2b03      	cmp	r3, #3
 800388e:	d825      	bhi.n	80038dc <RCCEx_PLLSAI2_Config+0xa4>
 8003890:	2b01      	cmp	r3, #1
 8003892:	d002      	beq.n	800389a <RCCEx_PLLSAI2_Config+0x62>
 8003894:	2b02      	cmp	r3, #2
 8003896:	d009      	beq.n	80038ac <RCCEx_PLLSAI2_Config+0x74>
 8003898:	e020      	b.n	80038dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800389a:	4b55      	ldr	r3, [pc, #340]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d11d      	bne.n	80038e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038aa:	e01a      	b.n	80038e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038ac:	4b50      	ldr	r3, [pc, #320]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d116      	bne.n	80038e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038bc:	e013      	b.n	80038e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038be:	4b4c      	ldr	r3, [pc, #304]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10f      	bne.n	80038ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ca:	4b49      	ldr	r3, [pc, #292]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038da:	e006      	b.n	80038ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
      break;
 80038e0:	e004      	b.n	80038ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038e2:	bf00      	nop
 80038e4:	e002      	b.n	80038ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038e6:	bf00      	nop
 80038e8:	e000      	b.n	80038ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10d      	bne.n	800390e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038f2:	4b3f      	ldr	r3, [pc, #252]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6819      	ldr	r1, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	3b01      	subs	r3, #1
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	430b      	orrs	r3, r1
 8003908:	4939      	ldr	r1, [pc, #228]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800390a:	4313      	orrs	r3, r2
 800390c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d167      	bne.n	80039e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003914:	4b36      	ldr	r3, [pc, #216]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a35      	ldr	r2, [pc, #212]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800391e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003920:	f7fd fdb4 	bl	800148c <HAL_GetTick>
 8003924:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003926:	e009      	b.n	800393c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003928:	f7fd fdb0 	bl	800148c <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d902      	bls.n	800393c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	73fb      	strb	r3, [r7, #15]
        break;
 800393a:	e005      	b.n	8003948 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800393c:	4b2c      	ldr	r3, [pc, #176]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1ef      	bne.n	8003928 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d14a      	bne.n	80039e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d111      	bne.n	8003978 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003954:	4b26      	ldr	r3, [pc, #152]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800395c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6892      	ldr	r2, [r2, #8]
 8003964:	0211      	lsls	r1, r2, #8
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68d2      	ldr	r2, [r2, #12]
 800396a:	0912      	lsrs	r2, r2, #4
 800396c:	0452      	lsls	r2, r2, #17
 800396e:	430a      	orrs	r2, r1
 8003970:	491f      	ldr	r1, [pc, #124]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003972:	4313      	orrs	r3, r2
 8003974:	614b      	str	r3, [r1, #20]
 8003976:	e011      	b.n	800399c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003978:	4b1d      	ldr	r3, [pc, #116]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003980:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6892      	ldr	r2, [r2, #8]
 8003988:	0211      	lsls	r1, r2, #8
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6912      	ldr	r2, [r2, #16]
 800398e:	0852      	lsrs	r2, r2, #1
 8003990:	3a01      	subs	r2, #1
 8003992:	0652      	lsls	r2, r2, #25
 8003994:	430a      	orrs	r2, r1
 8003996:	4916      	ldr	r1, [pc, #88]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003998:	4313      	orrs	r3, r2
 800399a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800399c:	4b14      	ldr	r3, [pc, #80]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a13      	ldr	r2, [pc, #76]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fd fd70 	bl	800148c <HAL_GetTick>
 80039ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039ae:	e009      	b.n	80039c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039b0:	f7fd fd6c 	bl	800148c <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d902      	bls.n	80039c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	73fb      	strb	r3, [r7, #15]
          break;
 80039c2:	e005      	b.n	80039d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039c4:	4b0a      	ldr	r3, [pc, #40]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0ef      	beq.n	80039b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039d6:	4b06      	ldr	r3, [pc, #24]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4904      	ldr	r1, [pc, #16]	@ (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000

080039f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e095      	b.n	8003b32 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d108      	bne.n	8003a20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a16:	d009      	beq.n	8003a2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	61da      	str	r2, [r3, #28]
 8003a1e:	e005      	b.n	8003a2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fd faa6 	bl	8000f98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a6c:	d902      	bls.n	8003a74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	e002      	b.n	8003a7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003a82:	d007      	beq.n	8003a94 <HAL_SPI_Init+0xa0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a8c:	d002      	beq.n	8003a94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad6:	ea42 0103 	orr.w	r1, r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ade:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	0c1b      	lsrs	r3, r3, #16
 8003af0:	f003 0204 	and.w	r2, r3, #4
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b10:	ea42 0103 	orr.w	r1, r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e040      	b.n	8003bce <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d106      	bne.n	8003b62 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7fd fa5f 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2224      	movs	r2, #36	@ 0x24
 8003b66:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0201 	bic.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fae1 	bl	8004148 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f826 	bl	8003bd8 <UART_SetConfig>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e01b      	b.n	8003bce <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ba4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bb4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0201 	orr.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fb60 	bl	800428c <UART_CheckIdleState>
 8003bcc:	4603      	mov	r3, r0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bdc:	b08a      	sub	sp, #40	@ 0x28
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4ba4      	ldr	r3, [pc, #656]	@ (8003e98 <UART_SetConfig+0x2c0>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a99      	ldr	r2, [pc, #612]	@ (8003e9c <UART_SetConfig+0x2c4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d004      	beq.n	8003c44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c40:	4313      	orrs	r3, r2
 8003c42:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c54:	430a      	orrs	r2, r1
 8003c56:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a90      	ldr	r2, [pc, #576]	@ (8003ea0 <UART_SetConfig+0x2c8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d126      	bne.n	8003cb0 <UART_SetConfig+0xd8>
 8003c62:	4b90      	ldr	r3, [pc, #576]	@ (8003ea4 <UART_SetConfig+0x2cc>)
 8003c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d81b      	bhi.n	8003ca8 <UART_SetConfig+0xd0>
 8003c70:	a201      	add	r2, pc, #4	@ (adr r2, 8003c78 <UART_SetConfig+0xa0>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003c89 	.word	0x08003c89
 8003c7c:	08003c99 	.word	0x08003c99
 8003c80:	08003c91 	.word	0x08003c91
 8003c84:	08003ca1 	.word	0x08003ca1
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c8e:	e116      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003c90:	2302      	movs	r3, #2
 8003c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c96:	e112      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003c98:	2304      	movs	r3, #4
 8003c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c9e:	e10e      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003ca0:	2308      	movs	r3, #8
 8003ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ca6:	e10a      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003ca8:	2310      	movs	r3, #16
 8003caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cae:	e106      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a7c      	ldr	r2, [pc, #496]	@ (8003ea8 <UART_SetConfig+0x2d0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d138      	bne.n	8003d2c <UART_SetConfig+0x154>
 8003cba:	4b7a      	ldr	r3, [pc, #488]	@ (8003ea4 <UART_SetConfig+0x2cc>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc0:	f003 030c 	and.w	r3, r3, #12
 8003cc4:	2b0c      	cmp	r3, #12
 8003cc6:	d82d      	bhi.n	8003d24 <UART_SetConfig+0x14c>
 8003cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd0 <UART_SetConfig+0xf8>)
 8003cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cce:	bf00      	nop
 8003cd0:	08003d05 	.word	0x08003d05
 8003cd4:	08003d25 	.word	0x08003d25
 8003cd8:	08003d25 	.word	0x08003d25
 8003cdc:	08003d25 	.word	0x08003d25
 8003ce0:	08003d15 	.word	0x08003d15
 8003ce4:	08003d25 	.word	0x08003d25
 8003ce8:	08003d25 	.word	0x08003d25
 8003cec:	08003d25 	.word	0x08003d25
 8003cf0:	08003d0d 	.word	0x08003d0d
 8003cf4:	08003d25 	.word	0x08003d25
 8003cf8:	08003d25 	.word	0x08003d25
 8003cfc:	08003d25 	.word	0x08003d25
 8003d00:	08003d1d 	.word	0x08003d1d
 8003d04:	2300      	movs	r3, #0
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d0a:	e0d8      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d12:	e0d4      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003d14:	2304      	movs	r3, #4
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d1a:	e0d0      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003d1c:	2308      	movs	r3, #8
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d22:	e0cc      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003d24:	2310      	movs	r3, #16
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d2a:	e0c8      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a5e      	ldr	r2, [pc, #376]	@ (8003eac <UART_SetConfig+0x2d4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d125      	bne.n	8003d82 <UART_SetConfig+0x1aa>
 8003d36:	4b5b      	ldr	r3, [pc, #364]	@ (8003ea4 <UART_SetConfig+0x2cc>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d40:	2b30      	cmp	r3, #48	@ 0x30
 8003d42:	d016      	beq.n	8003d72 <UART_SetConfig+0x19a>
 8003d44:	2b30      	cmp	r3, #48	@ 0x30
 8003d46:	d818      	bhi.n	8003d7a <UART_SetConfig+0x1a2>
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d00a      	beq.n	8003d62 <UART_SetConfig+0x18a>
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d814      	bhi.n	8003d7a <UART_SetConfig+0x1a2>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <UART_SetConfig+0x182>
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d008      	beq.n	8003d6a <UART_SetConfig+0x192>
 8003d58:	e00f      	b.n	8003d7a <UART_SetConfig+0x1a2>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d60:	e0ad      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003d62:	2302      	movs	r3, #2
 8003d64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d68:	e0a9      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003d6a:	2304      	movs	r3, #4
 8003d6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d70:	e0a5      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003d72:	2308      	movs	r3, #8
 8003d74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d78:	e0a1      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003d7a:	2310      	movs	r3, #16
 8003d7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d80:	e09d      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a4a      	ldr	r2, [pc, #296]	@ (8003eb0 <UART_SetConfig+0x2d8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d125      	bne.n	8003dd8 <UART_SetConfig+0x200>
 8003d8c:	4b45      	ldr	r3, [pc, #276]	@ (8003ea4 <UART_SetConfig+0x2cc>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d92:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d96:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d98:	d016      	beq.n	8003dc8 <UART_SetConfig+0x1f0>
 8003d9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d9c:	d818      	bhi.n	8003dd0 <UART_SetConfig+0x1f8>
 8003d9e:	2b80      	cmp	r3, #128	@ 0x80
 8003da0:	d00a      	beq.n	8003db8 <UART_SetConfig+0x1e0>
 8003da2:	2b80      	cmp	r3, #128	@ 0x80
 8003da4:	d814      	bhi.n	8003dd0 <UART_SetConfig+0x1f8>
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <UART_SetConfig+0x1d8>
 8003daa:	2b40      	cmp	r3, #64	@ 0x40
 8003dac:	d008      	beq.n	8003dc0 <UART_SetConfig+0x1e8>
 8003dae:	e00f      	b.n	8003dd0 <UART_SetConfig+0x1f8>
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db6:	e082      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003db8:	2302      	movs	r3, #2
 8003dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dbe:	e07e      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc6:	e07a      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003dc8:	2308      	movs	r3, #8
 8003dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dce:	e076      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd6:	e072      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a35      	ldr	r2, [pc, #212]	@ (8003eb4 <UART_SetConfig+0x2dc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d12a      	bne.n	8003e38 <UART_SetConfig+0x260>
 8003de2:	4b30      	ldr	r3, [pc, #192]	@ (8003ea4 <UART_SetConfig+0x2cc>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003df0:	d01a      	beq.n	8003e28 <UART_SetConfig+0x250>
 8003df2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003df6:	d81b      	bhi.n	8003e30 <UART_SetConfig+0x258>
 8003df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dfc:	d00c      	beq.n	8003e18 <UART_SetConfig+0x240>
 8003dfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e02:	d815      	bhi.n	8003e30 <UART_SetConfig+0x258>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <UART_SetConfig+0x238>
 8003e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e0c:	d008      	beq.n	8003e20 <UART_SetConfig+0x248>
 8003e0e:	e00f      	b.n	8003e30 <UART_SetConfig+0x258>
 8003e10:	2300      	movs	r3, #0
 8003e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e16:	e052      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e1e:	e04e      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003e20:	2304      	movs	r3, #4
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e26:	e04a      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003e28:	2308      	movs	r3, #8
 8003e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e2e:	e046      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003e30:	2310      	movs	r3, #16
 8003e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e36:	e042      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a17      	ldr	r2, [pc, #92]	@ (8003e9c <UART_SetConfig+0x2c4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d13a      	bne.n	8003eb8 <UART_SetConfig+0x2e0>
 8003e42:	4b18      	ldr	r3, [pc, #96]	@ (8003ea4 <UART_SetConfig+0x2cc>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e50:	d01a      	beq.n	8003e88 <UART_SetConfig+0x2b0>
 8003e52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e56:	d81b      	bhi.n	8003e90 <UART_SetConfig+0x2b8>
 8003e58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e5c:	d00c      	beq.n	8003e78 <UART_SetConfig+0x2a0>
 8003e5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e62:	d815      	bhi.n	8003e90 <UART_SetConfig+0x2b8>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <UART_SetConfig+0x298>
 8003e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e6c:	d008      	beq.n	8003e80 <UART_SetConfig+0x2a8>
 8003e6e:	e00f      	b.n	8003e90 <UART_SetConfig+0x2b8>
 8003e70:	2300      	movs	r3, #0
 8003e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e76:	e022      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7e:	e01e      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003e80:	2304      	movs	r3, #4
 8003e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e86:	e01a      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003e88:	2308      	movs	r3, #8
 8003e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8e:	e016      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003e90:	2310      	movs	r3, #16
 8003e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e96:	e012      	b.n	8003ebe <UART_SetConfig+0x2e6>
 8003e98:	efff69f3 	.word	0xefff69f3
 8003e9c:	40008000 	.word	0x40008000
 8003ea0:	40013800 	.word	0x40013800
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40004400 	.word	0x40004400
 8003eac:	40004800 	.word	0x40004800
 8003eb0:	40004c00 	.word	0x40004c00
 8003eb4:	40005000 	.word	0x40005000
 8003eb8:	2310      	movs	r3, #16
 8003eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a9f      	ldr	r2, [pc, #636]	@ (8004140 <UART_SetConfig+0x568>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d17a      	bne.n	8003fbe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ec8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d824      	bhi.n	8003f1a <UART_SetConfig+0x342>
 8003ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed8 <UART_SetConfig+0x300>)
 8003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed6:	bf00      	nop
 8003ed8:	08003efd 	.word	0x08003efd
 8003edc:	08003f1b 	.word	0x08003f1b
 8003ee0:	08003f05 	.word	0x08003f05
 8003ee4:	08003f1b 	.word	0x08003f1b
 8003ee8:	08003f0b 	.word	0x08003f0b
 8003eec:	08003f1b 	.word	0x08003f1b
 8003ef0:	08003f1b 	.word	0x08003f1b
 8003ef4:	08003f1b 	.word	0x08003f1b
 8003ef8:	08003f13 	.word	0x08003f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003efc:	f7ff f822 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 8003f00:	61f8      	str	r0, [r7, #28]
        break;
 8003f02:	e010      	b.n	8003f26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f04:	4b8f      	ldr	r3, [pc, #572]	@ (8004144 <UART_SetConfig+0x56c>)
 8003f06:	61fb      	str	r3, [r7, #28]
        break;
 8003f08:	e00d      	b.n	8003f26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f0a:	f7fe ff83 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8003f0e:	61f8      	str	r0, [r7, #28]
        break;
 8003f10:	e009      	b.n	8003f26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f16:	61fb      	str	r3, [r7, #28]
        break;
 8003f18:	e005      	b.n	8003f26 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80fb 	beq.w	8004124 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4413      	add	r3, r2
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d305      	bcc.n	8003f4a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d903      	bls.n	8003f52 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f50:	e0e8      	b.n	8004124 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	2200      	movs	r2, #0
 8003f56:	461c      	mov	r4, r3
 8003f58:	4615      	mov	r5, r2
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	022b      	lsls	r3, r5, #8
 8003f64:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f68:	0222      	lsls	r2, r4, #8
 8003f6a:	68f9      	ldr	r1, [r7, #12]
 8003f6c:	6849      	ldr	r1, [r1, #4]
 8003f6e:	0849      	lsrs	r1, r1, #1
 8003f70:	2000      	movs	r0, #0
 8003f72:	4688      	mov	r8, r1
 8003f74:	4681      	mov	r9, r0
 8003f76:	eb12 0a08 	adds.w	sl, r2, r8
 8003f7a:	eb43 0b09 	adc.w	fp, r3, r9
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	603b      	str	r3, [r7, #0]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f8c:	4650      	mov	r0, sl
 8003f8e:	4659      	mov	r1, fp
 8003f90:	f7fc f91e 	bl	80001d0 <__aeabi_uldivmod>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4613      	mov	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fa2:	d308      	bcc.n	8003fb6 <UART_SetConfig+0x3de>
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003faa:	d204      	bcs.n	8003fb6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	60da      	str	r2, [r3, #12]
 8003fb4:	e0b6      	b.n	8004124 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fbc:	e0b2      	b.n	8004124 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fc6:	d15e      	bne.n	8004086 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003fc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d828      	bhi.n	8004022 <UART_SetConfig+0x44a>
 8003fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd8 <UART_SetConfig+0x400>)
 8003fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd6:	bf00      	nop
 8003fd8:	08003ffd 	.word	0x08003ffd
 8003fdc:	08004005 	.word	0x08004005
 8003fe0:	0800400d 	.word	0x0800400d
 8003fe4:	08004023 	.word	0x08004023
 8003fe8:	08004013 	.word	0x08004013
 8003fec:	08004023 	.word	0x08004023
 8003ff0:	08004023 	.word	0x08004023
 8003ff4:	08004023 	.word	0x08004023
 8003ff8:	0800401b 	.word	0x0800401b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ffc:	f7fe ffa2 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 8004000:	61f8      	str	r0, [r7, #28]
        break;
 8004002:	e014      	b.n	800402e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004004:	f7fe ffb4 	bl	8002f70 <HAL_RCC_GetPCLK2Freq>
 8004008:	61f8      	str	r0, [r7, #28]
        break;
 800400a:	e010      	b.n	800402e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800400c:	4b4d      	ldr	r3, [pc, #308]	@ (8004144 <UART_SetConfig+0x56c>)
 800400e:	61fb      	str	r3, [r7, #28]
        break;
 8004010:	e00d      	b.n	800402e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004012:	f7fe feff 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8004016:	61f8      	str	r0, [r7, #28]
        break;
 8004018:	e009      	b.n	800402e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800401a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800401e:	61fb      	str	r3, [r7, #28]
        break;
 8004020:	e005      	b.n	800402e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800402c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d077      	beq.n	8004124 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	005a      	lsls	r2, r3, #1
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	085b      	lsrs	r3, r3, #1
 800403e:	441a      	add	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	2b0f      	cmp	r3, #15
 800404e:	d916      	bls.n	800407e <UART_SetConfig+0x4a6>
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004056:	d212      	bcs.n	800407e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	b29b      	uxth	r3, r3
 800405c:	f023 030f 	bic.w	r3, r3, #15
 8004060:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	b29b      	uxth	r3, r3
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	b29a      	uxth	r2, r3
 800406e:	8afb      	ldrh	r3, [r7, #22]
 8004070:	4313      	orrs	r3, r2
 8004072:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	8afa      	ldrh	r2, [r7, #22]
 800407a:	60da      	str	r2, [r3, #12]
 800407c:	e052      	b.n	8004124 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004084:	e04e      	b.n	8004124 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004086:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800408a:	2b08      	cmp	r3, #8
 800408c:	d827      	bhi.n	80040de <UART_SetConfig+0x506>
 800408e:	a201      	add	r2, pc, #4	@ (adr r2, 8004094 <UART_SetConfig+0x4bc>)
 8004090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004094:	080040b9 	.word	0x080040b9
 8004098:	080040c1 	.word	0x080040c1
 800409c:	080040c9 	.word	0x080040c9
 80040a0:	080040df 	.word	0x080040df
 80040a4:	080040cf 	.word	0x080040cf
 80040a8:	080040df 	.word	0x080040df
 80040ac:	080040df 	.word	0x080040df
 80040b0:	080040df 	.word	0x080040df
 80040b4:	080040d7 	.word	0x080040d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040b8:	f7fe ff44 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 80040bc:	61f8      	str	r0, [r7, #28]
        break;
 80040be:	e014      	b.n	80040ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040c0:	f7fe ff56 	bl	8002f70 <HAL_RCC_GetPCLK2Freq>
 80040c4:	61f8      	str	r0, [r7, #28]
        break;
 80040c6:	e010      	b.n	80040ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004144 <UART_SetConfig+0x56c>)
 80040ca:	61fb      	str	r3, [r7, #28]
        break;
 80040cc:	e00d      	b.n	80040ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ce:	f7fe fea1 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 80040d2:	61f8      	str	r0, [r7, #28]
        break;
 80040d4:	e009      	b.n	80040ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040da:	61fb      	str	r3, [r7, #28]
        break;
 80040dc:	e005      	b.n	80040ea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040e8:	bf00      	nop
    }

    if (pclk != 0U)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d019      	beq.n	8004124 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	085a      	lsrs	r2, r3, #1
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	441a      	add	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004102:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b0f      	cmp	r3, #15
 8004108:	d909      	bls.n	800411e <UART_SetConfig+0x546>
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004110:	d205      	bcs.n	800411e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60da      	str	r2, [r3, #12]
 800411c:	e002      	b.n	8004124 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004130:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004134:	4618      	mov	r0, r3
 8004136:	3728      	adds	r7, #40	@ 0x28
 8004138:	46bd      	mov	sp, r7
 800413a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800413e:	bf00      	nop
 8004140:	40008000 	.word	0x40008000
 8004144:	00f42400 	.word	0x00f42400

08004148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01a      	beq.n	800425e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004246:	d10a      	bne.n	800425e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b098      	sub	sp, #96	@ 0x60
 8004290:	af02      	add	r7, sp, #8
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800429c:	f7fd f8f6 	bl	800148c <HAL_GetTick>
 80042a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d12e      	bne.n	800430e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b8:	2200      	movs	r2, #0
 80042ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f88c 	bl	80043dc <UART_WaitOnFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d021      	beq.n	800430e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042de:	653b      	str	r3, [r7, #80]	@ 0x50
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e6      	bne.n	80042ca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e062      	b.n	80043d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b04      	cmp	r3, #4
 800431a:	d149      	bne.n	80043b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800431c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004324:	2200      	movs	r2, #0
 8004326:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f856 	bl	80043dc <UART_WaitOnFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d03c      	beq.n	80043b0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433e:	e853 3f00 	ldrex	r3, [r3]
 8004342:	623b      	str	r3, [r7, #32]
   return(result);
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800434a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004354:	633b      	str	r3, [r7, #48]	@ 0x30
 8004356:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800435a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e6      	bne.n	8004336 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3308      	adds	r3, #8
 800436e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	60fb      	str	r3, [r7, #12]
   return(result);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0301 	bic.w	r3, r3, #1
 800437e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3308      	adds	r3, #8
 8004386:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004388:	61fa      	str	r2, [r7, #28]
 800438a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	69b9      	ldr	r1, [r7, #24]
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	617b      	str	r3, [r7, #20]
   return(result);
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e5      	bne.n	8004368 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e011      	b.n	80043d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3758      	adds	r7, #88	@ 0x58
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	4613      	mov	r3, r2
 80043ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ec:	e04f      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d04b      	beq.n	800448e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f6:	f7fd f849 	bl	800148c <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	429a      	cmp	r2, r3
 8004404:	d302      	bcc.n	800440c <UART_WaitOnFlagUntilTimeout+0x30>
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e04e      	b.n	80044ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d037      	beq.n	800448e <UART_WaitOnFlagUntilTimeout+0xb2>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b80      	cmp	r3, #128	@ 0x80
 8004422:	d034      	beq.n	800448e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b40      	cmp	r3, #64	@ 0x40
 8004428:	d031      	beq.n	800448e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b08      	cmp	r3, #8
 8004436:	d110      	bne.n	800445a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2208      	movs	r2, #8
 800443e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f838 	bl	80044b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2208      	movs	r2, #8
 800444a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e029      	b.n	80044ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004468:	d111      	bne.n	800448e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f81e 	bl	80044b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e00f      	b.n	80044ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4013      	ands	r3, r2
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	429a      	cmp	r2, r3
 800449c:	bf0c      	ite	eq
 800449e:	2301      	moveq	r3, #1
 80044a0:	2300      	movne	r3, #0
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	461a      	mov	r2, r3
 80044a6:	79fb      	ldrb	r3, [r7, #7]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d0a0      	beq.n	80043ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b095      	sub	sp, #84	@ 0x54
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80044de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e6      	bne.n	80044be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3308      	adds	r3, #8
 80044f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3308      	adds	r3, #8
 800450e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004510:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004512:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004514:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004518:	e841 2300 	strex	r3, r2, [r1]
 800451c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e5      	bne.n	80044f0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004528:	2b01      	cmp	r3, #1
 800452a:	d118      	bne.n	800455e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	60bb      	str	r3, [r7, #8]
   return(result);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f023 0310 	bic.w	r3, r3, #16
 8004540:	647b      	str	r3, [r7, #68]	@ 0x44
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6979      	ldr	r1, [r7, #20]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	613b      	str	r3, [r7, #16]
   return(result);
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e6      	bne.n	800452c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004572:	bf00      	nop
 8004574:	3754      	adds	r7, #84	@ 0x54
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800457e:	b084      	sub	sp, #16
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	f107 001c 	add.w	r0, r7, #28
 800458c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 fa69 	bl	8004a74 <USB_CoreReset>
 80045a2:	4603      	mov	r3, r0
 80045a4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80045a6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d106      	bne.n	80045bc <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80045ba:	e005      	b.n	80045c8 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045d4:	b004      	add	sp, #16
 80045d6:	4770      	bx	lr

080045d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f023 0201 	bic.w	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	460b      	mov	r3, r1
 8004604:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004616:	78fb      	ldrb	r3, [r7, #3]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d115      	bne.n	8004648 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004628:	200a      	movs	r0, #10
 800462a:	f7fc ff3b 	bl	80014a4 <HAL_Delay>
      ms += 10U;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	330a      	adds	r3, #10
 8004632:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fa0f 	bl	8004a58 <USB_GetMode>
 800463a:	4603      	mov	r3, r0
 800463c:	2b01      	cmp	r3, #1
 800463e:	d01e      	beq.n	800467e <USB_SetCurrentMode+0x84>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2bc7      	cmp	r3, #199	@ 0xc7
 8004644:	d9f0      	bls.n	8004628 <USB_SetCurrentMode+0x2e>
 8004646:	e01a      	b.n	800467e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d115      	bne.n	800467a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800465a:	200a      	movs	r0, #10
 800465c:	f7fc ff22 	bl	80014a4 <HAL_Delay>
      ms += 10U;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	330a      	adds	r3, #10
 8004664:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f9f6 	bl	8004a58 <USB_GetMode>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <USB_SetCurrentMode+0x84>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2bc7      	cmp	r3, #199	@ 0xc7
 8004676:	d9f0      	bls.n	800465a <USB_SetCurrentMode+0x60>
 8004678:	e001      	b.n	800467e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e005      	b.n	800468a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2bc8      	cmp	r3, #200	@ 0xc8
 8004682:	d101      	bne.n	8004688 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004694:	b084      	sub	sp, #16
 8004696:	b580      	push	{r7, lr}
 8004698:	b086      	sub	sp, #24
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80046a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	e009      	b.n	80046c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	3340      	adds	r3, #64	@ 0x40
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	2200      	movs	r2, #0
 80046c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	3301      	adds	r3, #1
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b0e      	cmp	r3, #14
 80046cc:	d9f2      	bls.n	80046b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d11c      	bne.n	8004710 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046e4:	f043 0302 	orr.w	r3, r3, #2
 80046e8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ee:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	e005      	b.n	800471c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004714:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004722:	461a      	mov	r2, r3
 8004724:	2300      	movs	r3, #0
 8004726:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004728:	2103      	movs	r1, #3
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f95a 	bl	80049e4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004730:	2110      	movs	r1, #16
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f8f6 	bl	8004924 <USB_FlushTxFifo>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f920 	bl	8004988 <USB_FlushRxFifo>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004758:	461a      	mov	r2, r3
 800475a:	2300      	movs	r3, #0
 800475c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004764:	461a      	mov	r2, r3
 8004766:	2300      	movs	r3, #0
 8004768:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004770:	461a      	mov	r2, r3
 8004772:	2300      	movs	r3, #0
 8004774:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	e043      	b.n	8004804 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800478e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004792:	d118      	bne.n	80047c6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047a6:	461a      	mov	r2, r3
 80047a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	e013      	b.n	80047d8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047bc:	461a      	mov	r2, r3
 80047be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	e008      	b.n	80047d8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d2:	461a      	mov	r2, r3
 80047d4:	2300      	movs	r3, #0
 80047d6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e4:	461a      	mov	r2, r3
 80047e6:	2300      	movs	r3, #0
 80047e8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047f6:	461a      	mov	r2, r3
 80047f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	3301      	adds	r3, #1
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004808:	461a      	mov	r2, r3
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4293      	cmp	r3, r2
 800480e:	d3b5      	bcc.n	800477c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004810:	2300      	movs	r3, #0
 8004812:	613b      	str	r3, [r7, #16]
 8004814:	e043      	b.n	800489e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004828:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800482c:	d118      	bne.n	8004860 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004840:	461a      	mov	r2, r3
 8004842:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	e013      	b.n	8004872 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004856:	461a      	mov	r2, r3
 8004858:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	e008      	b.n	8004872 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800486c:	461a      	mov	r2, r3
 800486e:	2300      	movs	r3, #0
 8004870:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800487e:	461a      	mov	r2, r3
 8004880:	2300      	movs	r3, #0
 8004882:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004890:	461a      	mov	r2, r3
 8004892:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004896:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	3301      	adds	r3, #1
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80048a2:	461a      	mov	r2, r3
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d3b5      	bcc.n	8004816 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80048ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f043 0210 	orr.w	r2, r3, #16
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699a      	ldr	r2, [r3, #24]
 80048dc:	4b10      	ldr	r3, [pc, #64]	@ (8004920 <USB_DevInit+0x28c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	f043 0208 	orr.w	r2, r3, #8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d107      	bne.n	8004910 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004908:	f043 0304 	orr.w	r3, r3, #4
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004910:	7dfb      	ldrb	r3, [r7, #23]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800491c:	b004      	add	sp, #16
 800491e:	4770      	bx	lr
 8004920:	803c3800 	.word	0x803c3800

08004924 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3301      	adds	r3, #1
 8004936:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800493e:	d901      	bls.n	8004944 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e01b      	b.n	800497c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	daf2      	bge.n	8004932 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	019b      	lsls	r3, r3, #6
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3301      	adds	r3, #1
 8004960:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004968:	d901      	bls.n	800496e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e006      	b.n	800497c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b20      	cmp	r3, #32
 8004978:	d0f0      	beq.n	800495c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3301      	adds	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049a0:	d901      	bls.n	80049a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e018      	b.n	80049d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	daf2      	bge.n	8004994 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2210      	movs	r2, #16
 80049b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3301      	adds	r3, #1
 80049bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049c4:	d901      	bls.n	80049ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e006      	b.n	80049d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	2b10      	cmp	r3, #16
 80049d4:	d0f0      	beq.n	80049b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	68f9      	ldr	r1, [r7, #12]
 8004a00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a04:	4313      	orrs	r3, r2
 8004a06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b085      	sub	sp, #20
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004a30:	f023 0303 	bic.w	r3, r3, #3
 8004a34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a44:	f043 0302 	orr.w	r3, r3, #2
 8004a48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f003 0301 	and.w	r3, r3, #1
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3301      	adds	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a8c:	d901      	bls.n	8004a92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e01b      	b.n	8004aca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	daf2      	bge.n	8004a80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f043 0201 	orr.w	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3301      	adds	r3, #1
 8004aae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ab6:	d901      	bls.n	8004abc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e006      	b.n	8004aca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d0f0      	beq.n	8004aaa <USB_CoreReset+0x36>

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
	...

08004ad8 <__NVIC_SetPriority>:
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	6039      	str	r1, [r7, #0]
 8004ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	db0a      	blt.n	8004b02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	490c      	ldr	r1, [pc, #48]	@ (8004b24 <__NVIC_SetPriority+0x4c>)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	0112      	lsls	r2, r2, #4
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	440b      	add	r3, r1
 8004afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004b00:	e00a      	b.n	8004b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	4908      	ldr	r1, [pc, #32]	@ (8004b28 <__NVIC_SetPriority+0x50>)
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	3b04      	subs	r3, #4
 8004b10:	0112      	lsls	r2, r2, #4
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	440b      	add	r3, r1
 8004b16:	761a      	strb	r2, [r3, #24]
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	e000e100 	.word	0xe000e100
 8004b28:	e000ed00 	.word	0xe000ed00

08004b2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004b30:	2100      	movs	r1, #0
 8004b32:	f06f 0004 	mvn.w	r0, #4
 8004b36:	f7ff ffcf 	bl	8004ad8 <__NVIC_SetPriority>
#endif
}
 8004b3a:	bf00      	nop
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b46:	f3ef 8305 	mrs	r3, IPSR
 8004b4a:	603b      	str	r3, [r7, #0]
  return(result);
 8004b4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004b52:	f06f 0305 	mvn.w	r3, #5
 8004b56:	607b      	str	r3, [r7, #4]
 8004b58:	e00c      	b.n	8004b74 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b84 <osKernelInitialize+0x44>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d105      	bne.n	8004b6e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b62:	4b08      	ldr	r3, [pc, #32]	@ (8004b84 <osKernelInitialize+0x44>)
 8004b64:	2201      	movs	r2, #1
 8004b66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	607b      	str	r3, [r7, #4]
 8004b6c:	e002      	b.n	8004b74 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b74:	687b      	ldr	r3, [r7, #4]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000790 	.word	0x20000790

08004b88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b8e:	f3ef 8305 	mrs	r3, IPSR
 8004b92:	603b      	str	r3, [r7, #0]
  return(result);
 8004b94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004b9a:	f06f 0305 	mvn.w	r3, #5
 8004b9e:	607b      	str	r3, [r7, #4]
 8004ba0:	e010      	b.n	8004bc4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd0 <osKernelStart+0x48>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d109      	bne.n	8004bbe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004baa:	f7ff ffbf 	bl	8004b2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004bae:	4b08      	ldr	r3, [pc, #32]	@ (8004bd0 <osKernelStart+0x48>)
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004bb4:	f001 fe80 	bl	80068b8 <vTaskStartScheduler>
      stat = osOK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	607b      	str	r3, [r7, #4]
 8004bbc:	e002      	b.n	8004bc4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004bc4:	687b      	ldr	r3, [r7, #4]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20000790 	.word	0x20000790

08004bd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08e      	sub	sp, #56	@ 0x38
 8004bd8:	af04      	add	r7, sp, #16
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004be4:	f3ef 8305 	mrs	r3, IPSR
 8004be8:	617b      	str	r3, [r7, #20]
  return(result);
 8004bea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d17e      	bne.n	8004cee <osThreadNew+0x11a>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d07b      	beq.n	8004cee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004bf6:	2380      	movs	r3, #128	@ 0x80
 8004bf8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004bfa:	2318      	movs	r3, #24
 8004bfc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004c02:	f04f 33ff 	mov.w	r3, #4294967295
 8004c06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d045      	beq.n	8004c9a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <osThreadNew+0x48>
        name = attr->name;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <osThreadNew+0x6e>
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	2b38      	cmp	r3, #56	@ 0x38
 8004c34:	d805      	bhi.n	8004c42 <osThreadNew+0x6e>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <osThreadNew+0x72>
        return (NULL);
 8004c42:	2300      	movs	r3, #0
 8004c44:	e054      	b.n	8004cf0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	089b      	lsrs	r3, r3, #2
 8004c54:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00e      	beq.n	8004c7c <osThreadNew+0xa8>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	2b5b      	cmp	r3, #91	@ 0x5b
 8004c64:	d90a      	bls.n	8004c7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d006      	beq.n	8004c7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <osThreadNew+0xa8>
        mem = 1;
 8004c76:	2301      	movs	r3, #1
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	e010      	b.n	8004c9e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10c      	bne.n	8004c9e <osThreadNew+0xca>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d108      	bne.n	8004c9e <osThreadNew+0xca>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d104      	bne.n	8004c9e <osThreadNew+0xca>
          mem = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	e001      	b.n	8004c9e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d110      	bne.n	8004cc6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cac:	9202      	str	r2, [sp, #8]
 8004cae:	9301      	str	r3, [sp, #4]
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	6a3a      	ldr	r2, [r7, #32]
 8004cb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f001 fc20 	bl	8006500 <xTaskCreateStatic>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	e013      	b.n	8004cee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d110      	bne.n	8004cee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	f107 0310 	add.w	r3, r7, #16
 8004cd4:	9301      	str	r3, [sp, #4]
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f001 fc6e 	bl	80065c0 <xTaskCreate>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d001      	beq.n	8004cee <osThreadNew+0x11a>
            hTask = NULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004cee:	693b      	ldr	r3, [r7, #16]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3728      	adds	r7, #40	@ 0x28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d00:	f3ef 8305 	mrs	r3, IPSR
 8004d04:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d06:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <osDelay+0x1c>
    stat = osErrorISR;
 8004d0c:	f06f 0305 	mvn.w	r3, #5
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	e007      	b.n	8004d24 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f001 fd94 	bl	800684c <vTaskDelay>
    }
  }

  return (stat);
 8004d24:	68fb      	ldr	r3, [r7, #12]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b086      	sub	sp, #24
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d3a:	f3ef 8305 	mrs	r3, IPSR
 8004d3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d40:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d12d      	bne.n	8004da2 <osEventFlagsNew+0x74>
    mem = -1;
 8004d46:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d015      	beq.n	8004d7e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d006      	beq.n	8004d68 <osEventFlagsNew+0x3a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	2b1f      	cmp	r3, #31
 8004d60:	d902      	bls.n	8004d68 <osEventFlagsNew+0x3a>
        mem = 1;
 8004d62:	2301      	movs	r3, #1
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	e00c      	b.n	8004d82 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d108      	bne.n	8004d82 <osEventFlagsNew+0x54>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d104      	bne.n	8004d82 <osEventFlagsNew+0x54>
          mem = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	e001      	b.n	8004d82 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d106      	bne.n	8004d96 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 f9f7 	bl	8005180 <xEventGroupCreateStatic>
 8004d92:	6178      	str	r0, [r7, #20]
 8004d94:	e005      	b.n	8004da2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8004d9c:	f000 fa29 	bl	80051f2 <xEventGroupCreate>
 8004da0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004da2:	697b      	ldr	r3, [r7, #20]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <osEventFlagsSet+0x1c>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004dc6:	d303      	bcc.n	8004dd0 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8004dc8:	f06f 0303 	mvn.w	r3, #3
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	e028      	b.n	8004e22 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dd0:	f3ef 8305 	mrs	r3, IPSR
 8004dd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01d      	beq.n	8004e18 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004de0:	f107 0308 	add.w	r3, r7, #8
 8004de4:	461a      	mov	r2, r3
 8004de6:	6839      	ldr	r1, [r7, #0]
 8004de8:	6938      	ldr	r0, [r7, #16]
 8004dea:	f000 fbab 	bl	8005544 <xEventGroupSetBitsFromISR>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d103      	bne.n	8004dfc <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8004df4:	f06f 0302 	mvn.w	r3, #2
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	e012      	b.n	8004e22 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00d      	beq.n	8004e22 <osEventFlagsSet+0x76>
 8004e06:	4b09      	ldr	r3, [pc, #36]	@ (8004e2c <osEventFlagsSet+0x80>)
 8004e08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	e004      	b.n	8004e22 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004e18:	6839      	ldr	r1, [r7, #0]
 8004e1a:	6938      	ldr	r0, [r7, #16]
 8004e1c:	f000 fad6 	bl	80053cc <xEventGroupSetBits>
 8004e20:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004e22:	697b      	ldr	r3, [r7, #20]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	e000ed04 	.word	0xe000ed04

08004e30 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08c      	sub	sp, #48	@ 0x30
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <osEventFlagsWait+0x20>
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e4e:	d303      	bcc.n	8004e58 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8004e50:	f06f 0303 	mvn.w	r3, #3
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	e04b      	b.n	8004ef0 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e58:	f3ef 8305 	mrs	r3, IPSR
 8004e5c:	617b      	str	r3, [r7, #20]
  return(result);
 8004e5e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8004e64:	f06f 0305 	mvn.w	r3, #5
 8004e68:	61fb      	str	r3, [r7, #28]
 8004e6a:	e041      	b.n	8004ef0 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8004e76:	2301      	movs	r3, #1
 8004e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e7a:	e001      	b.n	8004e80 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	623b      	str	r3, [r7, #32]
 8004e8e:	e001      	b.n	8004e94 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9a:	6a3a      	ldr	r2, [r7, #32]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	69b8      	ldr	r0, [r7, #24]
 8004ea0:	f000 f9c2 	bl	8005228 <xEventGroupWaitBits>
 8004ea4:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d010      	beq.n	8004ed2 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d019      	beq.n	8004ef0 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8004ec2:	f06f 0301 	mvn.w	r3, #1
 8004ec6:	61fb      	str	r3, [r7, #28]
 8004ec8:	e012      	b.n	8004ef0 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004eca:	f06f 0302 	mvn.w	r3, #2
 8004ece:	61fb      	str	r3, [r7, #28]
 8004ed0:	e00e      	b.n	8004ef0 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d109      	bne.n	8004ef0 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8004ee2:	f06f 0301 	mvn.w	r3, #1
 8004ee6:	61fb      	str	r3, [r7, #28]
 8004ee8:	e002      	b.n	8004ef0 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004eea:	f06f 0302 	mvn.w	r3, #2
 8004eee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8004ef0:	69fb      	ldr	r3, [r7, #28]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3728      	adds	r7, #40	@ 0x28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b088      	sub	sp, #32
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f06:	f3ef 8305 	mrs	r3, IPSR
 8004f0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f0c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d174      	bne.n	8004ffc <osMutexNew+0x102>
    if (attr != NULL) {
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	e001      	b.n	8004f24 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <osMutexNew+0x3a>
      rmtx = 1U;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	e001      	b.n	8004f38 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d15c      	bne.n	8004ffc <osMutexNew+0x102>
      mem = -1;
 8004f42:	f04f 33ff 	mov.w	r3, #4294967295
 8004f46:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d015      	beq.n	8004f7a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d006      	beq.n	8004f64 <osMutexNew+0x6a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	2b4f      	cmp	r3, #79	@ 0x4f
 8004f5c:	d902      	bls.n	8004f64 <osMutexNew+0x6a>
          mem = 1;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	e00c      	b.n	8004f7e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d108      	bne.n	8004f7e <osMutexNew+0x84>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <osMutexNew+0x84>
            mem = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	e001      	b.n	8004f7e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d112      	bne.n	8004faa <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	4619      	mov	r1, r3
 8004f90:	2004      	movs	r0, #4
 8004f92:	f000 fd16 	bl	80059c2 <xQueueCreateMutexStatic>
 8004f96:	61f8      	str	r0, [r7, #28]
 8004f98:	e016      	b.n	8004fc8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	2001      	movs	r0, #1
 8004fa2:	f000 fd0e 	bl	80059c2 <xQueueCreateMutexStatic>
 8004fa6:	61f8      	str	r0, [r7, #28]
 8004fa8:	e00e      	b.n	8004fc8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d004      	beq.n	8004fc0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004fb6:	2004      	movs	r0, #4
 8004fb8:	f000 fceb 	bl	8005992 <xQueueCreateMutex>
 8004fbc:	61f8      	str	r0, [r7, #28]
 8004fbe:	e003      	b.n	8004fc8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004fc0:	2001      	movs	r0, #1
 8004fc2:	f000 fce6 	bl	8005992 <xQueueCreateMutex>
 8004fc6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00c      	beq.n	8004fe8 <osMutexNew+0xee>
        if (attr != NULL) {
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <osMutexNew+0xe2>
          name = attr->name;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	e001      	b.n	8004fe0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004fe0:	68f9      	ldr	r1, [r7, #12]
 8004fe2:	69f8      	ldr	r0, [r7, #28]
 8004fe4:	f001 fa2e 	bl	8006444 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d006      	beq.n	8004ffc <osMutexNew+0x102>
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004ffc:	69fb      	ldr	r3, [r7, #28]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3720      	adds	r7, #32
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005006:	b580      	push	{r7, lr}
 8005008:	b086      	sub	sp, #24
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f023 0301 	bic.w	r3, r3, #1
 8005016:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005024:	f3ef 8305 	mrs	r3, IPSR
 8005028:	60bb      	str	r3, [r7, #8]
  return(result);
 800502a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005030:	f06f 0305 	mvn.w	r3, #5
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	e02c      	b.n	8005092 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d103      	bne.n	8005046 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800503e:	f06f 0303 	mvn.w	r3, #3
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	e025      	b.n	8005092 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d011      	beq.n	8005070 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800504c:	6839      	ldr	r1, [r7, #0]
 800504e:	6938      	ldr	r0, [r7, #16]
 8005050:	f000 fd07 	bl	8005a62 <xQueueTakeMutexRecursive>
 8005054:	4603      	mov	r3, r0
 8005056:	2b01      	cmp	r3, #1
 8005058:	d01b      	beq.n	8005092 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005060:	f06f 0301 	mvn.w	r3, #1
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	e014      	b.n	8005092 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005068:	f06f 0302 	mvn.w	r3, #2
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	e010      	b.n	8005092 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005070:	6839      	ldr	r1, [r7, #0]
 8005072:	6938      	ldr	r0, [r7, #16]
 8005074:	f000 ffae 	bl	8005fd4 <xQueueSemaphoreTake>
 8005078:	4603      	mov	r3, r0
 800507a:	2b01      	cmp	r3, #1
 800507c:	d009      	beq.n	8005092 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005084:	f06f 0301 	mvn.w	r3, #1
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	e002      	b.n	8005092 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800508c:	f06f 0302 	mvn.w	r3, #2
 8005090:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005092:	697b      	ldr	r3, [r7, #20]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f023 0301 	bic.w	r3, r3, #1
 80050aa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050b8:	f3ef 8305 	mrs	r3, IPSR
 80050bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80050be:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <osMutexRelease+0x30>
    stat = osErrorISR;
 80050c4:	f06f 0305 	mvn.w	r3, #5
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	e01f      	b.n	800510c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d103      	bne.n	80050da <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80050d2:	f06f 0303 	mvn.w	r3, #3
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	e018      	b.n	800510c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d009      	beq.n	80050f4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80050e0:	6938      	ldr	r0, [r7, #16]
 80050e2:	f000 fc89 	bl	80059f8 <xQueueGiveMutexRecursive>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d00f      	beq.n	800510c <osMutexRelease+0x70>
        stat = osErrorResource;
 80050ec:	f06f 0302 	mvn.w	r3, #2
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e00b      	b.n	800510c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80050f4:	2300      	movs	r3, #0
 80050f6:	2200      	movs	r2, #0
 80050f8:	2100      	movs	r1, #0
 80050fa:	6938      	ldr	r0, [r7, #16]
 80050fc:	f000 fce8 	bl	8005ad0 <xQueueGenericSend>
 8005100:	4603      	mov	r3, r0
 8005102:	2b01      	cmp	r3, #1
 8005104:	d002      	beq.n	800510c <osMutexRelease+0x70>
        stat = osErrorResource;
 8005106:	f06f 0302 	mvn.w	r3, #2
 800510a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800510c:	697b      	ldr	r3, [r7, #20]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4a07      	ldr	r2, [pc, #28]	@ (8005144 <vApplicationGetIdleTaskMemory+0x2c>)
 8005128:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	4a06      	ldr	r2, [pc, #24]	@ (8005148 <vApplicationGetIdleTaskMemory+0x30>)
 800512e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2280      	movs	r2, #128	@ 0x80
 8005134:	601a      	str	r2, [r3, #0]
}
 8005136:	bf00      	nop
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	20000794 	.word	0x20000794
 8005148:	200007f0 	.word	0x200007f0

0800514c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4a07      	ldr	r2, [pc, #28]	@ (8005178 <vApplicationGetTimerTaskMemory+0x2c>)
 800515c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	4a06      	ldr	r2, [pc, #24]	@ (800517c <vApplicationGetTimerTaskMemory+0x30>)
 8005162:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800516a:	601a      	str	r2, [r3, #0]
}
 800516c:	bf00      	nop
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	200009f0 	.word	0x200009f0
 800517c:	20000a4c 	.word	0x20000a4c

08005180 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10b      	bne.n	80051a6 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051a0:	bf00      	nop
 80051a2:	bf00      	nop
 80051a4:	e7fd      	b.n	80051a2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80051a6:	2320      	movs	r3, #32
 80051a8:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d00b      	beq.n	80051c8 <xEventGroupCreateStatic+0x48>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	60fb      	str	r3, [r7, #12]
}
 80051c2:	bf00      	nop
 80051c4:	bf00      	nop
 80051c6:	e7fd      	b.n	80051c4 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	3304      	adds	r3, #4
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 f9c5 	bl	800556c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2201      	movs	r2, #1
 80051e6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80051e8:	697b      	ldr	r3, [r7, #20]
	}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80051f8:	2020      	movs	r0, #32
 80051fa:	f003 f827 	bl	800824c <pvPortMalloc>
 80051fe:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3304      	adds	r3, #4
 8005210:	4618      	mov	r0, r3
 8005212:	f000 f9ab 	bl	800556c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800521c:	687b      	ldr	r3, [r7, #4]
	}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b090      	sub	sp, #64	@ 0x40
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800523e:	2300      	movs	r3, #0
 8005240:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10b      	bne.n	8005260 <xEventGroupWaitBits+0x38>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	623b      	str	r3, [r7, #32]
}
 800525a:	bf00      	nop
 800525c:	bf00      	nop
 800525e:	e7fd      	b.n	800525c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005266:	d30b      	bcc.n	8005280 <xEventGroupWaitBits+0x58>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	61fb      	str	r3, [r7, #28]
}
 800527a:	bf00      	nop
 800527c:	bf00      	nop
 800527e:	e7fd      	b.n	800527c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10b      	bne.n	800529e <xEventGroupWaitBits+0x76>
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	61bb      	str	r3, [r7, #24]
}
 8005298:	bf00      	nop
 800529a:	bf00      	nop
 800529c:	e7fd      	b.n	800529a <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800529e:	f002 f80b 	bl	80072b8 <xTaskGetSchedulerState>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d102      	bne.n	80052ae <xEventGroupWaitBits+0x86>
 80052a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <xEventGroupWaitBits+0x8a>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <xEventGroupWaitBits+0x8c>
 80052b2:	2300      	movs	r3, #0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10b      	bne.n	80052d0 <xEventGroupWaitBits+0xa8>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	617b      	str	r3, [r7, #20]
}
 80052ca:	bf00      	nop
 80052cc:	bf00      	nop
 80052ce:	e7fd      	b.n	80052cc <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80052d0:	f001 fb5a 	bl	8006988 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80052d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80052e0:	f000 f90d 	bl	80054fe <prvTestWaitCondition>
 80052e4:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80052e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00e      	beq.n	800530a <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80052ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d028      	beq.n	800534c <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80052fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	43db      	mvns	r3, r3
 8005302:	401a      	ands	r2, r3
 8005304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e020      	b.n	800534c <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800530a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800530c:	2b00      	cmp	r3, #0
 800530e:	d104      	bne.n	800531a <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005312:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8005314:	2301      	movs	r3, #1
 8005316:	633b      	str	r3, [r7, #48]	@ 0x30
 8005318:	e018      	b.n	800534c <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005322:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005326:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800532e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005330:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005334:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005338:	1d18      	adds	r0, r3, #4
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533e:	4313      	orrs	r3, r2
 8005340:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005342:	4619      	mov	r1, r3
 8005344:	f001 fd1a 	bl	8006d7c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005348:	2300      	movs	r3, #0
 800534a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800534c:	f001 fb2a 	bl	80069a4 <xTaskResumeAll>
 8005350:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005354:	2b00      	cmp	r3, #0
 8005356:	d031      	beq.n	80053bc <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8005358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535a:	2b00      	cmp	r3, #0
 800535c:	d107      	bne.n	800536e <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800535e:	4b1a      	ldr	r3, [pc, #104]	@ (80053c8 <xEventGroupWaitBits+0x1a0>)
 8005360:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800536e:	f002 f91d 	bl	80075ac <uxTaskResetEventItemValue>
 8005372:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d11a      	bne.n	80053b4 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800537e:	f002 fe43 	bl	8008008 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	68b9      	ldr	r1, [r7, #8]
 800538c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800538e:	f000 f8b6 	bl	80054fe <prvTestWaitCondition>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d009      	beq.n	80053ac <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d006      	beq.n	80053ac <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800539e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	43db      	mvns	r3, r3
 80053a6:	401a      	ands	r2, r3
 80053a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053aa:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80053ac:	2301      	movs	r3, #1
 80053ae:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 80053b0:	f002 fe5c 	bl	800806c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80053b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80053ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80053bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3740      	adds	r7, #64	@ 0x40
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08e      	sub	sp, #56	@ 0x38
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80053d6:	2300      	movs	r3, #0
 80053d8:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80053de:	2300      	movs	r3, #0
 80053e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10b      	bne.n	8005400 <xEventGroupSetBits+0x34>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	613b      	str	r3, [r7, #16]
}
 80053fa:	bf00      	nop
 80053fc:	bf00      	nop
 80053fe:	e7fd      	b.n	80053fc <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005406:	d30b      	bcc.n	8005420 <xEventGroupSetBits+0x54>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	60fb      	str	r3, [r7, #12]
}
 800541a:	bf00      	nop
 800541c:	bf00      	nop
 800541e:	e7fd      	b.n	800541c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005422:	3304      	adds	r3, #4
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	3308      	adds	r3, #8
 800542a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800542c:	f001 faac 	bl	8006988 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	431a      	orrs	r2, r3
 800543e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005440:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005442:	e03c      	b.n	80054be <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800544a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005450:	2300      	movs	r3, #0
 8005452:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800545a:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005462:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d108      	bne.n	8005480 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800546e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	4013      	ands	r3, r2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00b      	beq.n	8005492 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800547a:	2301      	movs	r3, #1
 800547c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800547e:	e008      	b.n	8005492 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	4013      	ands	r3, r2
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	429a      	cmp	r2, r3
 800548c:	d101      	bne.n	8005492 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800548e:	2301      	movs	r3, #1
 8005490:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d010      	beq.n	80054ba <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80054a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80054aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80054b2:	4619      	mov	r1, r3
 80054b4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80054b6:	f001 fd2f 	bl	8006f18 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80054be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d1be      	bne.n	8005444 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80054c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	43db      	mvns	r3, r3
 80054ce:	401a      	ands	r2, r3
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80054d4:	f001 fa66 	bl	80069a4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80054d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054da:	681b      	ldr	r3, [r3, #0]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3738      	adds	r7, #56	@ 0x38
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80054ee:	6839      	ldr	r1, [r7, #0]
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff ff6b 	bl	80053cc <xEventGroupSetBits>
}
 80054f6:	bf00      	nop
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80054fe:	b480      	push	{r7}
 8005500:	b087      	sub	sp, #28
 8005502:	af00      	add	r7, sp, #0
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d107      	bne.n	8005524 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	4013      	ands	r3, r2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800551e:	2301      	movs	r3, #1
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	e007      	b.n	8005534 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	4013      	ands	r3, r2
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	429a      	cmp	r2, r3
 800552e:	d101      	bne.n	8005534 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005530:	2301      	movs	r3, #1
 8005532:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005534:	697b      	ldr	r3, [r7, #20]
}
 8005536:	4618      	mov	r0, r3
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
	...

08005544 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	68f9      	ldr	r1, [r7, #12]
 8005556:	4804      	ldr	r0, [pc, #16]	@ (8005568 <xEventGroupSetBitsFromISR+0x24>)
 8005558:	f002 fc02 	bl	8007d60 <xTimerPendFunctionCallFromISR>
 800555c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800555e:	697b      	ldr	r3, [r7, #20]
	}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	080054e5 	.word	0x080054e5

0800556c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f103 0208 	add.w	r2, r3, #8
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f04f 32ff 	mov.w	r2, #4294967295
 8005584:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f103 0208 	add.w	r2, r3, #8
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f103 0208 	add.w	r2, r3, #8
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055c6:	b480      	push	{r7}
 80055c8:	b085      	sub	sp, #20
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	601a      	str	r2, [r3, #0]
}
 8005602:	bf00      	nop
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800560e:	b480      	push	{r7}
 8005610:	b085      	sub	sp, #20
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005624:	d103      	bne.n	800562e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	e00c      	b.n	8005648 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3308      	adds	r3, #8
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	e002      	b.n	800563c <vListInsert+0x2e>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	429a      	cmp	r2, r3
 8005646:	d2f6      	bcs.n	8005636 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	601a      	str	r2, [r3, #0]
}
 8005674:	bf00      	nop
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6892      	ldr	r2, [r2, #8]
 8005696:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6852      	ldr	r2, [r2, #4]
 80056a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d103      	bne.n	80056b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	1e5a      	subs	r2, r3, #1
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10b      	bne.n	8005700 <xQueueGenericReset+0x2c>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	60bb      	str	r3, [r7, #8]
}
 80056fa:	bf00      	nop
 80056fc:	bf00      	nop
 80056fe:	e7fd      	b.n	80056fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005700:	f002 fc82 	bl	8008008 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570c:	68f9      	ldr	r1, [r7, #12]
 800570e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005710:	fb01 f303 	mul.w	r3, r1, r3
 8005714:	441a      	add	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005730:	3b01      	subs	r3, #1
 8005732:	68f9      	ldr	r1, [r7, #12]
 8005734:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005736:	fb01 f303 	mul.w	r3, r1, r3
 800573a:	441a      	add	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	22ff      	movs	r2, #255	@ 0xff
 8005744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	22ff      	movs	r2, #255	@ 0xff
 800574c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d114      	bne.n	8005780 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d01a      	beq.n	8005794 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3310      	adds	r3, #16
 8005762:	4618      	mov	r0, r3
 8005764:	f001 fb74 	bl	8006e50 <xTaskRemoveFromEventList>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d012      	beq.n	8005794 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800576e:	4b0d      	ldr	r3, [pc, #52]	@ (80057a4 <xQueueGenericReset+0xd0>)
 8005770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	e009      	b.n	8005794 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3310      	adds	r3, #16
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff fef1 	bl	800556c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3324      	adds	r3, #36	@ 0x24
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff feec 	bl	800556c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005794:	f002 fc6a 	bl	800806c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005798:	2301      	movs	r3, #1
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	e000ed04 	.word	0xe000ed04

080057a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08e      	sub	sp, #56	@ 0x38
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10b      	bne.n	80057d4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057ce:	bf00      	nop
 80057d0:	bf00      	nop
 80057d2:	e7fd      	b.n	80057d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10b      	bne.n	80057f2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	e7fd      	b.n	80057ee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <xQueueGenericCreateStatic+0x56>
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <xQueueGenericCreateStatic+0x5a>
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <xQueueGenericCreateStatic+0x5c>
 8005802:	2300      	movs	r3, #0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10b      	bne.n	8005820 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	623b      	str	r3, [r7, #32]
}
 800581a:	bf00      	nop
 800581c:	bf00      	nop
 800581e:	e7fd      	b.n	800581c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d102      	bne.n	800582c <xQueueGenericCreateStatic+0x84>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <xQueueGenericCreateStatic+0x88>
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <xQueueGenericCreateStatic+0x8a>
 8005830:	2300      	movs	r3, #0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10b      	bne.n	800584e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	61fb      	str	r3, [r7, #28]
}
 8005848:	bf00      	nop
 800584a:	bf00      	nop
 800584c:	e7fd      	b.n	800584a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800584e:	2350      	movs	r3, #80	@ 0x50
 8005850:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b50      	cmp	r3, #80	@ 0x50
 8005856:	d00b      	beq.n	8005870 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	61bb      	str	r3, [r7, #24]
}
 800586a:	bf00      	nop
 800586c:	bf00      	nop
 800586e:	e7fd      	b.n	800586c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005870:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00d      	beq.n	8005898 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800587c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005884:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	4613      	mov	r3, r2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 f840 	bl	8005918 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800589a:	4618      	mov	r0, r3
 800589c:	3730      	adds	r7, #48	@ 0x30
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b08a      	sub	sp, #40	@ 0x28
 80058a6:	af02      	add	r7, sp, #8
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	4613      	mov	r3, r2
 80058ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10b      	bne.n	80058ce <xQueueGenericCreate+0x2c>
	__asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	613b      	str	r3, [r7, #16]
}
 80058c8:	bf00      	nop
 80058ca:	bf00      	nop
 80058cc:	e7fd      	b.n	80058ca <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	fb02 f303 	mul.w	r3, r2, r3
 80058d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	3350      	adds	r3, #80	@ 0x50
 80058dc:	4618      	mov	r0, r3
 80058de:	f002 fcb5 	bl	800824c <pvPortMalloc>
 80058e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d011      	beq.n	800590e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	3350      	adds	r3, #80	@ 0x50
 80058f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058fc:	79fa      	ldrb	r2, [r7, #7]
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	4613      	mov	r3, r2
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f805 	bl	8005918 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800590e:	69bb      	ldr	r3, [r7, #24]
	}
 8005910:	4618      	mov	r0, r3
 8005912:	3720      	adds	r7, #32
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d103      	bne.n	8005934 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	e002      	b.n	800593a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005946:	2101      	movs	r1, #1
 8005948:	69b8      	ldr	r0, [r7, #24]
 800594a:	f7ff fec3 	bl	80056d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	78fa      	ldrb	r2, [r7, #3]
 8005952:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00e      	beq.n	800598a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800597e:	2300      	movs	r3, #0
 8005980:	2200      	movs	r2, #0
 8005982:	2100      	movs	r1, #0
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f8a3 	bl	8005ad0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005992:	b580      	push	{r7, lr}
 8005994:	b086      	sub	sp, #24
 8005996:	af00      	add	r7, sp, #0
 8005998:	4603      	mov	r3, r0
 800599a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800599c:	2301      	movs	r3, #1
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	2300      	movs	r3, #0
 80059a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	461a      	mov	r2, r3
 80059a8:	6939      	ldr	r1, [r7, #16]
 80059aa:	6978      	ldr	r0, [r7, #20]
 80059ac:	f7ff ff79 	bl	80058a2 <xQueueGenericCreate>
 80059b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f7ff ffd3 	bl	800595e <prvInitialiseMutex>

		return xNewQueue;
 80059b8:	68fb      	ldr	r3, [r7, #12]
	}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b088      	sub	sp, #32
 80059c6:	af02      	add	r7, sp, #8
 80059c8:	4603      	mov	r3, r0
 80059ca:	6039      	str	r1, [r7, #0]
 80059cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80059ce:	2301      	movs	r3, #1
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	2300      	movs	r3, #0
 80059d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80059d6:	79fb      	ldrb	r3, [r7, #7]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2200      	movs	r2, #0
 80059de:	6939      	ldr	r1, [r7, #16]
 80059e0:	6978      	ldr	r0, [r7, #20]
 80059e2:	f7ff fee1 	bl	80057a8 <xQueueGenericCreateStatic>
 80059e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7ff ffb8 	bl	800595e <prvInitialiseMutex>

		return xNewQueue;
 80059ee:	68fb      	ldr	r3, [r7, #12]
	}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80059f8:	b590      	push	{r4, r7, lr}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10b      	bne.n	8005a22 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	60fb      	str	r3, [r7, #12]
}
 8005a1c:	bf00      	nop
 8005a1e:	bf00      	nop
 8005a20:	e7fd      	b.n	8005a1e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	689c      	ldr	r4, [r3, #8]
 8005a26:	f001 fc37 	bl	8007298 <xTaskGetCurrentTaskHandle>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	429c      	cmp	r4, r3
 8005a2e:	d111      	bne.n	8005a54 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	1e5a      	subs	r2, r3, #1
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d105      	bne.n	8005a4e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005a42:	2300      	movs	r3, #0
 8005a44:	2200      	movs	r2, #0
 8005a46:	2100      	movs	r1, #0
 8005a48:	6938      	ldr	r0, [r7, #16]
 8005a4a:	f000 f841 	bl	8005ad0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	e001      	b.n	8005a58 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005a58:	697b      	ldr	r3, [r7, #20]
	}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	371c      	adds	r7, #28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd90      	pop	{r4, r7, pc}

08005a62 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005a62:	b590      	push	{r4, r7, lr}
 8005a64:	b087      	sub	sp, #28
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10b      	bne.n	8005a8e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	60fb      	str	r3, [r7, #12]
}
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
 8005a8c:	e7fd      	b.n	8005a8a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	689c      	ldr	r4, [r3, #8]
 8005a92:	f001 fc01 	bl	8007298 <xTaskGetCurrentTaskHandle>
 8005a96:	4603      	mov	r3, r0
 8005a98:	429c      	cmp	r4, r3
 8005a9a:	d107      	bne.n	8005aac <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	e00c      	b.n	8005ac6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005aac:	6839      	ldr	r1, [r7, #0]
 8005aae:	6938      	ldr	r0, [r7, #16]
 8005ab0:	f000 fa90 	bl	8005fd4 <xQueueSemaphoreTake>
 8005ab4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d004      	beq.n	8005ac6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005ac6:	697b      	ldr	r3, [r7, #20]
	}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd90      	pop	{r4, r7, pc}

08005ad0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08e      	sub	sp, #56	@ 0x38
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10b      	bne.n	8005b04 <xQueueGenericSend+0x34>
	__asm volatile
 8005aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005afe:	bf00      	nop
 8005b00:	bf00      	nop
 8005b02:	e7fd      	b.n	8005b00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d103      	bne.n	8005b12 <xQueueGenericSend+0x42>
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <xQueueGenericSend+0x46>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <xQueueGenericSend+0x48>
 8005b16:	2300      	movs	r3, #0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10b      	bne.n	8005b34 <xQueueGenericSend+0x64>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b2e:	bf00      	nop
 8005b30:	bf00      	nop
 8005b32:	e7fd      	b.n	8005b30 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d103      	bne.n	8005b42 <xQueueGenericSend+0x72>
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d101      	bne.n	8005b46 <xQueueGenericSend+0x76>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <xQueueGenericSend+0x78>
 8005b46:	2300      	movs	r3, #0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10b      	bne.n	8005b64 <xQueueGenericSend+0x94>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	623b      	str	r3, [r7, #32]
}
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	e7fd      	b.n	8005b60 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b64:	f001 fba8 	bl	80072b8 <xTaskGetSchedulerState>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d102      	bne.n	8005b74 <xQueueGenericSend+0xa4>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <xQueueGenericSend+0xa8>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <xQueueGenericSend+0xaa>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10b      	bne.n	8005b96 <xQueueGenericSend+0xc6>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	61fb      	str	r3, [r7, #28]
}
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
 8005b94:	e7fd      	b.n	8005b92 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b96:	f002 fa37 	bl	8008008 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d302      	bcc.n	8005bac <xQueueGenericSend+0xdc>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d129      	bne.n	8005c00 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bb2:	f000 fb37 	bl	8006224 <prvCopyDataToQueue>
 8005bb6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d010      	beq.n	8005be2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc2:	3324      	adds	r3, #36	@ 0x24
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f001 f943 	bl	8006e50 <xTaskRemoveFromEventList>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d013      	beq.n	8005bf8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005bd0:	4b3f      	ldr	r3, [pc, #252]	@ (8005cd0 <xQueueGenericSend+0x200>)
 8005bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	e00a      	b.n	8005bf8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d007      	beq.n	8005bf8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005be8:	4b39      	ldr	r3, [pc, #228]	@ (8005cd0 <xQueueGenericSend+0x200>)
 8005bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005bf8:	f002 fa38 	bl	800806c <vPortExitCritical>
				return pdPASS;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e063      	b.n	8005cc8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d103      	bne.n	8005c0e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c06:	f002 fa31 	bl	800806c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	e05c      	b.n	8005cc8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d106      	bne.n	8005c22 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c14:	f107 0314 	add.w	r3, r7, #20
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f001 f9e1 	bl	8006fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c22:	f002 fa23 	bl	800806c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c26:	f000 feaf 	bl	8006988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c2a:	f002 f9ed 	bl	8008008 <vPortEnterCritical>
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c34:	b25b      	sxtb	r3, r3
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3a:	d103      	bne.n	8005c44 <xQueueGenericSend+0x174>
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c4a:	b25b      	sxtb	r3, r3
 8005c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c50:	d103      	bne.n	8005c5a <xQueueGenericSend+0x18a>
 8005c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c5a:	f002 fa07 	bl	800806c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c5e:	1d3a      	adds	r2, r7, #4
 8005c60:	f107 0314 	add.w	r3, r7, #20
 8005c64:	4611      	mov	r1, r2
 8005c66:	4618      	mov	r0, r3
 8005c68:	f001 f9d0 	bl	800700c <xTaskCheckForTimeOut>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d124      	bne.n	8005cbc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c74:	f000 fbce 	bl	8006414 <prvIsQueueFull>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d018      	beq.n	8005cb0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c80:	3310      	adds	r3, #16
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	4611      	mov	r1, r2
 8005c86:	4618      	mov	r0, r3
 8005c88:	f001 f852 	bl	8006d30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c8e:	f000 fb59 	bl	8006344 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c92:	f000 fe87 	bl	80069a4 <xTaskResumeAll>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f47f af7c 	bne.w	8005b96 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd0 <xQueueGenericSend+0x200>)
 8005ca0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	e772      	b.n	8005b96 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005cb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cb2:	f000 fb47 	bl	8006344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cb6:	f000 fe75 	bl	80069a4 <xTaskResumeAll>
 8005cba:	e76c      	b.n	8005b96 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005cbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cbe:	f000 fb41 	bl	8006344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cc2:	f000 fe6f 	bl	80069a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005cc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3738      	adds	r7, #56	@ 0x38
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	e000ed04 	.word	0xe000ed04

08005cd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b090      	sub	sp, #64	@ 0x40
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10b      	bne.n	8005d04 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005cfe:	bf00      	nop
 8005d00:	bf00      	nop
 8005d02:	e7fd      	b.n	8005d00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <xQueueGenericSendFromISR+0x3e>
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <xQueueGenericSendFromISR+0x42>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <xQueueGenericSendFromISR+0x44>
 8005d16:	2300      	movs	r3, #0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10b      	bne.n	8005d34 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d2e:	bf00      	nop
 8005d30:	bf00      	nop
 8005d32:	e7fd      	b.n	8005d30 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d103      	bne.n	8005d42 <xQueueGenericSendFromISR+0x6e>
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <xQueueGenericSendFromISR+0x72>
 8005d42:	2301      	movs	r3, #1
 8005d44:	e000      	b.n	8005d48 <xQueueGenericSendFromISR+0x74>
 8005d46:	2300      	movs	r3, #0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10b      	bne.n	8005d64 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	623b      	str	r3, [r7, #32]
}
 8005d5e:	bf00      	nop
 8005d60:	bf00      	nop
 8005d62:	e7fd      	b.n	8005d60 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d64:	f002 fa30 	bl	80081c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d68:	f3ef 8211 	mrs	r2, BASEPRI
 8005d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	61fa      	str	r2, [r7, #28]
 8005d7e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d80:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d82:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d302      	bcc.n	8005d96 <xQueueGenericSendFromISR+0xc2>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d12f      	bne.n	8005df6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	68b9      	ldr	r1, [r7, #8]
 8005daa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005dac:	f000 fa3a 	bl	8006224 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005db0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d112      	bne.n	8005de0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d016      	beq.n	8005df0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc4:	3324      	adds	r3, #36	@ 0x24
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 f842 	bl	8006e50 <xTaskRemoveFromEventList>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00e      	beq.n	8005df0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00b      	beq.n	8005df0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	e007      	b.n	8005df0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005de0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005de4:	3301      	adds	r3, #1
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	b25a      	sxtb	r2, r3
 8005dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005df0:	2301      	movs	r3, #1
 8005df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005df4:	e001      	b.n	8005dfa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3740      	adds	r7, #64	@ 0x40
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08c      	sub	sp, #48	@ 0x30
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <xQueueReceive+0x32>
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	623b      	str	r3, [r7, #32]
}
 8005e3c:	bf00      	nop
 8005e3e:	bf00      	nop
 8005e40:	e7fd      	b.n	8005e3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d103      	bne.n	8005e50 <xQueueReceive+0x40>
 8005e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <xQueueReceive+0x44>
 8005e50:	2301      	movs	r3, #1
 8005e52:	e000      	b.n	8005e56 <xQueueReceive+0x46>
 8005e54:	2300      	movs	r3, #0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10b      	bne.n	8005e72 <xQueueReceive+0x62>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	61fb      	str	r3, [r7, #28]
}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	e7fd      	b.n	8005e6e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e72:	f001 fa21 	bl	80072b8 <xTaskGetSchedulerState>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d102      	bne.n	8005e82 <xQueueReceive+0x72>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <xQueueReceive+0x76>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <xQueueReceive+0x78>
 8005e86:	2300      	movs	r3, #0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10b      	bne.n	8005ea4 <xQueueReceive+0x94>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	61bb      	str	r3, [r7, #24]
}
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	e7fd      	b.n	8005ea0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ea4:	f002 f8b0 	bl	8008008 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d01f      	beq.n	8005ef4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eb8:	f000 fa1e 	bl	80062f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebe:	1e5a      	subs	r2, r3, #1
 8005ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00f      	beq.n	8005eec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ece:	3310      	adds	r3, #16
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 ffbd 	bl	8006e50 <xTaskRemoveFromEventList>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005edc:	4b3c      	ldr	r3, [pc, #240]	@ (8005fd0 <xQueueReceive+0x1c0>)
 8005ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005eec:	f002 f8be 	bl	800806c <vPortExitCritical>
				return pdPASS;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e069      	b.n	8005fc8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d103      	bne.n	8005f02 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005efa:	f002 f8b7 	bl	800806c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e062      	b.n	8005fc8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d106      	bne.n	8005f16 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f08:	f107 0310 	add.w	r3, r7, #16
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f001 f867 	bl	8006fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f12:	2301      	movs	r3, #1
 8005f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f16:	f002 f8a9 	bl	800806c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f1a:	f000 fd35 	bl	8006988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f1e:	f002 f873 	bl	8008008 <vPortEnterCritical>
 8005f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f28:	b25b      	sxtb	r3, r3
 8005f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2e:	d103      	bne.n	8005f38 <xQueueReceive+0x128>
 8005f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f3e:	b25b      	sxtb	r3, r3
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d103      	bne.n	8005f4e <xQueueReceive+0x13e>
 8005f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f4e:	f002 f88d 	bl	800806c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f52:	1d3a      	adds	r2, r7, #4
 8005f54:	f107 0310 	add.w	r3, r7, #16
 8005f58:	4611      	mov	r1, r2
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 f856 	bl	800700c <xTaskCheckForTimeOut>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d123      	bne.n	8005fae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f68:	f000 fa3e 	bl	80063e8 <prvIsQueueEmpty>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d017      	beq.n	8005fa2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f74:	3324      	adds	r3, #36	@ 0x24
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	4611      	mov	r1, r2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fed8 	bl	8006d30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f82:	f000 f9df 	bl	8006344 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f86:	f000 fd0d 	bl	80069a4 <xTaskResumeAll>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d189      	bne.n	8005ea4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005f90:	4b0f      	ldr	r3, [pc, #60]	@ (8005fd0 <xQueueReceive+0x1c0>)
 8005f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	e780      	b.n	8005ea4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005fa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fa4:	f000 f9ce 	bl	8006344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fa8:	f000 fcfc 	bl	80069a4 <xTaskResumeAll>
 8005fac:	e77a      	b.n	8005ea4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005fae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fb0:	f000 f9c8 	bl	8006344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fb4:	f000 fcf6 	bl	80069a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fba:	f000 fa15 	bl	80063e8 <prvIsQueueEmpty>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f43f af6f 	beq.w	8005ea4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fc6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3730      	adds	r7, #48	@ 0x30
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	e000ed04 	.word	0xe000ed04

08005fd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08e      	sub	sp, #56	@ 0x38
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10b      	bne.n	8006008 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	623b      	str	r3, [r7, #32]
}
 8006002:	bf00      	nop
 8006004:	bf00      	nop
 8006006:	e7fd      	b.n	8006004 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00b      	beq.n	8006028 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	61fb      	str	r3, [r7, #28]
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	e7fd      	b.n	8006024 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006028:	f001 f946 	bl	80072b8 <xTaskGetSchedulerState>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d102      	bne.n	8006038 <xQueueSemaphoreTake+0x64>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <xQueueSemaphoreTake+0x68>
 8006038:	2301      	movs	r3, #1
 800603a:	e000      	b.n	800603e <xQueueSemaphoreTake+0x6a>
 800603c:	2300      	movs	r3, #0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10b      	bne.n	800605a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	61bb      	str	r3, [r7, #24]
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop
 8006058:	e7fd      	b.n	8006056 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800605a:	f001 ffd5 	bl	8008008 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800605e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006062:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006066:	2b00      	cmp	r3, #0
 8006068:	d024      	beq.n	80060b4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800606a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606c:	1e5a      	subs	r2, r3, #1
 800606e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006070:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d104      	bne.n	8006084 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800607a:	f001 faaf 	bl	80075dc <pvTaskIncrementMutexHeldCount>
 800607e:	4602      	mov	r2, r0
 8006080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006082:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00f      	beq.n	80060ac <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800608c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608e:	3310      	adds	r3, #16
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fedd 	bl	8006e50 <xTaskRemoveFromEventList>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d007      	beq.n	80060ac <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800609c:	4b54      	ldr	r3, [pc, #336]	@ (80061f0 <xQueueSemaphoreTake+0x21c>)
 800609e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060ac:	f001 ffde 	bl	800806c <vPortExitCritical>
				return pdPASS;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e098      	b.n	80061e6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d112      	bne.n	80060e0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00b      	beq.n	80060d8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	617b      	str	r3, [r7, #20]
}
 80060d2:	bf00      	nop
 80060d4:	bf00      	nop
 80060d6:	e7fd      	b.n	80060d4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80060d8:	f001 ffc8 	bl	800806c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060dc:	2300      	movs	r3, #0
 80060de:	e082      	b.n	80061e6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060e6:	f107 030c 	add.w	r3, r7, #12
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 ff78 	bl	8006fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060f0:	2301      	movs	r3, #1
 80060f2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060f4:	f001 ffba 	bl	800806c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060f8:	f000 fc46 	bl	8006988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060fc:	f001 ff84 	bl	8008008 <vPortEnterCritical>
 8006100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006102:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006106:	b25b      	sxtb	r3, r3
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610c:	d103      	bne.n	8006116 <xQueueSemaphoreTake+0x142>
 800610e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006118:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800611c:	b25b      	sxtb	r3, r3
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006122:	d103      	bne.n	800612c <xQueueSemaphoreTake+0x158>
 8006124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800612c:	f001 ff9e 	bl	800806c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006130:	463a      	mov	r2, r7
 8006132:	f107 030c 	add.w	r3, r7, #12
 8006136:	4611      	mov	r1, r2
 8006138:	4618      	mov	r0, r3
 800613a:	f000 ff67 	bl	800700c <xTaskCheckForTimeOut>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d132      	bne.n	80061aa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006144:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006146:	f000 f94f 	bl	80063e8 <prvIsQueueEmpty>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d026      	beq.n	800619e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d109      	bne.n	800616c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006158:	f001 ff56 	bl	8008008 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800615c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	4618      	mov	r0, r3
 8006162:	f001 f8c7 	bl	80072f4 <xTaskPriorityInherit>
 8006166:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006168:	f001 ff80 	bl	800806c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800616c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800616e:	3324      	adds	r3, #36	@ 0x24
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	4611      	mov	r1, r2
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fddb 	bl	8006d30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800617a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800617c:	f000 f8e2 	bl	8006344 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006180:	f000 fc10 	bl	80069a4 <xTaskResumeAll>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	f47f af67 	bne.w	800605a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800618c:	4b18      	ldr	r3, [pc, #96]	@ (80061f0 <xQueueSemaphoreTake+0x21c>)
 800618e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	e75d      	b.n	800605a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800619e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061a0:	f000 f8d0 	bl	8006344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061a4:	f000 fbfe 	bl	80069a4 <xTaskResumeAll>
 80061a8:	e757      	b.n	800605a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80061aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061ac:	f000 f8ca 	bl	8006344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061b0:	f000 fbf8 	bl	80069a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061b6:	f000 f917 	bl	80063e8 <prvIsQueueEmpty>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f43f af4c 	beq.w	800605a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80061c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00d      	beq.n	80061e4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80061c8:	f001 ff1e 	bl	8008008 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80061cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061ce:	f000 f811 	bl	80061f4 <prvGetDisinheritPriorityAfterTimeout>
 80061d2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80061d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 f962 	bl	80074a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80061e0:	f001 ff44 	bl	800806c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3738      	adds	r7, #56	@ 0x38
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	e000ed04 	.word	0xe000ed04

080061f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	2b00      	cmp	r3, #0
 8006202:	d006      	beq.n	8006212 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	e001      	b.n	8006216 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006216:	68fb      	ldr	r3, [r7, #12]
	}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006238:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10d      	bne.n	800625e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d14d      	bne.n	80062e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	4618      	mov	r0, r3
 8006250:	f001 f8b8 	bl	80073c4 <xTaskPriorityDisinherit>
 8006254:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	609a      	str	r2, [r3, #8]
 800625c:	e043      	b.n	80062e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d119      	bne.n	8006298 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6858      	ldr	r0, [r3, #4]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626c:	461a      	mov	r2, r3
 800626e:	68b9      	ldr	r1, [r7, #8]
 8006270:	f002 fa06 	bl	8008680 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627c:	441a      	add	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	429a      	cmp	r2, r3
 800628c:	d32b      	bcc.n	80062e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	605a      	str	r2, [r3, #4]
 8006296:	e026      	b.n	80062e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	68d8      	ldr	r0, [r3, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a0:	461a      	mov	r2, r3
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	f002 f9ec 	bl	8008680 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b0:	425b      	negs	r3, r3
 80062b2:	441a      	add	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d207      	bcs.n	80062d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062cc:	425b      	negs	r3, r3
 80062ce:	441a      	add	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d105      	bne.n	80062e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80062ee:	697b      	ldr	r3, [r7, #20]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006306:	2b00      	cmp	r3, #0
 8006308:	d018      	beq.n	800633c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006312:	441a      	add	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	429a      	cmp	r2, r3
 8006322:	d303      	bcc.n	800632c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68d9      	ldr	r1, [r3, #12]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006334:	461a      	mov	r2, r3
 8006336:	6838      	ldr	r0, [r7, #0]
 8006338:	f002 f9a2 	bl	8008680 <memcpy>
	}
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800634c:	f001 fe5c 	bl	8008008 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006356:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006358:	e011      	b.n	800637e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635e:	2b00      	cmp	r3, #0
 8006360:	d012      	beq.n	8006388 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3324      	adds	r3, #36	@ 0x24
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fd72 	bl	8006e50 <xTaskRemoveFromEventList>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006372:	f000 feaf 	bl	80070d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	3b01      	subs	r3, #1
 800637a:	b2db      	uxtb	r3, r3
 800637c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800637e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006382:	2b00      	cmp	r3, #0
 8006384:	dce9      	bgt.n	800635a <prvUnlockQueue+0x16>
 8006386:	e000      	b.n	800638a <prvUnlockQueue+0x46>
					break;
 8006388:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	22ff      	movs	r2, #255	@ 0xff
 800638e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006392:	f001 fe6b 	bl	800806c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006396:	f001 fe37 	bl	8008008 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063a2:	e011      	b.n	80063c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d012      	beq.n	80063d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3310      	adds	r3, #16
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fd4d 	bl	8006e50 <xTaskRemoveFromEventList>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80063bc:	f000 fe8a 	bl	80070d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80063c0:	7bbb      	ldrb	r3, [r7, #14]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dce9      	bgt.n	80063a4 <prvUnlockQueue+0x60>
 80063d0:	e000      	b.n	80063d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80063d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	22ff      	movs	r2, #255	@ 0xff
 80063d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80063dc:	f001 fe46 	bl	800806c <vPortExitCritical>
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063f0:	f001 fe0a 	bl	8008008 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d102      	bne.n	8006402 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80063fc:	2301      	movs	r3, #1
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	e001      	b.n	8006406 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006406:	f001 fe31 	bl	800806c <vPortExitCritical>

	return xReturn;
 800640a:	68fb      	ldr	r3, [r7, #12]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800641c:	f001 fdf4 	bl	8008008 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006428:	429a      	cmp	r2, r3
 800642a:	d102      	bne.n	8006432 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800642c:	2301      	movs	r3, #1
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	e001      	b.n	8006436 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006436:	f001 fe19 	bl	800806c <vPortExitCritical>

	return xReturn;
 800643a:	68fb      	ldr	r3, [r7, #12]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e014      	b.n	800647e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006454:	4a0f      	ldr	r2, [pc, #60]	@ (8006494 <vQueueAddToRegistry+0x50>)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10b      	bne.n	8006478 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006460:	490c      	ldr	r1, [pc, #48]	@ (8006494 <vQueueAddToRegistry+0x50>)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800646a:	4a0a      	ldr	r2, [pc, #40]	@ (8006494 <vQueueAddToRegistry+0x50>)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	4413      	add	r3, r2
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006476:	e006      	b.n	8006486 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3301      	adds	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b07      	cmp	r3, #7
 8006482:	d9e7      	bls.n	8006454 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006484:	bf00      	nop
 8006486:	bf00      	nop
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	20000e4c 	.word	0x20000e4c

08006498 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80064a8:	f001 fdae 	bl	8008008 <vPortEnterCritical>
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064b2:	b25b      	sxtb	r3, r3
 80064b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b8:	d103      	bne.n	80064c2 <vQueueWaitForMessageRestricted+0x2a>
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064c8:	b25b      	sxtb	r3, r3
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d103      	bne.n	80064d8 <vQueueWaitForMessageRestricted+0x40>
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064d8:	f001 fdc8 	bl	800806c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d106      	bne.n	80064f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	3324      	adds	r3, #36	@ 0x24
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	68b9      	ldr	r1, [r7, #8]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 fc83 	bl	8006df8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80064f2:	6978      	ldr	r0, [r7, #20]
 80064f4:	f7ff ff26 	bl	8006344 <prvUnlockQueue>
	}
 80064f8:	bf00      	nop
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006500:	b580      	push	{r7, lr}
 8006502:	b08e      	sub	sp, #56	@ 0x38
 8006504:	af04      	add	r7, sp, #16
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800650e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10b      	bne.n	800652c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	623b      	str	r3, [r7, #32]
}
 8006526:	bf00      	nop
 8006528:	bf00      	nop
 800652a:	e7fd      	b.n	8006528 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800652c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10b      	bne.n	800654a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	61fb      	str	r3, [r7, #28]
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop
 8006548:	e7fd      	b.n	8006546 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800654a:	235c      	movs	r3, #92	@ 0x5c
 800654c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	2b5c      	cmp	r3, #92	@ 0x5c
 8006552:	d00b      	beq.n	800656c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	61bb      	str	r3, [r7, #24]
}
 8006566:	bf00      	nop
 8006568:	bf00      	nop
 800656a:	e7fd      	b.n	8006568 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800656c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800656e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006570:	2b00      	cmp	r3, #0
 8006572:	d01e      	beq.n	80065b2 <xTaskCreateStatic+0xb2>
 8006574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006576:	2b00      	cmp	r3, #0
 8006578:	d01b      	beq.n	80065b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800657a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006580:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006582:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006586:	2202      	movs	r2, #2
 8006588:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800658c:	2300      	movs	r3, #0
 800658e:	9303      	str	r3, [sp, #12]
 8006590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006592:	9302      	str	r3, [sp, #8]
 8006594:	f107 0314 	add.w	r3, r7, #20
 8006598:	9301      	str	r3, [sp, #4]
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f850 	bl	800664a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80065ac:	f000 f8de 	bl	800676c <prvAddNewTaskToReadyList>
 80065b0:	e001      	b.n	80065b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065b6:	697b      	ldr	r3, [r7, #20]
	}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3728      	adds	r7, #40	@ 0x28
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b08c      	sub	sp, #48	@ 0x30
 80065c4:	af04      	add	r7, sp, #16
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	603b      	str	r3, [r7, #0]
 80065cc:	4613      	mov	r3, r2
 80065ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065d0:	88fb      	ldrh	r3, [r7, #6]
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4618      	mov	r0, r3
 80065d6:	f001 fe39 	bl	800824c <pvPortMalloc>
 80065da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00e      	beq.n	8006600 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065e2:	205c      	movs	r0, #92	@ 0x5c
 80065e4:	f001 fe32 	bl	800824c <pvPortMalloc>
 80065e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d003      	beq.n	80065f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80065f6:	e005      	b.n	8006604 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065f8:	6978      	ldr	r0, [r7, #20]
 80065fa:	f001 fef5 	bl	80083e8 <vPortFree>
 80065fe:	e001      	b.n	8006604 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006600:	2300      	movs	r3, #0
 8006602:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d017      	beq.n	800663a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006612:	88fa      	ldrh	r2, [r7, #6]
 8006614:	2300      	movs	r3, #0
 8006616:	9303      	str	r3, [sp, #12]
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	9302      	str	r3, [sp, #8]
 800661c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661e:	9301      	str	r3, [sp, #4]
 8006620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f80e 	bl	800664a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800662e:	69f8      	ldr	r0, [r7, #28]
 8006630:	f000 f89c 	bl	800676c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006634:	2301      	movs	r3, #1
 8006636:	61bb      	str	r3, [r7, #24]
 8006638:	e002      	b.n	8006640 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800663a:	f04f 33ff 	mov.w	r3, #4294967295
 800663e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006640:	69bb      	ldr	r3, [r7, #24]
	}
 8006642:	4618      	mov	r0, r3
 8006644:	3720      	adds	r7, #32
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b088      	sub	sp, #32
 800664e:	af00      	add	r7, sp, #0
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	607a      	str	r2, [r7, #4]
 8006656:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	461a      	mov	r2, r3
 8006662:	21a5      	movs	r1, #165	@ 0xa5
 8006664:	f001 ffe0 	bl	8008628 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006672:	3b01      	subs	r3, #1
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	f023 0307 	bic.w	r3, r3, #7
 8006680:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00b      	beq.n	80066a4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800668c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	617b      	str	r3, [r7, #20]
}
 800669e:	bf00      	nop
 80066a0:	bf00      	nop
 80066a2:	e7fd      	b.n	80066a0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d01f      	beq.n	80066ea <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066aa:	2300      	movs	r3, #0
 80066ac:	61fb      	str	r3, [r7, #28]
 80066ae:	e012      	b.n	80066d6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	4413      	add	r3, r2
 80066b6:	7819      	ldrb	r1, [r3, #0]
 80066b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	4413      	add	r3, r2
 80066be:	3334      	adds	r3, #52	@ 0x34
 80066c0:	460a      	mov	r2, r1
 80066c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	4413      	add	r3, r2
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d006      	beq.n	80066de <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	3301      	adds	r3, #1
 80066d4:	61fb      	str	r3, [r7, #28]
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	2b0f      	cmp	r3, #15
 80066da:	d9e9      	bls.n	80066b0 <prvInitialiseNewTask+0x66>
 80066dc:	e000      	b.n	80066e0 <prvInitialiseNewTask+0x96>
			{
				break;
 80066de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066e8:	e003      	b.n	80066f2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f4:	2b37      	cmp	r3, #55	@ 0x37
 80066f6:	d901      	bls.n	80066fc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066f8:	2337      	movs	r3, #55	@ 0x37
 80066fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006700:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006704:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006706:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670a:	2200      	movs	r2, #0
 800670c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800670e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006710:	3304      	adds	r3, #4
 8006712:	4618      	mov	r0, r3
 8006714:	f7fe ff4a 	bl	80055ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671a:	3318      	adds	r3, #24
 800671c:	4618      	mov	r0, r3
 800671e:	f7fe ff45 	bl	80055ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006726:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800672e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006730:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006736:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673a:	2200      	movs	r2, #0
 800673c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800673e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	68f9      	ldr	r1, [r7, #12]
 800674a:	69b8      	ldr	r0, [r7, #24]
 800674c:	f001 fb28 	bl	8007da0 <pxPortInitialiseStack>
 8006750:	4602      	mov	r2, r0
 8006752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006754:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800675c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006760:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006762:	bf00      	nop
 8006764:	3720      	adds	r7, #32
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006774:	f001 fc48 	bl	8008008 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006778:	4b2d      	ldr	r3, [pc, #180]	@ (8006830 <prvAddNewTaskToReadyList+0xc4>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3301      	adds	r3, #1
 800677e:	4a2c      	ldr	r2, [pc, #176]	@ (8006830 <prvAddNewTaskToReadyList+0xc4>)
 8006780:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006782:	4b2c      	ldr	r3, [pc, #176]	@ (8006834 <prvAddNewTaskToReadyList+0xc8>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800678a:	4a2a      	ldr	r2, [pc, #168]	@ (8006834 <prvAddNewTaskToReadyList+0xc8>)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006790:	4b27      	ldr	r3, [pc, #156]	@ (8006830 <prvAddNewTaskToReadyList+0xc4>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d110      	bne.n	80067ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006798:	f000 fcc0 	bl	800711c <prvInitialiseTaskLists>
 800679c:	e00d      	b.n	80067ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800679e:	4b26      	ldr	r3, [pc, #152]	@ (8006838 <prvAddNewTaskToReadyList+0xcc>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d109      	bne.n	80067ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067a6:	4b23      	ldr	r3, [pc, #140]	@ (8006834 <prvAddNewTaskToReadyList+0xc8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d802      	bhi.n	80067ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067b4:	4a1f      	ldr	r2, [pc, #124]	@ (8006834 <prvAddNewTaskToReadyList+0xc8>)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80067ba:	4b20      	ldr	r3, [pc, #128]	@ (800683c <prvAddNewTaskToReadyList+0xd0>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3301      	adds	r3, #1
 80067c0:	4a1e      	ldr	r2, [pc, #120]	@ (800683c <prvAddNewTaskToReadyList+0xd0>)
 80067c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80067c4:	4b1d      	ldr	r3, [pc, #116]	@ (800683c <prvAddNewTaskToReadyList+0xd0>)
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006840 <prvAddNewTaskToReadyList+0xd4>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d903      	bls.n	80067e0 <prvAddNewTaskToReadyList+0x74>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067dc:	4a18      	ldr	r2, [pc, #96]	@ (8006840 <prvAddNewTaskToReadyList+0xd4>)
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e4:	4613      	mov	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4a15      	ldr	r2, [pc, #84]	@ (8006844 <prvAddNewTaskToReadyList+0xd8>)
 80067ee:	441a      	add	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3304      	adds	r3, #4
 80067f4:	4619      	mov	r1, r3
 80067f6:	4610      	mov	r0, r2
 80067f8:	f7fe fee5 	bl	80055c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067fc:	f001 fc36 	bl	800806c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006800:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <prvAddNewTaskToReadyList+0xcc>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00e      	beq.n	8006826 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006808:	4b0a      	ldr	r3, [pc, #40]	@ (8006834 <prvAddNewTaskToReadyList+0xc8>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006812:	429a      	cmp	r2, r3
 8006814:	d207      	bcs.n	8006826 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006816:	4b0c      	ldr	r3, [pc, #48]	@ (8006848 <prvAddNewTaskToReadyList+0xdc>)
 8006818:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006826:	bf00      	nop
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20001360 	.word	0x20001360
 8006834:	20000e8c 	.word	0x20000e8c
 8006838:	2000136c 	.word	0x2000136c
 800683c:	2000137c 	.word	0x2000137c
 8006840:	20001368 	.word	0x20001368
 8006844:	20000e90 	.word	0x20000e90
 8006848:	e000ed04 	.word	0xe000ed04

0800684c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006854:	2300      	movs	r3, #0
 8006856:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d018      	beq.n	8006890 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800685e:	4b14      	ldr	r3, [pc, #80]	@ (80068b0 <vTaskDelay+0x64>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00b      	beq.n	800687e <vTaskDelay+0x32>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	60bb      	str	r3, [r7, #8]
}
 8006878:	bf00      	nop
 800687a:	bf00      	nop
 800687c:	e7fd      	b.n	800687a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800687e:	f000 f883 	bl	8006988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006882:	2100      	movs	r1, #0
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 febd 	bl	8007604 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800688a:	f000 f88b 	bl	80069a4 <xTaskResumeAll>
 800688e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d107      	bne.n	80068a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006896:	4b07      	ldr	r3, [pc, #28]	@ (80068b4 <vTaskDelay+0x68>)
 8006898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068a6:	bf00      	nop
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20001388 	.word	0x20001388
 80068b4:	e000ed04 	.word	0xe000ed04

080068b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08a      	sub	sp, #40	@ 0x28
 80068bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068c6:	463a      	mov	r2, r7
 80068c8:	1d39      	adds	r1, r7, #4
 80068ca:	f107 0308 	add.w	r3, r7, #8
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fe fc22 	bl	8005118 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	9202      	str	r2, [sp, #8]
 80068dc:	9301      	str	r3, [sp, #4]
 80068de:	2300      	movs	r3, #0
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	2300      	movs	r3, #0
 80068e4:	460a      	mov	r2, r1
 80068e6:	4922      	ldr	r1, [pc, #136]	@ (8006970 <vTaskStartScheduler+0xb8>)
 80068e8:	4822      	ldr	r0, [pc, #136]	@ (8006974 <vTaskStartScheduler+0xbc>)
 80068ea:	f7ff fe09 	bl	8006500 <xTaskCreateStatic>
 80068ee:	4603      	mov	r3, r0
 80068f0:	4a21      	ldr	r2, [pc, #132]	@ (8006978 <vTaskStartScheduler+0xc0>)
 80068f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068f4:	4b20      	ldr	r3, [pc, #128]	@ (8006978 <vTaskStartScheduler+0xc0>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068fc:	2301      	movs	r3, #1
 80068fe:	617b      	str	r3, [r7, #20]
 8006900:	e001      	b.n	8006906 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d102      	bne.n	8006912 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800690c:	f000 fece 	bl	80076ac <xTimerCreateTimerTask>
 8006910:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d116      	bne.n	8006946 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	613b      	str	r3, [r7, #16]
}
 800692a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800692c:	4b13      	ldr	r3, [pc, #76]	@ (800697c <vTaskStartScheduler+0xc4>)
 800692e:	f04f 32ff 	mov.w	r2, #4294967295
 8006932:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006934:	4b12      	ldr	r3, [pc, #72]	@ (8006980 <vTaskStartScheduler+0xc8>)
 8006936:	2201      	movs	r2, #1
 8006938:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800693a:	4b12      	ldr	r3, [pc, #72]	@ (8006984 <vTaskStartScheduler+0xcc>)
 800693c:	2200      	movs	r2, #0
 800693e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006940:	f001 fabe 	bl	8007ec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006944:	e00f      	b.n	8006966 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694c:	d10b      	bne.n	8006966 <vTaskStartScheduler+0xae>
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	60fb      	str	r3, [r7, #12]
}
 8006960:	bf00      	nop
 8006962:	bf00      	nop
 8006964:	e7fd      	b.n	8006962 <vTaskStartScheduler+0xaa>
}
 8006966:	bf00      	nop
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	080086cc 	.word	0x080086cc
 8006974:	080070ed 	.word	0x080070ed
 8006978:	20001384 	.word	0x20001384
 800697c:	20001380 	.word	0x20001380
 8006980:	2000136c 	.word	0x2000136c
 8006984:	20001364 	.word	0x20001364

08006988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006988:	b480      	push	{r7}
 800698a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800698c:	4b04      	ldr	r3, [pc, #16]	@ (80069a0 <vTaskSuspendAll+0x18>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3301      	adds	r3, #1
 8006992:	4a03      	ldr	r2, [pc, #12]	@ (80069a0 <vTaskSuspendAll+0x18>)
 8006994:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006996:	bf00      	nop
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	20001388 	.word	0x20001388

080069a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80069ae:	2300      	movs	r3, #0
 80069b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069b2:	4b42      	ldr	r3, [pc, #264]	@ (8006abc <xTaskResumeAll+0x118>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10b      	bne.n	80069d2 <xTaskResumeAll+0x2e>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	603b      	str	r3, [r7, #0]
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	e7fd      	b.n	80069ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069d2:	f001 fb19 	bl	8008008 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069d6:	4b39      	ldr	r3, [pc, #228]	@ (8006abc <xTaskResumeAll+0x118>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3b01      	subs	r3, #1
 80069dc:	4a37      	ldr	r2, [pc, #220]	@ (8006abc <xTaskResumeAll+0x118>)
 80069de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069e0:	4b36      	ldr	r3, [pc, #216]	@ (8006abc <xTaskResumeAll+0x118>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d162      	bne.n	8006aae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069e8:	4b35      	ldr	r3, [pc, #212]	@ (8006ac0 <xTaskResumeAll+0x11c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d05e      	beq.n	8006aae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069f0:	e02f      	b.n	8006a52 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069f2:	4b34      	ldr	r3, [pc, #208]	@ (8006ac4 <xTaskResumeAll+0x120>)
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3318      	adds	r3, #24
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe fe3e 	bl	8005680 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	3304      	adds	r3, #4
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe fe39 	bl	8005680 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a12:	4b2d      	ldr	r3, [pc, #180]	@ (8006ac8 <xTaskResumeAll+0x124>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d903      	bls.n	8006a22 <xTaskResumeAll+0x7e>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8006ac8 <xTaskResumeAll+0x124>)
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4a27      	ldr	r2, [pc, #156]	@ (8006acc <xTaskResumeAll+0x128>)
 8006a30:	441a      	add	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	3304      	adds	r3, #4
 8006a36:	4619      	mov	r1, r3
 8006a38:	4610      	mov	r0, r2
 8006a3a:	f7fe fdc4 	bl	80055c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a42:	4b23      	ldr	r3, [pc, #140]	@ (8006ad0 <xTaskResumeAll+0x12c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d302      	bcc.n	8006a52 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006a4c:	4b21      	ldr	r3, [pc, #132]	@ (8006ad4 <xTaskResumeAll+0x130>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a52:	4b1c      	ldr	r3, [pc, #112]	@ (8006ac4 <xTaskResumeAll+0x120>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1cb      	bne.n	80069f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a60:	f000 fbfa 	bl	8007258 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a64:	4b1c      	ldr	r3, [pc, #112]	@ (8006ad8 <xTaskResumeAll+0x134>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d010      	beq.n	8006a92 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a70:	f000 f846 	bl	8006b00 <xTaskIncrementTick>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006a7a:	4b16      	ldr	r3, [pc, #88]	@ (8006ad4 <xTaskResumeAll+0x130>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1f1      	bne.n	8006a70 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006a8c:	4b12      	ldr	r3, [pc, #72]	@ (8006ad8 <xTaskResumeAll+0x134>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a92:	4b10      	ldr	r3, [pc, #64]	@ (8006ad4 <xTaskResumeAll+0x130>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d009      	beq.n	8006aae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8006adc <xTaskResumeAll+0x138>)
 8006aa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006aae:	f001 fadd 	bl	800806c <vPortExitCritical>

	return xAlreadyYielded;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	20001388 	.word	0x20001388
 8006ac0:	20001360 	.word	0x20001360
 8006ac4:	20001320 	.word	0x20001320
 8006ac8:	20001368 	.word	0x20001368
 8006acc:	20000e90 	.word	0x20000e90
 8006ad0:	20000e8c 	.word	0x20000e8c
 8006ad4:	20001374 	.word	0x20001374
 8006ad8:	20001370 	.word	0x20001370
 8006adc:	e000ed04 	.word	0xe000ed04

08006ae0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ae6:	4b05      	ldr	r3, [pc, #20]	@ (8006afc <xTaskGetTickCount+0x1c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006aec:	687b      	ldr	r3, [r7, #4]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	20001364 	.word	0x20001364

08006b00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b06:	2300      	movs	r3, #0
 8006b08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b0a:	4b4f      	ldr	r3, [pc, #316]	@ (8006c48 <xTaskIncrementTick+0x148>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f040 8090 	bne.w	8006c34 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b14:	4b4d      	ldr	r3, [pc, #308]	@ (8006c4c <xTaskIncrementTick+0x14c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b1c:	4a4b      	ldr	r2, [pc, #300]	@ (8006c4c <xTaskIncrementTick+0x14c>)
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d121      	bne.n	8006b6c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b28:	4b49      	ldr	r3, [pc, #292]	@ (8006c50 <xTaskIncrementTick+0x150>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00b      	beq.n	8006b4a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	603b      	str	r3, [r7, #0]
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop
 8006b48:	e7fd      	b.n	8006b46 <xTaskIncrementTick+0x46>
 8006b4a:	4b41      	ldr	r3, [pc, #260]	@ (8006c50 <xTaskIncrementTick+0x150>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	4b40      	ldr	r3, [pc, #256]	@ (8006c54 <xTaskIncrementTick+0x154>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a3e      	ldr	r2, [pc, #248]	@ (8006c50 <xTaskIncrementTick+0x150>)
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	4a3e      	ldr	r2, [pc, #248]	@ (8006c54 <xTaskIncrementTick+0x154>)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8006c58 <xTaskIncrementTick+0x158>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3301      	adds	r3, #1
 8006b64:	4a3c      	ldr	r2, [pc, #240]	@ (8006c58 <xTaskIncrementTick+0x158>)
 8006b66:	6013      	str	r3, [r2, #0]
 8006b68:	f000 fb76 	bl	8007258 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8006c5c <xTaskIncrementTick+0x15c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d349      	bcc.n	8006c0a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b76:	4b36      	ldr	r3, [pc, #216]	@ (8006c50 <xTaskIncrementTick+0x150>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d104      	bne.n	8006b8a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b80:	4b36      	ldr	r3, [pc, #216]	@ (8006c5c <xTaskIncrementTick+0x15c>)
 8006b82:	f04f 32ff 	mov.w	r2, #4294967295
 8006b86:	601a      	str	r2, [r3, #0]
					break;
 8006b88:	e03f      	b.n	8006c0a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b8a:	4b31      	ldr	r3, [pc, #196]	@ (8006c50 <xTaskIncrementTick+0x150>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d203      	bcs.n	8006baa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ba2:	4a2e      	ldr	r2, [pc, #184]	@ (8006c5c <xTaskIncrementTick+0x15c>)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ba8:	e02f      	b.n	8006c0a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	3304      	adds	r3, #4
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fe fd66 	bl	8005680 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d004      	beq.n	8006bc6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	3318      	adds	r3, #24
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fe fd5d 	bl	8005680 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bca:	4b25      	ldr	r3, [pc, #148]	@ (8006c60 <xTaskIncrementTick+0x160>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d903      	bls.n	8006bda <xTaskIncrementTick+0xda>
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd6:	4a22      	ldr	r2, [pc, #136]	@ (8006c60 <xTaskIncrementTick+0x160>)
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bde:	4613      	mov	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4a1f      	ldr	r2, [pc, #124]	@ (8006c64 <xTaskIncrementTick+0x164>)
 8006be8:	441a      	add	r2, r3
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	3304      	adds	r3, #4
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	f7fe fce8 	bl	80055c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8006c68 <xTaskIncrementTick+0x168>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d3b8      	bcc.n	8006b76 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006c04:	2301      	movs	r3, #1
 8006c06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c08:	e7b5      	b.n	8006b76 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c0a:	4b17      	ldr	r3, [pc, #92]	@ (8006c68 <xTaskIncrementTick+0x168>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c10:	4914      	ldr	r1, [pc, #80]	@ (8006c64 <xTaskIncrementTick+0x164>)
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d901      	bls.n	8006c26 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006c22:	2301      	movs	r3, #1
 8006c24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006c26:	4b11      	ldr	r3, [pc, #68]	@ (8006c6c <xTaskIncrementTick+0x16c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d007      	beq.n	8006c3e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	e004      	b.n	8006c3e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c34:	4b0e      	ldr	r3, [pc, #56]	@ (8006c70 <xTaskIncrementTick+0x170>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8006c70 <xTaskIncrementTick+0x170>)
 8006c3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c3e:	697b      	ldr	r3, [r7, #20]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3718      	adds	r7, #24
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	20001388 	.word	0x20001388
 8006c4c:	20001364 	.word	0x20001364
 8006c50:	20001318 	.word	0x20001318
 8006c54:	2000131c 	.word	0x2000131c
 8006c58:	20001378 	.word	0x20001378
 8006c5c:	20001380 	.word	0x20001380
 8006c60:	20001368 	.word	0x20001368
 8006c64:	20000e90 	.word	0x20000e90
 8006c68:	20000e8c 	.word	0x20000e8c
 8006c6c:	20001374 	.word	0x20001374
 8006c70:	20001370 	.word	0x20001370

08006c74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c7a:	4b28      	ldr	r3, [pc, #160]	@ (8006d1c <vTaskSwitchContext+0xa8>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c82:	4b27      	ldr	r3, [pc, #156]	@ (8006d20 <vTaskSwitchContext+0xac>)
 8006c84:	2201      	movs	r2, #1
 8006c86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c88:	e042      	b.n	8006d10 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006c8a:	4b25      	ldr	r3, [pc, #148]	@ (8006d20 <vTaskSwitchContext+0xac>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c90:	4b24      	ldr	r3, [pc, #144]	@ (8006d24 <vTaskSwitchContext+0xb0>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	e011      	b.n	8006cbc <vTaskSwitchContext+0x48>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10b      	bne.n	8006cb6 <vTaskSwitchContext+0x42>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	607b      	str	r3, [r7, #4]
}
 8006cb0:	bf00      	nop
 8006cb2:	bf00      	nop
 8006cb4:	e7fd      	b.n	8006cb2 <vTaskSwitchContext+0x3e>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	491a      	ldr	r1, [pc, #104]	@ (8006d28 <vTaskSwitchContext+0xb4>)
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	440b      	add	r3, r1
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d0e3      	beq.n	8006c98 <vTaskSwitchContext+0x24>
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4a13      	ldr	r2, [pc, #76]	@ (8006d28 <vTaskSwitchContext+0xb4>)
 8006cdc:	4413      	add	r3, r2
 8006cde:	60bb      	str	r3, [r7, #8]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	605a      	str	r2, [r3, #4]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	3308      	adds	r3, #8
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d104      	bne.n	8006d00 <vTaskSwitchContext+0x8c>
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	605a      	str	r2, [r3, #4]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	4a09      	ldr	r2, [pc, #36]	@ (8006d2c <vTaskSwitchContext+0xb8>)
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	4a06      	ldr	r2, [pc, #24]	@ (8006d24 <vTaskSwitchContext+0xb0>)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6013      	str	r3, [r2, #0]
}
 8006d10:	bf00      	nop
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	20001388 	.word	0x20001388
 8006d20:	20001374 	.word	0x20001374
 8006d24:	20001368 	.word	0x20001368
 8006d28:	20000e90 	.word	0x20000e90
 8006d2c:	20000e8c 	.word	0x20000e8c

08006d30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10b      	bne.n	8006d58 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	60fb      	str	r3, [r7, #12]
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	e7fd      	b.n	8006d54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d58:	4b07      	ldr	r3, [pc, #28]	@ (8006d78 <vTaskPlaceOnEventList+0x48>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3318      	adds	r3, #24
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7fe fc54 	bl	800560e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d66:	2101      	movs	r1, #1
 8006d68:	6838      	ldr	r0, [r7, #0]
 8006d6a:	f000 fc4b 	bl	8007604 <prvAddCurrentTaskToDelayedList>
}
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20000e8c 	.word	0x20000e8c

08006d7c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10b      	bne.n	8006da6 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	617b      	str	r3, [r7, #20]
}
 8006da0:	bf00      	nop
 8006da2:	bf00      	nop
 8006da4:	e7fd      	b.n	8006da2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006da6:	4b12      	ldr	r3, [pc, #72]	@ (8006df0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10b      	bne.n	8006dc6 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	613b      	str	r3, [r7, #16]
}
 8006dc0:	bf00      	nop
 8006dc2:	bf00      	nop
 8006dc4:	e7fd      	b.n	8006dc2 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006df4 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006dd0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006dd2:	4b08      	ldr	r3, [pc, #32]	@ (8006df4 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3318      	adds	r3, #24
 8006dd8:	4619      	mov	r1, r3
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f7fe fbf3 	bl	80055c6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006de0:	2101      	movs	r1, #1
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fc0e 	bl	8007604 <prvAddCurrentTaskToDelayedList>
}
 8006de8:	bf00      	nop
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	20001388 	.word	0x20001388
 8006df4:	20000e8c 	.word	0x20000e8c

08006df8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10b      	bne.n	8006e22 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	617b      	str	r3, [r7, #20]
}
 8006e1c:	bf00      	nop
 8006e1e:	bf00      	nop
 8006e20:	e7fd      	b.n	8006e1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e22:	4b0a      	ldr	r3, [pc, #40]	@ (8006e4c <vTaskPlaceOnEventListRestricted+0x54>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3318      	adds	r3, #24
 8006e28:	4619      	mov	r1, r3
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f7fe fbcb 	bl	80055c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006e36:	f04f 33ff 	mov.w	r3, #4294967295
 8006e3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e3c:	6879      	ldr	r1, [r7, #4]
 8006e3e:	68b8      	ldr	r0, [r7, #8]
 8006e40:	f000 fbe0 	bl	8007604 <prvAddCurrentTaskToDelayedList>
	}
 8006e44:	bf00      	nop
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20000e8c 	.word	0x20000e8c

08006e50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10b      	bne.n	8006e7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	60fb      	str	r3, [r7, #12]
}
 8006e78:	bf00      	nop
 8006e7a:	bf00      	nop
 8006e7c:	e7fd      	b.n	8006e7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	3318      	adds	r3, #24
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe fbfc 	bl	8005680 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e88:	4b1d      	ldr	r3, [pc, #116]	@ (8006f00 <xTaskRemoveFromEventList+0xb0>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d11d      	bne.n	8006ecc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	3304      	adds	r3, #4
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fe fbf3 	bl	8005680 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e9e:	4b19      	ldr	r3, [pc, #100]	@ (8006f04 <xTaskRemoveFromEventList+0xb4>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d903      	bls.n	8006eae <xTaskRemoveFromEventList+0x5e>
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eaa:	4a16      	ldr	r2, [pc, #88]	@ (8006f04 <xTaskRemoveFromEventList+0xb4>)
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4a13      	ldr	r2, [pc, #76]	@ (8006f08 <xTaskRemoveFromEventList+0xb8>)
 8006ebc:	441a      	add	r2, r3
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	f7fe fb7e 	bl	80055c6 <vListInsertEnd>
 8006eca:	e005      	b.n	8006ed8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	3318      	adds	r3, #24
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	480e      	ldr	r0, [pc, #56]	@ (8006f0c <xTaskRemoveFromEventList+0xbc>)
 8006ed4:	f7fe fb77 	bl	80055c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006edc:	4b0c      	ldr	r3, [pc, #48]	@ (8006f10 <xTaskRemoveFromEventList+0xc0>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d905      	bls.n	8006ef2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006eea:	4b0a      	ldr	r3, [pc, #40]	@ (8006f14 <xTaskRemoveFromEventList+0xc4>)
 8006eec:	2201      	movs	r2, #1
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	e001      	b.n	8006ef6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ef6:	697b      	ldr	r3, [r7, #20]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	20001388 	.word	0x20001388
 8006f04:	20001368 	.word	0x20001368
 8006f08:	20000e90 	.word	0x20000e90
 8006f0c:	20001320 	.word	0x20001320
 8006f10:	20000e8c 	.word	0x20000e8c
 8006f14:	20001374 	.word	0x20001374

08006f18 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006f22:	4b2a      	ldr	r3, [pc, #168]	@ (8006fcc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10b      	bne.n	8006f42 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8006f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	613b      	str	r3, [r7, #16]
}
 8006f3c:	bf00      	nop
 8006f3e:	bf00      	nop
 8006f40:	e7fd      	b.n	8006f3e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10b      	bne.n	8006f70 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	60fb      	str	r3, [r7, #12]
}
 8006f6a:	bf00      	nop
 8006f6c:	bf00      	nop
 8006f6e:	e7fd      	b.n	8006f6c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7fe fb85 	bl	8005680 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	3304      	adds	r3, #4
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe fb80 	bl	8005680 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f84:	4b12      	ldr	r3, [pc, #72]	@ (8006fd0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d903      	bls.n	8006f94 <vTaskRemoveFromUnorderedEventList+0x7c>
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f90:	4a0f      	ldr	r2, [pc, #60]	@ (8006fd0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f98:	4613      	mov	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8006fd4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006fa2:	441a      	add	r2, r3
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	4619      	mov	r1, r3
 8006faa:	4610      	mov	r0, r2
 8006fac:	f7fe fb0b 	bl	80055c6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb4:	4b08      	ldr	r3, [pc, #32]	@ (8006fd8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d902      	bls.n	8006fc4 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006fbe:	4b07      	ldr	r3, [pc, #28]	@ (8006fdc <vTaskRemoveFromUnorderedEventList+0xc4>)
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]
	}
}
 8006fc4:	bf00      	nop
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20001388 	.word	0x20001388
 8006fd0:	20001368 	.word	0x20001368
 8006fd4:	20000e90 	.word	0x20000e90
 8006fd8:	20000e8c 	.word	0x20000e8c
 8006fdc:	20001374 	.word	0x20001374

08006fe0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006fe8:	4b06      	ldr	r3, [pc, #24]	@ (8007004 <vTaskInternalSetTimeOutState+0x24>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ff0:	4b05      	ldr	r3, [pc, #20]	@ (8007008 <vTaskInternalSetTimeOutState+0x28>)
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	605a      	str	r2, [r3, #4]
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	20001378 	.word	0x20001378
 8007008:	20001364 	.word	0x20001364

0800700c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10b      	bne.n	8007034 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	613b      	str	r3, [r7, #16]
}
 800702e:	bf00      	nop
 8007030:	bf00      	nop
 8007032:	e7fd      	b.n	8007030 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10b      	bne.n	8007052 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	60fb      	str	r3, [r7, #12]
}
 800704c:	bf00      	nop
 800704e:	bf00      	nop
 8007050:	e7fd      	b.n	800704e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007052:	f000 ffd9 	bl	8008008 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007056:	4b1d      	ldr	r3, [pc, #116]	@ (80070cc <xTaskCheckForTimeOut+0xc0>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706e:	d102      	bne.n	8007076 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007070:	2300      	movs	r3, #0
 8007072:	61fb      	str	r3, [r7, #28]
 8007074:	e023      	b.n	80070be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	4b15      	ldr	r3, [pc, #84]	@ (80070d0 <xTaskCheckForTimeOut+0xc4>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	429a      	cmp	r2, r3
 8007080:	d007      	beq.n	8007092 <xTaskCheckForTimeOut+0x86>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	429a      	cmp	r2, r3
 800708a:	d302      	bcc.n	8007092 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800708c:	2301      	movs	r3, #1
 800708e:	61fb      	str	r3, [r7, #28]
 8007090:	e015      	b.n	80070be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	429a      	cmp	r2, r3
 800709a:	d20b      	bcs.n	80070b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	1ad2      	subs	r2, r2, r3
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff ff99 	bl	8006fe0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070ae:	2300      	movs	r3, #0
 80070b0:	61fb      	str	r3, [r7, #28]
 80070b2:	e004      	b.n	80070be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070ba:	2301      	movs	r3, #1
 80070bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070be:	f000 ffd5 	bl	800806c <vPortExitCritical>

	return xReturn;
 80070c2:	69fb      	ldr	r3, [r7, #28]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3720      	adds	r7, #32
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20001364 	.word	0x20001364
 80070d0:	20001378 	.word	0x20001378

080070d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070d4:	b480      	push	{r7}
 80070d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070d8:	4b03      	ldr	r3, [pc, #12]	@ (80070e8 <vTaskMissedYield+0x14>)
 80070da:	2201      	movs	r2, #1
 80070dc:	601a      	str	r2, [r3, #0]
}
 80070de:	bf00      	nop
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	20001374 	.word	0x20001374

080070ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070f4:	f000 f852 	bl	800719c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070f8:	4b06      	ldr	r3, [pc, #24]	@ (8007114 <prvIdleTask+0x28>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d9f9      	bls.n	80070f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007100:	4b05      	ldr	r3, [pc, #20]	@ (8007118 <prvIdleTask+0x2c>)
 8007102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007110:	e7f0      	b.n	80070f4 <prvIdleTask+0x8>
 8007112:	bf00      	nop
 8007114:	20000e90 	.word	0x20000e90
 8007118:	e000ed04 	.word	0xe000ed04

0800711c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007122:	2300      	movs	r3, #0
 8007124:	607b      	str	r3, [r7, #4]
 8007126:	e00c      	b.n	8007142 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	4613      	mov	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4a12      	ldr	r2, [pc, #72]	@ (800717c <prvInitialiseTaskLists+0x60>)
 8007134:	4413      	add	r3, r2
 8007136:	4618      	mov	r0, r3
 8007138:	f7fe fa18 	bl	800556c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3301      	adds	r3, #1
 8007140:	607b      	str	r3, [r7, #4]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b37      	cmp	r3, #55	@ 0x37
 8007146:	d9ef      	bls.n	8007128 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007148:	480d      	ldr	r0, [pc, #52]	@ (8007180 <prvInitialiseTaskLists+0x64>)
 800714a:	f7fe fa0f 	bl	800556c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800714e:	480d      	ldr	r0, [pc, #52]	@ (8007184 <prvInitialiseTaskLists+0x68>)
 8007150:	f7fe fa0c 	bl	800556c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007154:	480c      	ldr	r0, [pc, #48]	@ (8007188 <prvInitialiseTaskLists+0x6c>)
 8007156:	f7fe fa09 	bl	800556c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800715a:	480c      	ldr	r0, [pc, #48]	@ (800718c <prvInitialiseTaskLists+0x70>)
 800715c:	f7fe fa06 	bl	800556c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007160:	480b      	ldr	r0, [pc, #44]	@ (8007190 <prvInitialiseTaskLists+0x74>)
 8007162:	f7fe fa03 	bl	800556c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007166:	4b0b      	ldr	r3, [pc, #44]	@ (8007194 <prvInitialiseTaskLists+0x78>)
 8007168:	4a05      	ldr	r2, [pc, #20]	@ (8007180 <prvInitialiseTaskLists+0x64>)
 800716a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800716c:	4b0a      	ldr	r3, [pc, #40]	@ (8007198 <prvInitialiseTaskLists+0x7c>)
 800716e:	4a05      	ldr	r2, [pc, #20]	@ (8007184 <prvInitialiseTaskLists+0x68>)
 8007170:	601a      	str	r2, [r3, #0]
}
 8007172:	bf00      	nop
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	20000e90 	.word	0x20000e90
 8007180:	200012f0 	.word	0x200012f0
 8007184:	20001304 	.word	0x20001304
 8007188:	20001320 	.word	0x20001320
 800718c:	20001334 	.word	0x20001334
 8007190:	2000134c 	.word	0x2000134c
 8007194:	20001318 	.word	0x20001318
 8007198:	2000131c 	.word	0x2000131c

0800719c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071a2:	e019      	b.n	80071d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071a4:	f000 ff30 	bl	8008008 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071a8:	4b10      	ldr	r3, [pc, #64]	@ (80071ec <prvCheckTasksWaitingTermination+0x50>)
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3304      	adds	r3, #4
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fe fa63 	bl	8005680 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071ba:	4b0d      	ldr	r3, [pc, #52]	@ (80071f0 <prvCheckTasksWaitingTermination+0x54>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3b01      	subs	r3, #1
 80071c0:	4a0b      	ldr	r2, [pc, #44]	@ (80071f0 <prvCheckTasksWaitingTermination+0x54>)
 80071c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071c4:	4b0b      	ldr	r3, [pc, #44]	@ (80071f4 <prvCheckTasksWaitingTermination+0x58>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	4a0a      	ldr	r2, [pc, #40]	@ (80071f4 <prvCheckTasksWaitingTermination+0x58>)
 80071cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071ce:	f000 ff4d 	bl	800806c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f810 	bl	80071f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071d8:	4b06      	ldr	r3, [pc, #24]	@ (80071f4 <prvCheckTasksWaitingTermination+0x58>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e1      	bne.n	80071a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071e0:	bf00      	nop
 80071e2:	bf00      	nop
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20001334 	.word	0x20001334
 80071f0:	20001360 	.word	0x20001360
 80071f4:	20001348 	.word	0x20001348

080071f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007206:	2b00      	cmp	r3, #0
 8007208:	d108      	bne.n	800721c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720e:	4618      	mov	r0, r3
 8007210:	f001 f8ea 	bl	80083e8 <vPortFree>
				vPortFree( pxTCB );
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 f8e7 	bl	80083e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800721a:	e019      	b.n	8007250 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007222:	2b01      	cmp	r3, #1
 8007224:	d103      	bne.n	800722e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 f8de 	bl	80083e8 <vPortFree>
	}
 800722c:	e010      	b.n	8007250 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007234:	2b02      	cmp	r3, #2
 8007236:	d00b      	beq.n	8007250 <prvDeleteTCB+0x58>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	60fb      	str	r3, [r7, #12]
}
 800724a:	bf00      	nop
 800724c:	bf00      	nop
 800724e:	e7fd      	b.n	800724c <prvDeleteTCB+0x54>
	}
 8007250:	bf00      	nop
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800725e:	4b0c      	ldr	r3, [pc, #48]	@ (8007290 <prvResetNextTaskUnblockTime+0x38>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d104      	bne.n	8007272 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007268:	4b0a      	ldr	r3, [pc, #40]	@ (8007294 <prvResetNextTaskUnblockTime+0x3c>)
 800726a:	f04f 32ff 	mov.w	r2, #4294967295
 800726e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007270:	e008      	b.n	8007284 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007272:	4b07      	ldr	r3, [pc, #28]	@ (8007290 <prvResetNextTaskUnblockTime+0x38>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	4a04      	ldr	r2, [pc, #16]	@ (8007294 <prvResetNextTaskUnblockTime+0x3c>)
 8007282:	6013      	str	r3, [r2, #0]
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	20001318 	.word	0x20001318
 8007294:	20001380 	.word	0x20001380

08007298 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800729e:	4b05      	ldr	r3, [pc, #20]	@ (80072b4 <xTaskGetCurrentTaskHandle+0x1c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80072a4:	687b      	ldr	r3, [r7, #4]
	}
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	20000e8c 	.word	0x20000e8c

080072b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072be:	4b0b      	ldr	r3, [pc, #44]	@ (80072ec <xTaskGetSchedulerState+0x34>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d102      	bne.n	80072cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072c6:	2301      	movs	r3, #1
 80072c8:	607b      	str	r3, [r7, #4]
 80072ca:	e008      	b.n	80072de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072cc:	4b08      	ldr	r3, [pc, #32]	@ (80072f0 <xTaskGetSchedulerState+0x38>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d102      	bne.n	80072da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072d4:	2302      	movs	r3, #2
 80072d6:	607b      	str	r3, [r7, #4]
 80072d8:	e001      	b.n	80072de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072da:	2300      	movs	r3, #0
 80072dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072de:	687b      	ldr	r3, [r7, #4]
	}
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	2000136c 	.word	0x2000136c
 80072f0:	20001388 	.word	0x20001388

080072f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007300:	2300      	movs	r3, #0
 8007302:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d051      	beq.n	80073ae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800730e:	4b2a      	ldr	r3, [pc, #168]	@ (80073b8 <xTaskPriorityInherit+0xc4>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007314:	429a      	cmp	r2, r3
 8007316:	d241      	bcs.n	800739c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	2b00      	cmp	r3, #0
 800731e:	db06      	blt.n	800732e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007320:	4b25      	ldr	r3, [pc, #148]	@ (80073b8 <xTaskPriorityInherit+0xc4>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007326:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	6959      	ldr	r1, [r3, #20]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007336:	4613      	mov	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4413      	add	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4a1f      	ldr	r2, [pc, #124]	@ (80073bc <xTaskPriorityInherit+0xc8>)
 8007340:	4413      	add	r3, r2
 8007342:	4299      	cmp	r1, r3
 8007344:	d122      	bne.n	800738c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	3304      	adds	r3, #4
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe f998 	bl	8005680 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007350:	4b19      	ldr	r3, [pc, #100]	@ (80073b8 <xTaskPriorityInherit+0xc4>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800735e:	4b18      	ldr	r3, [pc, #96]	@ (80073c0 <xTaskPriorityInherit+0xcc>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	429a      	cmp	r2, r3
 8007364:	d903      	bls.n	800736e <xTaskPriorityInherit+0x7a>
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736a:	4a15      	ldr	r2, [pc, #84]	@ (80073c0 <xTaskPriorityInherit+0xcc>)
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007372:	4613      	mov	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4a10      	ldr	r2, [pc, #64]	@ (80073bc <xTaskPriorityInherit+0xc8>)
 800737c:	441a      	add	r2, r3
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	3304      	adds	r3, #4
 8007382:	4619      	mov	r1, r3
 8007384:	4610      	mov	r0, r2
 8007386:	f7fe f91e 	bl	80055c6 <vListInsertEnd>
 800738a:	e004      	b.n	8007396 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800738c:	4b0a      	ldr	r3, [pc, #40]	@ (80073b8 <xTaskPriorityInherit+0xc4>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007396:	2301      	movs	r3, #1
 8007398:	60fb      	str	r3, [r7, #12]
 800739a:	e008      	b.n	80073ae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073a0:	4b05      	ldr	r3, [pc, #20]	@ (80073b8 <xTaskPriorityInherit+0xc4>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d201      	bcs.n	80073ae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80073aa:	2301      	movs	r3, #1
 80073ac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073ae:	68fb      	ldr	r3, [r7, #12]
	}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	20000e8c 	.word	0x20000e8c
 80073bc:	20000e90 	.word	0x20000e90
 80073c0:	20001368 	.word	0x20001368

080073c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073d0:	2300      	movs	r3, #0
 80073d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d058      	beq.n	800748c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073da:	4b2f      	ldr	r3, [pc, #188]	@ (8007498 <xTaskPriorityDisinherit+0xd4>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d00b      	beq.n	80073fc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	60fb      	str	r3, [r7, #12]
}
 80073f6:	bf00      	nop
 80073f8:	bf00      	nop
 80073fa:	e7fd      	b.n	80073f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10b      	bne.n	800741c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	60bb      	str	r3, [r7, #8]
}
 8007416:	bf00      	nop
 8007418:	bf00      	nop
 800741a:	e7fd      	b.n	8007418 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007420:	1e5a      	subs	r2, r3, #1
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800742e:	429a      	cmp	r2, r3
 8007430:	d02c      	beq.n	800748c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007436:	2b00      	cmp	r3, #0
 8007438:	d128      	bne.n	800748c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	3304      	adds	r3, #4
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe f91e 	bl	8005680 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007450:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800745c:	4b0f      	ldr	r3, [pc, #60]	@ (800749c <xTaskPriorityDisinherit+0xd8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d903      	bls.n	800746c <xTaskPriorityDisinherit+0xa8>
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007468:	4a0c      	ldr	r2, [pc, #48]	@ (800749c <xTaskPriorityDisinherit+0xd8>)
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007470:	4613      	mov	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4a09      	ldr	r2, [pc, #36]	@ (80074a0 <xTaskPriorityDisinherit+0xdc>)
 800747a:	441a      	add	r2, r3
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	3304      	adds	r3, #4
 8007480:	4619      	mov	r1, r3
 8007482:	4610      	mov	r0, r2
 8007484:	f7fe f89f 	bl	80055c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007488:	2301      	movs	r3, #1
 800748a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800748c:	697b      	ldr	r3, [r7, #20]
	}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20000e8c 	.word	0x20000e8c
 800749c:	20001368 	.word	0x20001368
 80074a0:	20000e90 	.word	0x20000e90

080074a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b088      	sub	sp, #32
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80074b2:	2301      	movs	r3, #1
 80074b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d06c      	beq.n	8007596 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10b      	bne.n	80074dc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	60fb      	str	r3, [r7, #12]
}
 80074d6:	bf00      	nop
 80074d8:	bf00      	nop
 80074da:	e7fd      	b.n	80074d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d902      	bls.n	80074ec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	e002      	b.n	80074f2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074f0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d04c      	beq.n	8007596 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	429a      	cmp	r2, r3
 8007504:	d147      	bne.n	8007596 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007506:	4b26      	ldr	r3, [pc, #152]	@ (80075a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	429a      	cmp	r2, r3
 800750e:	d10b      	bne.n	8007528 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	60bb      	str	r3, [r7, #8]
}
 8007522:	bf00      	nop
 8007524:	bf00      	nop
 8007526:	e7fd      	b.n	8007524 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	2b00      	cmp	r3, #0
 800753a:	db04      	blt.n	8007546 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	6959      	ldr	r1, [r3, #20]
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	4613      	mov	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4a13      	ldr	r2, [pc, #76]	@ (80075a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007556:	4413      	add	r3, r2
 8007558:	4299      	cmp	r1, r3
 800755a:	d11c      	bne.n	8007596 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	3304      	adds	r3, #4
 8007560:	4618      	mov	r0, r3
 8007562:	f7fe f88d 	bl	8005680 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800756a:	4b0f      	ldr	r3, [pc, #60]	@ (80075a8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d903      	bls.n	800757a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007576:	4a0c      	ldr	r2, [pc, #48]	@ (80075a8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007578:	6013      	str	r3, [r2, #0]
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4a07      	ldr	r2, [pc, #28]	@ (80075a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007588:	441a      	add	r2, r3
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	3304      	adds	r3, #4
 800758e:	4619      	mov	r1, r3
 8007590:	4610      	mov	r0, r2
 8007592:	f7fe f818 	bl	80055c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007596:	bf00      	nop
 8007598:	3720      	adds	r7, #32
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20000e8c 	.word	0x20000e8c
 80075a4:	20000e90 	.word	0x20000e90
 80075a8:	20001368 	.word	0x20001368

080075ac <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80075b2:	4b09      	ldr	r3, [pc, #36]	@ (80075d8 <uxTaskResetEventItemValue+0x2c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ba:	4b07      	ldr	r3, [pc, #28]	@ (80075d8 <uxTaskResetEventItemValue+0x2c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c0:	4b05      	ldr	r3, [pc, #20]	@ (80075d8 <uxTaskResetEventItemValue+0x2c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80075c8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80075ca:	687b      	ldr	r3, [r7, #4]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	20000e8c 	.word	0x20000e8c

080075dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80075dc:	b480      	push	{r7}
 80075de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80075e0:	4b07      	ldr	r3, [pc, #28]	@ (8007600 <pvTaskIncrementMutexHeldCount+0x24>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d004      	beq.n	80075f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80075e8:	4b05      	ldr	r3, [pc, #20]	@ (8007600 <pvTaskIncrementMutexHeldCount+0x24>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075ee:	3201      	adds	r2, #1
 80075f0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80075f2:	4b03      	ldr	r3, [pc, #12]	@ (8007600 <pvTaskIncrementMutexHeldCount+0x24>)
 80075f4:	681b      	ldr	r3, [r3, #0]
	}
 80075f6:	4618      	mov	r0, r3
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	20000e8c 	.word	0x20000e8c

08007604 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800760e:	4b21      	ldr	r3, [pc, #132]	@ (8007694 <prvAddCurrentTaskToDelayedList+0x90>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007614:	4b20      	ldr	r3, [pc, #128]	@ (8007698 <prvAddCurrentTaskToDelayedList+0x94>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3304      	adds	r3, #4
 800761a:	4618      	mov	r0, r3
 800761c:	f7fe f830 	bl	8005680 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007626:	d10a      	bne.n	800763e <prvAddCurrentTaskToDelayedList+0x3a>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d007      	beq.n	800763e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800762e:	4b1a      	ldr	r3, [pc, #104]	@ (8007698 <prvAddCurrentTaskToDelayedList+0x94>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3304      	adds	r3, #4
 8007634:	4619      	mov	r1, r3
 8007636:	4819      	ldr	r0, [pc, #100]	@ (800769c <prvAddCurrentTaskToDelayedList+0x98>)
 8007638:	f7fd ffc5 	bl	80055c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800763c:	e026      	b.n	800768c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4413      	add	r3, r2
 8007644:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007646:	4b14      	ldr	r3, [pc, #80]	@ (8007698 <prvAddCurrentTaskToDelayedList+0x94>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	429a      	cmp	r2, r3
 8007654:	d209      	bcs.n	800766a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007656:	4b12      	ldr	r3, [pc, #72]	@ (80076a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	4b0f      	ldr	r3, [pc, #60]	@ (8007698 <prvAddCurrentTaskToDelayedList+0x94>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3304      	adds	r3, #4
 8007660:	4619      	mov	r1, r3
 8007662:	4610      	mov	r0, r2
 8007664:	f7fd ffd3 	bl	800560e <vListInsert>
}
 8007668:	e010      	b.n	800768c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800766a:	4b0e      	ldr	r3, [pc, #56]	@ (80076a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	4b0a      	ldr	r3, [pc, #40]	@ (8007698 <prvAddCurrentTaskToDelayedList+0x94>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3304      	adds	r3, #4
 8007674:	4619      	mov	r1, r3
 8007676:	4610      	mov	r0, r2
 8007678:	f7fd ffc9 	bl	800560e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800767c:	4b0a      	ldr	r3, [pc, #40]	@ (80076a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	429a      	cmp	r2, r3
 8007684:	d202      	bcs.n	800768c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007686:	4a08      	ldr	r2, [pc, #32]	@ (80076a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	6013      	str	r3, [r2, #0]
}
 800768c:	bf00      	nop
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	20001364 	.word	0x20001364
 8007698:	20000e8c 	.word	0x20000e8c
 800769c:	2000134c 	.word	0x2000134c
 80076a0:	2000131c 	.word	0x2000131c
 80076a4:	20001318 	.word	0x20001318
 80076a8:	20001380 	.word	0x20001380

080076ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08a      	sub	sp, #40	@ 0x28
 80076b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80076b2:	2300      	movs	r3, #0
 80076b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80076b6:	f000 fb13 	bl	8007ce0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80076ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007730 <xTimerCreateTimerTask+0x84>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d021      	beq.n	8007706 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80076ca:	1d3a      	adds	r2, r7, #4
 80076cc:	f107 0108 	add.w	r1, r7, #8
 80076d0:	f107 030c 	add.w	r3, r7, #12
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fd fd39 	bl	800514c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	9202      	str	r2, [sp, #8]
 80076e2:	9301      	str	r3, [sp, #4]
 80076e4:	2302      	movs	r3, #2
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	2300      	movs	r3, #0
 80076ea:	460a      	mov	r2, r1
 80076ec:	4911      	ldr	r1, [pc, #68]	@ (8007734 <xTimerCreateTimerTask+0x88>)
 80076ee:	4812      	ldr	r0, [pc, #72]	@ (8007738 <xTimerCreateTimerTask+0x8c>)
 80076f0:	f7fe ff06 	bl	8006500 <xTaskCreateStatic>
 80076f4:	4603      	mov	r3, r0
 80076f6:	4a11      	ldr	r2, [pc, #68]	@ (800773c <xTimerCreateTimerTask+0x90>)
 80076f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80076fa:	4b10      	ldr	r3, [pc, #64]	@ (800773c <xTimerCreateTimerTask+0x90>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007702:	2301      	movs	r3, #1
 8007704:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10b      	bne.n	8007724 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	613b      	str	r3, [r7, #16]
}
 800771e:	bf00      	nop
 8007720:	bf00      	nop
 8007722:	e7fd      	b.n	8007720 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007724:	697b      	ldr	r3, [r7, #20]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	200013bc 	.word	0x200013bc
 8007734:	080086d4 	.word	0x080086d4
 8007738:	08007879 	.word	0x08007879
 800773c:	200013c0 	.word	0x200013c0

08007740 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08a      	sub	sp, #40	@ 0x28
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800774e:	2300      	movs	r3, #0
 8007750:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10b      	bne.n	8007770 <xTimerGenericCommand+0x30>
	__asm volatile
 8007758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	623b      	str	r3, [r7, #32]
}
 800776a:	bf00      	nop
 800776c:	bf00      	nop
 800776e:	e7fd      	b.n	800776c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007770:	4b19      	ldr	r3, [pc, #100]	@ (80077d8 <xTimerGenericCommand+0x98>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d02a      	beq.n	80077ce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b05      	cmp	r3, #5
 8007788:	dc18      	bgt.n	80077bc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800778a:	f7ff fd95 	bl	80072b8 <xTaskGetSchedulerState>
 800778e:	4603      	mov	r3, r0
 8007790:	2b02      	cmp	r3, #2
 8007792:	d109      	bne.n	80077a8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007794:	4b10      	ldr	r3, [pc, #64]	@ (80077d8 <xTimerGenericCommand+0x98>)
 8007796:	6818      	ldr	r0, [r3, #0]
 8007798:	f107 0110 	add.w	r1, r7, #16
 800779c:	2300      	movs	r3, #0
 800779e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077a0:	f7fe f996 	bl	8005ad0 <xQueueGenericSend>
 80077a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80077a6:	e012      	b.n	80077ce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077a8:	4b0b      	ldr	r3, [pc, #44]	@ (80077d8 <xTimerGenericCommand+0x98>)
 80077aa:	6818      	ldr	r0, [r3, #0]
 80077ac:	f107 0110 	add.w	r1, r7, #16
 80077b0:	2300      	movs	r3, #0
 80077b2:	2200      	movs	r2, #0
 80077b4:	f7fe f98c 	bl	8005ad0 <xQueueGenericSend>
 80077b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80077ba:	e008      	b.n	80077ce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077bc:	4b06      	ldr	r3, [pc, #24]	@ (80077d8 <xTimerGenericCommand+0x98>)
 80077be:	6818      	ldr	r0, [r3, #0]
 80077c0:	f107 0110 	add.w	r1, r7, #16
 80077c4:	2300      	movs	r3, #0
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	f7fe fa84 	bl	8005cd4 <xQueueGenericSendFromISR>
 80077cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80077ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3728      	adds	r7, #40	@ 0x28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	200013bc 	.word	0x200013bc

080077dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b088      	sub	sp, #32
 80077e0:	af02      	add	r7, sp, #8
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077e6:	4b23      	ldr	r3, [pc, #140]	@ (8007874 <prvProcessExpiredTimer+0x98>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	3304      	adds	r3, #4
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7fd ff43 	bl	8005680 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007800:	f003 0304 	and.w	r3, r3, #4
 8007804:	2b00      	cmp	r3, #0
 8007806:	d023      	beq.n	8007850 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	699a      	ldr	r2, [r3, #24]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	18d1      	adds	r1, r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	6978      	ldr	r0, [r7, #20]
 8007816:	f000 f8d5 	bl	80079c4 <prvInsertTimerInActiveList>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d020      	beq.n	8007862 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007820:	2300      	movs	r3, #0
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	2300      	movs	r3, #0
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	2100      	movs	r1, #0
 800782a:	6978      	ldr	r0, [r7, #20]
 800782c:	f7ff ff88 	bl	8007740 <xTimerGenericCommand>
 8007830:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d114      	bne.n	8007862 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783c:	f383 8811 	msr	BASEPRI, r3
 8007840:	f3bf 8f6f 	isb	sy
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	60fb      	str	r3, [r7, #12]
}
 800784a:	bf00      	nop
 800784c:	bf00      	nop
 800784e:	e7fd      	b.n	800784c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007856:	f023 0301 	bic.w	r3, r3, #1
 800785a:	b2da      	uxtb	r2, r3
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	6978      	ldr	r0, [r7, #20]
 8007868:	4798      	blx	r3
}
 800786a:	bf00      	nop
 800786c:	3718      	adds	r7, #24
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	200013b4 	.word	0x200013b4

08007878 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007880:	f107 0308 	add.w	r3, r7, #8
 8007884:	4618      	mov	r0, r3
 8007886:	f000 f859 	bl	800793c <prvGetNextExpireTime>
 800788a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	4619      	mov	r1, r3
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f805 	bl	80078a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007896:	f000 f8d7 	bl	8007a48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800789a:	bf00      	nop
 800789c:	e7f0      	b.n	8007880 <prvTimerTask+0x8>
	...

080078a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80078aa:	f7ff f86d 	bl	8006988 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078ae:	f107 0308 	add.w	r3, r7, #8
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 f866 	bl	8007984 <prvSampleTimeNow>
 80078b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d130      	bne.n	8007922 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10a      	bne.n	80078dc <prvProcessTimerOrBlockTask+0x3c>
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d806      	bhi.n	80078dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80078ce:	f7ff f869 	bl	80069a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078d2:	68f9      	ldr	r1, [r7, #12]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff ff81 	bl	80077dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078da:	e024      	b.n	8007926 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d008      	beq.n	80078f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078e2:	4b13      	ldr	r3, [pc, #76]	@ (8007930 <prvProcessTimerOrBlockTask+0x90>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <prvProcessTimerOrBlockTask+0x50>
 80078ec:	2301      	movs	r3, #1
 80078ee:	e000      	b.n	80078f2 <prvProcessTimerOrBlockTask+0x52>
 80078f0:	2300      	movs	r3, #0
 80078f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80078f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007934 <prvProcessTimerOrBlockTask+0x94>)
 80078f6:	6818      	ldr	r0, [r3, #0]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	4619      	mov	r1, r3
 8007902:	f7fe fdc9 	bl	8006498 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007906:	f7ff f84d 	bl	80069a4 <xTaskResumeAll>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10a      	bne.n	8007926 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007910:	4b09      	ldr	r3, [pc, #36]	@ (8007938 <prvProcessTimerOrBlockTask+0x98>)
 8007912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	f3bf 8f6f 	isb	sy
}
 8007920:	e001      	b.n	8007926 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007922:	f7ff f83f 	bl	80069a4 <xTaskResumeAll>
}
 8007926:	bf00      	nop
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	200013b8 	.word	0x200013b8
 8007934:	200013bc 	.word	0x200013bc
 8007938:	e000ed04 	.word	0xe000ed04

0800793c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007944:	4b0e      	ldr	r3, [pc, #56]	@ (8007980 <prvGetNextExpireTime+0x44>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d101      	bne.n	8007952 <prvGetNextExpireTime+0x16>
 800794e:	2201      	movs	r2, #1
 8007950:	e000      	b.n	8007954 <prvGetNextExpireTime+0x18>
 8007952:	2200      	movs	r2, #0
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d105      	bne.n	800796c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007960:	4b07      	ldr	r3, [pc, #28]	@ (8007980 <prvGetNextExpireTime+0x44>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	e001      	b.n	8007970 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800796c:	2300      	movs	r3, #0
 800796e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007970:	68fb      	ldr	r3, [r7, #12]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	200013b4 	.word	0x200013b4

08007984 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800798c:	f7ff f8a8 	bl	8006ae0 <xTaskGetTickCount>
 8007990:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007992:	4b0b      	ldr	r3, [pc, #44]	@ (80079c0 <prvSampleTimeNow+0x3c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	429a      	cmp	r2, r3
 800799a:	d205      	bcs.n	80079a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800799c:	f000 f93a 	bl	8007c14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	e002      	b.n	80079ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80079ae:	4a04      	ldr	r2, [pc, #16]	@ (80079c0 <prvSampleTimeNow+0x3c>)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80079b4:	68fb      	ldr	r3, [r7, #12]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	200013c4 	.word	0x200013c4

080079c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80079d2:	2300      	movs	r3, #0
 80079d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d812      	bhi.n	8007a10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	1ad2      	subs	r2, r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d302      	bcc.n	80079fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80079f8:	2301      	movs	r3, #1
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	e01b      	b.n	8007a36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079fe:	4b10      	ldr	r3, [pc, #64]	@ (8007a40 <prvInsertTimerInActiveList+0x7c>)
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3304      	adds	r3, #4
 8007a06:	4619      	mov	r1, r3
 8007a08:	4610      	mov	r0, r2
 8007a0a:	f7fd fe00 	bl	800560e <vListInsert>
 8007a0e:	e012      	b.n	8007a36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d206      	bcs.n	8007a26 <prvInsertTimerInActiveList+0x62>
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d302      	bcc.n	8007a26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a20:	2301      	movs	r3, #1
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	e007      	b.n	8007a36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a26:	4b07      	ldr	r3, [pc, #28]	@ (8007a44 <prvInsertTimerInActiveList+0x80>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	4619      	mov	r1, r3
 8007a30:	4610      	mov	r0, r2
 8007a32:	f7fd fdec 	bl	800560e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a36:	697b      	ldr	r3, [r7, #20]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	200013b8 	.word	0x200013b8
 8007a44:	200013b4 	.word	0x200013b4

08007a48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08e      	sub	sp, #56	@ 0x38
 8007a4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a4e:	e0ce      	b.n	8007bee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	da19      	bge.n	8007a8a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a56:	1d3b      	adds	r3, r7, #4
 8007a58:	3304      	adds	r3, #4
 8007a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10b      	bne.n	8007a7a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	61fb      	str	r3, [r7, #28]
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	e7fd      	b.n	8007a76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a80:	6850      	ldr	r0, [r2, #4]
 8007a82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a84:	6892      	ldr	r2, [r2, #8]
 8007a86:	4611      	mov	r1, r2
 8007a88:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f2c0 80ae 	blt.w	8007bee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fd fdec 	bl	8005680 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007aa8:	463b      	mov	r3, r7
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7ff ff6a 	bl	8007984 <prvSampleTimeNow>
 8007ab0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b09      	cmp	r3, #9
 8007ab6:	f200 8097 	bhi.w	8007be8 <prvProcessReceivedCommands+0x1a0>
 8007aba:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac0 <prvProcessReceivedCommands+0x78>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007ae9 	.word	0x08007ae9
 8007ac4:	08007ae9 	.word	0x08007ae9
 8007ac8:	08007ae9 	.word	0x08007ae9
 8007acc:	08007b5f 	.word	0x08007b5f
 8007ad0:	08007b73 	.word	0x08007b73
 8007ad4:	08007bbf 	.word	0x08007bbf
 8007ad8:	08007ae9 	.word	0x08007ae9
 8007adc:	08007ae9 	.word	0x08007ae9
 8007ae0:	08007b5f 	.word	0x08007b5f
 8007ae4:	08007b73 	.word	0x08007b73
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007aee:	f043 0301 	orr.w	r3, r3, #1
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	18d1      	adds	r1, r2, r3
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b08:	f7ff ff5c 	bl	80079c4 <prvInsertTimerInActiveList>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d06c      	beq.n	8007bec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b20:	f003 0304 	and.w	r3, r3, #4
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d061      	beq.n	8007bec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	441a      	add	r2, r3
 8007b30:	2300      	movs	r3, #0
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	2300      	movs	r3, #0
 8007b36:	2100      	movs	r1, #0
 8007b38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b3a:	f7ff fe01 	bl	8007740 <xTimerGenericCommand>
 8007b3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d152      	bne.n	8007bec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	61bb      	str	r3, [r7, #24]
}
 8007b58:	bf00      	nop
 8007b5a:	bf00      	nop
 8007b5c:	e7fd      	b.n	8007b5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b64:	f023 0301 	bic.w	r3, r3, #1
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007b70:	e03d      	b.n	8007bee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b78:	f043 0301 	orr.w	r3, r3, #1
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b88:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10b      	bne.n	8007baa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	617b      	str	r3, [r7, #20]
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop
 8007ba8:	e7fd      	b.n	8007ba6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bac:	699a      	ldr	r2, [r3, #24]
 8007bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb0:	18d1      	adds	r1, r2, r3
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bb8:	f7ff ff04 	bl	80079c4 <prvInsertTimerInActiveList>
					break;
 8007bbc:	e017      	b.n	8007bee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d103      	bne.n	8007bd4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007bcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bce:	f000 fc0b 	bl	80083e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007bd2:	e00c      	b.n	8007bee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bda:	f023 0301 	bic.w	r3, r3, #1
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007be6:	e002      	b.n	8007bee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007be8:	bf00      	nop
 8007bea:	e000      	b.n	8007bee <prvProcessReceivedCommands+0x1a6>
					break;
 8007bec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bee:	4b08      	ldr	r3, [pc, #32]	@ (8007c10 <prvProcessReceivedCommands+0x1c8>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	1d39      	adds	r1, r7, #4
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fe f90a 	bl	8005e10 <xQueueReceive>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f47f af26 	bne.w	8007a50 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop
 8007c08:	3730      	adds	r7, #48	@ 0x30
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	200013bc 	.word	0x200013bc

08007c14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b088      	sub	sp, #32
 8007c18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c1a:	e049      	b.n	8007cb0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8007cd8 <prvSwitchTimerLists+0xc4>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c26:	4b2c      	ldr	r3, [pc, #176]	@ (8007cd8 <prvSwitchTimerLists+0xc4>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7fd fd23 	bl	8005680 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d02f      	beq.n	8007cb0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4413      	add	r3, r2
 8007c58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d90e      	bls.n	8007c80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8007cd8 <prvSwitchTimerLists+0xc4>)
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	3304      	adds	r3, #4
 8007c76:	4619      	mov	r1, r3
 8007c78:	4610      	mov	r0, r2
 8007c7a:	f7fd fcc8 	bl	800560e <vListInsert>
 8007c7e:	e017      	b.n	8007cb0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c80:	2300      	movs	r3, #0
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	2300      	movs	r3, #0
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	2100      	movs	r1, #0
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f7ff fd58 	bl	8007740 <xTimerGenericCommand>
 8007c90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10b      	bne.n	8007cb0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	603b      	str	r3, [r7, #0]
}
 8007caa:	bf00      	nop
 8007cac:	bf00      	nop
 8007cae:	e7fd      	b.n	8007cac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cb0:	4b09      	ldr	r3, [pc, #36]	@ (8007cd8 <prvSwitchTimerLists+0xc4>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1b0      	bne.n	8007c1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007cba:	4b07      	ldr	r3, [pc, #28]	@ (8007cd8 <prvSwitchTimerLists+0xc4>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007cc0:	4b06      	ldr	r3, [pc, #24]	@ (8007cdc <prvSwitchTimerLists+0xc8>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a04      	ldr	r2, [pc, #16]	@ (8007cd8 <prvSwitchTimerLists+0xc4>)
 8007cc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007cc8:	4a04      	ldr	r2, [pc, #16]	@ (8007cdc <prvSwitchTimerLists+0xc8>)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	6013      	str	r3, [r2, #0]
}
 8007cce:	bf00      	nop
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	200013b4 	.word	0x200013b4
 8007cdc:	200013b8 	.word	0x200013b8

08007ce0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ce6:	f000 f98f 	bl	8008008 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007cea:	4b15      	ldr	r3, [pc, #84]	@ (8007d40 <prvCheckForValidListAndQueue+0x60>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d120      	bne.n	8007d34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cf2:	4814      	ldr	r0, [pc, #80]	@ (8007d44 <prvCheckForValidListAndQueue+0x64>)
 8007cf4:	f7fd fc3a 	bl	800556c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007cf8:	4813      	ldr	r0, [pc, #76]	@ (8007d48 <prvCheckForValidListAndQueue+0x68>)
 8007cfa:	f7fd fc37 	bl	800556c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007cfe:	4b13      	ldr	r3, [pc, #76]	@ (8007d4c <prvCheckForValidListAndQueue+0x6c>)
 8007d00:	4a10      	ldr	r2, [pc, #64]	@ (8007d44 <prvCheckForValidListAndQueue+0x64>)
 8007d02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d04:	4b12      	ldr	r3, [pc, #72]	@ (8007d50 <prvCheckForValidListAndQueue+0x70>)
 8007d06:	4a10      	ldr	r2, [pc, #64]	@ (8007d48 <prvCheckForValidListAndQueue+0x68>)
 8007d08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	4b11      	ldr	r3, [pc, #68]	@ (8007d54 <prvCheckForValidListAndQueue+0x74>)
 8007d10:	4a11      	ldr	r2, [pc, #68]	@ (8007d58 <prvCheckForValidListAndQueue+0x78>)
 8007d12:	2110      	movs	r1, #16
 8007d14:	200a      	movs	r0, #10
 8007d16:	f7fd fd47 	bl	80057a8 <xQueueGenericCreateStatic>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	4a08      	ldr	r2, [pc, #32]	@ (8007d40 <prvCheckForValidListAndQueue+0x60>)
 8007d1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d20:	4b07      	ldr	r3, [pc, #28]	@ (8007d40 <prvCheckForValidListAndQueue+0x60>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d28:	4b05      	ldr	r3, [pc, #20]	@ (8007d40 <prvCheckForValidListAndQueue+0x60>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	490b      	ldr	r1, [pc, #44]	@ (8007d5c <prvCheckForValidListAndQueue+0x7c>)
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe fb88 	bl	8006444 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d34:	f000 f99a 	bl	800806c <vPortExitCritical>
}
 8007d38:	bf00      	nop
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	200013bc 	.word	0x200013bc
 8007d44:	2000138c 	.word	0x2000138c
 8007d48:	200013a0 	.word	0x200013a0
 8007d4c:	200013b4 	.word	0x200013b4
 8007d50:	200013b8 	.word	0x200013b8
 8007d54:	20001468 	.word	0x20001468
 8007d58:	200013c8 	.word	0x200013c8
 8007d5c:	080086dc 	.word	0x080086dc

08007d60 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b08a      	sub	sp, #40	@ 0x28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
 8007d6c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007d6e:	f06f 0301 	mvn.w	r3, #1
 8007d72:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d80:	4b06      	ldr	r3, [pc, #24]	@ (8007d9c <xTimerPendFunctionCallFromISR+0x3c>)
 8007d82:	6818      	ldr	r0, [r3, #0]
 8007d84:	f107 0114 	add.w	r1, r7, #20
 8007d88:	2300      	movs	r3, #0
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	f7fd ffa2 	bl	8005cd4 <xQueueGenericSendFromISR>
 8007d90:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3728      	adds	r7, #40	@ 0x28
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	200013bc 	.word	0x200013bc

08007da0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	3b04      	subs	r3, #4
 8007db0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	3b04      	subs	r3, #4
 8007dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	f023 0201 	bic.w	r2, r3, #1
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	3b04      	subs	r3, #4
 8007dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8007e04 <pxPortInitialiseStack+0x64>)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3b14      	subs	r3, #20
 8007dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3b04      	subs	r3, #4
 8007de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f06f 0202 	mvn.w	r2, #2
 8007dee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3b20      	subs	r3, #32
 8007df4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007df6:	68fb      	ldr	r3, [r7, #12]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	08007e09 	.word	0x08007e09

08007e08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e12:	4b13      	ldr	r3, [pc, #76]	@ (8007e60 <prvTaskExitError+0x58>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1a:	d00b      	beq.n	8007e34 <prvTaskExitError+0x2c>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	60fb      	str	r3, [r7, #12]
}
 8007e2e:	bf00      	nop
 8007e30:	bf00      	nop
 8007e32:	e7fd      	b.n	8007e30 <prvTaskExitError+0x28>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	60bb      	str	r3, [r7, #8]
}
 8007e46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e48:	bf00      	nop
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d0fc      	beq.n	8007e4a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e50:	bf00      	nop
 8007e52:	bf00      	nop
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	2000000c 	.word	0x2000000c
	...

08007e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e70:	4b07      	ldr	r3, [pc, #28]	@ (8007e90 <pxCurrentTCBConst2>)
 8007e72:	6819      	ldr	r1, [r3, #0]
 8007e74:	6808      	ldr	r0, [r1, #0]
 8007e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7a:	f380 8809 	msr	PSP, r0
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f04f 0000 	mov.w	r0, #0
 8007e86:	f380 8811 	msr	BASEPRI, r0
 8007e8a:	4770      	bx	lr
 8007e8c:	f3af 8000 	nop.w

08007e90 <pxCurrentTCBConst2>:
 8007e90:	20000e8c 	.word	0x20000e8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e94:	bf00      	nop
 8007e96:	bf00      	nop

08007e98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e98:	4808      	ldr	r0, [pc, #32]	@ (8007ebc <prvPortStartFirstTask+0x24>)
 8007e9a:	6800      	ldr	r0, [r0, #0]
 8007e9c:	6800      	ldr	r0, [r0, #0]
 8007e9e:	f380 8808 	msr	MSP, r0
 8007ea2:	f04f 0000 	mov.w	r0, #0
 8007ea6:	f380 8814 	msr	CONTROL, r0
 8007eaa:	b662      	cpsie	i
 8007eac:	b661      	cpsie	f
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	df00      	svc	0
 8007eb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eba:	bf00      	nop
 8007ebc:	e000ed08 	.word	0xe000ed08

08007ec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ec6:	4b47      	ldr	r3, [pc, #284]	@ (8007fe4 <xPortStartScheduler+0x124>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a47      	ldr	r2, [pc, #284]	@ (8007fe8 <xPortStartScheduler+0x128>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d10b      	bne.n	8007ee8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	613b      	str	r3, [r7, #16]
}
 8007ee2:	bf00      	nop
 8007ee4:	bf00      	nop
 8007ee6:	e7fd      	b.n	8007ee4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ee8:	4b3e      	ldr	r3, [pc, #248]	@ (8007fe4 <xPortStartScheduler+0x124>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a3f      	ldr	r2, [pc, #252]	@ (8007fec <xPortStartScheduler+0x12c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d10b      	bne.n	8007f0a <xPortStartScheduler+0x4a>
	__asm volatile
 8007ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	60fb      	str	r3, [r7, #12]
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop
 8007f08:	e7fd      	b.n	8007f06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f0a:	4b39      	ldr	r3, [pc, #228]	@ (8007ff0 <xPortStartScheduler+0x130>)
 8007f0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	22ff      	movs	r2, #255	@ 0xff
 8007f1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f24:	78fb      	ldrb	r3, [r7, #3]
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	4b31      	ldr	r3, [pc, #196]	@ (8007ff4 <xPortStartScheduler+0x134>)
 8007f30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f32:	4b31      	ldr	r3, [pc, #196]	@ (8007ff8 <xPortStartScheduler+0x138>)
 8007f34:	2207      	movs	r2, #7
 8007f36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f38:	e009      	b.n	8007f4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8007ff8 <xPortStartScheduler+0x138>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	4a2d      	ldr	r2, [pc, #180]	@ (8007ff8 <xPortStartScheduler+0x138>)
 8007f42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f44:	78fb      	ldrb	r3, [r7, #3]
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f4e:	78fb      	ldrb	r3, [r7, #3]
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f56:	2b80      	cmp	r3, #128	@ 0x80
 8007f58:	d0ef      	beq.n	8007f3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f5a:	4b27      	ldr	r3, [pc, #156]	@ (8007ff8 <xPortStartScheduler+0x138>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f1c3 0307 	rsb	r3, r3, #7
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	d00b      	beq.n	8007f7e <xPortStartScheduler+0xbe>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	60bb      	str	r3, [r7, #8]
}
 8007f78:	bf00      	nop
 8007f7a:	bf00      	nop
 8007f7c:	e7fd      	b.n	8007f7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ff8 <xPortStartScheduler+0x138>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	021b      	lsls	r3, r3, #8
 8007f84:	4a1c      	ldr	r2, [pc, #112]	@ (8007ff8 <xPortStartScheduler+0x138>)
 8007f86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f88:	4b1b      	ldr	r3, [pc, #108]	@ (8007ff8 <xPortStartScheduler+0x138>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f90:	4a19      	ldr	r2, [pc, #100]	@ (8007ff8 <xPortStartScheduler+0x138>)
 8007f92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f9c:	4b17      	ldr	r3, [pc, #92]	@ (8007ffc <xPortStartScheduler+0x13c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a16      	ldr	r2, [pc, #88]	@ (8007ffc <xPortStartScheduler+0x13c>)
 8007fa2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007fa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fa8:	4b14      	ldr	r3, [pc, #80]	@ (8007ffc <xPortStartScheduler+0x13c>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a13      	ldr	r2, [pc, #76]	@ (8007ffc <xPortStartScheduler+0x13c>)
 8007fae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007fb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fb4:	f000 f8da 	bl	800816c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fb8:	4b11      	ldr	r3, [pc, #68]	@ (8008000 <xPortStartScheduler+0x140>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fbe:	f000 f8f9 	bl	80081b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fc2:	4b10      	ldr	r3, [pc, #64]	@ (8008004 <xPortStartScheduler+0x144>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a0f      	ldr	r2, [pc, #60]	@ (8008004 <xPortStartScheduler+0x144>)
 8007fc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007fcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fce:	f7ff ff63 	bl	8007e98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fd2:	f7fe fe4f 	bl	8006c74 <vTaskSwitchContext>
	prvTaskExitError();
 8007fd6:	f7ff ff17 	bl	8007e08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3718      	adds	r7, #24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	e000ed00 	.word	0xe000ed00
 8007fe8:	410fc271 	.word	0x410fc271
 8007fec:	410fc270 	.word	0x410fc270
 8007ff0:	e000e400 	.word	0xe000e400
 8007ff4:	200014b8 	.word	0x200014b8
 8007ff8:	200014bc 	.word	0x200014bc
 8007ffc:	e000ed20 	.word	0xe000ed20
 8008000:	2000000c 	.word	0x2000000c
 8008004:	e000ef34 	.word	0xe000ef34

08008008 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	607b      	str	r3, [r7, #4]
}
 8008020:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008022:	4b10      	ldr	r3, [pc, #64]	@ (8008064 <vPortEnterCritical+0x5c>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3301      	adds	r3, #1
 8008028:	4a0e      	ldr	r2, [pc, #56]	@ (8008064 <vPortEnterCritical+0x5c>)
 800802a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800802c:	4b0d      	ldr	r3, [pc, #52]	@ (8008064 <vPortEnterCritical+0x5c>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d110      	bne.n	8008056 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008034:	4b0c      	ldr	r3, [pc, #48]	@ (8008068 <vPortEnterCritical+0x60>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00b      	beq.n	8008056 <vPortEnterCritical+0x4e>
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	603b      	str	r3, [r7, #0]
}
 8008050:	bf00      	nop
 8008052:	bf00      	nop
 8008054:	e7fd      	b.n	8008052 <vPortEnterCritical+0x4a>
	}
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	2000000c 	.word	0x2000000c
 8008068:	e000ed04 	.word	0xe000ed04

0800806c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008072:	4b12      	ldr	r3, [pc, #72]	@ (80080bc <vPortExitCritical+0x50>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10b      	bne.n	8008092 <vPortExitCritical+0x26>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	607b      	str	r3, [r7, #4]
}
 800808c:	bf00      	nop
 800808e:	bf00      	nop
 8008090:	e7fd      	b.n	800808e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008092:	4b0a      	ldr	r3, [pc, #40]	@ (80080bc <vPortExitCritical+0x50>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3b01      	subs	r3, #1
 8008098:	4a08      	ldr	r2, [pc, #32]	@ (80080bc <vPortExitCritical+0x50>)
 800809a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800809c:	4b07      	ldr	r3, [pc, #28]	@ (80080bc <vPortExitCritical+0x50>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d105      	bne.n	80080b0 <vPortExitCritical+0x44>
 80080a4:	2300      	movs	r3, #0
 80080a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	f383 8811 	msr	BASEPRI, r3
}
 80080ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	2000000c 	.word	0x2000000c

080080c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080c0:	f3ef 8009 	mrs	r0, PSP
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	4b15      	ldr	r3, [pc, #84]	@ (8008120 <pxCurrentTCBConst>)
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	f01e 0f10 	tst.w	lr, #16
 80080d0:	bf08      	it	eq
 80080d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080da:	6010      	str	r0, [r2, #0]
 80080dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80080e4:	f380 8811 	msr	BASEPRI, r0
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f7fe fdc0 	bl	8006c74 <vTaskSwitchContext>
 80080f4:	f04f 0000 	mov.w	r0, #0
 80080f8:	f380 8811 	msr	BASEPRI, r0
 80080fc:	bc09      	pop	{r0, r3}
 80080fe:	6819      	ldr	r1, [r3, #0]
 8008100:	6808      	ldr	r0, [r1, #0]
 8008102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008106:	f01e 0f10 	tst.w	lr, #16
 800810a:	bf08      	it	eq
 800810c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008110:	f380 8809 	msr	PSP, r0
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	f3af 8000 	nop.w

08008120 <pxCurrentTCBConst>:
 8008120:	20000e8c 	.word	0x20000e8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008124:	bf00      	nop
 8008126:	bf00      	nop

08008128 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	607b      	str	r3, [r7, #4]
}
 8008140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008142:	f7fe fcdd 	bl	8006b00 <xTaskIncrementTick>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d003      	beq.n	8008154 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800814c:	4b06      	ldr	r3, [pc, #24]	@ (8008168 <xPortSysTickHandler+0x40>)
 800814e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	2300      	movs	r3, #0
 8008156:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	f383 8811 	msr	BASEPRI, r3
}
 800815e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	e000ed04 	.word	0xe000ed04

0800816c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008170:	4b0b      	ldr	r3, [pc, #44]	@ (80081a0 <vPortSetupTimerInterrupt+0x34>)
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008176:	4b0b      	ldr	r3, [pc, #44]	@ (80081a4 <vPortSetupTimerInterrupt+0x38>)
 8008178:	2200      	movs	r2, #0
 800817a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800817c:	4b0a      	ldr	r3, [pc, #40]	@ (80081a8 <vPortSetupTimerInterrupt+0x3c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a0a      	ldr	r2, [pc, #40]	@ (80081ac <vPortSetupTimerInterrupt+0x40>)
 8008182:	fba2 2303 	umull	r2, r3, r2, r3
 8008186:	099b      	lsrs	r3, r3, #6
 8008188:	4a09      	ldr	r2, [pc, #36]	@ (80081b0 <vPortSetupTimerInterrupt+0x44>)
 800818a:	3b01      	subs	r3, #1
 800818c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800818e:	4b04      	ldr	r3, [pc, #16]	@ (80081a0 <vPortSetupTimerInterrupt+0x34>)
 8008190:	2207      	movs	r2, #7
 8008192:	601a      	str	r2, [r3, #0]
}
 8008194:	bf00      	nop
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	e000e010 	.word	0xe000e010
 80081a4:	e000e018 	.word	0xe000e018
 80081a8:	20000000 	.word	0x20000000
 80081ac:	10624dd3 	.word	0x10624dd3
 80081b0:	e000e014 	.word	0xe000e014

080081b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80081c4 <vPortEnableVFP+0x10>
 80081b8:	6801      	ldr	r1, [r0, #0]
 80081ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80081be:	6001      	str	r1, [r0, #0]
 80081c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081c2:	bf00      	nop
 80081c4:	e000ed88 	.word	0xe000ed88

080081c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081ce:	f3ef 8305 	mrs	r3, IPSR
 80081d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2b0f      	cmp	r3, #15
 80081d8:	d915      	bls.n	8008206 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081da:	4a18      	ldr	r2, [pc, #96]	@ (800823c <vPortValidateInterruptPriority+0x74>)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4413      	add	r3, r2
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081e4:	4b16      	ldr	r3, [pc, #88]	@ (8008240 <vPortValidateInterruptPriority+0x78>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	7afa      	ldrb	r2, [r7, #11]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d20b      	bcs.n	8008206 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	607b      	str	r3, [r7, #4]
}
 8008200:	bf00      	nop
 8008202:	bf00      	nop
 8008204:	e7fd      	b.n	8008202 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008206:	4b0f      	ldr	r3, [pc, #60]	@ (8008244 <vPortValidateInterruptPriority+0x7c>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800820e:	4b0e      	ldr	r3, [pc, #56]	@ (8008248 <vPortValidateInterruptPriority+0x80>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	429a      	cmp	r2, r3
 8008214:	d90b      	bls.n	800822e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	603b      	str	r3, [r7, #0]
}
 8008228:	bf00      	nop
 800822a:	bf00      	nop
 800822c:	e7fd      	b.n	800822a <vPortValidateInterruptPriority+0x62>
	}
 800822e:	bf00      	nop
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	e000e3f0 	.word	0xe000e3f0
 8008240:	200014b8 	.word	0x200014b8
 8008244:	e000ed0c 	.word	0xe000ed0c
 8008248:	200014bc 	.word	0x200014bc

0800824c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b08a      	sub	sp, #40	@ 0x28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008254:	2300      	movs	r3, #0
 8008256:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008258:	f7fe fb96 	bl	8006988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800825c:	4b5c      	ldr	r3, [pc, #368]	@ (80083d0 <pvPortMalloc+0x184>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008264:	f000 f924 	bl	80084b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008268:	4b5a      	ldr	r3, [pc, #360]	@ (80083d4 <pvPortMalloc+0x188>)
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4013      	ands	r3, r2
 8008270:	2b00      	cmp	r3, #0
 8008272:	f040 8095 	bne.w	80083a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d01e      	beq.n	80082ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800827c:	2208      	movs	r2, #8
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4413      	add	r3, r2
 8008282:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f003 0307 	and.w	r3, r3, #7
 800828a:	2b00      	cmp	r3, #0
 800828c:	d015      	beq.n	80082ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f023 0307 	bic.w	r3, r3, #7
 8008294:	3308      	adds	r3, #8
 8008296:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f003 0307 	and.w	r3, r3, #7
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00b      	beq.n	80082ba <pvPortMalloc+0x6e>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	617b      	str	r3, [r7, #20]
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	e7fd      	b.n	80082b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d06f      	beq.n	80083a0 <pvPortMalloc+0x154>
 80082c0:	4b45      	ldr	r3, [pc, #276]	@ (80083d8 <pvPortMalloc+0x18c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d86a      	bhi.n	80083a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082ca:	4b44      	ldr	r3, [pc, #272]	@ (80083dc <pvPortMalloc+0x190>)
 80082cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082ce:	4b43      	ldr	r3, [pc, #268]	@ (80083dc <pvPortMalloc+0x190>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082d4:	e004      	b.n	80082e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80082d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d903      	bls.n	80082f2 <pvPortMalloc+0xa6>
 80082ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1f1      	bne.n	80082d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082f2:	4b37      	ldr	r3, [pc, #220]	@ (80083d0 <pvPortMalloc+0x184>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d051      	beq.n	80083a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2208      	movs	r2, #8
 8008302:	4413      	add	r3, r2
 8008304:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	6a3b      	ldr	r3, [r7, #32]
 800830c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800830e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	1ad2      	subs	r2, r2, r3
 8008316:	2308      	movs	r3, #8
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	429a      	cmp	r2, r3
 800831c:	d920      	bls.n	8008360 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800831e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4413      	add	r3, r2
 8008324:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	f003 0307 	and.w	r3, r3, #7
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00b      	beq.n	8008348 <pvPortMalloc+0xfc>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	613b      	str	r3, [r7, #16]
}
 8008342:	bf00      	nop
 8008344:	bf00      	nop
 8008346:	e7fd      	b.n	8008344 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	1ad2      	subs	r2, r2, r3
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800835a:	69b8      	ldr	r0, [r7, #24]
 800835c:	f000 f90a 	bl	8008574 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008360:	4b1d      	ldr	r3, [pc, #116]	@ (80083d8 <pvPortMalloc+0x18c>)
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	4a1b      	ldr	r2, [pc, #108]	@ (80083d8 <pvPortMalloc+0x18c>)
 800836c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800836e:	4b1a      	ldr	r3, [pc, #104]	@ (80083d8 <pvPortMalloc+0x18c>)
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	4b1b      	ldr	r3, [pc, #108]	@ (80083e0 <pvPortMalloc+0x194>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	429a      	cmp	r2, r3
 8008378:	d203      	bcs.n	8008382 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800837a:	4b17      	ldr	r3, [pc, #92]	@ (80083d8 <pvPortMalloc+0x18c>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a18      	ldr	r2, [pc, #96]	@ (80083e0 <pvPortMalloc+0x194>)
 8008380:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008384:	685a      	ldr	r2, [r3, #4]
 8008386:	4b13      	ldr	r3, [pc, #76]	@ (80083d4 <pvPortMalloc+0x188>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	431a      	orrs	r2, r3
 800838c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008396:	4b13      	ldr	r3, [pc, #76]	@ (80083e4 <pvPortMalloc+0x198>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3301      	adds	r3, #1
 800839c:	4a11      	ldr	r2, [pc, #68]	@ (80083e4 <pvPortMalloc+0x198>)
 800839e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083a0:	f7fe fb00 	bl	80069a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	f003 0307 	and.w	r3, r3, #7
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00b      	beq.n	80083c6 <pvPortMalloc+0x17a>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	60fb      	str	r3, [r7, #12]
}
 80083c0:	bf00      	nop
 80083c2:	bf00      	nop
 80083c4:	e7fd      	b.n	80083c2 <pvPortMalloc+0x176>
	return pvReturn;
 80083c6:	69fb      	ldr	r3, [r7, #28]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3728      	adds	r7, #40	@ 0x28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	20002080 	.word	0x20002080
 80083d4:	20002094 	.word	0x20002094
 80083d8:	20002084 	.word	0x20002084
 80083dc:	20002078 	.word	0x20002078
 80083e0:	20002088 	.word	0x20002088
 80083e4:	2000208c 	.word	0x2000208c

080083e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d04f      	beq.n	800849a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083fa:	2308      	movs	r3, #8
 80083fc:	425b      	negs	r3, r3
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	4413      	add	r3, r2
 8008402:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	4b25      	ldr	r3, [pc, #148]	@ (80084a4 <vPortFree+0xbc>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4013      	ands	r3, r2
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10b      	bne.n	800842e <vPortFree+0x46>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	60fb      	str	r3, [r7, #12]
}
 8008428:	bf00      	nop
 800842a:	bf00      	nop
 800842c:	e7fd      	b.n	800842a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00b      	beq.n	800844e <vPortFree+0x66>
	__asm volatile
 8008436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	60bb      	str	r3, [r7, #8]
}
 8008448:	bf00      	nop
 800844a:	bf00      	nop
 800844c:	e7fd      	b.n	800844a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	4b14      	ldr	r3, [pc, #80]	@ (80084a4 <vPortFree+0xbc>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4013      	ands	r3, r2
 8008458:	2b00      	cmp	r3, #0
 800845a:	d01e      	beq.n	800849a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d11a      	bne.n	800849a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	4b0e      	ldr	r3, [pc, #56]	@ (80084a4 <vPortFree+0xbc>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	43db      	mvns	r3, r3
 800846e:	401a      	ands	r2, r3
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008474:	f7fe fa88 	bl	8006988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	4b0a      	ldr	r3, [pc, #40]	@ (80084a8 <vPortFree+0xc0>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4413      	add	r3, r2
 8008482:	4a09      	ldr	r2, [pc, #36]	@ (80084a8 <vPortFree+0xc0>)
 8008484:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008486:	6938      	ldr	r0, [r7, #16]
 8008488:	f000 f874 	bl	8008574 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800848c:	4b07      	ldr	r3, [pc, #28]	@ (80084ac <vPortFree+0xc4>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	3301      	adds	r3, #1
 8008492:	4a06      	ldr	r2, [pc, #24]	@ (80084ac <vPortFree+0xc4>)
 8008494:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008496:	f7fe fa85 	bl	80069a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800849a:	bf00      	nop
 800849c:	3718      	adds	r7, #24
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20002094 	.word	0x20002094
 80084a8:	20002084 	.word	0x20002084
 80084ac:	20002090 	.word	0x20002090

080084b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084b6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80084ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084bc:	4b27      	ldr	r3, [pc, #156]	@ (800855c <prvHeapInit+0xac>)
 80084be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f003 0307 	and.w	r3, r3, #7
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00c      	beq.n	80084e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3307      	adds	r3, #7
 80084ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f023 0307 	bic.w	r3, r3, #7
 80084d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	4a1f      	ldr	r2, [pc, #124]	@ (800855c <prvHeapInit+0xac>)
 80084e0:	4413      	add	r3, r2
 80084e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008560 <prvHeapInit+0xb0>)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008560 <prvHeapInit+0xb0>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	4413      	add	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084fc:	2208      	movs	r2, #8
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	1a9b      	subs	r3, r3, r2
 8008502:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f023 0307 	bic.w	r3, r3, #7
 800850a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4a15      	ldr	r2, [pc, #84]	@ (8008564 <prvHeapInit+0xb4>)
 8008510:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008512:	4b14      	ldr	r3, [pc, #80]	@ (8008564 <prvHeapInit+0xb4>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2200      	movs	r2, #0
 8008518:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800851a:	4b12      	ldr	r3, [pc, #72]	@ (8008564 <prvHeapInit+0xb4>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2200      	movs	r2, #0
 8008520:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	1ad2      	subs	r2, r2, r3
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008530:	4b0c      	ldr	r3, [pc, #48]	@ (8008564 <prvHeapInit+0xb4>)
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	4a0a      	ldr	r2, [pc, #40]	@ (8008568 <prvHeapInit+0xb8>)
 800853e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	4a09      	ldr	r2, [pc, #36]	@ (800856c <prvHeapInit+0xbc>)
 8008546:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008548:	4b09      	ldr	r3, [pc, #36]	@ (8008570 <prvHeapInit+0xc0>)
 800854a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800854e:	601a      	str	r2, [r3, #0]
}
 8008550:	bf00      	nop
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	200014c0 	.word	0x200014c0
 8008560:	20002078 	.word	0x20002078
 8008564:	20002080 	.word	0x20002080
 8008568:	20002088 	.word	0x20002088
 800856c:	20002084 	.word	0x20002084
 8008570:	20002094 	.word	0x20002094

08008574 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800857c:	4b28      	ldr	r3, [pc, #160]	@ (8008620 <prvInsertBlockIntoFreeList+0xac>)
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	e002      	b.n	8008588 <prvInsertBlockIntoFreeList+0x14>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	429a      	cmp	r2, r3
 8008590:	d8f7      	bhi.n	8008582 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	4413      	add	r3, r2
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d108      	bne.n	80085b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	685a      	ldr	r2, [r3, #4]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	441a      	add	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	68ba      	ldr	r2, [r7, #8]
 80085c0:	441a      	add	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d118      	bne.n	80085fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	4b15      	ldr	r3, [pc, #84]	@ (8008624 <prvInsertBlockIntoFreeList+0xb0>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d00d      	beq.n	80085f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685a      	ldr	r2, [r3, #4]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	441a      	add	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	601a      	str	r2, [r3, #0]
 80085f0:	e008      	b.n	8008604 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008624 <prvInsertBlockIntoFreeList+0xb0>)
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	e003      	b.n	8008604 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	429a      	cmp	r2, r3
 800860a:	d002      	beq.n	8008612 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008612:	bf00      	nop
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	20002078 	.word	0x20002078
 8008624:	20002080 	.word	0x20002080

08008628 <memset>:
 8008628:	4402      	add	r2, r0
 800862a:	4603      	mov	r3, r0
 800862c:	4293      	cmp	r3, r2
 800862e:	d100      	bne.n	8008632 <memset+0xa>
 8008630:	4770      	bx	lr
 8008632:	f803 1b01 	strb.w	r1, [r3], #1
 8008636:	e7f9      	b.n	800862c <memset+0x4>

08008638 <__libc_init_array>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	4d0d      	ldr	r5, [pc, #52]	@ (8008670 <__libc_init_array+0x38>)
 800863c:	4c0d      	ldr	r4, [pc, #52]	@ (8008674 <__libc_init_array+0x3c>)
 800863e:	1b64      	subs	r4, r4, r5
 8008640:	10a4      	asrs	r4, r4, #2
 8008642:	2600      	movs	r6, #0
 8008644:	42a6      	cmp	r6, r4
 8008646:	d109      	bne.n	800865c <__libc_init_array+0x24>
 8008648:	4d0b      	ldr	r5, [pc, #44]	@ (8008678 <__libc_init_array+0x40>)
 800864a:	4c0c      	ldr	r4, [pc, #48]	@ (800867c <__libc_init_array+0x44>)
 800864c:	f000 f826 	bl	800869c <_init>
 8008650:	1b64      	subs	r4, r4, r5
 8008652:	10a4      	asrs	r4, r4, #2
 8008654:	2600      	movs	r6, #0
 8008656:	42a6      	cmp	r6, r4
 8008658:	d105      	bne.n	8008666 <__libc_init_array+0x2e>
 800865a:	bd70      	pop	{r4, r5, r6, pc}
 800865c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008660:	4798      	blx	r3
 8008662:	3601      	adds	r6, #1
 8008664:	e7ee      	b.n	8008644 <__libc_init_array+0xc>
 8008666:	f855 3b04 	ldr.w	r3, [r5], #4
 800866a:	4798      	blx	r3
 800866c:	3601      	adds	r6, #1
 800866e:	e7f2      	b.n	8008656 <__libc_init_array+0x1e>
 8008670:	0800877c 	.word	0x0800877c
 8008674:	0800877c 	.word	0x0800877c
 8008678:	0800877c 	.word	0x0800877c
 800867c:	08008780 	.word	0x08008780

08008680 <memcpy>:
 8008680:	440a      	add	r2, r1
 8008682:	4291      	cmp	r1, r2
 8008684:	f100 33ff 	add.w	r3, r0, #4294967295
 8008688:	d100      	bne.n	800868c <memcpy+0xc>
 800868a:	4770      	bx	lr
 800868c:	b510      	push	{r4, lr}
 800868e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008696:	4291      	cmp	r1, r2
 8008698:	d1f9      	bne.n	800868e <memcpy+0xe>
 800869a:	bd10      	pop	{r4, pc}

0800869c <_init>:
 800869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869e:	bf00      	nop
 80086a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086a2:	bc08      	pop	{r3}
 80086a4:	469e      	mov	lr, r3
 80086a6:	4770      	bx	lr

080086a8 <_fini>:
 80086a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086aa:	bf00      	nop
 80086ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ae:	bc08      	pop	{r3}
 80086b0:	469e      	mov	lr, r3
 80086b2:	4770      	bx	lr
